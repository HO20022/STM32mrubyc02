
STM32mrubyc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018574  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bf0  08018718  08018718  00028718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c308  0801c308  0003077c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c308  0801c308  0002c308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c310  0801c310  0003077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c310  0801c310  0002c310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c314  0801c314  0002c314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000077c  20000000  0801c318  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008228  2000077c  0801ca94  0003077c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200089a4  0801ca94  000389a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003077c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000307ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002abc7  00000000  00000000  000307ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005be5  00000000  00000000  0005b3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002058  00000000  00000000  00060fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a6c  00000000  00000000  00062ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a52f  00000000  00000000  00064a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021789  00000000  00000000  0007ef93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096d89  00000000  00000000  000a071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009e40  00000000  00000000  001374a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001412e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000077c 	.word	0x2000077c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080186fc 	.word	0x080186fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000780 	.word	0x20000780
 80001dc:	080186fc 	.word	0x080186fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9a6 	b.w	8000f50 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f012 faac 	bl	80134b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f822 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f902 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f64:	f000 f8d6 	bl	8001114 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f68:	f000 f888 	bl	800107c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <main+0x48>)
 8000f6e:	f013 fb0f 	bl	8014590 <HAL_TIM_Base_Start_IT>
  start_mrubyc();
 8000f72:	f000 f983 	bl	800127c <start_mrubyc>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <main+0x4c>)
 8000f7c:	f012 fdd6 	bl	8013b2c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f84:	f012 fb08 	bl	8013598 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <main+0x4c>)
 8000f8e:	f012 fdcd 	bl	8013b2c <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000f92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f96:	f012 faff 	bl	8013598 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f9a:	e7ec      	b.n	8000f76 <main+0x22>
 8000f9c:	20000798 	.word	0x20000798
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f015 fb2d 	bl	8016612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a28      	ldr	r2, [pc, #160]	; (8001074 <SystemClock_Config+0xd0>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <SystemClock_Config+0xd0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <SystemClock_Config+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd4>)
 8000ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001014:	2300      	movs	r3, #0
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001018:	2310      	movs	r3, #16
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800101c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001022:	2304      	movs	r3, #4
 8001024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	4618      	mov	r0, r3
 8001030:	f012 fdc6 	bl	8013bc0 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800103a:	f000 f903 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	230f      	movs	r3, #15
 8001040:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f013 f828 	bl	80140b0 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001066:	f000 f8ed 	bl	8001244 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	; 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_TIM2_Init+0x94>)
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_TIM2_Init+0x94>)
 80010a2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_TIM2_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_TIM2_Init+0x94>)
 80010b0:	2263      	movs	r2, #99	; 0x63
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_TIM2_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_TIM2_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_TIM2_Init+0x94>)
 80010c2:	f013 fa15 	bl	80144f0 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010cc:	f000 f8ba 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_TIM2_Init+0x94>)
 80010de:	f013 fba9 	bl	8014834 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f8ac 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_TIM2_Init+0x94>)
 80010fa:	f013 fdbb 	bl	8014c74 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001104:	f000 f89e 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000798 	.word	0x20000798

08001114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f013 fe14 	bl	8014d78 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f875 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200007e0 	.word	0x200007e0
 8001164:	40004400 	.word	0x40004400

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_GPIO_Init+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0xd4>)
 80011f4:	f012 fc9a 	bl	8013b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_GPIO_Init+0xd8>)
 8001210:	f012 fb08 	bl	8013824 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001214:	2320      	movs	r3, #32
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_GPIO_Init+0xd4>)
 800122c:	f012 fafa 	bl	8013824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	; 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020800 	.word	0x40020800

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	e7fe      	b.n	800124c <Error_Handler+0x8>
	...

08001250 <c_object_led>:

#define MRBC_MEMORY_SIZE (1024*30)
static uint8_t memory_pool[MRBC_MEMORY_SIZE];

static void c_object_led(mrb_vm *vm, mrb_value v[], int argc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, v[1].i);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3310      	adds	r3, #16
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	2120      	movs	r1, #32
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <c_object_led+0x28>)
 800126a:	f012 fc5f 	bl	8013b2c <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000

0800127c <start_mrubyc>:


void start_mrubyc(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	mrbc_init(memory_pool, MRBC_MEMORY_SIZE);
 8001282:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <start_mrubyc+0x40>)
 8001288:	f00c fa42 	bl	800d710 <mrbc_init>

	mrbc_class *cls = mrbc_get_class_by_name("Object");  // 追加
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <start_mrubyc+0x44>)
 800128e:	f008 fa80 	bl	8009792 <mrbc_get_class_by_name>
 8001292:	6078      	str	r0, [r7, #4]
	mrbc_define_method(0, cls, "led", c_object_led);     // 追加
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <start_mrubyc+0x48>)
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <start_mrubyc+0x4c>)
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2000      	movs	r0, #0
 800129c:	f008 f8a4 	bl	80093e8 <mrbc_define_method>

	if( mrbc_create_task(mrbbuf, 0) != NULL ){
 80012a0:	2100      	movs	r1, #0
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <start_mrubyc+0x50>)
 80012a4:	f00b fb30 	bl	800c908 <mrbc_create_task>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <start_mrubyc+0x36>
		mrbc_run();
 80012ae:	f00b fbdb 	bl	800ca68 <mrbc_run>
	}
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000828 	.word	0x20000828
 80012c0:	08018718 	.word	0x08018718
 80012c4:	08001251 	.word	0x08001251
 80012c8:	08018720 	.word	0x08018720
 80012cc:	0801a768 	.word	0x0801a768

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_MspInit+0x4c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x4c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x4c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800130e:	2007      	movs	r0, #7
 8001310:	f012 fa46 	bl	80137a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d115      	bne.n	800135e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_TIM_Base_MspInit+0x48>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_TIM_Base_MspInit+0x48>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x48>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201c      	movs	r0, #28
 8001354:	f012 fa2f 	bl	80137b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001358:	201c      	movs	r0, #28
 800135a:	f012 fa48 	bl	80137ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12b      	bne.n	80013e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x88>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c6:	230c      	movs	r3, #12
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_UART_MspInit+0x8c>)
 80013e2:	f012 fa1f 	bl	8013824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40004400 	.word	0x40004400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f012 f886 	bl	8013558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM2_IRQHandler+0x10>)
 8001456:	f013 f8fd 	bl	8014654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000798 	.word	0x20000798

08001464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147e:	f015 f935 	bl	80166ec <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2216      	movs	r2, #22
 8001486:	601a      	str	r2, [r3, #0]
  return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_exit>:

void _exit (int status)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe7 	bl	8001474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a6:	e7fe      	b.n	80014a6 <_exit+0x12>

080014a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
  }
  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f015 f89a 	bl	80166ec <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20018000 	.word	0x20018000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	20008028 	.word	0x20008028
 80015ec:	200089a8 	.word	0x200089a8

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <nlz16>:

  @param  x	target (16bit unsigned)
  @retval int	nlz value
*/
static inline int nlz16(uint16_t x)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
  if( x == 0 ) return 16;
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <nlz16+0x14>
 8001624:	2310      	movs	r3, #16
 8001626:	e028      	b.n	800167a <nlz16+0x66>

  int n = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
  if((x >>  8) == 0 ) { n += 8; x <<= 8; }
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	0a1b      	lsrs	r3, r3, #8
 8001630:	b29b      	uxth	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <nlz16+0x2e>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3308      	adds	r3, #8
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	80fb      	strh	r3, [r7, #6]
  if((x >> 12) == 0 ) { n += 4; x <<= 4; }
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	0b1b      	lsrs	r3, r3, #12
 8001646:	b29b      	uxth	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d105      	bne.n	8001658 <nlz16+0x44>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3304      	adds	r3, #4
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	80fb      	strh	r3, [r7, #6]
  if((x >> 14) == 0 ) { n += 2; x <<= 2; }
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	0b9b      	lsrs	r3, r3, #14
 800165c:	b29b      	uxth	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <nlz16+0x5a>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3302      	adds	r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	80fb      	strh	r3, [r7, #6]
  return n - (x >> 15);
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	0bdb      	lsrs	r3, r3, #15
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1a9b      	subs	r3, r3, r2
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <nlz8>:

  @param  x	target (8bit unsigned)
  @retval int	nlz value
*/
static inline int nlz8(uint8_t x)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  if( x == 0 ) return 8;
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <nlz8+0x14>
 8001696:	2308      	movs	r3, #8
 8001698:	e01d      	b.n	80016d6 <nlz8+0x50>

  int n = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
  if((x >> 4) == 0 ) { n += 4; x <<= 4; }
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d105      	bne.n	80016b4 <nlz8+0x2e>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3304      	adds	r3, #4
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	71fb      	strb	r3, [r7, #7]
  if((x >> 6) == 0 ) { n += 2; x <<= 2; }
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <nlz8+0x44>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3302      	adds	r3, #2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	71fb      	strb	r3, [r7, #7]
  return n - (x >> 7);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	09db      	lsrs	r3, r3, #7
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1a9b      	subs	r3, r3, r2
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <calc_index>:

  @param  alloc_size	alloc size
  @retval unsigned int	index of free_blocks
*/
static inline unsigned int calc_index(MRBC_ALLOC_MEMSIZE_T alloc_size)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  // check overflow
  if( (alloc_size >> (MRBC_ALLOC_FLI_BIT_WIDTH
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <calc_index+0x14>
                      + MRBC_ALLOC_SLI_BIT_WIDTH
                      + MRBC_ALLOC_IGNORE_LSBS)) != 0) {
    return SIZE_FREE_BLOCKS - 1;
 80016f4:	234f      	movs	r3, #79	; 0x4f
 80016f6:	e032      	b.n	800175e <calc_index+0x7a>
  }

  // calculate First Level Index.
  unsigned int fli = 16 -
    nlz16( alloc_size >> (MRBC_ALLOC_SLI_BIT_WIDTH + MRBC_ALLOC_IGNORE_LSBS) );
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	09db      	lsrs	r3, r3, #7
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff88 	bl	8001614 <nlz16>
 8001704:	4603      	mov	r3, r0
  unsigned int fli = 16 -
 8001706:	f1c3 0310 	rsb	r3, r3, #16
 800170a:	617b      	str	r3, [r7, #20]

  // calculate Second Level Index.
  unsigned int shift = (fli == 0) ? MRBC_ALLOC_IGNORE_LSBS :
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <calc_index+0x34>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3303      	adds	r3, #3
 8001716:	e000      	b.n	800171a <calc_index+0x36>
 8001718:	2304      	movs	r3, #4
 800171a:	613b      	str	r3, [r7, #16]
                                   (MRBC_ALLOC_IGNORE_LSBS - 1 + fli);

  unsigned int sli = (alloc_size >> shift) & ((1 << MRBC_ALLOC_SLI_BIT_WIDTH) - 1);
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	60fb      	str	r3, [r7, #12]
  unsigned int index = (fli << MRBC_ALLOC_SLI_BIT_WIDTH) + sli;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]

  assert(fli <= MRBC_ALLOC_FLI_BIT_WIDTH);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b09      	cmp	r3, #9
 8001738:	d906      	bls.n	8001748 <calc_index+0x64>
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <calc_index+0x84>)
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <calc_index+0x88>)
 800173e:	f44f 7194 	mov.w	r1, #296	; 0x128
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <calc_index+0x8c>)
 8001744:	f013 ff24 	bl	8015590 <__assert_func>
  assert(sli <= (1 << MRBC_ALLOC_SLI_BIT_WIDTH) - 1);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b07      	cmp	r3, #7
 800174c:	d906      	bls.n	800175c <calc_index+0x78>
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <calc_index+0x90>)
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <calc_index+0x88>)
 8001752:	f240 1129 	movw	r1, #297	; 0x129
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <calc_index+0x8c>)
 8001758:	f013 ff1a 	bl	8015590 <__assert_func>

  return index;
 800175c:	68bb      	ldr	r3, [r7, #8]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08018724 	.word	0x08018724
 800176c:	0801a808 	.word	0x0801a808
 8001770:	08018744 	.word	0x08018744
 8001774:	08018760 	.word	0x08018760

08001778 <add_free_block>:

  @param  pool		Pointer to memory pool.
  @param  target	Pointer to target block.
*/
static void add_free_block(MEMORY_POOL *pool, FREE_BLOCK *target)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  SET_FREE_BLOCK(target);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0201 	bic.w	r2, r3, #1
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	601a      	str	r2, [r3, #0]

  FREE_BLOCK **top_adrs = (FREE_BLOCK **)((uint8_t*)target + BLOCK_SIZE(target) - sizeof(FREE_BLOCK *));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	3b04      	subs	r3, #4
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
  *top_adrs = target;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	601a      	str	r2, [r3, #0]

  unsigned int index = calc_index(BLOCK_SIZE(target));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 0303 	bic.w	r3, r3, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff99 	bl	80016e4 <calc_index>
 80017b2:	6138      	str	r0, [r7, #16]
  unsigned int fli = FLI(index);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	60fb      	str	r3, [r7, #12]
  unsigned int sli = SLI(index);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	60bb      	str	r3, [r7, #8]
  assert( index < SIZE_FREE_BLOCKS );
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b4f      	cmp	r3, #79	; 0x4f
 80017c6:	d906      	bls.n	80017d6 <add_free_block+0x5e>
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <add_free_block+0xe0>)
 80017ca:	4a24      	ldr	r2, [pc, #144]	; (800185c <add_free_block+0xe4>)
 80017cc:	f240 113f 	movw	r1, #319	; 0x13f
 80017d0:	4823      	ldr	r0, [pc, #140]	; (8001860 <add_free_block+0xe8>)
 80017d2:	f013 fedd 	bl	8015590 <__assert_func>

  pool->free_fli_bitmap      |= (MSB_BIT1_FLI >> fli);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	889b      	ldrh	r3, [r3, #4]
 80017da:	b21a      	sxth	r2, r3
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	fa41 f303 	asr.w	r3, r1, r3
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	809a      	strh	r2, [r3, #4]
  pool->free_sli_bitmap[fli] |= (MSB_BIT1_SLI >> sli);
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	3306      	adds	r3, #6
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	fa41 f303 	asr.w	r3, r1, r3
 8001806:	b25b      	sxtb	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	3306      	adds	r3, #6
 8001816:	460a      	mov	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]

  target->prev_free = NULL;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  target->next_free = pool->free_blocks[index];
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	3304      	adds	r3, #4
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	605a      	str	r2, [r3, #4]
  if( target->next_free != NULL ) {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <add_free_block+0xc8>
    target->next_free->prev_free = target;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	609a      	str	r2, [r3, #8]
  }
  pool->free_blocks[index] = target;
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	3304      	adds	r3, #4
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	605a      	str	r2, [r3, #4]
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	0801878c 	.word	0x0801878c
 800185c:	0801a7f8 	.word	0x0801a7f8
 8001860:	08018744 	.word	0x08018744

08001864 <remove_free_block>:

  @param  pool		Pointer to memory pool.
  @param  target	pointer to target block.
*/
static void remove_free_block(MEMORY_POOL *pool, FREE_BLOCK *target)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  // top of linked list?
  if( target->prev_free == NULL ) {
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d148      	bne.n	8001908 <remove_free_block+0xa4>
    unsigned int index = calc_index(BLOCK_SIZE(target));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0303 	bic.w	r3, r3, #3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff30 	bl	80016e4 <calc_index>
 8001884:	6178      	str	r0, [r7, #20]

    pool->free_blocks[index] = target->next_free;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3304      	adds	r3, #4
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	605a      	str	r2, [r3, #4]
    if( target->next_free == NULL ) {
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d139      	bne.n	8001912 <remove_free_block+0xae>
      unsigned int fli = FLI(index);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	613b      	str	r3, [r7, #16]
      unsigned int sli = SLI(index);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]
      pool->free_sli_bitmap[fli] &= ~(MSB_BIT1_SLI >> sli);
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4413      	add	r3, r2
 80018b2:	3306      	adds	r3, #6
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	fa41 f303 	asr.w	r3, r1, r3
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4013      	ands	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	b2d9      	uxtb	r1, r3
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	3306      	adds	r3, #6
 80018d4:	460a      	mov	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
      if( pool->free_sli_bitmap[fli] == 0 ) pool->free_fli_bitmap &= ~(MSB_BIT1_FLI >> fli);
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	3306      	adds	r3, #6
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d115      	bne.n	8001912 <remove_free_block+0xae>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	fa41 f303 	asr.w	r3, r1, r3
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4013      	ands	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	809a      	strh	r2, [r3, #4]
 8001906:	e004      	b.n	8001912 <remove_free_block+0xae>
    }
  }
  else {
    target->prev_free->next_free = target->next_free;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	6852      	ldr	r2, [r2, #4]
 8001910:	605a      	str	r2, [r3, #4]
  }

  if( target->next_free != NULL ) {
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <remove_free_block+0xc0>
    target->next_free->prev_free = target->prev_free;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	6892      	ldr	r2, [r2, #8]
 8001922:	609a      	str	r2, [r3, #8]
  }
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <split_block>:
  @param  size		size
  @retval NULL		no split.
  @retval FREE_BLOCK *	pointer to splitted free block.
*/
static inline FREE_BLOCK* split_block(FREE_BLOCK *target, MRBC_ALLOC_MEMSIZE_T size)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  assert( BLOCK_SIZE(target) >= size );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d906      	bls.n	8001952 <split_block+0x26>
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <split_block+0x6c>)
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <split_block+0x70>)
 8001948:	f240 1175 	movw	r1, #373	; 0x175
 800194c:	4814      	ldr	r0, [pc, #80]	; (80019a0 <split_block+0x74>)
 800194e:	f013 fe1f 	bl	8015590 <__assert_func>
  if( (BLOCK_SIZE(target) - size) <= MRBC_MIN_MEMORY_BLOCK_SIZE ) return NULL;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b10      	cmp	r3, #16
 8001960:	d801      	bhi.n	8001966 <split_block+0x3a>
 8001962:	2300      	movs	r3, #0
 8001964:	e014      	b.n	8001990 <split_block+0x64>

  // split block, free
  FREE_BLOCK *split = (FREE_BLOCK *)((uint8_t *)target + size);
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  split->size  = BLOCK_SIZE(target) - size;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	1ad2      	subs	r2, r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	601a      	str	r2, [r3, #0]
  target->size = size | (target->size & 0x03);	// copy a size with flags.
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]

  return split;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	080187a8 	.word	0x080187a8
 800199c:	0801a854 	.word	0x0801a854
 80019a0:	08018744 	.word	0x08018744

080019a4 <merge_block>:

  @param  target	pointer to free block 1
  @param  next	pointer to free block 2
*/
static inline void merge_block(FREE_BLOCK *target, FREE_BLOCK *next)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  assert(target < next);
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d306      	bcc.n	80019c4 <merge_block+0x20>
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <merge_block+0x3c>)
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <merge_block+0x40>)
 80019ba:	f240 118b 	movw	r1, #395	; 0x18b
 80019be:	480a      	ldr	r0, [pc, #40]	; (80019e8 <merge_block+0x44>)
 80019c0:	f013 fde6 	bl	8015590 <__assert_func>

  // merge target and next
  target->size += BLOCK_SIZE(next);		// copy a size but save flags.
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 0303 	bic.w	r3, r3, #3
 80019d0:	441a      	add	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	601a      	str	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	080187c4 	.word	0x080187c4
 80019e4:	0801a8c4 	.word	0x0801a8c4
 80019e8:	08018744 	.word	0x08018744

080019ec <mrbc_init_alloc>:

  @param  ptr	pointer to free memory block.
  @param  size	size. (max 64KB. see MRBC_ALLOC_MEMSIZE_T)
*/
void mrbc_init_alloc(void *ptr, unsigned int size)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
    parameter to `MRBC_MIN_MEMORY_BLOCK_SIZE (1 << MRBC_ALLOC_IGNORE_LSBS)`
    and #define MRBC_ALLOC_16BIT.
  */

  assert( (sizeof(MEMORY_POOL) & 0x03) == 0 );
  assert( size != 0 );
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <mrbc_init_alloc+0x1e>
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <mrbc_init_alloc+0xa8>)
 80019fe:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <mrbc_init_alloc+0xac>)
 8001a00:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001a04:	4825      	ldr	r0, [pc, #148]	; (8001a9c <mrbc_init_alloc+0xb0>)
 8001a06:	f013 fdc3 	bl	8015590 <__assert_func>
  assert( size <= (MRBC_ALLOC_MEMSIZE_T)(~0) );

  if( memory_pool != NULL ) return;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <mrbc_init_alloc+0xb4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13b      	bne.n	8001a8a <mrbc_init_alloc+0x9e>
  size &= ~(unsigned int)0x03;	// align 4 byte.
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f023 0303 	bic.w	r3, r3, #3
 8001a18:	603b      	str	r3, [r7, #0]
  memory_pool = ptr;
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <mrbc_init_alloc+0xb4>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6013      	str	r3, [r2, #0]
  memset( memory_pool, 0, sizeof(MEMORY_POOL) );
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <mrbc_init_alloc+0xb4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f014 fdf1 	bl	8016612 <memset>
  memory_pool->size = size;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <mrbc_init_alloc+0xb4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	601a      	str	r2, [r3, #0]

  // initialize memory pool
  //  large free block + zero size used block (sentinel).
  MRBC_ALLOC_MEMSIZE_T sentinel_size = sizeof(USED_BLOCK);
 8001a38:	2304      	movs	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
  sentinel_size += (-sentinel_size & 0x03);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	425b      	negs	r3, r3
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
  MRBC_ALLOC_MEMSIZE_T free_size = size - sizeof(MEMORY_POOL) - sentinel_size;
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a54:	613b      	str	r3, [r7, #16]
  FREE_BLOCK *free_block = BLOCK_TOP(memory_pool);
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <mrbc_init_alloc+0xb4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001a5e:	60fb      	str	r3, [r7, #12]
  USED_BLOCK *used_block = (USED_BLOCK *)((uint8_t *)free_block + free_size);
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4413      	add	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]

  free_block->size = free_size | 0x02;		// flag prev=1, used=0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]
  used_block->size = sentinel_size | 0x01;	// flag prev=0, used=1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	601a      	str	r2, [r3, #0]
  SET_VM_ID( used_block, 0xff );

  add_free_block( memory_pool, free_block );
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <mrbc_init_alloc+0xb4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fe78 	bl	8001778 <add_free_block>
 8001a88:	e000      	b.n	8001a8c <mrbc_init_alloc+0xa0>
  if( memory_pool != NULL ) return;
 8001a8a:	bf00      	nop
}
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	080187d4 	.word	0x080187d4
 8001a98:	0801a814 	.word	0x0801a814
 8001a9c:	08018744 	.word	0x08018744
 8001aa0:	2000802c 	.word	0x2000802c

08001aa4 <mrbc_raw_alloc>:
  @param  size	request size.
  @return void * pointer to allocated memory.
  @retval NULL	error.
*/
void * mrbc_raw_alloc(unsigned int size)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  MEMORY_POOL *pool = memory_pool;
 8001aac:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <mrbc_raw_alloc+0x25c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
  MRBC_ALLOC_MEMSIZE_T alloc_size = size + sizeof(USED_BLOCK);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

  // align 4 byte
  alloc_size += (-alloc_size & 3);
 8001ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aba:	425b      	negs	r3, r3
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac2:	4413      	add	r3, r2
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

  // check minimum alloc size.
  if( alloc_size < MRBC_MIN_MEMORY_BLOCK_SIZE ) alloc_size = MRBC_MIN_MEMORY_BLOCK_SIZE;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d801      	bhi.n	8001ad0 <mrbc_raw_alloc+0x2c>
 8001acc:	2310      	movs	r3, #16
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c

  FREE_BLOCK *target;
  unsigned int fli, sli;
  unsigned int index = calc_index(alloc_size);
 8001ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ad2:	f7ff fe07 	bl	80016e4 <calc_index>
 8001ad6:	61f8      	str	r0, [r7, #28]

  // At first, check only the beginning of the same size block.
  // because it immediately responds to the pattern in which
  // same size memory are allocated and released continuously.
  target = pool->free_blocks[index];
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  if( target && BLOCK_SIZE(target) >= alloc_size ) {
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <mrbc_raw_alloc+0x66>
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d807      	bhi.n	8001b0a <mrbc_raw_alloc+0x66>
    fli = FLI(index);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    sli = SLI(index);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	623b      	str	r3, [r7, #32]
    goto FOUND_TARGET_BLOCK;
 8001b08:	e09a      	b.n	8001c40 <mrbc_raw_alloc+0x19c>
  }

  // and then, check the next (larger) size block.
  target = pool->free_blocks[++index];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  fli = FLI(index);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  sli = SLI(index);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	623b      	str	r3, [r7, #32]
  if( target ) goto FOUND_TARGET_BLOCK;
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8083 	bne.w	8001c3a <mrbc_raw_alloc+0x196>

  // check in SLI bitmap table.
  uint16_t masked = pool->free_sli_bitmap[fli] & ((MSB_BIT1_SLI >> sli) - 1);
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	4413      	add	r3, r2
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	fa41 f303 	asr.w	r3, r1, r3
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	82fb      	strh	r3, [r7, #22]
  if( masked != 0 ) {
 8001b56:	8afb      	ldrh	r3, [r7, #22]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <mrbc_raw_alloc+0xc8>
    sli = NLZ_SLI( masked );
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fd90 	bl	8001686 <nlz8>
 8001b66:	4603      	mov	r3, r0
 8001b68:	623b      	str	r3, [r7, #32]
    goto FOUND_FLI_SLI;
 8001b6a:	e046      	b.n	8001bfa <mrbc_raw_alloc+0x156>
  }

  // check in FLI bitmap table.
  masked = pool->free_fli_bitmap & ((MSB_BIT1_FLI >> fli) - 1);
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	889b      	ldrh	r3, [r3, #4]
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fa41 f303 	asr.w	r3, r1, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
  if( masked != 0 ) {
 8001b8a:	8afb      	ldrh	r3, [r7, #22]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <mrbc_raw_alloc+0x10e>
    fli = NLZ_FLI( masked );
 8001b90:	8afb      	ldrh	r3, [r7, #22]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd3e 	bl	8001614 <nlz16>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    sli = NLZ_SLI( pool->free_sli_bitmap[fli] );
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fd6d 	bl	8001686 <nlz8>
 8001bac:	4603      	mov	r3, r0
 8001bae:	623b      	str	r3, [r7, #32]
    goto FOUND_FLI_SLI;
 8001bb0:	e023      	b.n	8001bfa <mrbc_raw_alloc+0x156>
  }

  // Change strategy to First-fit.
  target = pool->free_blocks[--index];
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  while( target ) {
 8001bc6:	e00e      	b.n	8001be6 <mrbc_raw_alloc+0x142>
    if( BLOCK_SIZE(target) >= alloc_size ) {
 8001bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 0303 	bic.w	r3, r3, #3
 8001bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d804      	bhi.n	8001be0 <mrbc_raw_alloc+0x13c>
      remove_free_block( pool, target );
 8001bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd8:	69b8      	ldr	r0, [r7, #24]
 8001bda:	f7ff fe43 	bl	8001864 <remove_free_block>
      goto SPLIT_BLOCK;
 8001bde:	e07b      	b.n	8001cd8 <mrbc_raw_alloc+0x234>
    }
    target = target->next_free;
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  while( target ) {
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ed      	bne.n	8001bc8 <mrbc_raw_alloc+0x124>
  // else out of memory
#if defined(MRBC_OUT_OF_MEMORY)
  MRBC_OUT_OF_MEMORY();
#else
  static const char msg[] = "Fatal error: Out of memory.\n";
  hal_write(2, msg, sizeof(msg)-1);
 8001bec:	221c      	movs	r2, #28
 8001bee:	4945      	ldr	r1, [pc, #276]	; (8001d04 <mrbc_raw_alloc+0x260>)
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f009 fedb 	bl	800b9ac <hal_write>
#endif
  return NULL;  // ENOMEM
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e0b0      	b.n	8001d5c <mrbc_raw_alloc+0x2b8>


 FOUND_FLI_SLI:
  index = (fli << MRBC_ALLOC_SLI_BIT_WIDTH) + sli;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	6a3a      	ldr	r2, [r7, #32]
 8001c00:	4413      	add	r3, r2
 8001c02:	61fb      	str	r3, [r7, #28]
  assert( index < SIZE_FREE_BLOCKS );
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b4f      	cmp	r3, #79	; 0x4f
 8001c08:	d906      	bls.n	8001c18 <mrbc_raw_alloc+0x174>
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <mrbc_raw_alloc+0x264>)
 8001c0c:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <mrbc_raw_alloc+0x268>)
 8001c0e:	f240 2117 	movw	r1, #535	; 0x217
 8001c12:	483f      	ldr	r0, [pc, #252]	; (8001d10 <mrbc_raw_alloc+0x26c>)
 8001c14:	f013 fcbc 	bl	8015590 <__assert_func>
  target = pool->free_blocks[index];
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  assert( target != NULL );
 8001c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <mrbc_raw_alloc+0x19a>
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <mrbc_raw_alloc+0x270>)
 8001c2e:	4a37      	ldr	r2, [pc, #220]	; (8001d0c <mrbc_raw_alloc+0x268>)
 8001c30:	f240 2119 	movw	r1, #537	; 0x219
 8001c34:	4836      	ldr	r0, [pc, #216]	; (8001d10 <mrbc_raw_alloc+0x26c>)
 8001c36:	f013 fcab 	bl	8015590 <__assert_func>
  if( target ) goto FOUND_TARGET_BLOCK;
 8001c3a:	bf00      	nop
 8001c3c:	e000      	b.n	8001c40 <mrbc_raw_alloc+0x19c>

 FOUND_TARGET_BLOCK:
 8001c3e:	bf00      	nop
  assert(BLOCK_SIZE(target) >= alloc_size);
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 0303 	bic.w	r3, r3, #3
 8001c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d906      	bls.n	8001c5c <mrbc_raw_alloc+0x1b8>
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <mrbc_raw_alloc+0x274>)
 8001c50:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <mrbc_raw_alloc+0x268>)
 8001c52:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001c56:	482e      	ldr	r0, [pc, #184]	; (8001d10 <mrbc_raw_alloc+0x26c>)
 8001c58:	f013 fc9a 	bl	8015590 <__assert_func>

  // remove free_blocks index
  pool->free_blocks[index] = target->next_free;
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	69b9      	ldr	r1, [r7, #24]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	605a      	str	r2, [r3, #4]
  if( target->next_free == NULL ) {
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d12d      	bne.n	8001cd0 <mrbc_raw_alloc+0x22c>
    pool->free_sli_bitmap[fli] &= ~(MSB_BIT1_SLI >> sli);
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	4413      	add	r3, r2
 8001c7a:	3306      	adds	r3, #6
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b25a      	sxtb	r2, r3
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	fa41 f303 	asr.w	r3, r1, r3
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	b2d9      	uxtb	r1, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	4413      	add	r3, r2
 8001c9a:	3306      	adds	r3, #6
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	701a      	strb	r2, [r3, #0]
    if( pool->free_sli_bitmap[fli] == 0 ) pool->free_fli_bitmap &= ~(MSB_BIT1_FLI >> fli);
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d114      	bne.n	8001cd8 <mrbc_raw_alloc+0x234>
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	889b      	ldrh	r3, [r3, #4]
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa41 f303 	asr.w	r3, r1, r3
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	809a      	strh	r2, [r3, #4]
 8001cce:	e003      	b.n	8001cd8 <mrbc_raw_alloc+0x234>
  }
  else {
    target->next_free->prev_free = NULL;
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  }

 SPLIT_BLOCK: {
    FREE_BLOCK *release = split_block(target, alloc_size);
 8001cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cdc:	f7ff fe26 	bl	800192c <split_block>
 8001ce0:	6138      	str	r0, [r7, #16]
    if( release != NULL ) {
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d019      	beq.n	8001d1c <mrbc_raw_alloc+0x278>
      SET_PREV_USED(release);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f043 0202 	orr.w	r2, r3, #2
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	601a      	str	r2, [r3, #0]
      add_free_block( pool, release );
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	69b8      	ldr	r0, [r7, #24]
 8001cf8:	f7ff fd3e 	bl	8001778 <add_free_block>
 8001cfc:	e01b      	b.n	8001d36 <mrbc_raw_alloc+0x292>
 8001cfe:	bf00      	nop
 8001d00:	2000802c 	.word	0x2000802c
 8001d04:	0801a824 	.word	0x0801a824
 8001d08:	0801878c 	.word	0x0801878c
 8001d0c:	0801a844 	.word	0x0801a844
 8001d10:	08018744 	.word	0x08018744
 8001d14:	080187e0 	.word	0x080187e0
 8001d18:	080187f0 	.word	0x080187f0
    } else {
      FREE_BLOCK *next = PHYS_NEXT(target);
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 0303 	bic.w	r3, r3, #3
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
      SET_PREV_USED(next);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f043 0202 	orr.w	r2, r3, #2
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	601a      	str	r2, [r3, #0]
    }
  }

  SET_USED_BLOCK(target);
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f043 0201 	orr.w	r2, r3, #1
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	601a      	str	r2, [r3, #0]
  SET_VM_ID( target, 0 );

#if defined(MRBC_DEBUG)
  memset( (uint8_t *)target + sizeof(USED_BLOCK), 0xaa,
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	1d18      	adds	r0, r3, #4
          BLOCK_SIZE(target) - sizeof(USED_BLOCK) );
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	3b04      	subs	r3, #4
  memset( (uint8_t *)target + sizeof(USED_BLOCK), 0xaa,
 8001d50:	461a      	mov	r2, r3
 8001d52:	21aa      	movs	r1, #170	; 0xaa
 8001d54:	f014 fc5d 	bl	8016612 <memset>
#endif

  return (uint8_t *)target + sizeof(USED_BLOCK);
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	3304      	adds	r3, #4
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <mrbc_raw_alloc_no_free>:
  @param  size	request size.
  @return void * pointer to allocated memory.
  @retval NULL	error.
*/
void * mrbc_raw_alloc_no_free(unsigned int size)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  MEMORY_POOL *pool = memory_pool;
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <mrbc_raw_alloc_no_free+0xf4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
  MRBC_ALLOC_MEMSIZE_T alloc_size = size + (-size & 3);	// align 4 byte
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	425b      	negs	r3, r3
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]

  // find the tail block
  FREE_BLOCK *tail = BLOCK_TOP(pool);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001d86:	61fb      	str	r3, [r7, #28]
  FREE_BLOCK *prev;
  do {
    prev = tail;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	613b      	str	r3, [r7, #16]
    tail = PHYS_NEXT(tail);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
  } while( PHYS_NEXT(tail) < BLOCK_END(pool) );
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	441a      	add	r2, r3
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	440b      	add	r3, r1
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d3ea      	bcc.n	8001d88 <mrbc_raw_alloc_no_free+0x24>

  // can resize it block?
  if( IS_USED_BLOCK(prev) ) goto FALLBACK;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d141      	bne.n	8001e42 <mrbc_raw_alloc_no_free+0xde>
  if( (BLOCK_SIZE(prev) - sizeof(USED_BLOCK)) < alloc_size ) goto FALLBACK;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d83b      	bhi.n	8001e46 <mrbc_raw_alloc_no_free+0xe2>

  remove_free_block( pool, prev );
 8001dce:	6939      	ldr	r1, [r7, #16]
 8001dd0:	69b8      	ldr	r0, [r7, #24]
 8001dd2:	f7ff fd47 	bl	8001864 <remove_free_block>
  MRBC_ALLOC_MEMSIZE_T free_size = BLOCK_SIZE(prev) - alloc_size;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]

  if( free_size <= MRBC_MIN_MEMORY_BLOCK_SIZE ) {
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d811      	bhi.n	8001e0e <mrbc_raw_alloc_no_free+0xaa>
    // no split, use all
    prev->size += BLOCK_SIZE(tail);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	441a      	add	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	601a      	str	r2, [r3, #0]
    SET_USED_BLOCK( prev );
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	601a      	str	r2, [r3, #0]
    tail = prev;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	e016      	b.n	8001e3c <mrbc_raw_alloc_no_free+0xd8>
  }
  else {
    // split block
    MRBC_ALLOC_MEMSIZE_T tail_size = tail->size + alloc_size;	// w/ flags.
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4413      	add	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
    tail = (FREE_BLOCK*)((uint8_t *)tail - alloc_size);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4413      	add	r3, r2
 8001e20:	61fb      	str	r3, [r7, #28]
    tail->size = tail_size;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	601a      	str	r2, [r3, #0]
    prev->size -= alloc_size;		// w/ flags.
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	601a      	str	r2, [r3, #0]
    add_free_block( pool, prev );
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	f7ff fc9e 	bl	8001778 <add_free_block>
  }
  SET_VM_ID( tail, 0xff );

  return (uint8_t *)tail + sizeof(USED_BLOCK);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	e006      	b.n	8001e50 <mrbc_raw_alloc_no_free+0xec>
  if( IS_USED_BLOCK(prev) ) goto FALLBACK;
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <mrbc_raw_alloc_no_free+0xe4>
  if( (BLOCK_SIZE(prev) - sizeof(USED_BLOCK)) < alloc_size ) goto FALLBACK;
 8001e46:	bf00      	nop

 FALLBACK:
  return mrbc_raw_alloc(alloc_size);
 8001e48:	6978      	ldr	r0, [r7, #20]
 8001e4a:	f7ff fe2b 	bl	8001aa4 <mrbc_raw_alloc>
 8001e4e:	4603      	mov	r3, r0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	2000802c 	.word	0x2000802c

08001e5c <mrbc_raw_free>:
/*! release memory

  @param  ptr	Return value of mrbc_raw_alloc()
*/
void mrbc_raw_free(void *ptr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
#if defined(MRBC_DEBUG)
  {
    if( ptr == NULL ) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <mrbc_raw_free+0x1a>
      static const char msg[] = "mrbc_raw_free(): NULL pointer was given.\n";
      hal_write(2, msg, sizeof(msg)-1);
 8001e6a:	2229      	movs	r2, #41	; 0x29
 8001e6c:	4943      	ldr	r1, [pc, #268]	; (8001f7c <mrbc_raw_free+0x120>)
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f009 fd9c 	bl	800b9ac <hal_write>
      return;
 8001e74:	e07f      	b.n	8001f76 <mrbc_raw_free+0x11a>
    }

    FREE_BLOCK *target = (FREE_BLOCK *)((uint8_t *)ptr - sizeof(USED_BLOCK));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3b04      	subs	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
    FREE_BLOCK *block = BLOCK_TOP(memory_pool);
 8001e7c:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <mrbc_raw_free+0x124>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001e84:	61fb      	str	r3, [r7, #28]
    while( block < (FREE_BLOCK *)BLOCK_END(memory_pool) ) {
 8001e86:	e00a      	b.n	8001e9e <mrbc_raw_free+0x42>
      if( block == target ) break;
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d010      	beq.n	8001eb2 <mrbc_raw_free+0x56>
      block = PHYS_NEXT(block);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 0303 	bic.w	r3, r3, #3
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	61fb      	str	r3, [r7, #28]
    while( block < (FREE_BLOCK *)BLOCK_END(memory_pool) ) {
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <mrbc_raw_free+0x124>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <mrbc_raw_free+0x124>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3eb      	bcc.n	8001e88 <mrbc_raw_free+0x2c>
 8001eb0:	e000      	b.n	8001eb4 <mrbc_raw_free+0x58>
      if( block == target ) break;
 8001eb2:	bf00      	nop
    }

    if( block != target || IS_FREE_BLOCK(block) ) {
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d105      	bne.n	8001ec8 <mrbc_raw_free+0x6c>
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <mrbc_raw_free+0x78>
      static const char msg[] = "mrbc_raw_free(): double free detected.\n";
      hal_write(2, msg, sizeof(msg)-1);
 8001ec8:	2227      	movs	r2, #39	; 0x27
 8001eca:	492e      	ldr	r1, [pc, #184]	; (8001f84 <mrbc_raw_free+0x128>)
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f009 fd6d 	bl	800b9ac <hal_write>
      return;
 8001ed2:	e050      	b.n	8001f76 <mrbc_raw_free+0x11a>
    }

    SET_VM_ID( target, 0xff );
    memset( ptr, 0xff, BLOCK_SIZE(target) - sizeof(USED_BLOCK) );
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 0303 	bic.w	r3, r3, #3
 8001edc:	3b04      	subs	r3, #4
 8001ede:	461a      	mov	r2, r3
 8001ee0:	21ff      	movs	r1, #255	; 0xff
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f014 fb95 	bl	8016612 <memset>
  }
#endif

  MEMORY_POOL *pool = memory_pool;
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <mrbc_raw_free+0x124>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	613b      	str	r3, [r7, #16]

  // get target block
  FREE_BLOCK *target = (FREE_BLOCK *)((uint8_t *)ptr - sizeof(USED_BLOCK));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3b04      	subs	r3, #4
 8001ef2:	61bb      	str	r3, [r7, #24]

  // check next block, merge?
  FREE_BLOCK *next = PHYS_NEXT(target);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0303 	bic.w	r3, r3, #3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  if( IS_FREE_BLOCK(next) ) {
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <mrbc_raw_free+0xc4>
    remove_free_block( pool, next );
 8001f0e:	68f9      	ldr	r1, [r7, #12]
 8001f10:	6938      	ldr	r0, [r7, #16]
 8001f12:	f7ff fca7 	bl	8001864 <remove_free_block>
    merge_block(target, next);
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	69b8      	ldr	r0, [r7, #24]
 8001f1a:	f7ff fd43 	bl	80019a4 <merge_block>
 8001f1e:	e005      	b.n	8001f2c <mrbc_raw_free+0xd0>
  } else {
    SET_PREV_FREE(next);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 0202 	bic.w	r2, r3, #2
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  // check prev block, merge?
  if( IS_PREV_FREE(target) ) {
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11a      	bne.n	8001f6e <mrbc_raw_free+0x112>
    FREE_BLOCK *prev = *((FREE_BLOCK **)((uint8_t*)target - sizeof(FREE_BLOCK *)));
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8001f3e:	60bb      	str	r3, [r7, #8]

    assert( IS_FREE_BLOCK(prev) );
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <mrbc_raw_free+0xfe>
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <mrbc_raw_free+0x12c>)
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <mrbc_raw_free+0x130>)
 8001f50:	f240 21a5 	movw	r1, #677	; 0x2a5
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <mrbc_raw_free+0x134>)
 8001f56:	f013 fb1b 	bl	8015590 <__assert_func>
    remove_free_block( pool, prev );
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	6938      	ldr	r0, [r7, #16]
 8001f5e:	f7ff fc81 	bl	8001864 <remove_free_block>
    merge_block(prev, target);
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f7ff fd1d 	bl	80019a4 <merge_block>
    target = prev;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	61bb      	str	r3, [r7, #24]
  }

  // target, add to index
  add_free_block( pool, target );
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	6938      	ldr	r0, [r7, #16]
 8001f72:	f7ff fc01 	bl	8001778 <add_free_block>
}
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0801a860 	.word	0x0801a860
 8001f80:	2000802c 	.word	0x2000802c
 8001f84:	0801a88c 	.word	0x0801a88c
 8001f88:	08018814 	.word	0x08018814
 8001f8c:	0801a8b4 	.word	0x0801a8b4
 8001f90:	08018744 	.word	0x08018744

08001f94 <mrbc_raw_realloc>:
  @param  size	request size
  @return void * pointer to allocated memory.
  @retval NULL	error.
*/
void * mrbc_raw_realloc(void *ptr, unsigned int size)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  MEMORY_POOL *pool = memory_pool;
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <mrbc_raw_realloc+0x134>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
  USED_BLOCK *target = (USED_BLOCK *)((uint8_t *)ptr - sizeof(USED_BLOCK));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	617b      	str	r3, [r7, #20]
  MRBC_ALLOC_MEMSIZE_T alloc_size = size + sizeof(USED_BLOCK);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3304      	adds	r3, #4
 8001fae:	61fb      	str	r3, [r7, #28]
  FREE_BLOCK *next;

  // align 4 byte
  alloc_size += (-alloc_size & 3);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	425b      	negs	r3, r3
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	4413      	add	r3, r2
 8001fbc:	61fb      	str	r3, [r7, #28]

  // check minimum alloc size.
  if( alloc_size < MRBC_MIN_MEMORY_BLOCK_SIZE ) alloc_size = MRBC_MIN_MEMORY_BLOCK_SIZE;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d801      	bhi.n	8001fc8 <mrbc_raw_realloc+0x34>
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	61fb      	str	r3, [r7, #28]

  // expand? part1.
  // next phys block is free and enough size?
  if( alloc_size > BLOCK_SIZE(target) ) {
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 0303 	bic.w	r3, r3, #3
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d920      	bls.n	8002018 <mrbc_raw_realloc+0x84>
    next = PHYS_NEXT(target);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
    if( IS_USED_BLOCK(next) ) goto ALLOC_AND_COPY;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d14c      	bne.n	800208a <mrbc_raw_realloc+0xf6>
    if( (BLOCK_SIZE(target) + BLOCK_SIZE(next)) < alloc_size ) goto ALLOC_AND_COPY;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0203 	bic.w	r2, r3, #3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0303 	bic.w	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	d842      	bhi.n	800208e <mrbc_raw_realloc+0xfa>

    remove_free_block( pool, next );
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	69b8      	ldr	r0, [r7, #24]
 800200c:	f7ff fc2a 	bl	8001864 <remove_free_block>
    merge_block((FREE_BLOCK *)target, next);
 8002010:	6939      	ldr	r1, [r7, #16]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff fcc6 	bl	80019a4 <merge_block>
  }
  next = PHYS_NEXT(target);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0303 	bic.w	r3, r3, #3
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	613b      	str	r3, [r7, #16]

  // try shrink.
  FREE_BLOCK *release = split_block((FREE_BLOCK *)target, alloc_size);
 8002026:	69f9      	ldr	r1, [r7, #28]
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7ff fc7f 	bl	800192c <split_block>
 800202e:	60b8      	str	r0, [r7, #8]
  if( release != NULL ) {
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <mrbc_raw_realloc+0xbc>
    SET_PREV_USED(release);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	601a      	str	r2, [r3, #0]
    SET_PREV_USED(next);
    return ptr;
  }

  // check next block, merge?
  if( IS_FREE_BLOCK(next) ) {
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d111      	bne.n	8002072 <mrbc_raw_realloc+0xde>
 800204e:	e007      	b.n	8002060 <mrbc_raw_realloc+0xcc>
    SET_PREV_USED(next);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	601a      	str	r2, [r3, #0]
    return ptr;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	e02e      	b.n	80020be <mrbc_raw_realloc+0x12a>
    remove_free_block( pool, next );
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	69b8      	ldr	r0, [r7, #24]
 8002064:	f7ff fbfe 	bl	8001864 <remove_free_block>
    merge_block(release, next);
 8002068:	6939      	ldr	r1, [r7, #16]
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f7ff fc9a 	bl	80019a4 <merge_block>
 8002070:	e005      	b.n	800207e <mrbc_raw_realloc+0xea>
  } else {
    SET_PREV_FREE(next);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0202 	bic.w	r2, r3, #2
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	601a      	str	r2, [r3, #0]
  }
  add_free_block( pool, release );
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	69b8      	ldr	r0, [r7, #24]
 8002082:	f7ff fb79 	bl	8001778 <add_free_block>
  return ptr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	e019      	b.n	80020be <mrbc_raw_realloc+0x12a>
    if( IS_USED_BLOCK(next) ) goto ALLOC_AND_COPY;
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <mrbc_raw_realloc+0xfc>
    if( (BLOCK_SIZE(target) + BLOCK_SIZE(next)) < alloc_size ) goto ALLOC_AND_COPY;
 800208e:	bf00      	nop


  // expand part2.
  // new alloc and copy
 ALLOC_AND_COPY: {
    void *new_ptr = mrbc_raw_alloc(size);
 8002090:	6838      	ldr	r0, [r7, #0]
 8002092:	f7ff fd07 	bl	8001aa4 <mrbc_raw_alloc>
 8002096:	60f8      	str	r0, [r7, #12]
    if( new_ptr == NULL ) return NULL;  // ENOMEM
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <mrbc_raw_realloc+0x10e>
 800209e:	2300      	movs	r3, #0
 80020a0:	e00d      	b.n	80020be <mrbc_raw_realloc+0x12a>

    memcpy(new_ptr, ptr, BLOCK_SIZE(target) - sizeof(USED_BLOCK));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	3b04      	subs	r3, #4
 80020ac:	461a      	mov	r2, r3
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f014 fb48 	bl	8016746 <memcpy>
    mrbc_set_vm_id(new_ptr, target->vm_id);

    mrbc_raw_free(ptr);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fed0 	bl	8001e5c <mrbc_raw_free>

    return new_ptr;
 80020bc:	68fb      	ldr	r3, [r7, #12]
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000802c 	.word	0x2000802c

080020cc <mrbc_alloc_statistics>:
/*! statistics

  @param  ret		pointer to return value.
*/
void mrbc_alloc_statistics( struct MRBC_ALLOC_STATISTICS *ret )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  MEMORY_POOL *pool = memory_pool;
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <mrbc_alloc_statistics+0xbc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  USED_BLOCK *block = BLOCK_TOP(pool);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80020e0:	617b      	str	r3, [r7, #20]
  int flag_used_free = IS_USED_BLOCK(block);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	613b      	str	r3, [r7, #16]

  ret->total = pool->size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	601a      	str	r2, [r3, #0]
  ret->used = 0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  ret->free = 0;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  ret->fragmentation = -1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f04f 32ff 	mov.w	r2, #4294967295
 8002106:	60da      	str	r2, [r3, #12]

  while( block < (USED_BLOCK *)BLOCK_END(pool) ) {
 8002108:	e030      	b.n	800216c <mrbc_alloc_statistics+0xa0>
    if( IS_FREE_BLOCK(block) ) {
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <mrbc_alloc_statistics+0x5e>
      ret->free += BLOCK_SIZE(block);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	441a      	add	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e008      	b.n	800213c <mrbc_alloc_statistics+0x70>
    } else {
      ret->used += BLOCK_SIZE(block);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	441a      	add	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
    }
    if( flag_used_free != IS_USED_BLOCK(block) ) {
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0201 	and.w	r2, r3, #1
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d009      	beq.n	800215e <mrbc_alloc_statistics+0x92>
      ret->fragmentation++;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
      flag_used_free = IS_USED_BLOCK(block);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	613b      	str	r3, [r7, #16]
    }
    block = PHYS_NEXT(block);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4413      	add	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
  while( block < (USED_BLOCK *)BLOCK_END(pool) ) {
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3c7      	bcc.n	800210a <mrbc_alloc_statistics+0x3e>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	2000802c 	.word	0x2000802c

0800218c <mrbc_incref>:
/*! Increment reference counter

  @param   v     Pointer to mrbc_value
*/
static inline void mrbc_incref(mrbc_value *v)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f993 3000 	ldrsb.w	r3, [r3]
 800219a:	2b07      	cmp	r3, #7
 800219c:	dd1e      	ble.n	80021dc <mrbc_incref+0x50>

  assert( v->obj->ref_count != 0 );
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	885b      	ldrh	r3, [r3, #2]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <mrbc_incref+0x2a>
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <mrbc_incref+0x58>)
 80021aa:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <mrbc_incref+0x5c>)
 80021ac:	f240 11c3 	movw	r1, #451	; 0x1c3
 80021b0:	480e      	ldr	r0, [pc, #56]	; (80021ec <mrbc_incref+0x60>)
 80021b2:	f013 f9ed 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	885b      	ldrh	r3, [r3, #2]
 80021bc:	2bff      	cmp	r3, #255	; 0xff
 80021be:	d106      	bne.n	80021ce <mrbc_incref+0x42>
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <mrbc_incref+0x64>)
 80021c2:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <mrbc_incref+0x5c>)
 80021c4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <mrbc_incref+0x60>)
 80021ca:	f013 f9e1 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	885a      	ldrh	r2, [r3, #2]
 80021d4:	3201      	adds	r2, #1
 80021d6:	b292      	uxth	r2, r2
 80021d8:	805a      	strh	r2, [r3, #2]
 80021da:	e000      	b.n	80021de <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80021dc:	bf00      	nop
}
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	080189b0 	.word	0x080189b0
 80021e8:	0801a984 	.word	0x0801a984
 80021ec:	080189c8 	.word	0x080189c8
 80021f0:	080189e4 	.word	0x080189e4

080021f4 <mrbc_decref>:
/*! Decrement reference counter

  @param   v     Pointer to target mrbc_value
*/
static inline void mrbc_decref(mrbc_value *v)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002202:	2b07      	cmp	r3, #7
 8002204:	dd2c      	ble.n	8002260 <mrbc_decref+0x6c>

  assert( v->obj->ref_count != 0 );
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	885b      	ldrh	r3, [r3, #2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <mrbc_decref+0x2a>
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <mrbc_decref+0x78>)
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <mrbc_decref+0x7c>)
 8002214:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <mrbc_decref+0x80>)
 800221a:	f013 f9b9 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	885b      	ldrh	r3, [r3, #2]
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	4293      	cmp	r3, r2
 800222a:	d106      	bne.n	800223a <mrbc_decref+0x46>
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <mrbc_decref+0x84>)
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <mrbc_decref+0x7c>)
 8002230:	f240 11d3 	movw	r1, #467	; 0x1d3
 8002234:	480f      	ldr	r0, [pc, #60]	; (8002274 <mrbc_decref+0x80>)
 8002236:	f013 f9ab 	bl	8015590 <__assert_func>

  if( --v->obj->ref_count != 0 ) return;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	885a      	ldrh	r2, [r3, #2]
 8002240:	3a01      	subs	r2, #1
 8002242:	b292      	uxth	r2, r2
 8002244:	805a      	strh	r2, [r3, #2]
 8002246:	885b      	ldrh	r3, [r3, #2]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <mrbc_decref+0x70>

  (*mrbc_delfunc[v->tt])(v);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f993 3000 	ldrsb.w	r3, [r3]
 8002252:	461a      	mov	r2, r3
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <mrbc_decref+0x88>)
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
 800225e:	e002      	b.n	8002266 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8002260:	bf00      	nop
 8002262:	e000      	b.n	8002266 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8002264:	bf00      	nop
}
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	080189b0 	.word	0x080189b0
 8002270:	0801a978 	.word	0x0801a978
 8002274:	080189c8 	.word	0x080189c8
 8002278:	08018a00 	.word	0x08018a00
 800227c:	0801bde8 	.word	0x0801bde8

08002280 <mrbc_decref_empty>:
/*! Decrement reference counter with set TT_EMPTY.

  @param   v     Pointer to target mrbc_value
*/
static inline void mrbc_decref_empty(mrbc_value *v)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  mrbc_decref(v);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffb3 	bl	80021f4 <mrbc_decref>
  v->tt = MRBC_TT_EMPTY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <mrbc_string_new_cstr>:
  @param  vm	pointer to VM.
  @param  src	source string or NULL
  @return 	string object
*/
static inline mrbc_value mrbc_string_new_cstr(struct VM *vm, const char *src)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <mrbc_string_new_cstr+0x1c>
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fd ffa0 	bl	80001f4 <strlen>
 80022b4:	4603      	mov	r3, r0
 80022b6:	e000      	b.n	80022ba <mrbc_string_new_cstr+0x1e>
 80022b8:	2300      	movs	r3, #0
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	f004 ff62 	bl	8007188 <mrbc_string_new>
}
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <mrbc_string_append_cstr>:
  @param  s1	pointer to target value 1
  @param  s2	pointer to char (c_str)
  @return	mrbc_error_code
*/
static inline int mrbc_string_append_cstr(mrbc_value *s1, const char *s2)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f7fd ff8c 	bl	80001f4 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f005 f8e8 	bl	80074b8 <mrbc_string_append_cbuf>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <mrbc_array_size>:
/***** Inline functions *****************************************************/
//================================================================
/*! get size
*/
static inline int mrbc_array_size(const mrbc_value *ary)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	88db      	ldrh	r3, [r3, #6]
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <mrbc_array_delete_handle>:

//================================================================
/*! delete handle (do not decrement reference counter)
*/
static inline void mrbc_array_delete_handle(mrbc_value *ary)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60fb      	str	r3, [r7, #12]

  mrbc_raw_free(h->data);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fd9c 	bl	8001e5c <mrbc_raw_free>
  mrbc_raw_free(h);
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff fd99 	bl	8001e5c <mrbc_raw_free>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <mrbc_array_new>:
  @param  vm	pointer to VM.
  @param  size	initial size
  @return 	array object
*/
mrbc_value mrbc_array_new(struct VM *vm, int size)
{
 8002332:	b590      	push	{r4, r7, lr}
 8002334:	b08b      	sub	sp, #44	; 0x2c
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  mrbc_value value = {.tt = MRBC_TT_ARRAY};
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	230a      	movs	r3, #10
 800234e:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle and data buffer.
  */
  mrbc_array *h = mrbc_alloc(vm, sizeof(mrbc_array));
 8002350:	200c      	movs	r0, #12
 8002352:	f7ff fba7 	bl	8001aa4 <mrbc_raw_alloc>
 8002356:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;	// ENOMEM
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <mrbc_array_new+0x3c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	461c      	mov	r4, r3
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800236c:	e02f      	b.n	80023ce <mrbc_array_new+0x9c>

  mrbc_value *data = mrbc_alloc(vm, sizeof(mrbc_value) * size);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fb96 	bl	8001aa4 <mrbc_raw_alloc>
 8002378:	6238      	str	r0, [r7, #32]
  if( !data ) {			// ENOMEM
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <mrbc_array_new+0x64>
    mrbc_raw_free( h );
 8002380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002382:	f7ff fd6b 	bl	8001e5c <mrbc_raw_free>
    return value;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	461c      	mov	r4, r3
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002394:	e01b      	b.n	80023ce <mrbc_array_new+0x9c>
  }

  MRBC_INIT_OBJECT_HEADER( h, "AR" );
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	2201      	movs	r2, #1
 800239a:	805a      	strh	r2, [r3, #2]
 800239c:	2241      	movs	r2, #65	; 0x41
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	2252      	movs	r2, #82	; 0x52
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	705a      	strb	r2, [r3, #1]
  h->data_size = size;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	809a      	strh	r2, [r3, #4]
  h->n_stored = 0;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	2200      	movs	r2, #0
 80023b4:	80da      	strh	r2, [r3, #6]
  h->data = data;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	609a      	str	r2, [r3, #8]

  value.array = h;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	61bb      	str	r3, [r7, #24]
  return value;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	461c      	mov	r4, r3
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	372c      	adds	r7, #44	; 0x2c
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}

080023d6 <mrbc_array_delete>:
/*! destructor

  @param  ary	pointer to target value
*/
void mrbc_array_delete(mrbc_value *ary)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	613b      	str	r3, [r7, #16]

  mrbc_value *p1 = h->data;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	617b      	str	r3, [r7, #20]
  const mrbc_value *p2 = p1 + h->n_stored;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	88db      	ldrh	r3, [r3, #6]
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 80023f6:	e006      	b.n	8002406 <mrbc_array_delete+0x30>
    mrbc_decref(p1++);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f103 0210 	add.w	r2, r3, #16
 80023fe:	617a      	str	r2, [r7, #20]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fef7 	bl	80021f4 <mrbc_decref>
  while( p1 < p2 ) {
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3f4      	bcc.n	80023f8 <mrbc_array_delete+0x22>
  }

  mrbc_array_delete_handle(ary);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff7c 	bl	800230c <mrbc_array_delete_handle>
}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <mrbc_array_resize>:
  @param  ary	pointer to target value
  @param  size	size
  @return	mrbc_error_code
*/
int mrbc_array_resize(mrbc_value *ary, int size)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	60fb      	str	r3, [r7, #12]

  mrbc_value *data2 = mrbc_raw_realloc(h->data, sizeof(mrbc_value) * size);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7ff fdac 	bl	8001f94 <mrbc_raw_realloc>
 800243c:	60b8      	str	r0, [r7, #8]
  if( !data2 ) return E_NOMEMORY_ERROR;	// ENOMEM
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <mrbc_array_resize+0x2c>
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <mrbc_array_resize+0x3c>

  h->data = data2;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
  h->data_size = size;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	809a      	strh	r2, [r3, #4]

  return 0;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <mrbc_array_set>:
  @param  idx		index
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_set(mrbc_value *ary, int idx, mrbc_value *set_val)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b08b      	sub	sp, #44	; 0x2c
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	623b      	str	r3, [r7, #32]

  if( idx < 0 ) {
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	da0a      	bge.n	800248e <mrbc_array_set+0x2e>
    idx = h->n_stored + idx;
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	88db      	ldrh	r3, [r3, #6]
 800247c:	461a      	mov	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4413      	add	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
    if( idx < 0 ) return E_INDEX_ERROR;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da01      	bge.n	800248e <mrbc_array_set+0x2e>
 800248a:	2305      	movs	r3, #5
 800248c:	e048      	b.n	8002520 <mrbc_array_set+0xc0>
  }

  // need resize?
  if( idx >= h->data_size && mrbc_array_resize(ary, idx + 1) != 0 ) {
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	889b      	ldrh	r3, [r3, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4293      	cmp	r3, r2
 8002498:	db0a      	blt.n	80024b0 <mrbc_array_set+0x50>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	4619      	mov	r1, r3
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff ffbb 	bl	800241c <mrbc_array_resize>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <mrbc_array_set+0x50>
    return E_NOMEMORY_ERROR;			// ENOMEM
 80024ac:	2301      	movs	r3, #1
 80024ae:	e037      	b.n	8002520 <mrbc_array_set+0xc0>
  }

  if( idx < h->n_stored ) {
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	88db      	ldrh	r3, [r3, #6]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4293      	cmp	r3, r2
 80024ba:	da08      	bge.n	80024ce <mrbc_array_set+0x6e>
    // release existing data.
    mrbc_decref( &h->data[idx] );
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4413      	add	r3, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe94 	bl	80021f4 <mrbc_decref>
 80024cc:	e01d      	b.n	800250a <mrbc_array_set+0xaa>
  } else {
    // clear empty cells.
    int i;
    for( i = h->n_stored; i < idx; i++ ) {
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	88db      	ldrh	r3, [r3, #6]
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	e00f      	b.n	80024f6 <mrbc_array_set+0x96>
      h->data[i] = mrbc_nil_value();
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	18d1      	adds	r1, r2, r3
 80024e0:	460a      	mov	r2, r1
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	6053      	str	r3, [r2, #4]
 80024e8:	6093      	str	r3, [r2, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	2301      	movs	r3, #1
 80024ee:	700b      	strb	r3, [r1, #0]
    for( i = h->n_stored; i < idx; i++ ) {
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3301      	adds	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dbeb      	blt.n	80024d6 <mrbc_array_set+0x76>
    }
    h->n_stored = idx + 1;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	b29b      	uxth	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	80da      	strh	r2, [r3, #6]
  }

  h->data[idx] = *set_val;
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	441a      	add	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4614      	mov	r4, r2
 8002518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 0;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	372c      	adds	r7, #44	; 0x2c
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}

08002528 <mrbc_array_get>:
  @param  ary		pointer to target value
  @param  idx		index
  @return		mrbc_value data at index position or Nil.
*/
mrbc_value mrbc_array_get(const mrbc_value *ary, int idx)
{
 8002528:	b490      	push	{r4, r7}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	627b      	str	r3, [r7, #36]	; 0x24

  if( idx < 0 ) idx = h->n_stored + idx;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	da05      	bge.n	800254c <mrbc_array_get+0x24>
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	88db      	ldrh	r3, [r3, #6]
 8002544:	461a      	mov	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	607b      	str	r3, [r7, #4]
  if( idx < 0 || idx >= h->n_stored ) return mrbc_nil_value();
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db05      	blt.n	800255e <mrbc_array_get+0x36>
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	88db      	ldrh	r3, [r3, #6]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4293      	cmp	r3, r2
 800255c:	db0a      	blt.n	8002574 <mrbc_array_get+0x4c>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	461a      	mov	r2, r3
 8002562:	2300      	movs	r3, #0
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	6053      	str	r3, [r2, #4]
 8002568:	6093      	str	r3, [r2, #8]
 800256a:	60d3      	str	r3, [r2, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]

  return h->data[idx];
}
 8002572:	e009      	b.n	8002588 <mrbc_array_get+0x60>
  return h->data[idx];
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4614      	mov	r4, r2
 8002582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bc90      	pop	{r4, r7}
 8002590:	4770      	bx	lr

08002592 <mrbc_array_push>:
  @param  ary		pointer to target value
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_push(mrbc_value *ary, mrbc_value *set_val)
{
 8002592:	b590      	push	{r4, r7, lr}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60fb      	str	r3, [r7, #12]

  if( h->n_stored >= h->data_size ) {
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88da      	ldrh	r2, [r3, #6]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d30c      	bcc.n	80025c8 <mrbc_array_push+0x36>
    int size = h->data_size + 6;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	889b      	ldrh	r3, [r3, #4]
 80025b2:	3306      	adds	r3, #6
 80025b4:	60bb      	str	r3, [r7, #8]
    if( mrbc_array_resize(ary, size) != 0 ) return E_NOMEMORY_ERROR; // ENOMEM
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff2f 	bl	800241c <mrbc_array_resize>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <mrbc_array_push+0x36>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e00f      	b.n	80025e8 <mrbc_array_push+0x56>
  }

  h->data[h->n_stored++] = *set_val;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88db      	ldrh	r3, [r3, #6]
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	b288      	uxth	r0, r1
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	80c8      	strh	r0, [r1, #6]
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	441a      	add	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4614      	mov	r4, r2
 80025e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return 0;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}

080025f0 <mrbc_array_push_m>:
  @param  ary		pointer to target value
  @param  set_val	set value (array)
  @return		mrbc_error_code
*/
int mrbc_array_push_m(mrbc_value *ary, mrbc_value *set_val)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  mrbc_array *ha_d = ary->array;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	617b      	str	r3, [r7, #20]
  mrbc_array *ha_s = set_val->array;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
  int new_size = ha_d->n_stored + ha_s->n_stored;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	88db      	ldrh	r3, [r3, #6]
 800260a:	461a      	mov	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	88db      	ldrh	r3, [r3, #6]
 8002610:	4413      	add	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  if( new_size > ha_d->data_size ) {
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	889b      	ldrh	r3, [r3, #4]
 8002618:	461a      	mov	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4293      	cmp	r3, r2
 800261e:	dd08      	ble.n	8002632 <mrbc_array_push_m+0x42>
    if( mrbc_array_resize(ary, new_size) != 0 )
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fefa 	bl	800241c <mrbc_array_resize>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <mrbc_array_push_m+0x42>
      return E_NOMEMORY_ERROR;		// ENOMEM
 800262e:	2301      	movs	r3, #1
 8002630:	e016      	b.n	8002660 <mrbc_array_push_m+0x70>
  }

  memcpy( &ha_d->data[ha_d->n_stored], ha_s->data,
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	88db      	ldrh	r3, [r3, #6]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	18d0      	adds	r0, r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	6899      	ldr	r1, [r3, #8]
	  sizeof(mrbc_value) * ha_s->n_stored );
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	88db      	ldrh	r3, [r3, #6]
  memcpy( &ha_d->data[ha_d->n_stored], ha_s->data,
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	461a      	mov	r2, r3
 800264a:	f014 f87c 	bl	8016746 <memcpy>
  ha_d->n_stored += ha_s->n_stored;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	88da      	ldrh	r2, [r3, #6]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	88db      	ldrh	r3, [r3, #6]
 8002656:	4413      	add	r3, r2
 8002658:	b29a      	uxth	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	80da      	strh	r2, [r3, #6]

  return 0;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <mrbc_array_pop>:

  @param  ary		pointer to target value
  @return		tail data or Nil
*/
mrbc_value mrbc_array_pop(mrbc_value *ary)
{
 8002668:	b490      	push	{r4, r7}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61fb      	str	r3, [r7, #28]

  if( h->n_stored <= 0 ) return mrbc_nil_value();
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	88db      	ldrh	r3, [r3, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <mrbc_array_pop+0x2e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	461a      	mov	r2, r3
 8002684:	2300      	movs	r3, #0
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	6053      	str	r3, [r2, #4]
 800268a:	6093      	str	r3, [r2, #8]
 800268c:	60d3      	str	r3, [r2, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
  return h->data[--h->n_stored];
}
 8002694:	e010      	b.n	80026b8 <mrbc_array_pop+0x50>
  return h->data[--h->n_stored];
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	88db      	ldrh	r3, [r3, #6]
 800269e:	3b01      	subs	r3, #1
 80026a0:	b299      	uxth	r1, r3
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	80d9      	strh	r1, [r3, #6]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	88db      	ldrh	r3, [r3, #6]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4614      	mov	r4, r2
 80026b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc90      	pop	{r4, r7}
 80026c0:	4770      	bx	lr

080026c2 <mrbc_array_unshift>:
  @param  ary		pointer to target value
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_unshift(mrbc_value *ary, mrbc_value *set_val)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  return mrbc_array_insert(ary, 0, set_val);
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	2100      	movs	r1, #0
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f840 	bl	8002756 <mrbc_array_insert>
 80026d6:	4603      	mov	r3, r0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <mrbc_array_shift>:

  @param  ary		pointer to target value
  @return		first data or Nil
*/
mrbc_value mrbc_array_shift(mrbc_value *ary)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b08d      	sub	sp, #52	; 0x34
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  mrbc_array *h = ary->array;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if( h->n_stored <= 0 ) return mrbc_nil_value();
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	88db      	ldrh	r3, [r3, #6]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <mrbc_array_shift+0x2e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	6053      	str	r3, [r2, #4]
 8002702:	6093      	str	r3, [r2, #8]
 8002704:	60d3      	str	r3, [r2, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]

  mrbc_value ret = h->data[0];
  memmove(h->data, h->data+1, sizeof(mrbc_value) * --h->n_stored);

  return ret;
}
 800270c:	e01f      	b.n	800274e <mrbc_array_shift+0x6e>
  mrbc_value ret = h->data[0];
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f107 0418 	add.w	r4, r7, #24
 8002716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memmove(h->data, h->data+1, sizeof(mrbc_value) * --h->n_stored);
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	6898      	ldr	r0, [r3, #8]
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f103 0110 	add.w	r1, r3, #16
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	88db      	ldrh	r3, [r3, #6]
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	80da      	strh	r2, [r3, #6]
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	88db      	ldrh	r3, [r3, #6]
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	461a      	mov	r2, r3
 800273c:	f013 ff4f 	bl	80165de <memmove>
  return ret;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	461c      	mov	r4, r3
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	3734      	adds	r7, #52	; 0x34
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}

08002756 <mrbc_array_insert>:
  @param  idx		index
  @param  set_val	set value
  @return		mrbc_error_code
*/
int mrbc_array_insert(mrbc_value *ary, int idx, mrbc_value *set_val)
{
 8002756:	b590      	push	{r4, r7, lr}
 8002758:	b08d      	sub	sp, #52	; 0x34
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	627b      	str	r3, [r7, #36]	; 0x24

  if( idx < 0 ) {
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	da0b      	bge.n	8002786 <mrbc_array_insert+0x30>
    idx = h->n_stored + idx + 1;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	88db      	ldrh	r3, [r3, #6]
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4413      	add	r3, r2
 8002778:	3301      	adds	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
    if( idx < 0 ) return E_INDEX_ERROR;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da01      	bge.n	8002786 <mrbc_array_insert+0x30>
 8002782:	2305      	movs	r3, #5
 8002784:	e071      	b.n	800286a <mrbc_array_insert+0x114>
  }

  // need resize?
  int size = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( idx >= h->data_size ) {
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	889b      	ldrh	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4293      	cmp	r3, r2
 8002794:	db03      	blt.n	800279e <mrbc_array_insert+0x48>
    size = idx + 1;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3301      	adds	r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279c:	e009      	b.n	80027b2 <mrbc_array_insert+0x5c>
  } else if( h->n_stored >= h->data_size ) {
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	88da      	ldrh	r2, [r3, #6]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	889b      	ldrh	r3, [r3, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d303      	bcc.n	80027b2 <mrbc_array_insert+0x5c>
    size = h->data_size + 1;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	889b      	ldrh	r3, [r3, #4]
 80027ae:	3301      	adds	r3, #1
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  if( size && mrbc_array_resize(ary, size) != 0 ) {
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <mrbc_array_insert+0x74>
 80027b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fe2e 	bl	800241c <mrbc_array_resize>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <mrbc_array_insert+0x74>
    return E_NOMEMORY_ERROR;			// ENOMEM
 80027c6:	2301      	movs	r3, #1
 80027c8:	e04f      	b.n	800286a <mrbc_array_insert+0x114>
  }

  // move datas.
  if( idx < h->n_stored ) {
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	88db      	ldrh	r3, [r3, #6]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	da13      	bge.n	80027fe <mrbc_array_insert+0xa8>
    memmove(h->data + idx + 1, h->data + idx,
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3301      	adds	r3, #1
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	18d0      	adds	r0, r2, r3
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	18d1      	adds	r1, r2, r3
	    sizeof(mrbc_value) * (h->n_stored - idx));
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	88db      	ldrh	r3, [r3, #6]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
    memmove(h->data + idx + 1, h->data + idx,
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	461a      	mov	r2, r3
 80027fa:	f013 fef0 	bl	80165de <memmove>
  }

  // set data
  h->data[idx] = *set_val;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	441a      	add	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4614      	mov	r4, r2
 800280c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800280e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  h->n_stored++;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	88db      	ldrh	r3, [r3, #6]
 8002816:	3301      	adds	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	80da      	strh	r2, [r3, #6]

  // clear empty cells if need.
  if( idx >= h->n_stored ) {
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	88db      	ldrh	r3, [r3, #6]
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4293      	cmp	r3, r2
 8002828:	db1e      	blt.n	8002868 <mrbc_array_insert+0x112>
    int i;
    for( i = h->n_stored-1; i < idx; i++ ) {
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	88db      	ldrh	r3, [r3, #6]
 800282e:	3b01      	subs	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	e00f      	b.n	8002854 <mrbc_array_insert+0xfe>
      h->data[i] = mrbc_nil_value();
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	18d1      	adds	r1, r2, r3
 800283e:	460a      	mov	r2, r1
 8002840:	2300      	movs	r3, #0
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	6053      	str	r3, [r2, #4]
 8002846:	6093      	str	r3, [r2, #8]
 8002848:	60d3      	str	r3, [r2, #12]
 800284a:	2301      	movs	r3, #1
 800284c:	700b      	strb	r3, [r1, #0]
    for( i = h->n_stored-1; i < idx; i++ ) {
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	3301      	adds	r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
 8002854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	dbeb      	blt.n	8002834 <mrbc_array_insert+0xde>
    }
    h->n_stored = idx + 1;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	b29b      	uxth	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	80da      	strh	r2, [r3, #6]
  }

  return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3734      	adds	r7, #52	; 0x34
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}

08002872 <mrbc_array_remove>:
  @param  ary		pointer to target value
  @param  idx		index
  @return		mrbc_value data at index position or Nil.
*/
mrbc_value mrbc_array_remove(mrbc_value *ary, int idx)
{
 8002872:	b590      	push	{r4, r7, lr}
 8002874:	b08f      	sub	sp, #60	; 0x3c
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	637b      	str	r3, [r7, #52]	; 0x34

  if( idx < 0 ) idx = h->n_stored + idx;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	da05      	bge.n	8002896 <mrbc_array_remove+0x24>
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	88db      	ldrh	r3, [r3, #6]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	607b      	str	r3, [r7, #4]
  if( idx < 0 || idx >= h->n_stored ) return mrbc_nil_value();
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db05      	blt.n	80028a8 <mrbc_array_remove+0x36>
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289e:	88db      	ldrh	r3, [r3, #6]
 80028a0:	461a      	mov	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4293      	cmp	r3, r2
 80028a6:	db0a      	blt.n	80028be <mrbc_array_remove+0x4c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	461a      	mov	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	6053      	str	r3, [r2, #4]
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	60d3      	str	r3, [r2, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
    memmove(h->data + idx, h->data + idx + 1,
	    sizeof(mrbc_value) * (h->n_stored - idx));
  }

  return val;
}
 80028bc:	e030      	b.n	8002920 <mrbc_array_remove+0xae>
  mrbc_value val = h->data[idx];
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	f107 0420 	add.w	r4, r7, #32
 80028cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  h->n_stored--;
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	88db      	ldrh	r3, [r3, #6]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	80da      	strh	r2, [r3, #6]
  if( idx < h->n_stored ) {
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	88db      	ldrh	r3, [r3, #6]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4293      	cmp	r3, r2
 80028e8:	da13      	bge.n	8002912 <mrbc_array_remove+0xa0>
    memmove(h->data + idx, h->data + idx + 1,
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	18d0      	adds	r0, r2, r3
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3301      	adds	r3, #1
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	18d1      	adds	r1, r2, r3
	    sizeof(mrbc_value) * (h->n_stored - idx));
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	88db      	ldrh	r3, [r3, #6]
 8002904:	461a      	mov	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1ad3      	subs	r3, r2, r3
    memmove(h->data + idx, h->data + idx + 1,
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	461a      	mov	r2, r3
 800290e:	f013 fe66 	bl	80165de <memmove>
  return val;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	461c      	mov	r4, r3
 8002916:	f107 0320 	add.w	r3, r7, #32
 800291a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800291c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	373c      	adds	r7, #60	; 0x3c
 8002924:	46bd      	mov	sp, r7
 8002926:	bd90      	pop	{r4, r7, pc}

08002928 <mrbc_array_clear>:
/*! clear all

  @param  ary		pointer to target value
*/
void mrbc_array_clear(mrbc_value *ary)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	613b      	str	r3, [r7, #16]

  mrbc_value *p1 = h->data;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	617b      	str	r3, [r7, #20]
  const mrbc_value *p2 = p1 + h->n_stored;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	88db      	ldrh	r3, [r3, #6]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4413      	add	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 8002948:	e006      	b.n	8002958 <mrbc_array_clear+0x30>
    mrbc_decref(p1++);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f103 0210 	add.w	r2, r3, #16
 8002950:	617a      	str	r2, [r7, #20]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fc4e 	bl	80021f4 <mrbc_decref>
  while( p1 < p2 ) {
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d3f4      	bcc.n	800294a <mrbc_array_clear+0x22>
  }

  h->n_stored = 0;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2200      	movs	r2, #0
 8002964:	80da      	strh	r2, [r3, #6]
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <mrbc_array_compare>:
  @retval 0	v1 == v2
  @retval plus	v1 >  v2
  @retval minus	v1 <  v2
*/
int mrbc_array_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 800296e:	b590      	push	{r4, r7, lr}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  int i;
  for( i = 0; ; i++ ) {
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
    if( i >= mrbc_array_size(v1) || i >= mrbc_array_size(v2) ) {
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fcb8 	bl	80022f2 <mrbc_array_size>
 8002982:	4602      	mov	r2, r0
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4293      	cmp	r3, r2
 8002988:	da06      	bge.n	8002998 <mrbc_array_compare+0x2a>
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f7ff fcb1 	bl	80022f2 <mrbc_array_size>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4293      	cmp	r3, r2
 8002996:	db09      	blt.n	80029ac <mrbc_array_compare+0x3e>
      return mrbc_array_size(v1) - mrbc_array_size(v2);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fcaa 	bl	80022f2 <mrbc_array_size>
 800299e:	4604      	mov	r4, r0
 80029a0:	6838      	ldr	r0, [r7, #0]
 80029a2:	f7ff fca6 	bl	80022f2 <mrbc_array_size>
 80029a6:	4603      	mov	r3, r0
 80029a8:	1ae3      	subs	r3, r4, r3
 80029aa:	e018      	b.n	80029de <mrbc_array_compare+0x70>
    }

    int res = mrbc_compare( &v1->array->data[i], &v2->array->data[i] );
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	18d0      	adds	r0, r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f00b fb37 	bl	800e038 <mrbc_compare>
 80029ca:	60b8      	str	r0, [r7, #8]
    if( res != 0 ) return res;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <mrbc_array_compare+0x68>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	e003      	b.n	80029de <mrbc_array_compare+0x70>
  for( i = 0; ; i++ ) {
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e7ce      	b.n	800297c <mrbc_array_compare+0xe>
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}

080029e6 <mrbc_array_minmax>:
  @param  ary		pointer to target value
  @param  pp_min_value	returns minimum mrbc_value
  @param  pp_max_value	returns maxmum mrbc_value
*/
void mrbc_array_minmax(mrbc_value *ary, mrbc_value **pp_min_value, mrbc_value **pp_max_value)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b088      	sub	sp, #32
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
  mrbc_array *h = ary->array;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	613b      	str	r3, [r7, #16]

  if( h->n_stored == 0 ) {
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	88db      	ldrh	r3, [r3, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <mrbc_array_minmax+0x28>
    *pp_min_value = NULL;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    *pp_max_value = NULL;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    return;
 8002a0c:	e03b      	b.n	8002a86 <mrbc_array_minmax+0xa0>
  }

  mrbc_value *p_min_value = h->data;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	61fb      	str	r3, [r7, #28]
  mrbc_value *p_max_value = h->data;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	61bb      	str	r3, [r7, #24]

  int i;
  for( i = 1; i < h->n_stored; i++ ) {
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e026      	b.n	8002a6e <mrbc_array_minmax+0x88>
    if( mrbc_compare( &h->data[i], p_min_value ) < 0 ) {
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	69f9      	ldr	r1, [r7, #28]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00b fb03 	bl	800e038 <mrbc_compare>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da05      	bge.n	8002a44 <mrbc_array_minmax+0x5e>
      p_min_value = &h->data[i];
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
    }
    if( mrbc_compare( &h->data[i], p_max_value ) > 0 ) {
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	4413      	add	r3, r2
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00b faf1 	bl	800e038 <mrbc_compare>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	dd05      	ble.n	8002a68 <mrbc_array_minmax+0x82>
      p_max_value = &h->data[i];
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4413      	add	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
  for( i = 1; i < h->n_stored; i++ ) {
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	88db      	ldrh	r3, [r3, #6]
 8002a72:	461a      	mov	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4293      	cmp	r3, r2
 8002a78:	dbd2      	blt.n	8002a20 <mrbc_array_minmax+0x3a>
    }
  }

  *pp_min_value = p_min_value;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	601a      	str	r2, [r3, #0]
  *pp_max_value = p_max_value;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <mrbc_array_dup>:
  @param  vm	pointer to VM.
  @param  ary	source
  @return	result
*/
mrbc_value mrbc_array_dup(struct VM *vm, const mrbc_value *ary)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b08d      	sub	sp, #52	; 0x34
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  mrbc_array *sh = ary->array;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  mrbc_value dv = mrbc_array_new(vm, sh->n_stored);
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	88db      	ldrh	r3, [r3, #6]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc41 	bl	8002332 <mrbc_array_new>
  if( dv.array == NULL ) return dv;		// ENOMEM
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <mrbc_array_dup+0x3a>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	461c      	mov	r4, r3
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ac4:	e029      	b.n	8002b1a <mrbc_array_dup+0x8e>

  memcpy( dv.array->data, sh->data, sizeof(mrbc_value) * sh->n_stored );
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6898      	ldr	r0, [r3, #8]
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	88db      	ldrh	r3, [r3, #6]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f013 fe36 	bl	8016746 <memcpy>
  dv.array->n_stored = sh->n_stored;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ade:	88d2      	ldrh	r2, [r2, #6]
 8002ae0:	80da      	strh	r2, [r3, #6]

  mrbc_value *p1 = dv.array->data;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const mrbc_value *p2 = p1 + dv.array->n_stored;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	88db      	ldrh	r3, [r3, #6]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af0:	4413      	add	r3, r2
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  while( p1 < p2 ) {
 8002af4:	e006      	b.n	8002b04 <mrbc_array_dup+0x78>
    mrbc_incref(p1++);
 8002af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af8:	f103 0210 	add.w	r2, r3, #16
 8002afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fb44 	bl	800218c <mrbc_incref>
  while( p1 < p2 ) {
 8002b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3f4      	bcc.n	8002af6 <mrbc_array_dup+0x6a>
  }

  return dv;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	461c      	mov	r4, r3
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	3734      	adds	r7, #52	; 0x34
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd90      	pop	{r4, r7, pc}

08002b22 <mrbc_array_divide>:
    src = [0,1,2,3]
    ret = divide(src, 2)
    src = [0,1], ret = [2,3]
*/
mrbc_value mrbc_array_divide(struct VM *vm, mrbc_value *src, int pos)
{
 8002b22:	b590      	push	{r4, r7, lr}
 8002b24:	b08d      	sub	sp, #52	; 0x34
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
  mrbc_array *ha_s = src->array;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
  if( pos < 0 ) pos = 0;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da01      	bge.n	8002b40 <mrbc_array_divide+0x1e>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	603b      	str	r3, [r7, #0]
  int new_size = ha_s->n_stored - pos;
 8002b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b42:	88db      	ldrh	r3, [r3, #6]
 8002b44:	461a      	mov	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( new_size < 0 ) new_size = 0;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	da01      	bge.n	8002b56 <mrbc_array_divide+0x34>
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  int remain_size = ha_s->n_stored - new_size;
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	88db      	ldrh	r3, [r3, #6]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_value ret = mrbc_array_new(vm, new_size);
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fbe1 	bl	8002332 <mrbc_array_new>
  if( ret.array == NULL ) return ret;		// ENOMEM
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d107      	bne.n	8002b86 <mrbc_array_divide+0x64>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	461c      	mov	r4, r3
 8002b7a:	f107 0310 	add.w	r3, r7, #16
 8002b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b84:	e020      	b.n	8002bc8 <mrbc_array_divide+0xa6>
  mrbc_array *ha_r = ret.array;
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	623b      	str	r3, [r7, #32]

  memcpy( ha_r->data, ha_s->data + remain_size, sizeof(mrbc_value) * new_size );
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	6898      	ldr	r0, [r3, #8]
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	18d1      	adds	r1, r2, r3
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f013 fdd2 	bl	8016746 <memcpy>
  ha_s->n_stored = remain_size;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	80da      	strh	r2, [r3, #6]
  mrbc_array_resize( src, remain_size );
 8002baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fc35 	bl	800241c <mrbc_array_resize>
  ha_r->n_stored = new_size;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	80da      	strh	r2, [r3, #6]

  return ret;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	461c      	mov	r4, r3
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	3734      	adds	r7, #52	; 0x34
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}

08002bd0 <mrbc_array_include>:
  @param  ary     source
  @param  val     object if it is included
  @return         0 if not included. 1 or greater if included
*/
int mrbc_array_include(const mrbc_value *ary, const mrbc_value *val)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  int n = ary->array->n_stored;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	88db      	ldrh	r3, [r3, #6]
 8002be0:	60bb      	str	r3, [r7, #8]
  int i;
  for (i = 0; i < n; i++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e00f      	b.n	8002c08 <mrbc_array_include+0x38>
    if (mrbc_compare(&ary->array->data[i], val) == 0) break;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4413      	add	r3, r2
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f00b fa1e 	bl	800e038 <mrbc_compare>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <mrbc_array_include+0x42>
  for (i = 0; i < n; i++) {
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbeb      	blt.n	8002be8 <mrbc_array_include+0x18>
 8002c10:	e000      	b.n	8002c14 <mrbc_array_include+0x44>
    if (mrbc_compare(&ary->array->data[i], val) == 0) break;
 8002c12:	bf00      	nop
  }
  return (n - i);
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <c_array_new>:

//================================================================
/*! method new
*/
static void c_array_new(struct VM *vm, mrbc_value v[], int argc)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b0a5      	sub	sp, #148	; 0x94
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  /*
    in case of new()
  */
  if( argc == 0 ) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11c      	bne.n	8002c70 <c_array_new+0x4c>
    mrbc_value ret = mrbc_array_new(vm, 0);
 8002c36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fb77 	bl	8002332 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 8002c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80ae 	beq.w	8002da8 <c_array_new+0x184>

    SET_RETURN(ret);
 8002c4c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002c50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	f7ff faca 	bl	80021f4 <mrbc_decref>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	461c      	mov	r4, r3
 8002c64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002c6e:	e0a0      	b.n	8002db2 <c_array_new+0x18e>
  }

  /*
    in case of new(num)
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_integer(v[1]) >= 0 ) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d144      	bne.n	8002d00 <c_array_new+0xdc>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3310      	adds	r3, #16
 8002c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d13e      	bne.n	8002d00 <c_array_new+0xdc>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3310      	adds	r3, #16
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db39      	blt.n	8002d00 <c_array_new+0xdc>
    int num = mrbc_integer(v[1]);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    mrbc_value ret = mrbc_array_new(vm, num);
 8002c96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fb46 	bl	8002332 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d07f      	beq.n	8002dac <c_array_new+0x188>

    if( num > 0 ) {
 8002cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd13      	ble.n	8002cdc <c_array_new+0xb8>
      mrbc_array_set(&ret, num - 1, &mrbc_nil_value());
 8002cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002cce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fbc2 	bl	8002460 <mrbc_array_set>
    }
    SET_RETURN(ret);
 8002cdc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002ce0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002cea:	68b8      	ldr	r0, [r7, #8]
 8002cec:	f7ff fa82 	bl	80021f4 <mrbc_decref>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	461c      	mov	r4, r3
 8002cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002cfe:	e058      	b.n	8002db2 <c_array_new+0x18e>
  }

  /*
    in case of new(num, value)
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_integer(v[1]) >= 0 ) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d14a      	bne.n	8002d9c <c_array_new+0x178>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3310      	adds	r3, #16
 8002d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d144      	bne.n	8002d9c <c_array_new+0x178>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3310      	adds	r3, #16
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db3f      	blt.n	8002d9c <c_array_new+0x178>
    int num = mrbc_integer(v[1]);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3310      	adds	r3, #16
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    mrbc_value ret = mrbc_array_new(vm, num);
 8002d26:	f107 0320 	add.w	r3, r7, #32
 8002d2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fafe 	bl	8002332 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d039      	beq.n	8002db0 <c_array_new+0x18c>

    int i;
    for( i = 0; i < num; i++ ) {
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d42:	e013      	b.n	8002d6c <c_array_new+0x148>
      mrbc_incref(&v[2]);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	3320      	adds	r3, #32
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fa1f 	bl	800218c <mrbc_incref>
      mrbc_array_set(&ret, i, &v[2]);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f103 0220 	add.w	r2, r3, #32
 8002d54:	f107 0320 	add.w	r3, r7, #32
 8002d58:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fb7f 	bl	8002460 <mrbc_array_set>
    for( i = 0; i < num; i++ ) {
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d66:	3301      	adds	r3, #1
 8002d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d6c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbe5      	blt.n	8002d44 <c_array_new+0x120>
    }
    SET_RETURN(ret);
 8002d78:	f107 0410 	add.w	r4, r7, #16
 8002d7c:	f107 0320 	add.w	r3, r7, #32
 8002d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d86:	68b8      	ldr	r0, [r7, #8]
 8002d88:	f7ff fa34 	bl	80021f4 <mrbc_decref>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	461c      	mov	r4, r3
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002d9a:	e00a      	b.n	8002db2 <c_array_new+0x18e>
  }

  /*
    other case
  */
  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4906      	ldr	r1, [pc, #24]	; (8002db8 <c_array_new+0x194>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f008 fb2f 	bl	800b404 <mrbc_raise>
 8002da6:	e004      	b.n	8002db2 <c_array_new+0x18e>
    if( ret.array == NULL ) return;		// ENOMEM
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <c_array_new+0x18e>
    if( ret.array == NULL ) return;		// ENOMEM
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <c_array_new+0x18e>
    if( ret.array == NULL ) return;		// ENOMEM
 8002db0:	bf00      	nop
}
 8002db2:	3794      	adds	r7, #148	; 0x94
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd90      	pop	{r4, r7, pc}
 8002db8:	20000154 	.word	0x20000154

08002dbc <c_array_add>:

//================================================================
/*! (operator) +
*/
static void c_array_add(struct VM *vm, mrbc_value v[], int argc)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b091      	sub	sp, #68	; 0x44
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_ARRAY ) {
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3310      	adds	r3, #16
 8002dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002dd0:	2b0a      	cmp	r3, #10
 8002dd2:	d005      	beq.n	8002de0 <c_array_add+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), 0 );
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4935      	ldr	r1, [pc, #212]	; (8002eac <c_array_add+0xf0>)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f008 fb13 	bl	800b404 <mrbc_raise>
    return;
 8002dde:	e062      	b.n	8002ea6 <c_array_add+0xea>
  }

  mrbc_array *h1 = v[0].array;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
  mrbc_array *h2 = v[1].array;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3310      	adds	r3, #16
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34

  mrbc_value value = mrbc_array_new(vm, h1->n_stored + h2->n_stored);
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	88db      	ldrh	r3, [r3, #6]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	88db      	ldrh	r3, [r3, #6]
 8002df8:	441a      	add	r2, r3
 8002dfa:	f107 0320 	add.w	r3, r7, #32
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fa96 	bl	8002332 <mrbc_array_new>
  if( value.array == NULL ) return;		// ENOMEM
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d04b      	beq.n	8002ea4 <c_array_add+0xe8>

  memcpy( value.array->data,                h1->data,
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	6899      	ldr	r1, [r3, #8]
	  sizeof(mrbc_value) * h1->n_stored );
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	88db      	ldrh	r3, [r3, #6]
  memcpy( value.array->data,                h1->data,
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f013 fc93 	bl	8016746 <memcpy>
  memcpy( value.array->data + h1->n_stored, h2->data,
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	88db      	ldrh	r3, [r3, #6]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	18d0      	adds	r0, r2, r3
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	6899      	ldr	r1, [r3, #8]
	  sizeof(mrbc_value) * h2->n_stored );
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	88db      	ldrh	r3, [r3, #6]
  memcpy( value.array->data + h1->n_stored, h2->data,
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	461a      	mov	r2, r3
 8002e38:	f013 fc85 	bl	8016746 <memcpy>
  value.array->n_stored = h1->n_stored + h2->n_stored;
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	88d9      	ldrh	r1, [r3, #6]
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	88da      	ldrh	r2, [r3, #6]
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	440a      	add	r2, r1
 8002e48:	b292      	uxth	r2, r2
 8002e4a:	80da      	strh	r2, [r3, #6]

  mrbc_value *p1 = value.array->data;
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  const mrbc_value *p2 = p1 + value.array->n_stored;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	88db      	ldrh	r3, [r3, #6]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5a:	4413      	add	r3, r2
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
  while( p1 < p2 ) {
 8002e5e:	e006      	b.n	8002e6e <c_array_add+0xb2>
    mrbc_incref(p1++);
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	f103 0210 	add.w	r2, r3, #16
 8002e66:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f98f 	bl	800218c <mrbc_incref>
  while( p1 < p2 ) {
 8002e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d3f4      	bcc.n	8002e60 <c_array_add+0xa4>
  }

  mrbc_decref_empty(v+1);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	3310      	adds	r3, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fa00 	bl	8002280 <mrbc_decref_empty>
  SET_RETURN(value);
 8002e80:	f107 0410 	add.w	r4, r7, #16
 8002e84:	f107 0320 	add.w	r3, r7, #32
 8002e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f7ff f9b0 	bl	80021f4 <mrbc_decref>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	461c      	mov	r4, r3
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ea2:	e000      	b.n	8002ea6 <c_array_add+0xea>
  if( value.array == NULL ) return;		// ENOMEM
 8002ea4:	bf00      	nop
}
 8002ea6:	3744      	adds	r7, #68	; 0x44
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	200001b4 	.word	0x200001b4

08002eb0 <c_array_get>:

//================================================================
/*! (operator) []
*/
static void c_array_get(struct VM *vm, mrbc_value v[], int argc)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b0a7      	sub	sp, #156	; 0x9c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /*
    in case of Array[...] -> Array
  */
  if( mrbc_type(v[0]) == MRBC_TT_CLASS ) {
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8002ec2:	2b07      	cmp	r3, #7
 8002ec4:	d13f      	bne.n	8002f46 <c_array_get+0x96>
    mrbc_value ret = mrbc_array_new(vm, argc);
 8002ec6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fa2f 	bl	8002332 <mrbc_array_new>
    if( ret.array == NULL ) return;	// ENOMEM
 8002ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80ec 	beq.w	80030b4 <c_array_get+0x204>

    memcpy( ret.array->data, &v[1], sizeof(mrbc_value) * argc );
 8002edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ede:	6898      	ldr	r0, [r3, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f103 0110 	add.w	r1, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	461a      	mov	r2, r3
 8002eec:	f013 fc2b 	bl	8016746 <memcpy>
    int i;
    for( i = 1; i <= argc; i++ ) {
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ef6:	e00b      	b.n	8002f10 <c_array_get+0x60>
      mrbc_type(v[i]) = MRBC_TT_EMPTY;
 8002ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4413      	add	r3, r2
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= argc; i++ ) {
 8002f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	ddee      	ble.n	8002ef8 <c_array_get+0x48>
    }
    ret.array->n_stored = argc;
 8002f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	80da      	strh	r2, [r3, #6]

    SET_RETURN(ret);
 8002f22:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002f26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f7ff f95f 	bl	80021f4 <mrbc_decref>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	461c      	mov	r4, r3
 8002f3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8002f44:	e0b9      	b.n	80030ba <c_array_get+0x20a>
  }

  /*
    in case of self[nth] -> object | nil
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d125      	bne.n	8002f98 <c_array_get+0xe8>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3310      	adds	r3, #16
 8002f50:	f993 3000 	ldrsb.w	r3, [r3]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11f      	bne.n	8002f98 <c_array_get+0xe8>
    mrbc_value ret = mrbc_array_get(v, mrbc_integer(v[1]));
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	3310      	adds	r3, #16
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fadf 	bl	8002528 <mrbc_array_get>
    mrbc_incref(&ret);
 8002f6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f90c 	bl	800218c <mrbc_incref>
    SET_RETURN(ret);
 8002f74:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002f78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f7ff f936 	bl	80021f4 <mrbc_decref>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	461c      	mov	r4, r3
 8002f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f96:	e090      	b.n	80030ba <c_array_get+0x20a>
  }

  /*
    in case of self[start, length] -> Array | nil
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d17a      	bne.n	8003094 <c_array_get+0x1e4>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d174      	bne.n	8003094 <c_array_get+0x1e4>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3320      	adds	r3, #32
 8002fae:	f993 3000 	ldrsb.w	r3, [r3]
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d16e      	bne.n	8003094 <c_array_get+0x1e4>
    int len = mrbc_array_size(&v[0]);
 8002fb6:	68b8      	ldr	r0, [r7, #8]
 8002fb8:	f7ff f99b 	bl	80022f2 <mrbc_array_size>
 8002fbc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    int idx = mrbc_integer(v[1]);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3310      	adds	r3, #16
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( idx < 0 ) idx += len;
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da06      	bge.n	8002fe0 <c_array_get+0x130>
 8002fd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fda:	4413      	add	r3, r2
 8002fdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if( idx < 0 ) goto RETURN_NIL;
 8002fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	db5b      	blt.n	80030a0 <c_array_get+0x1f0>

    int size = (mrbc_integer(v[2]) < (len - idx)) ? mrbc_integer(v[2]) : (len - idx);
 8002fe8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfa8      	it	ge
 8002ffc:	4613      	movge	r3, r2
 8002ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		// min( mrbc_integer(v[2]), (len - idx) )
    if( size < 0 ) goto RETURN_NIL;
 8003002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003006:	2b00      	cmp	r3, #0
 8003008:	db4c      	blt.n	80030a4 <c_array_get+0x1f4>

    mrbc_value ret = mrbc_array_new(vm, size);
 800300a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800300e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff f98c 	bl	8002332 <mrbc_array_new>
    if( ret.array == NULL ) return;		// ENOMEM
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04b      	beq.n	80030b8 <c_array_get+0x208>

    int i;
    for( i = 0; i < size; i++ ) {
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003026:	e01d      	b.n	8003064 <c_array_get+0x1b4>
      mrbc_value val = mrbc_array_get(v, mrbc_integer(v[1]) + i);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3310      	adds	r3, #16
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003032:	441a      	add	r2, r3
 8003034:	f107 0320 	add.w	r3, r7, #32
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fa74 	bl	8002528 <mrbc_array_get>
      mrbc_incref(&val);
 8003040:	f107 0320 	add.w	r3, r7, #32
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f8a1 	bl	800218c <mrbc_incref>
      mrbc_array_push(&ret, &val);
 800304a:	f107 0220 	add.w	r2, r7, #32
 800304e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fa9c 	bl	8002592 <mrbc_array_push>
    for( i = 0; i < size; i++ ) {
 800305a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800305e:	3301      	adds	r3, #1
 8003060:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003064:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800306c:	429a      	cmp	r2, r3
 800306e:	dbdb      	blt.n	8003028 <c_array_get+0x178>
    }

    SET_RETURN(ret);
 8003070:	f107 0410 	add.w	r4, r7, #16
 8003074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800307a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800307e:	68b8      	ldr	r0, [r7, #8]
 8003080:	f7ff f8b8 	bl	80021f4 <mrbc_decref>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	461c      	mov	r4, r3
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800308e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8003092:	e012      	b.n	80030ba <c_array_get+0x20a>
  }

  /*
    other case
  */
  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8003094:	2200      	movs	r2, #0
 8003096:	490a      	ldr	r1, [pc, #40]	; (80030c0 <c_array_get+0x210>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f008 f9b3 	bl	800b404 <mrbc_raise>
  return;
 800309e:	e00c      	b.n	80030ba <c_array_get+0x20a>
    if( idx < 0 ) goto RETURN_NIL;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <c_array_get+0x1f6>
    if( size < 0 ) goto RETURN_NIL;
 80030a4:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 80030a6:	68b8      	ldr	r0, [r7, #8]
 80030a8:	f7ff f8a4 	bl	80021f4 <mrbc_decref>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e002      	b.n	80030ba <c_array_get+0x20a>
    if( ret.array == NULL ) return;	// ENOMEM
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <c_array_get+0x20a>
    if( ret.array == NULL ) return;		// ENOMEM
 80030b8:	bf00      	nop
}
 80030ba:	379c      	adds	r7, #156	; 0x9c
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd90      	pop	{r4, r7, pc}
 80030c0:	20000154 	.word	0x20000154

080030c4 <c_array_set>:

//================================================================
/*! (operator) []=
*/
static void c_array_set(struct VM *vm, mrbc_value v[], int argc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b090      	sub	sp, #64	; 0x40
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  /*
    in case of self[nth] = val
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d11b      	bne.n	800310e <c_array_set+0x4a>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3310      	adds	r3, #16
 80030da:	f993 3000 	ldrsb.w	r3, [r3]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d115      	bne.n	800310e <c_array_set+0x4a>
    if( mrbc_array_set(v, mrbc_integer(v[1]), &v[2]) != 0 ) {
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3310      	adds	r3, #16
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3320      	adds	r3, #32
 80030ec:	461a      	mov	r2, r3
 80030ee:	68b8      	ldr	r0, [r7, #8]
 80030f0:	f7ff f9b6 	bl	8002460 <mrbc_array_set>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <c_array_set+0x40>
      mrbc_raise( vm, MRBC_CLASS(IndexError), "too small for array");
 80030fa:	4a60      	ldr	r2, [pc, #384]	; (800327c <c_array_set+0x1b8>)
 80030fc:	4960      	ldr	r1, [pc, #384]	; (8003280 <c_array_set+0x1bc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f008 f980 	bl	800b404 <mrbc_raise>
    }
    mrbc_type(v[2]) = MRBC_TT_EMPTY;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3320      	adds	r3, #32
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
    return;
 800310c:	e0b2      	b.n	8003274 <c_array_set+0x1b0>
  }

  /*
    in case of self[start, length] = val
  */
  if( argc == 3 && mrbc_type(v[1]) == MRBC_TT_INTEGER && mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b03      	cmp	r3, #3
 8003112:	f040 80aa 	bne.w	800326a <c_array_set+0x1a6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	3310      	adds	r3, #16
 800311a:	f993 3000 	ldrsb.w	r3, [r3]
 800311e:	2b04      	cmp	r3, #4
 8003120:	f040 80a3 	bne.w	800326a <c_array_set+0x1a6>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	3320      	adds	r3, #32
 8003128:	f993 3000 	ldrsb.w	r3, [r3]
 800312c:	2b04      	cmp	r3, #4
 800312e:	f040 809c 	bne.w	800326a <c_array_set+0x1a6>
    int pos = mrbc_integer(v[1]);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3310      	adds	r3, #16
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
    int len = mrbc_integer(v[2]);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3320      	adds	r3, #32
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38

    if( pos < 0 ) {
 8003142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003144:	2b00      	cmp	r3, #0
 8003146:	da02      	bge.n	800314e <c_array_set+0x8a>
      pos = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	e019      	b.n	8003182 <c_array_set+0xbe>
    } else if( pos > v[0].array->n_stored ) {
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	88db      	ldrh	r3, [r3, #6]
 8003154:	461a      	mov	r2, r3
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	4293      	cmp	r3, r2
 800315a:	dd12      	ble.n	8003182 <c_array_set+0xbe>
      mrbc_array_set( &v[0], pos-1, &mrbc_nil_value() );
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	1e59      	subs	r1, r3, #1
 8003160:	f107 0310 	add.w	r3, r7, #16
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	2301      	movs	r3, #1
 8003170:	743b      	strb	r3, [r7, #16]
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	461a      	mov	r2, r3
 8003178:	68b8      	ldr	r0, [r7, #8]
 800317a:	f7ff f971 	bl	8002460 <mrbc_array_set>
      len = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if( len < 0 ) len = 0;
 8003182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003184:	2b00      	cmp	r3, #0
 8003186:	da01      	bge.n	800318c <c_array_set+0xc8>
 8003188:	2300      	movs	r3, #0
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
    if( pos+len > v[0].array->n_stored ) {
 800318c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	4413      	add	r3, r2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	6892      	ldr	r2, [r2, #8]
 8003196:	88d2      	ldrh	r2, [r2, #6]
 8003198:	4293      	cmp	r3, r2
 800319a:	dd06      	ble.n	80031aa <c_array_set+0xe6>
      len = v[0].array->n_stored - pos;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	88db      	ldrh	r3, [r3, #6]
 80031a2:	461a      	mov	r2, r3
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    // split 2 part
    mrbc_value v1 = mrbc_array_divide(vm, &v[0], pos+len);
 80031aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	4413      	add	r3, r2
 80031b0:	f107 0020 	add.w	r0, r7, #32
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	f7ff fcb3 	bl	8002b22 <mrbc_array_divide>
    mrbc_array *ha0 = v[0].array;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30

    // delete data from tail.
    int i;
    for( i = 0; i < len; i++ ) {
 80031c2:	2300      	movs	r3, #0
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
 80031c6:	e011      	b.n	80031ec <c_array_set+0x128>
      mrbc_decref( &ha0->data[--ha0->n_stored] );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	88db      	ldrh	r3, [r3, #6]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b299      	uxth	r1, r3
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	80d9      	strh	r1, [r3, #6]
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	88db      	ldrh	r3, [r3, #6]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f807 	bl	80021f4 <mrbc_decref>
    for( i = 0; i < len; i++ ) {
 80031e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e8:	3301      	adds	r3, #1
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
 80031ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dbe9      	blt.n	80031c8 <c_array_set+0x104>
    }

    // append data
    if( v[3].tt == MRBC_TT_ARRAY ) {
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3330      	adds	r3, #48	; 0x30
 80031f8:	f993 3000 	ldrsb.w	r3, [r3]
 80031fc:	2b0a      	cmp	r3, #10
 80031fe:	d11e      	bne.n	800323e <c_array_set+0x17a>
      mrbc_array_push_m(&v[0], &v[3]);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3330      	adds	r3, #48	; 0x30
 8003204:	4619      	mov	r1, r3
 8003206:	68b8      	ldr	r0, [r7, #8]
 8003208:	f7ff f9f2 	bl	80025f0 <mrbc_array_push_m>
      for( i = 0; i < v[3].array->n_stored; i++ ) {
 800320c:	2300      	movs	r3, #0
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
 8003210:	e00c      	b.n	800322c <c_array_set+0x168>
	mrbc_incref( &v[3].array->data[i] );
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3330      	adds	r3, #48	; 0x30
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe ffb3 	bl	800218c <mrbc_incref>
      for( i = 0; i < v[3].array->n_stored; i++ ) {
 8003226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003228:	3301      	adds	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	3330      	adds	r3, #48	; 0x30
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	88db      	ldrh	r3, [r3, #6]
 8003234:	461a      	mov	r2, r3
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	4293      	cmp	r3, r2
 800323a:	dbea      	blt.n	8003212 <c_array_set+0x14e>
 800323c:	e009      	b.n	8003252 <c_array_set+0x18e>
      }
    } else {
      mrbc_array_push(&v[0], &v[3]);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3330      	adds	r3, #48	; 0x30
 8003242:	4619      	mov	r1, r3
 8003244:	68b8      	ldr	r0, [r7, #8]
 8003246:	f7ff f9a4 	bl	8002592 <mrbc_array_push>
      v[3].tt = MRBC_TT_EMPTY;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3330      	adds	r3, #48	; 0x30
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
    }

    mrbc_array_push_m(&v[0], &v1);
 8003252:	f107 0320 	add.w	r3, r7, #32
 8003256:	4619      	mov	r1, r3
 8003258:	68b8      	ldr	r0, [r7, #8]
 800325a:	f7ff f9c9 	bl	80025f0 <mrbc_array_push_m>
    mrbc_array_delete_handle( &v1 );
 800325e:	f107 0320 	add.w	r3, r7, #32
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f852 	bl	800230c <mrbc_array_delete_handle>
 8003268:	e004      	b.n	8003274 <c_array_set+0x1b0>
  }

  /*
    other case
  */
  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800326a:	2200      	movs	r2, #0
 800326c:	4905      	ldr	r1, [pc, #20]	; (8003284 <c_array_set+0x1c0>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f008 f8c8 	bl	800b404 <mrbc_raise>
}
 8003274:	3740      	adds	r7, #64	; 0x40
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	08018a1c 	.word	0x08018a1c
 8003280:	20000164 	.word	0x20000164
 8003284:	20000154 	.word	0x20000154

08003288 <c_array_clear>:

//================================================================
/*! (method) clear
*/
static void c_array_clear(struct VM *vm, mrbc_value v[], int argc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  mrbc_array_clear(v);
 8003294:	68b8      	ldr	r0, [r7, #8]
 8003296:	f7ff fb47 	bl	8002928 <mrbc_array_clear>
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <c_array_delete_at>:

//================================================================
/*! (method) delete_at
*/
static void c_array_delete_at(struct VM *vm, mrbc_value v[], int argc)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b08d      	sub	sp, #52	; 0x34
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d120      	bne.n	80032f8 <c_array_delete_at+0x54>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3310      	adds	r3, #16
 80032ba:	f993 3000 	ldrsb.w	r3, [r3]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d11a      	bne.n	80032f8 <c_array_delete_at+0x54>
    mrbc_value val = mrbc_array_remove(v, mrbc_integer(v[1]));
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3310      	adds	r3, #16
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	f107 0320 	add.w	r3, r7, #32
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff facf 	bl	8002872 <mrbc_array_remove>
    SET_RETURN(val);
 80032d4:	f107 0410 	add.w	r4, r7, #16
 80032d8:	f107 0320 	add.w	r3, r7, #32
 80032dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f7fe ff86 	bl	80021f4 <mrbc_decref>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	461c      	mov	r4, r3
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 80032f6:	e005      	b.n	8003304 <c_array_delete_at+0x60>
  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80032f8:	2200      	movs	r2, #0
 80032fa:	4904      	ldr	r1, [pc, #16]	; (800330c <c_array_delete_at+0x68>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f008 f881 	bl	800b404 <mrbc_raise>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	3734      	adds	r7, #52	; 0x34
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	20000154 	.word	0x20000154

08003310 <c_array_empty>:

//================================================================
/*! (method) empty?
*/
static void c_array_empty(struct VM *vm, mrbc_value v[], int argc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  int n = mrbc_array_size(v);
 800331c:	68b8      	ldr	r0, [r7, #8]
 800331e:	f7fe ffe8 	bl	80022f2 <mrbc_array_size>
 8003322:	6178      	str	r0, [r7, #20]

  if( n ) {
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <c_array_empty+0x28>
    SET_FALSE_RETURN();
 800332a:	68b8      	ldr	r0, [r7, #8]
 800332c:	f7fe ff62 	bl	80021f4 <mrbc_decref>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
  } else {
    SET_TRUE_RETURN();
  }
}
 8003336:	e005      	b.n	8003344 <c_array_empty+0x34>
    SET_TRUE_RETURN();
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f7fe ff5b 	bl	80021f4 <mrbc_decref>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2203      	movs	r2, #3
 8003342:	701a      	strb	r2, [r3, #0]
}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <c_array_size>:

//================================================================
/*! (method) size,length,count
*/
static void c_array_size(struct VM *vm, mrbc_value v[], int argc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  int n = mrbc_array_size(v);
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f7fe ffca 	bl	80022f2 <mrbc_array_size>
 800335e:	6178      	str	r0, [r7, #20]

  SET_INT_RETURN(n);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	68b8      	ldr	r0, [r7, #8]
 8003366:	f7fe ff45 	bl	80021f4 <mrbc_decref>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2204      	movs	r2, #4
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <c_array_include>:

//================================================================
/*! (method) include?
*/
static void c_array_include(struct VM *vm, mrbc_value v[], int argc)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN(0 < mrbc_array_include(&v[0], &v[1]));
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3310      	adds	r3, #16
 800338e:	4619      	mov	r1, r3
 8003390:	68b8      	ldr	r0, [r7, #8]
 8003392:	f7ff fc1d 	bl	8002bd0 <mrbc_array_include>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	dd01      	ble.n	80033a0 <c_array_include+0x22>
 800339c:	2303      	movs	r3, #3
 800339e:	e000      	b.n	80033a2 <c_array_include+0x24>
 80033a0:	2302      	movs	r3, #2
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f7fe ff25 	bl	80021f4 <mrbc_decref>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	b25a      	sxtb	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	701a      	strb	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <c_array_and>:

//================================================================
/*! (method) &
*/
static void c_array_and(struct VM *vm, mrbc_value v[], int argc)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b08f      	sub	sp, #60	; 0x3c
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  if (v[1].tt != MRBC_TT_ARRAY) {
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3310      	adds	r3, #16
 80033cc:	f993 3000 	ldrsb.w	r3, [r3]
 80033d0:	2b0a      	cmp	r3, #10
 80033d2:	d005      	beq.n	80033e0 <c_array_and+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into Array");
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <c_array_and+0xb4>)
 80033d6:	4927      	ldr	r1, [pc, #156]	; (8003474 <c_array_and+0xb8>)
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f008 f813 	bl	800b404 <mrbc_raise>
 80033de:	e043      	b.n	8003468 <c_array_and+0xac>
    return;
  }
  mrbc_value result = mrbc_array_new(vm, 0);
 80033e0:	f107 0320 	add.w	r3, r7, #32
 80033e4:	2200      	movs	r2, #0
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe ffa2 	bl	8002332 <mrbc_array_new>
  int i;
  for (i = 0; i < v[0].array->n_stored; i++) {
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
 80033f2:	e021      	b.n	8003438 <c_array_and+0x7c>
    mrbc_value *data = &v[0].array->data[i];
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4413      	add	r3, r2
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
    if (0 < mrbc_array_include(&v[1], data) && 0 == mrbc_array_include(&result, data))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3310      	adds	r3, #16
 8003406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fbe1 	bl	8002bd0 <mrbc_array_include>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	dd0e      	ble.n	8003432 <c_array_and+0x76>
 8003414:	f107 0320 	add.w	r3, r7, #32
 8003418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fbd8 	bl	8002bd0 <mrbc_array_include>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <c_array_and+0x76>
    {
      mrbc_array_push(&result, data);
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f8b0 	bl	8002592 <mrbc_array_push>
  for (i = 0; i < v[0].array->n_stored; i++) {
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	3301      	adds	r3, #1
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	88db      	ldrh	r3, [r3, #6]
 800343e:	461a      	mov	r2, r3
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	4293      	cmp	r3, r2
 8003444:	dbd6      	blt.n	80033f4 <c_array_and+0x38>
    }
  }
  SET_RETURN(result);
 8003446:	f107 0410 	add.w	r4, r7, #16
 800344a:	f107 0320 	add.w	r3, r7, #32
 800344e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003454:	68b8      	ldr	r0, [r7, #8]
 8003456:	f7fe fecd 	bl	80021f4 <mrbc_decref>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	461c      	mov	r4, r3
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003468:	373c      	adds	r7, #60	; 0x3c
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	08018a30 	.word	0x08018a30
 8003474:	200001b4 	.word	0x200001b4

08003478 <c_array_or>:

//================================================================
/*! (method) |
*/
static void c_array_or(struct VM *vm, mrbc_value v[], int argc)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b091      	sub	sp, #68	; 0x44
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  if (v[1].tt != MRBC_TT_ARRAY) {
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	3310      	adds	r3, #16
 8003488:	f993 3000 	ldrsb.w	r3, [r3]
 800348c:	2b0a      	cmp	r3, #10
 800348e:	d005      	beq.n	800349c <c_array_or+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into Array");
 8003490:	4a34      	ldr	r2, [pc, #208]	; (8003564 <c_array_or+0xec>)
 8003492:	4935      	ldr	r1, [pc, #212]	; (8003568 <c_array_or+0xf0>)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f007 ffb5 	bl	800b404 <mrbc_raise>
 800349a:	e05f      	b.n	800355c <c_array_or+0xe4>
    return;
  }
  mrbc_value result = mrbc_array_new(vm, 0);
 800349c:	f107 0320 	add.w	r3, r7, #32
 80034a0:	2200      	movs	r2, #0
 80034a2:	68f9      	ldr	r1, [r7, #12]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe ff44 	bl	8002332 <mrbc_array_new>
  int i;
  for (i = 0; i < v[0].array->n_stored; i++) {
 80034aa:	2300      	movs	r3, #0
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ae:	e018      	b.n	80034e2 <c_array_or+0x6a>
    mrbc_value *data = &v[0].array->data[i];
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	4413      	add	r3, r2
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
    if (0 == mrbc_array_include(&result, data))
 80034be:	f107 0320 	add.w	r3, r7, #32
 80034c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fb83 	bl	8002bd0 <mrbc_array_include>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <c_array_or+0x64>
    {
      mrbc_array_push(&result, data);
 80034d0:	f107 0320 	add.w	r3, r7, #32
 80034d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f85b 	bl	8002592 <mrbc_array_push>
  for (i = 0; i < v[0].array->n_stored; i++) {
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034de:	3301      	adds	r3, #1
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	88db      	ldrh	r3, [r3, #6]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ec:	4293      	cmp	r3, r2
 80034ee:	dbdf      	blt.n	80034b0 <c_array_or+0x38>
    }
  }
  for (i = 0; i < v[1].array->n_stored; i++) {
 80034f0:	2300      	movs	r3, #0
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	e019      	b.n	800352a <c_array_or+0xb2>
    mrbc_value *data = &v[1].array->data[i];
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	3310      	adds	r3, #16
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	4413      	add	r3, r2
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
    if (0 == mrbc_array_include(&result, data))
 8003506:	f107 0320 	add.w	r3, r7, #32
 800350a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fb5f 	bl	8002bd0 <mrbc_array_include>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <c_array_or+0xac>
    {
      mrbc_array_push(&result, data);
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff f837 	bl	8002592 <mrbc_array_push>
  for (i = 0; i < v[1].array->n_stored; i++) {
 8003524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003526:	3301      	adds	r3, #1
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3310      	adds	r3, #16
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	88db      	ldrh	r3, [r3, #6]
 8003532:	461a      	mov	r2, r3
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	4293      	cmp	r3, r2
 8003538:	dbdd      	blt.n	80034f6 <c_array_or+0x7e>
    }
  }
  SET_RETURN(result);
 800353a:	f107 0410 	add.w	r4, r7, #16
 800353e:	f107 0320 	add.w	r3, r7, #32
 8003542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003548:	68b8      	ldr	r0, [r7, #8]
 800354a:	f7fe fe53 	bl	80021f4 <mrbc_decref>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	461c      	mov	r4, r3
 8003552:	f107 0310 	add.w	r3, r7, #16
 8003556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800355c:	3744      	adds	r7, #68	; 0x44
 800355e:	46bd      	mov	sp, r7
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	bf00      	nop
 8003564:	08018a30 	.word	0x08018a30
 8003568:	200001b4 	.word	0x200001b4

0800356c <c_array_first>:

//================================================================
/*! (method) first
*/
static void c_array_first(struct VM *vm, mrbc_value v[], int argc)
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b08d      	sub	sp, #52	; 0x34
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  mrbc_value val = mrbc_array_get(v, 0);
 8003578:	f107 0320 	add.w	r3, r7, #32
 800357c:	2200      	movs	r2, #0
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe ffd1 	bl	8002528 <mrbc_array_get>
  mrbc_incref(&val);
 8003586:	f107 0320 	add.w	r3, r7, #32
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fdfe 	bl	800218c <mrbc_incref>
  SET_RETURN(val);
 8003590:	f107 0410 	add.w	r4, r7, #16
 8003594:	f107 0320 	add.w	r3, r7, #32
 8003598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800359a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800359e:	68b8      	ldr	r0, [r7, #8]
 80035a0:	f7fe fe28 	bl	80021f4 <mrbc_decref>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	461c      	mov	r4, r3
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80035b2:	bf00      	nop
 80035b4:	3734      	adds	r7, #52	; 0x34
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}

080035ba <c_array_last>:

//================================================================
/*! (method) last
*/
static void c_array_last(struct VM *vm, mrbc_value v[], int argc)
{
 80035ba:	b590      	push	{r4, r7, lr}
 80035bc:	b08d      	sub	sp, #52	; 0x34
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  mrbc_value val = mrbc_array_get(v, -1);
 80035c6:	f107 0320 	add.w	r3, r7, #32
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe ffa9 	bl	8002528 <mrbc_array_get>
  mrbc_incref(&val);
 80035d6:	f107 0320 	add.w	r3, r7, #32
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fdd6 	bl	800218c <mrbc_incref>
  SET_RETURN(val);
 80035e0:	f107 0410 	add.w	r4, r7, #16
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035ee:	68b8      	ldr	r0, [r7, #8]
 80035f0:	f7fe fe00 	bl	80021f4 <mrbc_decref>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	461c      	mov	r4, r3
 80035f8:	f107 0310 	add.w	r3, r7, #16
 80035fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003602:	bf00      	nop
 8003604:	3734      	adds	r7, #52	; 0x34
 8003606:	46bd      	mov	sp, r7
 8003608:	bd90      	pop	{r4, r7, pc}

0800360a <c_array_push>:

//================================================================
/*! (method) push
*/
static void c_array_push(struct VM *vm, mrbc_value v[], int argc)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  mrbc_array_push(&v[0], &v[1]);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3310      	adds	r3, #16
 800361a:	4619      	mov	r1, r3
 800361c:	68b8      	ldr	r0, [r7, #8]
 800361e:	f7fe ffb8 	bl	8002592 <mrbc_array_push>
  mrbc_type(v[1]) = MRBC_TT_EMPTY;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3310      	adds	r3, #16
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <c_array_pop>:

//================================================================
/*! (method) pop
*/
static void c_array_pop(struct VM *vm, mrbc_value v[], int argc)
{
 8003634:	b590      	push	{r4, r7, lr}
 8003636:	b097      	sub	sp, #92	; 0x5c
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  /*
    in case of pop() -> object | nil
  */
  if( argc == 0 ) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d117      	bne.n	8003676 <c_array_pop+0x42>
    mrbc_value val = mrbc_array_pop(v);
 8003646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f80b 	bl	8002668 <mrbc_array_pop>
    SET_RETURN(val);
 8003652:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800365a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800365c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003660:	68b8      	ldr	r0, [r7, #8]
 8003662:	f7fe fdc7 	bl	80021f4 <mrbc_decref>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	461c      	mov	r4, r3
 800366a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800366e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003674:	e02f      	b.n	80036d6 <c_array_pop+0xa2>
  }

  /*
    in case of pop(n) -> Array
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d127      	bne.n	80036cc <c_array_pop+0x98>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3310      	adds	r3, #16
 8003680:	f993 3000 	ldrsb.w	r3, [r3]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d121      	bne.n	80036cc <c_array_pop+0x98>
    int pos = mrbc_array_size(&v[0]) - v[1].i;
 8003688:	68b8      	ldr	r0, [r7, #8]
 800368a:	f7fe fe32 	bl	80022f2 <mrbc_array_size>
 800368e:	4602      	mov	r2, r0
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3310      	adds	r3, #16
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	657b      	str	r3, [r7, #84]	; 0x54
    mrbc_value val = mrbc_array_divide(vm, &v[0], pos);
 800369a:	f107 0020 	add.w	r0, r7, #32
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	f7ff fa3d 	bl	8002b22 <mrbc_array_divide>
    SET_RETURN(val);
 80036a8:	f107 0410 	add.w	r4, r7, #16
 80036ac:	f107 0320 	add.w	r3, r7, #32
 80036b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036b6:	68b8      	ldr	r0, [r7, #8]
 80036b8:	f7fe fd9c 	bl	80021f4 <mrbc_decref>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	461c      	mov	r4, r3
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80036ca:	e004      	b.n	80036d6 <c_array_pop+0xa2>
    return;
  }

  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80036cc:	2200      	movs	r2, #0
 80036ce:	4903      	ldr	r1, [pc, #12]	; (80036dc <c_array_pop+0xa8>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f007 fe97 	bl	800b404 <mrbc_raise>
}
 80036d6:	375c      	adds	r7, #92	; 0x5c
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	20000154 	.word	0x20000154

080036e0 <c_array_unshift>:

//================================================================
/*! (method) unshift
*/
static void c_array_unshift(struct VM *vm, mrbc_value v[], int argc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  mrbc_array_unshift(&v[0], &v[1]);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	3310      	adds	r3, #16
 80036f0:	4619      	mov	r1, r3
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f7fe ffe5 	bl	80026c2 <mrbc_array_unshift>
  mrbc_type(v[1]) = MRBC_TT_EMPTY;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	3310      	adds	r3, #16
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <c_array_shift>:

//================================================================
/*! (method) shift
*/
static void c_array_shift(struct VM *vm, mrbc_value v[], int argc)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b099      	sub	sp, #100	; 0x64
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  /*
    in case of pop() -> object | nil
  */
  if( argc == 0 ) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d117      	bne.n	800374a <c_array_shift+0x42>
    mrbc_value val = mrbc_array_shift(v);
 800371a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe ffdd 	bl	80026e0 <mrbc_array_shift>
    SET_RETURN(val);
 8003726:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800372a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800372e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003734:	68b8      	ldr	r0, [r7, #8]
 8003736:	f7fe fd5d 	bl	80021f4 <mrbc_decref>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	461c      	mov	r4, r3
 800373e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003748:	e047      	b.n	80037da <c_array_shift+0xd2>
  }

  /*
    in case of pop(n) -> Array
  */
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d13f      	bne.n	80037d0 <c_array_shift+0xc8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3310      	adds	r3, #16
 8003754:	f993 3000 	ldrsb.w	r3, [r3]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d139      	bne.n	80037d0 <c_array_shift+0xc8>
    mrbc_value val = mrbc_array_divide(vm, &v[0], v[1].i);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	3310      	adds	r3, #16
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	f7ff f9da 	bl	8002b22 <mrbc_array_divide>

    // swap v[0] and val
    mrbc_array tmp = *v[0].array;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003776:	ca07      	ldmia	r2, {r0, r1, r2}
 8003778:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    v[0].array->data_size = val.array->data_size;
 800377c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	8892      	ldrh	r2, [r2, #4]
 8003784:	809a      	strh	r2, [r3, #4]
    v[0].array->n_stored = val.array->n_stored;
 8003786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	88d2      	ldrh	r2, [r2, #6]
 800378e:	80da      	strh	r2, [r3, #6]
    v[0].array->data = val.array->data;
 8003790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	6892      	ldr	r2, [r2, #8]
 8003798:	609a      	str	r2, [r3, #8]

    val.array->data_size = tmp.data_size;
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800379e:	809a      	strh	r2, [r3, #4]
    val.array->n_stored = tmp.n_stored;
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80037a4:	80da      	strh	r2, [r3, #6]
    val.array->data = tmp.data;
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037aa:	609a      	str	r2, [r3, #8]

    SET_RETURN(val);
 80037ac:	f107 0410 	add.w	r4, r7, #16
 80037b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037ba:	68b8      	ldr	r0, [r7, #8]
 80037bc:	f7fe fd1a 	bl	80021f4 <mrbc_decref>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	461c      	mov	r4, r3
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037ce:	e004      	b.n	80037da <c_array_shift+0xd2>
    return;
  }

  mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80037d0:	2200      	movs	r2, #0
 80037d2:	4903      	ldr	r1, [pc, #12]	; (80037e0 <c_array_shift+0xd8>)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f007 fe15 	bl	800b404 <mrbc_raise>
}
 80037da:	3764      	adds	r7, #100	; 0x64
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	20000154 	.word	0x20000154

080037e4 <c_array_dup>:

//================================================================
/*! (method) dup
*/
static void c_array_dup(struct VM *vm, mrbc_value v[], int argc)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  SET_RETURN( mrbc_array_dup( vm, &v[0] ) );
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f947 	bl	8002a8c <mrbc_array_dup>
 80037fe:	68b8      	ldr	r0, [r7, #8]
 8003800:	f7fe fcf8 	bl	80021f4 <mrbc_decref>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	461c      	mov	r4, r3
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800380e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003812:	bf00      	nop
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}

0800381a <c_array_min>:

//================================================================
/*! (method) min
*/
static void c_array_min(struct VM *vm, mrbc_value v[], int argc)
{
 800381a:	b590      	push	{r4, r7, lr}
 800381c:	b08b      	sub	sp, #44	; 0x2c
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  // Subset of Array#min, not support min(n).

  mrbc_value *p_min_value, *p_max_value;

  mrbc_array_minmax(&v[0], &p_min_value, &p_max_value);
 8003826:	f107 0220 	add.w	r2, r7, #32
 800382a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382e:	4619      	mov	r1, r3
 8003830:	68b8      	ldr	r0, [r7, #8]
 8003832:	f7ff f8d8 	bl	80029e6 <mrbc_array_minmax>
  if( p_min_value == NULL ) {
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <c_array_min+0x30>
    SET_NIL_RETURN();
 800383c:	68b8      	ldr	r0, [r7, #8]
 800383e:	f7fe fcd9 	bl	80021f4 <mrbc_decref>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e013      	b.n	8003872 <c_array_min+0x58>
    return;
  }

  mrbc_incref(p_min_value);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fc9d 	bl	800218c <mrbc_incref>
  SET_RETURN(*p_min_value);
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f107 0410 	add.w	r4, r7, #16
 8003858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800385e:	68b8      	ldr	r0, [r7, #8]
 8003860:	f7fe fcc8 	bl	80021f4 <mrbc_decref>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	461c      	mov	r4, r3
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003872:	372c      	adds	r7, #44	; 0x2c
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}

08003878 <c_array_max>:

//================================================================
/*! (method) max
*/
static void c_array_max(struct VM *vm, mrbc_value v[], int argc)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b08b      	sub	sp, #44	; 0x2c
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  // Subset of Array#max, not support max(n).

  mrbc_value *p_min_value, *p_max_value;

  mrbc_array_minmax(&v[0], &p_min_value, &p_max_value);
 8003884:	f107 0220 	add.w	r2, r7, #32
 8003888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388c:	4619      	mov	r1, r3
 800388e:	68b8      	ldr	r0, [r7, #8]
 8003890:	f7ff f8a9 	bl	80029e6 <mrbc_array_minmax>
  if( p_max_value == NULL ) {
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <c_array_max+0x30>
    SET_NIL_RETURN();
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f7fe fcaa 	bl	80021f4 <mrbc_decref>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e013      	b.n	80038d0 <c_array_max+0x58>
    return;
  }

  mrbc_incref(p_max_value);
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fc6e 	bl	800218c <mrbc_incref>
  SET_RETURN(*p_max_value);
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	f107 0410 	add.w	r4, r7, #16
 80038b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80038bc:	68b8      	ldr	r0, [r7, #8]
 80038be:	f7fe fc99 	bl	80021f4 <mrbc_decref>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	461c      	mov	r4, r3
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80038d0:	372c      	adds	r7, #44	; 0x2c
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}

080038d6 <c_array_minmax>:

//================================================================
/*! (method) minmax
*/
static void c_array_minmax(struct VM *vm, mrbc_value v[], int argc)
{
 80038d6:	b590      	push	{r4, r7, lr}
 80038d8:	b097      	sub	sp, #92	; 0x5c
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  // Subset of Array#minmax, not support minmax(n).

  mrbc_value *p_min_value, *p_max_value;
  mrbc_value nil = mrbc_nil_value();
 80038e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  mrbc_value ret = mrbc_array_new(vm, 2);
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	2202      	movs	r2, #2
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fd17 	bl	8002332 <mrbc_array_new>

  mrbc_array_minmax(&v[0], &p_min_value, &p_max_value);
 8003904:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800390c:	4619      	mov	r1, r3
 800390e:	68b8      	ldr	r0, [r7, #8]
 8003910:	f7ff f869 	bl	80029e6 <mrbc_array_minmax>
  if( p_min_value == NULL ) p_min_value = &nil;
 8003914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <c_array_minmax+0x4a>
 800391a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391e:	657b      	str	r3, [r7, #84]	; 0x54
  if( p_max_value == NULL ) p_max_value = &nil;
 8003920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <c_array_minmax+0x56>
 8003926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800392a:	653b      	str	r3, [r7, #80]	; 0x50

  mrbc_incref(p_min_value);
 800392c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fc2c 	bl	800218c <mrbc_incref>
  mrbc_incref(p_max_value);
 8003934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fc28 	bl	800218c <mrbc_incref>
  mrbc_array_set(&ret, 0, p_min_value);
 800393c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800393e:	f107 0320 	add.w	r3, r7, #32
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fd8b 	bl	8002460 <mrbc_array_set>
  mrbc_array_set(&ret, 1, p_max_value);
 800394a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800394c:	f107 0320 	add.w	r3, r7, #32
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fd84 	bl	8002460 <mrbc_array_set>

  SET_RETURN(ret);
 8003958:	f107 0410 	add.w	r4, r7, #16
 800395c:	f107 0320 	add.w	r3, r7, #32
 8003960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003966:	68b8      	ldr	r0, [r7, #8]
 8003968:	f7fe fc44 	bl	80021f4 <mrbc_decref>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	461c      	mov	r4, r3
 8003970:	f107 0310 	add.w	r3, r7, #16
 8003974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800397a:	bf00      	nop
 800397c:	375c      	adds	r7, #92	; 0x5c
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
	...

08003984 <c_array_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_array_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b09f      	sub	sp, #124	; 0x7c
 8003988:	af04      	add	r7, sp, #16
 800398a:	61f8      	str	r0, [r7, #28]
 800398c:	61b9      	str	r1, [r7, #24]
 800398e:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f993 3000 	ldrsb.w	r3, [r3]
 8003996:	2b07      	cmp	r3, #7
 8003998:	d112      	bne.n	80039c0 <c_array_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f00a f8c8 	bl	800db38 <mrbc_symid_to_str>
 80039a8:	4602      	mov	r2, r0
 80039aa:	69bc      	ldr	r4, [r7, #24]
 80039ac:	463b      	mov	r3, r7
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fc73 	bl	800229c <mrbc_string_new_cstr>
 80039b6:	463b      	mov	r3, r7
 80039b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 80039be:	e060      	b.n	8003a82 <c_array_inspect+0xfe>
  }

  mrbc_value ret = mrbc_string_new_cstr(vm, "[");
 80039c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039c4:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <c_array_inspect+0x104>)
 80039c6:	69f9      	ldr	r1, [r7, #28]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fc67 	bl	800229c <mrbc_string_new_cstr>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 80039ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d04f      	beq.n	8003a74 <c_array_inspect+0xf0>

  int i;
  for( i = 0; i < mrbc_array_size(v); i++ ) {
 80039d4:	2300      	movs	r3, #0
 80039d6:	667b      	str	r3, [r7, #100]	; 0x64
 80039d8:	e02d      	b.n	8003a36 <c_array_inspect+0xb2>
    if( i != 0 ) mrbc_string_append_cstr( &ret, ", " );
 80039da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <c_array_inspect+0x68>
 80039e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039e4:	4929      	ldr	r1, [pc, #164]	; (8003a8c <c_array_inspect+0x108>)
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fc70 	bl	80022cc <mrbc_string_append_cstr>

    mrbc_value v1 = mrbc_array_get(v, i);
 80039ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039f2:	69b9      	ldr	r1, [r7, #24]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fd97 	bl	8002528 <mrbc_array_get>
    mrbc_value s1 = mrbc_send( vm, v, argc, &v1, "inspect", 0 );
 80039fa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80039fe:	2300      	movs	r3, #0
 8003a00:	9302      	str	r3, [sp, #8]
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <c_array_inspect+0x10c>)
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	69f9      	ldr	r1, [r7, #28]
 8003a12:	f005 fee5 	bl	80097e0 <mrbc_send>
    mrbc_string_append( &ret, &s1 );
 8003a16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f003 fcf0 	bl	8007406 <mrbc_string_append>
    mrbc_string_delete( &s1 );
 8003a26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 fc4a 	bl	80072c4 <mrbc_string_delete>
  for( i = 0; i < mrbc_array_size(v); i++ ) {
 8003a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a32:	3301      	adds	r3, #1
 8003a34:	667b      	str	r3, [r7, #100]	; 0x64
 8003a36:	69b8      	ldr	r0, [r7, #24]
 8003a38:	f7fe fc5b 	bl	80022f2 <mrbc_array_size>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a40:	4293      	cmp	r3, r2
 8003a42:	dbca      	blt.n	80039da <c_array_inspect+0x56>
  }

  mrbc_string_append_cstr( &ret, "]" );
 8003a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a48:	4912      	ldr	r1, [pc, #72]	; (8003a94 <c_array_inspect+0x110>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fc3e 	bl	80022cc <mrbc_string_append_cstr>

  SET_RETURN(ret);
 8003a50:	f107 0420 	add.w	r4, r7, #32
 8003a54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003a5e:	69b8      	ldr	r0, [r7, #24]
 8003a60:	f7fe fbc8 	bl	80021f4 <mrbc_decref>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	461c      	mov	r4, r3
 8003a68:	f107 0320 	add.w	r3, r7, #32
 8003a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;
 8003a72:	e006      	b.n	8003a82 <c_array_inspect+0xfe>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8003a74:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8003a76:	69b8      	ldr	r0, [r7, #24]
 8003a78:	f7fe fbbc 	bl	80021f4 <mrbc_decref>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
}
 8003a82:	376c      	adds	r7, #108	; 0x6c
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd90      	pop	{r4, r7, pc}
 8003a88:	08018a54 	.word	0x08018a54
 8003a8c:	08018a58 	.word	0x08018a58
 8003a90:	08018a5c 	.word	0x08018a5c
 8003a94:	08018a64 	.word	0x08018a64

08003a98 <c_array_join_1>:
//================================================================
/*! (method) join
*/
static void c_array_join_1(struct VM *vm, mrbc_value v[], int argc,
			   mrbc_value *src, mrbc_value *ret, mrbc_value *separator)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	; 0x38
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  if( mrbc_array_size(src) == 0 ) return;
 8003aa6:	6838      	ldr	r0, [r7, #0]
 8003aa8:	f7fe fc23 	bl	80022f2 <mrbc_array_size>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d056      	beq.n	8003b60 <c_array_join_1+0xc8>

  int i = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  int flag_error = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
  while( !flag_error ) {
 8003aba:	e04d      	b.n	8003b58 <c_array_join_1+0xc0>
    if( mrbc_type(src->array->data[i]) == MRBC_TT_ARRAY ) {
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8003acc:	2b0a      	cmp	r3, #10
 8003ace:	d110      	bne.n	8003af2 <c_array_join_1+0x5a>
      c_array_join_1(vm, v, argc, &src->array->data[i], ret, separator);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	441a      	add	r2, r3
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ffd4 	bl	8003a98 <c_array_join_1>
 8003af0:	e020      	b.n	8003b34 <c_array_join_1+0x9c>
    } else {
      mrbc_value v1 = mrbc_send( vm, v, argc, &src->array->data[i], "to_s", 0 );
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	4413      	add	r3, r2
 8003afe:	f107 0010 	add.w	r0, r7, #16
 8003b02:	2200      	movs	r2, #0
 8003b04:	9202      	str	r2, [sp, #8]
 8003b06:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <c_array_join_1+0xd4>)
 8003b08:	9201      	str	r2, [sp, #4]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	f005 fe65 	bl	80097e0 <mrbc_send>
      flag_error |= mrbc_string_append( ret, &v1 );
 8003b16:	f107 0310 	add.w	r3, r7, #16
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b1e:	f003 fc72 	bl	8007406 <mrbc_string_append>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	623b      	str	r3, [r7, #32]
      mrbc_decref(&v1);
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fb60 	bl	80021f4 <mrbc_decref>
    }
    if( ++i >= mrbc_array_size(src) ) break;	// normal return.
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	3301      	adds	r3, #1
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	6838      	ldr	r0, [r7, #0]
 8003b3c:	f7fe fbd9 	bl	80022f2 <mrbc_array_size>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	4293      	cmp	r3, r2
 8003b46:	da0d      	bge.n	8003b64 <c_array_join_1+0xcc>
    flag_error |= mrbc_string_append( ret, separator );
 8003b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4c:	f003 fc5b 	bl	8007406 <mrbc_string_append>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	623b      	str	r3, [r7, #32]
  while( !flag_error ) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0ae      	beq.n	8003abc <c_array_join_1+0x24>
 8003b5e:	e002      	b.n	8003b66 <c_array_join_1+0xce>
  if( mrbc_array_size(src) == 0 ) return;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <c_array_join_1+0xce>
    if( ++i >= mrbc_array_size(src) ) break;	// normal return.
 8003b64:	bf00      	nop
  }
}
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08018a68 	.word	0x08018a68

08003b70 <c_array_join>:

static void c_array_join(struct VM *vm, mrbc_value v[], int argc)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b095      	sub	sp, #84	; 0x54
 8003b74:	af04      	add	r7, sp, #16
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_new(vm, NULL, 0);
 8003b7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003b80:	2300      	movs	r3, #0
 8003b82:	2200      	movs	r2, #0
 8003b84:	68f9      	ldr	r1, [r7, #12]
 8003b86:	f003 faff 	bl	8007188 <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03b      	beq.n	8003c08 <c_array_join+0x98>

  mrbc_value separator = (argc == 0) ? mrbc_string_new_cstr(vm, "") :
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <c_array_join+0x36>
 8003b96:	f107 0320 	add.w	r3, r7, #32
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <c_array_join+0xac>)
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fb7c 	bl	800229c <mrbc_string_new_cstr>
 8003ba4:	e00d      	b.n	8003bc2 <c_array_join+0x52>
    mrbc_send( vm, v, argc, &v[1], "to_s", 0 );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3310      	adds	r3, #16
 8003baa:	f107 0020 	add.w	r0, r7, #32
 8003bae:	2200      	movs	r2, #0
 8003bb0:	9202      	str	r2, [sp, #8]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <c_array_join+0xb0>)
 8003bb4:	9201      	str	r2, [sp, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	68f9      	ldr	r1, [r7, #12]
 8003bbe:	f005 fe0f 	bl	80097e0 <mrbc_send>

  c_array_join_1(vm, v, argc, &v[0], &ret, &separator );
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7ff ff5f 	bl	8003a98 <c_array_join_1>
  mrbc_decref(&separator);
 8003bda:	f107 0320 	add.w	r3, r7, #32
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fb08 	bl	80021f4 <mrbc_decref>

  SET_RETURN(ret);
 8003be4:	f107 0410 	add.w	r4, r7, #16
 8003be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003bf2:	68b8      	ldr	r0, [r7, #8]
 8003bf4:	f7fe fafe 	bl	80021f4 <mrbc_decref>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	f107 0310 	add.w	r3, r7, #16
 8003c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003c06:	e006      	b.n	8003c16 <c_array_join+0xa6>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8003c08:	bf00      	nop
  return;

 RETURN_NIL:
  SET_NIL_RETURN();
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f7fe faf2 	bl	80021f4 <mrbc_decref>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
}
 8003c16:	3744      	adds	r7, #68	; 0x44
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd90      	pop	{r4, r7, pc}
 8003c1c:	08018a70 	.word	0x08018a70
 8003c20:	08018a68 	.word	0x08018a68

08003c24 <mrbc_incref>:
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c32:	2b07      	cmp	r3, #7
 8003c34:	dd1e      	ble.n	8003c74 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	885b      	ldrh	r3, [r3, #2]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <mrbc_incref+0x2a>
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <mrbc_incref+0x58>)
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <mrbc_incref+0x5c>)
 8003c44:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003c48:	480e      	ldr	r0, [pc, #56]	; (8003c84 <mrbc_incref+0x60>)
 8003c4a:	f011 fca1 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	885b      	ldrh	r3, [r3, #2]
 8003c54:	2bff      	cmp	r3, #255	; 0xff
 8003c56:	d106      	bne.n	8003c66 <mrbc_incref+0x42>
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <mrbc_incref+0x64>)
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <mrbc_incref+0x5c>)
 8003c5c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003c60:	4808      	ldr	r0, [pc, #32]	; (8003c84 <mrbc_incref+0x60>)
 8003c62:	f011 fc95 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	885a      	ldrh	r2, [r3, #2]
 8003c6c:	3201      	adds	r2, #1
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	805a      	strh	r2, [r3, #2]
 8003c72:	e000      	b.n	8003c76 <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003c74:	bf00      	nop
}
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08018a7c 	.word	0x08018a7c
 8003c80:	0801aa14 	.word	0x0801aa14
 8003c84:	08018a94 	.word	0x08018a94
 8003c88:	08018ab0 	.word	0x08018ab0

08003c8c <mrbc_decref>:
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f993 3000 	ldrsb.w	r3, [r3]
 8003c9a:	2b07      	cmp	r3, #7
 8003c9c:	dd2c      	ble.n	8003cf8 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	885b      	ldrh	r3, [r3, #2]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <mrbc_decref+0x2a>
 8003ca8:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <mrbc_decref+0x78>)
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <mrbc_decref+0x7c>)
 8003cac:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8003cb0:	4816      	ldr	r0, [pc, #88]	; (8003d0c <mrbc_decref+0x80>)
 8003cb2:	f011 fc6d 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	885b      	ldrh	r3, [r3, #2]
 8003cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d106      	bne.n	8003cd2 <mrbc_decref+0x46>
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <mrbc_decref+0x84>)
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <mrbc_decref+0x7c>)
 8003cc8:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003ccc:	480f      	ldr	r0, [pc, #60]	; (8003d0c <mrbc_decref+0x80>)
 8003cce:	f011 fc5f 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	885a      	ldrh	r2, [r3, #2]
 8003cd8:	3a01      	subs	r2, #1
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	805a      	strh	r2, [r3, #2]
 8003cde:	885b      	ldrh	r3, [r3, #2]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <mrbc_decref+0x88>)
 8003cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
 8003cf6:	e002      	b.n	8003cfe <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8003cfc:	bf00      	nop
}
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	08018a7c 	.word	0x08018a7c
 8003d08:	0801aa08 	.word	0x0801aa08
 8003d0c:	08018a94 	.word	0x08018a94
 8003d10:	08018acc 	.word	0x08018acc
 8003d14:	0801bde8 	.word	0x0801bde8

08003d18 <mrbc_string_new_cstr>:
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <mrbc_string_new_cstr+0x1c>
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fc fa62 	bl	80001f4 <strlen>
 8003d30:	4603      	mov	r3, r0
 8003d32:	e000      	b.n	8003d36 <mrbc_string_new_cstr+0x1e>
 8003d34:	2300      	movs	r3, #0
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	f003 fa24 	bl	8007188 <mrbc_string_new>
}
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <mrbc_string_append_cstr>:
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f7fc fa4e 	bl	80001f4 <strlen>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6839      	ldr	r1, [r7, #0]
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f003 fbaa 	bl	80074b8 <mrbc_string_append_cbuf>
 8003d64:	4603      	mov	r3, r0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <mrbc_hash_size>:

/***** Inline functions *****************************************************/
//================================================================
/*! get size
*/
static inline int mrbc_hash_size(const mrbc_value *hash) {
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  return hash->hash->n_stored / 2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	88db      	ldrh	r3, [r3, #6]
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	b29b      	uxth	r3, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <mrbc_hash_iterator_new>:

//================================================================
/*! iterator constructor
*/
static inline mrbc_hash_iterator mrbc_hash_iterator_new( const mrbc_value *v )
{
 8003d8c:	b490      	push	{r4, r7}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  mrbc_hash_iterator ite;
  ite.target = v->hash;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	60fb      	str	r3, [r7, #12]
  ite.point = v->hash->data;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	613b      	str	r3, [r7, #16]
  ite.p_end = ite.point + v->hash->n_stored;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	88db      	ldrh	r3, [r3, #6]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4413      	add	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  return ite;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	461c      	mov	r4, r3
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc90      	pop	{r4, r7}
 8003dca:	4770      	bx	lr

08003dcc <mrbc_hash_i_has_next>:

//================================================================
/*! iterator has_next?
*/
static inline int mrbc_hash_i_has_next( mrbc_hash_iterator *ite )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return ite->point < ite->p_end;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bf34      	ite	cc
 8003de0:	2301      	movcc	r3, #1
 8003de2:	2300      	movcs	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <mrbc_hash_i_next>:

//================================================================
/*! iterator getter
*/
static inline mrbc_value *mrbc_hash_i_next( mrbc_hash_iterator *ite )
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  mrbc_value *ret = ite->point;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]
  ite->point += 2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f103 0220 	add.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]
  return ret;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <mrbc_hash_new>:
  @param  vm	pointer to VM.
  @param  size	initial size
  @return 	hash object
*/
mrbc_value mrbc_hash_new(struct VM *vm, int size)
{
 8003e1a:	b590      	push	{r4, r7, lr}
 8003e1c:	b08b      	sub	sp, #44	; 0x2c
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  mrbc_value value = {.tt = MRBC_TT_HASH};
 8003e26:	f107 0310 	add.w	r3, r7, #16
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	230d      	movs	r3, #13
 8003e36:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle and data buffer.
  */
  mrbc_hash *h = mrbc_alloc(vm, sizeof(mrbc_hash));
 8003e38:	200c      	movs	r0, #12
 8003e3a:	f7fd fe33 	bl	8001aa4 <mrbc_raw_alloc>
 8003e3e:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;	// ENOMEM
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <mrbc_hash_new+0x3c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	461c      	mov	r4, r3
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003e54:	e031      	b.n	8003eba <mrbc_hash_new+0xa0>

  mrbc_value *data = mrbc_alloc(vm, sizeof(mrbc_value) * size * 2);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	015b      	lsls	r3, r3, #5
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd fe22 	bl	8001aa4 <mrbc_raw_alloc>
 8003e60:	6238      	str	r0, [r7, #32]
  if( !data ) {			// ENOMEM
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <mrbc_hash_new+0x64>
    mrbc_raw_free( h );
 8003e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e6a:	f7fd fff7 	bl	8001e5c <mrbc_raw_free>
    return value;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	461c      	mov	r4, r3
 8003e72:	f107 0310 	add.w	r3, r7, #16
 8003e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003e7c:	e01d      	b.n	8003eba <mrbc_hash_new+0xa0>
  }

  MRBC_INIT_OBJECT_HEADER( h, "HA" );
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2201      	movs	r2, #1
 8003e82:	805a      	strh	r2, [r3, #2]
 8003e84:	2248      	movs	r2, #72	; 0x48
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	2241      	movs	r2, #65	; 0x41
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	705a      	strb	r2, [r3, #1]
  h->data_size = size * 2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	809a      	strh	r2, [r3, #4]
  h->n_stored = 0;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	80da      	strh	r2, [r3, #6]
  h->data = data;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6a3a      	ldr	r2, [r7, #32]
 8003ea6:	609a      	str	r2, [r3, #8]

  value.hash = h;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	61bb      	str	r3, [r7, #24]
  return value;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	461c      	mov	r4, r3
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	372c      	adds	r7, #44	; 0x2c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <mrbc_hash_delete>:
/*! destructor

  @param  hash	pointer to target value
*/
void mrbc_hash_delete(mrbc_value *hash)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  // TODO: delete other members (for search).

  mrbc_array_delete(hash);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe fa83 	bl	80023d6 <mrbc_array_delete>
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <mrbc_hash_search>:
  @param  hash	pointer to target hash
  @param  key	pointer to key value
  @return	pointer to found key or NULL(not found).
*/
mrbc_value * mrbc_hash_search(const mrbc_value *hash, const mrbc_value *key)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  mrbc_value *p1 = hash->hash->data;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  const mrbc_value *p2 = p1 + hash->hash->n_stored;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	88db      	ldrh	r3, [r3, #6]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

  while( p1 < p2 ) {
 8003ef8:	e00b      	b.n	8003f12 <mrbc_hash_search+0x3a>
    if( mrbc_compare(p1, key) == 0 ) return p1;
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f00a f89b 	bl	800e038 <mrbc_compare>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <mrbc_hash_search+0x34>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e007      	b.n	8003f1c <mrbc_hash_search+0x44>
    p1 += 2;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3320      	adds	r3, #32
 8003f10:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3ef      	bcc.n	8003efa <mrbc_hash_search+0x22>
  }

  return NULL;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <mrbc_hash_search_by_id>:
  @param  sym_id	symbol ID
  @return		pointer to found key or NULL(not found).
  @note			for use with OP_KEY_P.
*/
mrbc_value * mrbc_hash_search_by_id(const mrbc_value *hash, mrbc_sym sym_id)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
  mrbc_value *p1 = hash->hash->data;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60fb      	str	r3, [r7, #12]
  const mrbc_value *p2 = p1 + hash->hash->n_stored;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	88db      	ldrh	r3, [r3, #6]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	60bb      	str	r3, [r7, #8]

  while( p1 < p2 ) {
 8003f46:	e00f      	b.n	8003f68 <mrbc_hash_search_by_id+0x44>
    if( mrbc_type(*p1) == MRBC_TT_SYMBOL &&
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d107      	bne.n	8003f62 <mrbc_hash_search_by_id+0x3e>
	mrbc_symbol(*p1) == sym_id ) return p1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    if( mrbc_type(*p1) == MRBC_TT_SYMBOL &&
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d101      	bne.n	8003f62 <mrbc_hash_search_by_id+0x3e>
	mrbc_symbol(*p1) == sym_id ) return p1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	e007      	b.n	8003f72 <mrbc_hash_search_by_id+0x4e>
    p1 += 2;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3320      	adds	r3, #32
 8003f66:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3eb      	bcc.n	8003f48 <mrbc_hash_search_by_id+0x24>
  }

  return NULL;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <mrbc_hash_set>:
  @param  key	pointer to key value
  @param  val	pointer to value
  @return	mrbc_error_code
*/
int mrbc_hash_set(mrbc_value *hash, mrbc_value *key, mrbc_value *val)
{
 8003f7e:	b590      	push	{r4, r7, lr}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
  mrbc_value *v = mrbc_hash_search(hash, key);
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff ffa3 	bl	8003ed8 <mrbc_hash_search>
 8003f92:	6138      	str	r0, [r7, #16]
  int ret = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  if( v == NULL ) {
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10d      	bne.n	8003fba <mrbc_hash_set+0x3c>
    // set a new value
    if( (ret = mrbc_array_push(hash, key)) != 0 ) goto RETURN;
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7fe faf6 	bl	8002592 <mrbc_array_push>
 8003fa6:	6178      	str	r0, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11b      	bne.n	8003fe6 <mrbc_hash_set+0x68>
    ret = mrbc_array_push(hash, val);
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7fe faee 	bl	8002592 <mrbc_array_push>
 8003fb6:	6178      	str	r0, [r7, #20]
 8003fb8:	e016      	b.n	8003fe8 <mrbc_hash_set+0x6a>

  } else {
    // replace a value
    mrbc_decref(v);
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f7ff fe66 	bl	8003c8c <mrbc_decref>
    *v = *key;
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_decref(++v);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3310      	adds	r3, #16
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	6938      	ldr	r0, [r7, #16]
 8003fd4:	f7ff fe5a 	bl	8003c8c <mrbc_decref>
    *v = *val;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4614      	mov	r4, r2
 8003fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003fe4:	e000      	b.n	8003fe8 <mrbc_hash_set+0x6a>
    if( (ret = mrbc_array_push(hash, key)) != 0 ) goto RETURN;
 8003fe6:	bf00      	nop
  }

 RETURN:
  return ret;
 8003fe8:	697b      	ldr	r3, [r7, #20]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd90      	pop	{r4, r7, pc}

08003ff2 <mrbc_hash_get>:
  @param  hash	pointer to target hash
  @param  key	pointer to key value
  @return	mrbc_value data at key position or Nil.
*/
mrbc_value mrbc_hash_get(const mrbc_value *hash, const mrbc_value *key)
{
 8003ff2:	b590      	push	{r4, r7, lr}
 8003ff4:	b08b      	sub	sp, #44	; 0x2c
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  mrbc_value *v = mrbc_hash_search(hash, key);
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68b8      	ldr	r0, [r7, #8]
 8004002:	f7ff ff69 	bl	8003ed8 <mrbc_hash_search>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24
  return v ? *++v : mrbc_nil_value();
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <mrbc_hash_get+0x30>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	3310      	adds	r3, #16
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	4614      	mov	r4, r2
 800401a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800401c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004020:	e009      	b.n	8004036 <mrbc_hash_get+0x44>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	461a      	mov	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	6053      	str	r3, [r2, #4]
 800402c:	6093      	str	r3, [r2, #8]
 800402e:	60d3      	str	r3, [r2, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
}
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	372c      	adds	r7, #44	; 0x2c
 800403a:	46bd      	mov	sp, r7
 800403c:	bd90      	pop	{r4, r7, pc}

0800403e <mrbc_hash_remove>:
  @param  hash	pointer to target hash
  @param  key	pointer to key value
  @return	removed data or Nil
*/
mrbc_value mrbc_hash_remove(mrbc_value *hash, const mrbc_value *key)
{
 800403e:	b590      	push	{r4, r7, lr}
 8004040:	b08f      	sub	sp, #60	; 0x3c
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  mrbc_value *v = mrbc_hash_search(hash, key);
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	f7ff ff43 	bl	8003ed8 <mrbc_hash_search>
 8004052:	6378      	str	r0, [r7, #52]	; 0x34
  if( v == NULL ) return mrbc_nil_value();
 8004054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <mrbc_hash_remove+0x32>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	6053      	str	r3, [r2, #4]
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	60d3      	str	r3, [r2, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);

  // TODO: re-index hash table if need.

  return val;
}
 800406e:	e028      	b.n	80040c2 <mrbc_hash_remove+0x84>
  mrbc_decref(v);		// key
 8004070:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004072:	f7ff fe0b 	bl	8003c8c <mrbc_decref>
  mrbc_value val = v[1];	// value
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	f107 0420 	add.w	r4, r7, #32
 800407c:	3310      	adds	r3, #16
 800407e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_hash *h = hash->hash;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	633b      	str	r3, [r7, #48]	; 0x30
  h->n_stored -= 2;
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	88db      	ldrh	r3, [r3, #6]
 800408e:	3b02      	subs	r3, #2
 8004090:	b29a      	uxth	r2, r3
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	80da      	strh	r2, [r3, #6]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	f103 0120 	add.w	r1, r3, #32
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	88db      	ldrh	r3, [r3, #6]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	441a      	add	r2, r3
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040b0:	f012 fa95 	bl	80165de <memmove>
  return val;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	461c      	mov	r4, r3
 80040b8:	f107 0320 	add.w	r3, r7, #32
 80040bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	373c      	adds	r7, #60	; 0x3c
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}

080040ca <mrbc_hash_remove_by_id>:
  @return  		removed data.
  @return 		TT_EMPTY, if not found.
  @note			for use with OP_KARG.
*/
mrbc_value mrbc_hash_remove_by_id(mrbc_value *hash, mrbc_sym sym_id)
{
 80040ca:	b590      	push	{r4, r7, lr}
 80040cc:	b08f      	sub	sp, #60	; 0x3c
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  mrbc_value *v = mrbc_hash_search_by_id(hash, sym_id);
 80040d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040dc:	4619      	mov	r1, r3
 80040de:	68b8      	ldr	r0, [r7, #8]
 80040e0:	f7ff ff20 	bl	8003f24 <mrbc_hash_search_by_id>
 80040e4:	6378      	str	r0, [r7, #52]	; 0x34
  if( !v ) return (mrbc_value){.tt = MRBC_TT_EMPTY};
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <mrbc_hash_remove_by_id+0x32>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	6053      	str	r3, [r2, #4]
 80040f6:	6093      	str	r3, [r2, #8]
 80040f8:	60d3      	str	r3, [r2, #12]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);

  // TODO: re-index hash table if need.

  return val;
}
 80040fa:	e025      	b.n	8004148 <mrbc_hash_remove_by_id+0x7e>
  mrbc_value val = v[1];	// value
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	f107 0420 	add.w	r4, r7, #32
 8004102:	3310      	adds	r3, #16
 8004104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_hash *h = hash->hash;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	633b      	str	r3, [r7, #48]	; 0x30
  h->n_stored -= 2;
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	88db      	ldrh	r3, [r3, #6]
 8004114:	3b02      	subs	r3, #2
 8004116:	b29a      	uxth	r2, r3
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	80da      	strh	r2, [r3, #6]
  memmove(v, v+2, (char*)(h->data + h->n_stored) - (char*)v);
 800411c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411e:	f103 0120 	add.w	r1, r3, #32
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	88db      	ldrh	r3, [r3, #6]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	441a      	add	r2, r3
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	461a      	mov	r2, r3
 8004134:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004136:	f012 fa52 	bl	80165de <memmove>
  return val;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	461c      	mov	r4, r3
 800413e:	f107 0320 	add.w	r3, r7, #32
 8004142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	373c      	adds	r7, #60	; 0x3c
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <mrbc_hash_clear>:
/*! clear all

  @param  hash	pointer to target hash
*/
void mrbc_hash_clear(mrbc_value *hash)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  mrbc_array_clear(hash);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fe fbe5 	bl	8002928 <mrbc_array_clear>

  // TODO: re-index hash table if need.
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <mrbc_hash_compare>:
  @param  v2	Pointer to another mrbc_value
  @retval 0	v1 == v2
  @retval 1	v1 != v2
*/
int mrbc_hash_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  if( v1->hash->n_stored != v2->hash->n_stored ) return 1;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	88da      	ldrh	r2, [r3, #6]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	88db      	ldrh	r3, [r3, #6]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <mrbc_hash_compare+0x1e>
 8004180:	2301      	movs	r3, #1
 8004182:	e02d      	b.n	80041e0 <mrbc_hash_compare+0x7a>

  mrbc_value *d1 = v1->hash->data;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	617b      	str	r3, [r7, #20]
  int i;
  for( i = 0; i < mrbc_hash_size(v1); i++, d1++ ) {
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	e01e      	b.n	80041d0 <mrbc_hash_compare+0x6a>
    mrbc_value *d2 = mrbc_hash_search(v2, d1);	// check key
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	6838      	ldr	r0, [r7, #0]
 8004196:	f7ff fe9f 	bl	8003ed8 <mrbc_hash_search>
 800419a:	60f8      	str	r0, [r7, #12]
    if( d2 == NULL ) return 1;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <mrbc_hash_compare+0x40>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01c      	b.n	80041e0 <mrbc_hash_compare+0x7a>
    if( mrbc_compare( ++d1, ++d2 ) ) return 1;	// check data
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3310      	adds	r3, #16
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3310      	adds	r3, #16
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	f009 ff3f 	bl	800e038 <mrbc_compare>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <mrbc_hash_compare+0x5e>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e00d      	b.n	80041e0 <mrbc_hash_compare+0x7a>
  for( i = 0; i < mrbc_hash_size(v1); i++, d1++ ) {
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3301      	adds	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3310      	adds	r3, #16
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fdcc 	bl	8003d6e <mrbc_hash_size>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4293      	cmp	r3, r2
 80041dc:	dbd9      	blt.n	8004192 <mrbc_hash_compare+0x2c>
  }

  return 0;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <mrbc_hash_dup>:

  @param  vm	pointer to VM.
  @param  src	pointer to target hash.
*/
mrbc_value mrbc_hash_dup( struct VM *vm, mrbc_value *src )
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b08d      	sub	sp, #52	; 0x34
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_new(vm, mrbc_hash_size(src));
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fdba 	bl	8003d6e <mrbc_hash_size>
 80041fa:	4602      	mov	r2, r0
 80041fc:	f107 0310 	add.w	r3, r7, #16
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fe09 	bl	8003e1a <mrbc_hash_new>
  if( ret.hash == NULL ) return ret;		// ENOMEM
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <mrbc_hash_dup+0x36>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	461c      	mov	r4, r3
 8004212:	f107 0310 	add.w	r3, r7, #16
 8004216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800421c:	e02c      	b.n	8004278 <mrbc_hash_dup+0x90>

  mrbc_hash *h = src->hash;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
  memcpy( ret.hash->data, h->data, sizeof(mrbc_value) * h->n_stored );
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6898      	ldr	r0, [r3, #8]
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	6899      	ldr	r1, [r3, #8]
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	88db      	ldrh	r3, [r3, #6]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	461a      	mov	r2, r3
 8004234:	f012 fa87 	bl	8016746 <memcpy>
  ret.hash->n_stored = h->n_stored;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423c:	88d2      	ldrh	r2, [r2, #6]
 800423e:	80da      	strh	r2, [r3, #6]

  mrbc_value *p1 = h->data;
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
  const mrbc_value *p2 = p1 + h->n_stored;
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	88db      	ldrh	r3, [r3, #6]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424e:	4413      	add	r3, r2
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  while( p1 < p2 ) {
 8004252:	e006      	b.n	8004262 <mrbc_hash_dup+0x7a>
    mrbc_incref(p1++);
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	f103 0210 	add.w	r2, r3, #16
 800425a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fce1 	bl	8003c24 <mrbc_incref>
  while( p1 < p2 ) {
 8004262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	429a      	cmp	r2, r3
 8004268:	d3f4      	bcc.n	8004254 <mrbc_hash_dup+0x6c>
  }

  // TODO: dup other members.

  return ret;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	461c      	mov	r4, r3
 800426e:	f107 0310 	add.w	r3, r7, #16
 8004272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	3734      	adds	r7, #52	; 0x34
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <c_hash_new>:

//================================================================
/*! (method) new
*/
static void c_hash_new(struct VM *vm, mrbc_value v[], int argc)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b08d      	sub	sp, #52	; 0x34
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_new(vm, 0);
 800428c:	f107 0320 	add.w	r3, r7, #32
 8004290:	2200      	movs	r2, #0
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fdc0 	bl	8003e1a <mrbc_hash_new>
  SET_RETURN(ret);
 800429a:	f107 0410 	add.w	r4, r7, #16
 800429e:	f107 0320 	add.w	r3, r7, #32
 80042a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80042a8:	68b8      	ldr	r0, [r7, #8]
 80042aa:	f7ff fcef 	bl	8003c8c <mrbc_decref>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	461c      	mov	r4, r3
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80042bc:	bf00      	nop
 80042be:	3734      	adds	r7, #52	; 0x34
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <c_hash_get>:

//================================================================
/*! (operator) []
*/
static void c_hash_get(struct VM *vm, mrbc_value v[], int argc)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b08d      	sub	sp, #52	; 0x34
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  if( argc != 1 ) {
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d005      	beq.n	80042e2 <c_hash_get+0x1e>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <c_hash_get+0x64>)
 80042d8:	4914      	ldr	r1, [pc, #80]	; (800432c <c_hash_get+0x68>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f007 f892 	bl	800b404 <mrbc_raise>
 80042e0:	e01e      	b.n	8004320 <c_hash_get+0x5c>
    return;
  }

  mrbc_value val = mrbc_hash_get(&v[0], &v[1]);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f103 0210 	add.w	r2, r3, #16
 80042e8:	f107 0320 	add.w	r3, r7, #32
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fe7f 	bl	8003ff2 <mrbc_hash_get>
  mrbc_incref(&val);
 80042f4:	f107 0320 	add.w	r3, r7, #32
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fc93 	bl	8003c24 <mrbc_incref>
  SET_RETURN(val);
 80042fe:	f107 0410 	add.w	r4, r7, #16
 8004302:	f107 0320 	add.w	r3, r7, #32
 8004306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800430c:	68b8      	ldr	r0, [r7, #8]
 800430e:	f7ff fcbd 	bl	8003c8c <mrbc_decref>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	461c      	mov	r4, r3
 8004316:	f107 0310 	add.w	r3, r7, #16
 800431a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800431c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004320:	3734      	adds	r7, #52	; 0x34
 8004322:	46bd      	mov	sp, r7
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	bf00      	nop
 8004328:	08018ae8 	.word	0x08018ae8
 800432c:	20000154 	.word	0x20000154

08004330 <c_hash_set>:

//================================================================
/*! (operator) []=
*/
static void c_hash_set(struct VM *vm, mrbc_value v[], int argc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  if( argc != 2 ) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d005      	beq.n	800434e <c_hash_set+0x1e>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 8004342:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <c_hash_set+0x48>)
 8004344:	490d      	ldr	r1, [pc, #52]	; (800437c <c_hash_set+0x4c>)
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f007 f85c 	bl	800b404 <mrbc_raise>
    return;
 800434c:	e010      	b.n	8004370 <c_hash_set+0x40>
  }

  mrbc_value *v1 = &v[1];
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3310      	adds	r3, #16
 8004352:	617b      	str	r3, [r7, #20]
  mrbc_value *v2 = &v[2];
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3320      	adds	r3, #32
 8004358:	613b      	str	r3, [r7, #16]
  mrbc_hash_set(v, v1, v2);
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	68b8      	ldr	r0, [r7, #8]
 8004360:	f7ff fe0d 	bl	8003f7e <mrbc_hash_set>
  v1->tt = MRBC_TT_EMPTY;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
  v2->tt = MRBC_TT_EMPTY;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
}
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	08018ae8 	.word	0x08018ae8
 800437c:	20000154 	.word	0x20000154

08004380 <c_hash_clear>:

//================================================================
/*! (method) clear
*/
static void c_hash_clear(struct VM *vm, mrbc_value v[], int argc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  mrbc_hash_clear(v);
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	f7ff fedf 	bl	8004150 <mrbc_hash_clear>
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <c_hash_dup>:

//================================================================
/*! (method) dup
*/
static void c_hash_dup(struct VM *vm, mrbc_value v[], int argc)
{
 800439a:	b590      	push	{r4, r7, lr}
 800439c:	b08d      	sub	sp, #52	; 0x34
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_dup( vm, &v[0] );
 80043a6:	f107 0320 	add.w	r3, r7, #32
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	68f9      	ldr	r1, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff1a 	bl	80041e8 <mrbc_hash_dup>

  SET_RETURN(ret);
 80043b4:	f107 0410 	add.w	r4, r7, #16
 80043b8:	f107 0320 	add.w	r3, r7, #32
 80043bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f7ff fc62 	bl	8003c8c <mrbc_decref>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	461c      	mov	r4, r3
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80043d6:	bf00      	nop
 80043d8:	3734      	adds	r7, #52	; 0x34
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}

080043de <c_hash_delete>:

//================================================================
/*! (method) delete
*/
static void c_hash_delete(struct VM *vm, mrbc_value v[], int argc)
{
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b08d      	sub	sp, #52	; 0x34
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
  // TODO : now, support only delete(key) -> object

  mrbc_value ret = mrbc_hash_remove(v, v+1);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f103 0210 	add.w	r2, r3, #16
 80043f0:	f107 0320 	add.w	r3, r7, #32
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fe21 	bl	800403e <mrbc_hash_remove>

  // TODO: re-index hash table if need.

  SET_RETURN(ret);
 80043fc:	f107 0410 	add.w	r4, r7, #16
 8004400:	f107 0320 	add.w	r3, r7, #32
 8004404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800440a:	68b8      	ldr	r0, [r7, #8]
 800440c:	f7ff fc3e 	bl	8003c8c <mrbc_decref>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	461c      	mov	r4, r3
 8004414:	f107 0310 	add.w	r3, r7, #16
 8004418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800441a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800441e:	bf00      	nop
 8004420:	3734      	adds	r7, #52	; 0x34
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}

08004426 <c_hash_empty>:

//================================================================
/*! (method) empty?
*/
static void c_hash_empty(struct VM *vm, mrbc_value v[], int argc)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  int n = mrbc_hash_size(v);
 8004432:	68b8      	ldr	r0, [r7, #8]
 8004434:	f7ff fc9b 	bl	8003d6e <mrbc_hash_size>
 8004438:	6178      	str	r0, [r7, #20]

  if( n ) {
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <c_hash_empty+0x28>
    SET_FALSE_RETURN();
 8004440:	68b8      	ldr	r0, [r7, #8]
 8004442:	f7ff fc23 	bl	8003c8c <mrbc_decref>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2202      	movs	r2, #2
 800444a:	701a      	strb	r2, [r3, #0]
  } else {
    SET_TRUE_RETURN();
  }
}
 800444c:	e005      	b.n	800445a <c_hash_empty+0x34>
    SET_TRUE_RETURN();
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f7ff fc1c 	bl	8003c8c <mrbc_decref>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2203      	movs	r2, #3
 8004458:	701a      	strb	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <c_hash_has_key>:

//================================================================
/*! (method) has_key?
*/
static void c_hash_has_key(struct VM *vm, mrbc_value v[], int argc)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  mrbc_value *res = mrbc_hash_search(v, v+1);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3310      	adds	r3, #16
 8004472:	4619      	mov	r1, r3
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f7ff fd2f 	bl	8003ed8 <mrbc_hash_search>
 800447a:	6178      	str	r0, [r7, #20]

  if( res ) {
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <c_hash_has_key+0x2e>
    SET_TRUE_RETURN();
 8004482:	68b8      	ldr	r0, [r7, #8]
 8004484:	f7ff fc02 	bl	8003c8c <mrbc_decref>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2203      	movs	r2, #3
 800448c:	701a      	strb	r2, [r3, #0]
  } else {
    SET_FALSE_RETURN();
  }
}
 800448e:	e005      	b.n	800449c <c_hash_has_key+0x3a>
    SET_FALSE_RETURN();
 8004490:	68b8      	ldr	r0, [r7, #8]
 8004492:	f7ff fbfb 	bl	8003c8c <mrbc_decref>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2202      	movs	r2, #2
 800449a:	701a      	strb	r2, [r3, #0]
}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <c_hash_has_value>:

//================================================================
/*! (method) has_value?
*/
static void c_hash_has_value(struct VM *vm, mrbc_value v[], int argc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[0]);
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fc66 	bl	8003d8c <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 80044c0:	e013      	b.n	80044ea <c_hash_has_value+0x46>
    mrbc_value *val = mrbc_hash_i_next(&ite) + 1;	// skip key, get value
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fc93 	bl	8003df2 <mrbc_hash_i_next>
 80044cc:	4603      	mov	r3, r0
 80044ce:	3310      	adds	r3, #16
 80044d0:	623b      	str	r3, [r7, #32]
    if( mrbc_compare(val, &v[1]) == 0 ) {
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3310      	adds	r3, #16
 80044d6:	4619      	mov	r1, r3
 80044d8:	6a38      	ldr	r0, [r7, #32]
 80044da:	f009 fdad 	bl	800e038 <mrbc_compare>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <c_hash_has_value+0x46>
      ret = 1;
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80044e8:	e007      	b.n	80044fa <c_hash_has_value+0x56>
  while( mrbc_hash_i_has_next(&ite) ) {
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fc6c 	bl	8003dcc <mrbc_hash_i_has_next>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e3      	bne.n	80044c2 <c_hash_has_value+0x1e>
    }
  }

  if( ret ) {
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <c_hash_has_value+0x6a>
    SET_TRUE_RETURN();
 8004500:	68b8      	ldr	r0, [r7, #8]
 8004502:	f7ff fbc3 	bl	8003c8c <mrbc_decref>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2203      	movs	r2, #3
 800450a:	701a      	strb	r2, [r3, #0]
  } else {
    SET_FALSE_RETURN();
  }
}
 800450c:	e005      	b.n	800451a <c_hash_has_value+0x76>
    SET_FALSE_RETURN();
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f7ff fbbc 	bl	8003c8c <mrbc_decref>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2202      	movs	r2, #2
 8004518:	701a      	strb	r2, [r3, #0]
}
 800451a:	bf00      	nop
 800451c:	3728      	adds	r7, #40	; 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <c_hash_key>:

//================================================================
/*! (method) key
*/
static void c_hash_key(struct VM *vm, mrbc_value v[], int argc)
{
 8004522:	b590      	push	{r4, r7, lr}
 8004524:	b08f      	sub	sp, #60	; 0x3c
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  mrbc_value *ret = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[0]);
 8004532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fc27 	bl	8003d8c <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 800453e:	e017      	b.n	8004570 <c_hash_key+0x4e>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8004540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fc54 	bl	8003df2 <mrbc_hash_i_next>
 800454a:	6338      	str	r0, [r7, #48]	; 0x30
    if( mrbc_compare( &kv[1], &v[1]) == 0 ) {
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	f103 0210 	add.w	r2, r3, #16
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3310      	adds	r3, #16
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f009 fd6d 	bl	800e038 <mrbc_compare>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <c_hash_key+0x4e>
      mrbc_incref( &kv[0] );
 8004564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004566:	f7ff fb5d 	bl	8003c24 <mrbc_incref>
      ret = &kv[0];
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800456e:	e007      	b.n	8004580 <c_hash_key+0x5e>
  while( mrbc_hash_i_has_next(&ite) ) {
 8004570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fc29 	bl	8003dcc <mrbc_hash_i_has_next>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1df      	bne.n	8004540 <c_hash_key+0x1e>
    }
  }

  if( ret ) {
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <c_hash_key+0x86>
    SET_RETURN(*ret);
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	f107 0410 	add.w	r4, r7, #16
 800458c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800458e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f7ff fb7a 	bl	8003c8c <mrbc_decref>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	461c      	mov	r4, r3
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  } else {
    SET_NIL_RETURN();
  }
}
 80045a6:	e005      	b.n	80045b4 <c_hash_key+0x92>
    SET_NIL_RETURN();
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f7ff fb6f 	bl	8003c8c <mrbc_decref>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	373c      	adds	r7, #60	; 0x3c
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd90      	pop	{r4, r7, pc}

080045bc <c_hash_keys>:

//================================================================
/*! (method) keys
*/
static void c_hash_keys(struct VM *vm, mrbc_value v[], int argc)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b093      	sub	sp, #76	; 0x4c
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new( vm, mrbc_hash_size(v) );
 80045c8:	68b8      	ldr	r0, [r7, #8]
 80045ca:	f7ff fbd0 	bl	8003d6e <mrbc_hash_size>
 80045ce:	4602      	mov	r2, r0
 80045d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fd feab 	bl	8002332 <mrbc_array_new>
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 80045dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fbd2 	bl	8003d8c <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 80045e8:	e00e      	b.n	8004608 <c_hash_keys+0x4c>
    mrbc_value *key = mrbc_hash_i_next(&ite);
 80045ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fbff 	bl	8003df2 <mrbc_hash_i_next>
 80045f4:	6478      	str	r0, [r7, #68]	; 0x44
    mrbc_array_push(&ret, key);
 80045f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd ffc8 	bl	8002592 <mrbc_array_push>
    mrbc_incref(key);
 8004602:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004604:	f7ff fb0e 	bl	8003c24 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 8004608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fbdd 	bl	8003dcc <mrbc_hash_i_has_next>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e8      	bne.n	80045ea <c_hash_keys+0x2e>
  }

  SET_RETURN(ret);
 8004618:	f107 0410 	add.w	r4, r7, #16
 800461c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	f7ff fb30 	bl	8003c8c <mrbc_decref>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	461c      	mov	r4, r3
 8004630:	f107 0310 	add.w	r3, r7, #16
 8004634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800463a:	bf00      	nop
 800463c:	374c      	adds	r7, #76	; 0x4c
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}

08004642 <c_hash_size>:

//================================================================
/*! (method) size,length,count
*/
static void c_hash_size(struct VM *vm, mrbc_value v[], int argc)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
  int n = mrbc_hash_size(v);
 800464e:	68b8      	ldr	r0, [r7, #8]
 8004650:	f7ff fb8d 	bl	8003d6e <mrbc_hash_size>
 8004654:	6178      	str	r0, [r7, #20]

  SET_INT_RETURN(n);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	68b8      	ldr	r0, [r7, #8]
 800465c:	f7ff fb16 	bl	8003c8c <mrbc_decref>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2204      	movs	r2, #4
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	609a      	str	r2, [r3, #8]
}
 800466c:	bf00      	nop
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <c_hash_merge>:

//================================================================
/*! (method) merge
*/
static void c_hash_merge(struct VM *vm, mrbc_value v[], int argc)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b093      	sub	sp, #76	; 0x4c
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_hash_dup( vm, &v[0] );
 8004680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fdad 	bl	80041e8 <mrbc_hash_dup>
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[1]);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f103 0210 	add.w	r2, r3, #16
 8004694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fb76 	bl	8003d8c <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 80046a0:	e016      	b.n	80046d0 <c_hash_merge+0x5c>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 80046a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fba3 	bl	8003df2 <mrbc_hash_i_next>
 80046ac:	6478      	str	r0, [r7, #68]	; 0x44
    mrbc_hash_set( &ret, &kv[0], &kv[1] );
 80046ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b0:	f103 0210 	add.w	r2, r3, #16
 80046b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fc5f 	bl	8003f7e <mrbc_hash_set>
    mrbc_incref( &kv[0] );
 80046c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80046c2:	f7ff faaf 	bl	8003c24 <mrbc_incref>
    mrbc_incref( &kv[1] );
 80046c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c8:	3310      	adds	r3, #16
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff faaa 	bl	8003c24 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 80046d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fb79 	bl	8003dcc <mrbc_hash_i_has_next>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e0      	bne.n	80046a2 <c_hash_merge+0x2e>
  }

  SET_RETURN(ret);
 80046e0:	f107 0410 	add.w	r4, r7, #16
 80046e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80046ee:	68b8      	ldr	r0, [r7, #8]
 80046f0:	f7ff facc 	bl	8003c8c <mrbc_decref>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	461c      	mov	r4, r3
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004702:	bf00      	nop
 8004704:	374c      	adds	r7, #76	; 0x4c
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}

0800470a <c_hash_merge_self>:

//================================================================
/*! (method) merge!
*/
static void c_hash_merge_self(struct VM *vm, mrbc_value v[], int argc)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b088      	sub	sp, #32
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&v[1]);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f103 0210 	add.w	r2, r3, #16
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fb32 	bl	8003d8c <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 8004728:	e014      	b.n	8004754 <c_hash_merge_self+0x4a>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 800472a:	f107 0310 	add.w	r3, r7, #16
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fb5f 	bl	8003df2 <mrbc_hash_i_next>
 8004734:	61f8      	str	r0, [r7, #28]
    mrbc_hash_set( v, &kv[0], &kv[1] );
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3310      	adds	r3, #16
 800473a:	461a      	mov	r2, r3
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	68b8      	ldr	r0, [r7, #8]
 8004740:	f7ff fc1d 	bl	8003f7e <mrbc_hash_set>
    mrbc_incref( &kv[0] );
 8004744:	69f8      	ldr	r0, [r7, #28]
 8004746:	f7ff fa6d 	bl	8003c24 <mrbc_incref>
    mrbc_incref( &kv[1] );
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3310      	adds	r3, #16
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fa68 	bl	8003c24 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 8004754:	f107 0310 	add.w	r3, r7, #16
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fb37 	bl	8003dcc <mrbc_hash_i_has_next>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e2      	bne.n	800472a <c_hash_merge_self+0x20>
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <c_hash_values>:

//================================================================
/*! (method) values
*/
static void c_hash_values(struct VM *vm, mrbc_value v[], int argc)
{
 800476e:	b590      	push	{r4, r7, lr}
 8004770:	b093      	sub	sp, #76	; 0x4c
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new( vm, mrbc_hash_size(v) );
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f7ff faf7 	bl	8003d6e <mrbc_hash_size>
 8004780:	4602      	mov	r2, r0
 8004782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fdd2 	bl	8002332 <mrbc_array_new>
  mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 800478e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff faf9 	bl	8003d8c <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 800479a:	e010      	b.n	80047be <c_hash_values+0x50>
    mrbc_value *val = mrbc_hash_i_next(&ite) + 1;
 800479c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fb26 	bl	8003df2 <mrbc_hash_i_next>
 80047a6:	4603      	mov	r3, r0
 80047a8:	3310      	adds	r3, #16
 80047aa:	647b      	str	r3, [r7, #68]	; 0x44
    mrbc_array_push(&ret, val);
 80047ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd feed 	bl	8002592 <mrbc_array_push>
    mrbc_incref(val);
 80047b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047ba:	f7ff fa33 	bl	8003c24 <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 80047be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fb02 	bl	8003dcc <mrbc_hash_i_has_next>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e6      	bne.n	800479c <c_hash_values+0x2e>
  }

  SET_RETURN(ret);
 80047ce:	f107 0410 	add.w	r4, r7, #16
 80047d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80047dc:	68b8      	ldr	r0, [r7, #8]
 80047de:	f7ff fa55 	bl	8003c8c <mrbc_decref>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	461c      	mov	r4, r3
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80047f0:	bf00      	nop
 80047f2:	374c      	adds	r7, #76	; 0x4c
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}

080047f8 <c_hash_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_hash_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b09f      	sub	sp, #124	; 0x7c
 80047fc:	af04      	add	r7, sp, #16
 80047fe:	61f8      	str	r0, [r7, #28]
 8004800:	61b9      	str	r1, [r7, #24]
 8004802:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f993 3000 	ldrsb.w	r3, [r3]
 800480a:	2b07      	cmp	r3, #7
 800480c:	d112      	bne.n	8004834 <c_hash_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004816:	4618      	mov	r0, r3
 8004818:	f009 f98e 	bl	800db38 <mrbc_symid_to_str>
 800481c:	4602      	mov	r2, r0
 800481e:	69bc      	ldr	r4, [r7, #24]
 8004820:	463b      	mov	r3, r7
 8004822:	69f9      	ldr	r1, [r7, #28]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fa77 	bl	8003d18 <mrbc_string_new_cstr>
 800482a:	463b      	mov	r3, r7
 800482c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800482e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004832:	e08a      	b.n	800494a <c_hash_inspect+0x152>
  }

  mrbc_value ret = mrbc_string_new_cstr(vm, "{");
 8004834:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004838:	4a45      	ldr	r2, [pc, #276]	; (8004950 <c_hash_inspect+0x158>)
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fa6b 	bl	8003d18 <mrbc_string_new_cstr>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8004842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004844:	2b00      	cmp	r3, #0
 8004846:	d079      	beq.n	800493c <c_hash_inspect+0x144>

  mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 8004848:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fa9c 	bl	8003d8c <mrbc_hash_iterator_new>
  int flag_first = 1;
 8004854:	2301      	movs	r3, #1
 8004856:	667b      	str	r3, [r7, #100]	; 0x64

  while( mrbc_hash_i_has_next(&ite) ) {
 8004858:	e050      	b.n	80048fc <c_hash_inspect+0x104>
    if( !flag_first ) mrbc_string_append_cstr( &ret, ", " );
 800485a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <c_hash_inspect+0x74>
 8004860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004864:	493b      	ldr	r1, [pc, #236]	; (8004954 <c_hash_inspect+0x15c>)
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fa6e 	bl	8003d48 <mrbc_string_append_cstr>
    flag_first = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	667b      	str	r3, [r7, #100]	; 0x64
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8004870:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fabc 	bl	8003df2 <mrbc_hash_i_next>
 800487a:	6638      	str	r0, [r7, #96]	; 0x60

    mrbc_value s1 = mrbc_send( vm, v, argc, &kv[0], "inspect", 0 );
 800487c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004880:	2300      	movs	r3, #0
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <c_hash_inspect+0x160>)
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	69f9      	ldr	r1, [r7, #28]
 8004892:	f004 ffa5 	bl	80097e0 <mrbc_send>
    mrbc_string_append( &ret, &s1 );
 8004896:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800489a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f002 fdb0 	bl	8007406 <mrbc_string_append>
    mrbc_string_delete( &s1 );
 80048a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 fd0a 	bl	80072c4 <mrbc_string_delete>

    mrbc_string_append_cstr( &ret, "=>" );
 80048b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048b4:	4929      	ldr	r1, [pc, #164]	; (800495c <c_hash_inspect+0x164>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fa46 	bl	8003d48 <mrbc_string_append_cstr>

    s1 = mrbc_send( vm, v, argc, &kv[1], "inspect", 0 );
 80048bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048be:	3310      	adds	r3, #16
 80048c0:	4638      	mov	r0, r7
 80048c2:	2200      	movs	r2, #0
 80048c4:	9202      	str	r2, [sp, #8]
 80048c6:	4a24      	ldr	r2, [pc, #144]	; (8004958 <c_hash_inspect+0x160>)
 80048c8:	9201      	str	r2, [sp, #4]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	69f9      	ldr	r1, [r7, #28]
 80048d2:	f004 ff85 	bl	80097e0 <mrbc_send>
 80048d6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80048da:	463b      	mov	r3, r7
 80048dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_string_append( &ret, &s1 );
 80048e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80048e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f002 fd8a 	bl	8007406 <mrbc_string_append>
    mrbc_string_delete( &s1 );
 80048f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048f6:	4618      	mov	r0, r3
 80048f8:	f002 fce4 	bl	80072c4 <mrbc_string_delete>
  while( mrbc_hash_i_has_next(&ite) ) {
 80048fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fa63 	bl	8003dcc <mrbc_hash_i_has_next>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1a6      	bne.n	800485a <c_hash_inspect+0x62>
  }

  mrbc_string_append_cstr( &ret, "}" );
 800490c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004910:	4913      	ldr	r1, [pc, #76]	; (8004960 <c_hash_inspect+0x168>)
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fa18 	bl	8003d48 <mrbc_string_append_cstr>

  SET_RETURN(ret);
 8004918:	f107 0420 	add.w	r4, r7, #32
 800491c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004926:	69b8      	ldr	r0, [r7, #24]
 8004928:	f7ff f9b0 	bl	8003c8c <mrbc_decref>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	461c      	mov	r4, r3
 8004930:	f107 0320 	add.w	r3, r7, #32
 8004934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;
 800493a:	e006      	b.n	800494a <c_hash_inspect+0x152>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 800493c:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 800493e:	69b8      	ldr	r0, [r7, #24]
 8004940:	f7ff f9a4 	bl	8003c8c <mrbc_decref>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
}
 800494a:	376c      	adds	r7, #108	; 0x6c
 800494c:	46bd      	mov	sp, r7
 800494e:	bd90      	pop	{r4, r7, pc}
 8004950:	08018b04 	.word	0x08018b04
 8004954:	08018b08 	.word	0x08018b08
 8004958:	08018b0c 	.word	0x08018b0c
 800495c:	08018b14 	.word	0x08018b14
 8004960:	08018b18 	.word	0x08018b18

08004964 <mrbc_decref>:
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f993 3000 	ldrsb.w	r3, [r3]
 8004972:	2b07      	cmp	r3, #7
 8004974:	dd2c      	ble.n	80049d0 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	885b      	ldrh	r3, [r3, #2]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <mrbc_decref+0x2a>
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <mrbc_decref+0x78>)
 8004982:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <mrbc_decref+0x7c>)
 8004984:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8004988:	4816      	ldr	r0, [pc, #88]	; (80049e4 <mrbc_decref+0x80>)
 800498a:	f010 fe01 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	885b      	ldrh	r3, [r3, #2]
 8004994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004998:	4293      	cmp	r3, r2
 800499a:	d106      	bne.n	80049aa <mrbc_decref+0x46>
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <mrbc_decref+0x84>)
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <mrbc_decref+0x7c>)
 80049a0:	f240 11d3 	movw	r1, #467	; 0x1d3
 80049a4:	480f      	ldr	r0, [pc, #60]	; (80049e4 <mrbc_decref+0x80>)
 80049a6:	f010 fdf3 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	885a      	ldrh	r2, [r3, #2]
 80049b0:	3a01      	subs	r2, #1
 80049b2:	b292      	uxth	r2, r2
 80049b4:	805a      	strh	r2, [r3, #2]
 80049b6:	885b      	ldrh	r3, [r3, #2]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f993 3000 	ldrsb.w	r3, [r3]
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b09      	ldr	r3, [pc, #36]	; (80049ec <mrbc_decref+0x88>)
 80049c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
 80049ce:	e002      	b.n	80049d6 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 80049d4:	bf00      	nop
}
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08018b24 	.word	0x08018b24
 80049e0:	0801aabc 	.word	0x0801aabc
 80049e4:	08018b3c 	.word	0x08018b3c
 80049e8:	08018b58 	.word	0x08018b58
 80049ec:	0801bde8 	.word	0x0801bde8

080049f0 <mrbc_string_new_cstr>:
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d004      	beq.n	8004a0c <mrbc_string_new_cstr+0x1c>
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fb fbf6 	bl	80001f4 <strlen>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	e000      	b.n	8004a0e <mrbc_string_new_cstr+0x1e>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	f002 fbb8 	bl	8007188 <mrbc_string_new>
}
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <mrbc_printf_init>:
  @param  size	buffer size.
  @param  fstr	format string.
*/
static inline void mrbc_printf_init( mrbc_printf_t *pf, char *buf, int size,
				     const char *fstr )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  pf->p = pf->buf = buf;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	609a      	str	r2, [r3, #8]
  pf->buf_end = buf + size - 1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	441a      	add	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	605a      	str	r2, [r3, #4]
  pf->fstr = fstr;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
  pf->fmt = (struct RPrintfFormat){0};
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3310      	adds	r3, #16
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	605a      	str	r2, [r3, #4]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <mrbc_printf_end>:
/*! terminate ('\0') output buffer.

  @param  pf	pointer to mrbc_printf
*/
static inline void mrbc_printf_end( mrbc_printf_t *pf )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  *pf->p = '\0';
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <c_integer_bitref>:
/***** Integer class ********************************************************/
//================================================================
/*! (operator) [] bit reference
 */
static void c_integer_bitref(struct VM *vm, mrbc_value v[], int argc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  if( mrbc_integer(v[1]) < 0 ) {
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	3310      	adds	r3, #16
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	da0b      	bge.n	8004aae <c_integer_bitref+0x2e>
    SET_INT_RETURN( 0 );
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f7ff ff62 	bl	8004964 <mrbc_decref>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	609a      	str	r2, [r3, #8]
  } else {
    mrbc_int_t mask = (argc == 1) ? 1 : (1 << mrbc_integer(v[2])) - 1;
    SET_INT_RETURN( (mrbc_integer(v[0]) >> mrbc_integer(v[1])) & mask );
  }
}
 8004aac:	e01f      	b.n	8004aee <c_integer_bitref+0x6e>
    mrbc_int_t mask = (argc == 1) ? 1 : (1 << mrbc_integer(v[2])) - 1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d007      	beq.n	8004ac4 <c_integer_bitref+0x44>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3320      	adds	r3, #32
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2201      	movs	r2, #1
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <c_integer_bitref+0x46>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
    SET_INT_RETURN( (mrbc_integer(v[0]) >> mrbc_integer(v[1])) & mask );
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3310      	adds	r3, #16
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	fa42 f303 	asr.w	r3, r2, r3
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	68b8      	ldr	r0, [r7, #8]
 8004ade:	f7ff ff41 	bl	8004964 <mrbc_decref>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	609a      	str	r2, [r3, #8]
}
 8004aee:	bf00      	nop
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <c_integer_positive>:

//================================================================
/*! (operator) unary +
*/
static void c_integer_positive(struct VM *vm, mrbc_value v[], int argc)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  // do nothing
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <c_integer_negative>:

//================================================================
/*! (operator) unary -
*/
static void c_integer_negative(struct VM *vm, mrbc_value v[], int argc)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[0]);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( -num );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	425b      	negs	r3, r3
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f7ff ff1c 	bl	8004964 <mrbc_decref>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <c_integer_power>:

//================================================================
/*! (operator) ** power
 */
static void c_integer_power(struct VM *vm, mrbc_value v[], int argc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	3310      	adds	r3, #16
 8004b50:	f993 3000 	ldrsb.w	r3, [r3]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d125      	bne.n	8004ba4 <c_integer_power+0x64>
    mrbc_int_t x = 1;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
    int i;

    if( mrbc_integer(v[1]) < 0 ) x = 0;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3310      	adds	r3, #16
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da01      	bge.n	8004b6a <c_integer_power+0x2a>
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < mrbc_integer(v[1]); i++ ) {
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e008      	b.n	8004b82 <c_integer_power+0x42>
      x *= mrbc_integer(v[0]);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < mrbc_integer(v[1]); i++ ) {
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	3310      	adds	r3, #16
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	dbf0      	blt.n	8004b70 <c_integer_power+0x30>
    }
    SET_INT_RETURN( x );
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	68b8      	ldr	r0, [r7, #8]
 8004b94:	f7ff fee6 	bl	8004964 <mrbc_decref>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	609a      	str	r2, [r3, #8]
#if MRBC_USE_FLOAT && MRBC_USE_MATH
  else if( mrbc_type(v[1]) == MRBC_TT_FLOAT ) {
    SET_FLOAT_RETURN( pow( mrbc_integer(v[0]), mrbc_float(v[1])));
  }
#endif
}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <c_integer_mod>:

//================================================================
/*! (operator) %
 */
static void c_integer_mod(struct VM *vm, mrbc_value v[], int argc)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	3310      	adds	r3, #16
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( v->i % num );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	fb93 f2f2 	sdiv	r2, r3, r2
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	fb01 f202 	mul.w	r2, r1, r2
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	68b8      	ldr	r0, [r7, #8]
 8004bd6:	f7ff fec5 	bl	8004964 <mrbc_decref>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	609a      	str	r2, [r3, #8]
}
 8004be6:	bf00      	nop
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <c_integer_and>:

//================================================================
/*! (operator) &; bit operation AND
 */
static void c_integer_and(struct VM *vm, mrbc_value v[], int argc)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN(v->i & num);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	68b8      	ldr	r0, [r7, #8]
 8004c0e:	f7ff fea9 	bl	8004964 <mrbc_decref>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2204      	movs	r2, #4
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	609a      	str	r2, [r3, #8]
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <c_integer_or>:

//================================================================
/*! (operator) |; bit operation OR
 */
static void c_integer_or(struct VM *vm, mrbc_value v[], int argc)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3310      	adds	r3, #16
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN(v->i | num);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	68b8      	ldr	r0, [r7, #8]
 8004c46:	f7ff fe8d 	bl	8004964 <mrbc_decref>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	bf00      	nop
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <c_integer_xor>:

//================================================================
/*! (operator) ^; bit operation XOR
 */
static void c_integer_xor(struct VM *vm, mrbc_value v[], int argc)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[1]);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3310      	adds	r3, #16
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( v->i ^ num );
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4053      	eors	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f7ff fe71 	bl	8004964 <mrbc_decref>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2204      	movs	r2, #4
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	609a      	str	r2, [r3, #8]
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <c_integer_not>:

//================================================================
/*! (operator) ~; bit operation NOT
 */
static void c_integer_not(struct VM *vm, mrbc_value v[], int argc)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
  mrbc_int_t num = mrbc_integer(v[0]);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( ~num );
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68b8      	ldr	r0, [r7, #8]
 8004cb0:	f7ff fe58 	bl	8004964 <mrbc_decref>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <shift>:

//================================================================
/*! x-bit left shift for x
 */
static mrbc_int_t shift(mrbc_int_t x, mrbc_int_t y)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  // Don't support environments that include padding in int.
  const int INT_BITS = sizeof(mrbc_int_t) * CHAR_BIT;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	60fb      	str	r3, [r7, #12]

  if( y >= INT_BITS ) return 0;
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	db01      	blt.n	8004ce2 <shift+0x1a>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e013      	b.n	8004d0a <shift+0x42>
  if( y >= 0 ) return x << y;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	db04      	blt.n	8004cf2 <shift+0x2a>
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	e00b      	b.n	8004d0a <shift+0x42>
  if( y <= -INT_BITS ) return 0;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	425b      	negs	r3, r3
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	dc01      	bgt.n	8004d00 <shift+0x38>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e004      	b.n	8004d0a <shift+0x42>
  return x >> -y;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	425b      	negs	r3, r3
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	fa42 f303 	asr.w	r3, r2, r3
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <c_integer_lshift>:

//================================================================
/*! (operator) <<; bit operation LEFT_SHIFT
 */
static void c_integer_lshift(struct VM *vm, mrbc_value v[], int argc)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
  int num = mrbc_integer(v[1]);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	3310      	adds	r3, #16
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( shift(v->i, num) );
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ffc9 	bl	8004cc8 <shift>
 8004d36:	6138      	str	r0, [r7, #16]
 8004d38:	68b8      	ldr	r0, [r7, #8]
 8004d3a:	f7ff fe13 	bl	8004964 <mrbc_decref>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2204      	movs	r2, #4
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	609a      	str	r2, [r3, #8]
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <c_integer_rshift>:

//================================================================
/*! (operator) >>; bit operation RIGHT_SHIFT
 */
static void c_integer_rshift(struct VM *vm, mrbc_value v[], int argc)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b086      	sub	sp, #24
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
  int num = mrbc_integer(v[1]);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3310      	adds	r3, #16
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( shift(v->i, -num) );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f7ff ffa9 	bl	8004cc8 <shift>
 8004d76:	6138      	str	r0, [r7, #16]
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f7ff fdf3 	bl	8004964 <mrbc_decref>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2204      	movs	r2, #4
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	609a      	str	r2, [r3, #8]
}
 8004d8a:	bf00      	nop
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <c_integer_abs>:

//================================================================
/*! (method) abs
*/
static void c_integer_abs(struct VM *vm, mrbc_value v[], int argc)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  if( mrbc_integer(v[0]) < 0 ) {
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da04      	bge.n	8004db0 <c_integer_abs+0x1e>
    mrbc_integer(v[0]) = -mrbc_integer(v[0]);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	425a      	negs	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <c_numeric_clamp>:
 *
 * Note: Does not support Range object as the argument
 *       like `3.clamp(1..2) #=> 2`
*/
static void c_numeric_clamp(struct VM *vm, mrbc_value v[], int argc)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b099      	sub	sp, #100	; 0x64
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  if (argc != 2) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d005      	beq.n	8004dda <c_numeric_clamp+0x1e>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "wrong number of arguments (expected 2)");
 8004dce:	4a42      	ldr	r2, [pc, #264]	; (8004ed8 <c_numeric_clamp+0x11c>)
 8004dd0:	4942      	ldr	r1, [pc, #264]	; (8004edc <c_numeric_clamp+0x120>)
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f006 fb16 	bl	800b404 <mrbc_raise>
    return;
 8004dd8:	e07a      	b.n	8004ed0 <c_numeric_clamp+0x114>
  }
  mrbc_value min = v[1];
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004de0:	3310      	adds	r3, #16
 8004de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_value max = v[2];
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004dee:	3320      	adds	r3, #32
 8004df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (
    (mrbc_type(min) != MRBC_TT_INTEGER && mrbc_type(min) != MRBC_TT_FLOAT) ||
 8004df6:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
  if (
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d003      	beq.n	8004e06 <c_numeric_clamp+0x4a>
    (mrbc_type(min) != MRBC_TT_INTEGER && mrbc_type(min) != MRBC_TT_FLOAT) ||
 8004dfe:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8004e02:	2b05      	cmp	r3, #5
 8004e04:	d107      	bne.n	8004e16 <c_numeric_clamp+0x5a>
    (mrbc_type(max) != MRBC_TT_INTEGER && mrbc_type(max) != MRBC_TT_FLOAT)
 8004e06:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
    (mrbc_type(min) != MRBC_TT_INTEGER && mrbc_type(min) != MRBC_TT_FLOAT) ||
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d009      	beq.n	8004e22 <c_numeric_clamp+0x66>
    (mrbc_type(max) != MRBC_TT_INTEGER && mrbc_type(max) != MRBC_TT_FLOAT)
 8004e0e:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d005      	beq.n	8004e22 <c_numeric_clamp+0x66>
  ){
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "comparison failed");
 8004e16:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <c_numeric_clamp+0x124>)
 8004e18:	4930      	ldr	r1, [pc, #192]	; (8004edc <c_numeric_clamp+0x120>)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f006 faf2 	bl	800b404 <mrbc_raise>
    return;
 8004e20:	e056      	b.n	8004ed0 <c_numeric_clamp+0x114>
  }
  if (mrbc_compare(&max, &min) < 0) {
 8004e22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f009 f903 	bl	800e038 <mrbc_compare>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da05      	bge.n	8004e44 <c_numeric_clamp+0x88>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "min argument must be smaller than max argument");
 8004e38:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <c_numeric_clamp+0x128>)
 8004e3a:	4928      	ldr	r1, [pc, #160]	; (8004edc <c_numeric_clamp+0x120>)
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f006 fae1 	bl	800b404 <mrbc_raise>
    return;
 8004e42:	e045      	b.n	8004ed0 <c_numeric_clamp+0x114>
  }
  if (mrbc_compare(&v[0], &min) < 0) {
 8004e44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e48:	4619      	mov	r1, r3
 8004e4a:	68b8      	ldr	r0, [r7, #8]
 8004e4c:	f009 f8f4 	bl	800e038 <mrbc_compare>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da11      	bge.n	8004e7a <c_numeric_clamp+0xbe>
    SET_RETURN(min);
 8004e56:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004e5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004e64:	68b8      	ldr	r0, [r7, #8]
 8004e66:	f7ff fd7d 	bl	8004964 <mrbc_decref>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	461c      	mov	r4, r3
 8004e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004e78:	e02a      	b.n	8004ed0 <c_numeric_clamp+0x114>
  }
  if (mrbc_compare(&max, &v[0]) < 0) {
 8004e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f009 f8d9 	bl	800e038 <mrbc_compare>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da11      	bge.n	8004eb0 <c_numeric_clamp+0xf4>
    SET_RETURN(max);
 8004e8c:	f107 0420 	add.w	r4, r7, #32
 8004e90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f7ff fd62 	bl	8004964 <mrbc_decref>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	461c      	mov	r4, r3
 8004ea4:	f107 0320 	add.w	r3, r7, #32
 8004ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004eae:	e00f      	b.n	8004ed0 <c_numeric_clamp+0x114>
  }
  SET_RETURN(v[0]); /* return self */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f107 0410 	add.w	r4, r7, #16
 8004eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004ebc:	68b8      	ldr	r0, [r7, #8]
 8004ebe:	f7ff fd51 	bl	8004964 <mrbc_decref>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	461c      	mov	r4, r3
 8004ec6:	f107 0310 	add.w	r3, r7, #16
 8004eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004ed0:	3764      	adds	r7, #100	; 0x64
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08018b74 	.word	0x08018b74
 8004edc:	20000154 	.word	0x20000154
 8004ee0:	08018b9c 	.word	0x08018b9c
 8004ee4:	08018bb0 	.word	0x08018bb0

08004ee8 <c_integer_to_f>:
#if MRBC_USE_FLOAT
//================================================================
/*! (method) to_f
*/
static void c_integer_to_f(struct VM *vm, mrbc_value v[], int argc)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  mrbc_float_t f = mrbc_integer(v[0]);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb fb2b 	bl	8000554 <__aeabi_i2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	e9c7 2306 	strd	r2, r3, [r7, #24]
  SET_FLOAT_RETURN( f );
 8004f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004f0e:	68b8      	ldr	r0, [r7, #8]
 8004f10:	f7ff fd28 	bl	8004964 <mrbc_decref>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2205      	movs	r2, #5
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f20:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8004f24:	bf00      	nop
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <c_integer_chr>:
#if MRBC_USE_STRING
//================================================================
/*! (method) chr
*/
static void c_integer_chr(struct VM *vm, mrbc_value v[], int argc)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b08f      	sub	sp, #60	; 0x3c
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  char buf[2] = { mrbc_integer(v[0]) };
 8004f38:	2300      	movs	r3, #0
 8004f3a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  mrbc_value value = mrbc_string_new(vm, buf, 1);
 8004f46:	f107 0020 	add.w	r0, r7, #32
 8004f4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f4e:	2301      	movs	r3, #1
 8004f50:	68f9      	ldr	r1, [r7, #12]
 8004f52:	f002 f919 	bl	8007188 <mrbc_string_new>
  SET_RETURN(value);
 8004f56:	f107 0410 	add.w	r4, r7, #16
 8004f5a:	f107 0320 	add.w	r3, r7, #32
 8004f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004f64:	68b8      	ldr	r0, [r7, #8]
 8004f66:	f7ff fcfd 	bl	8004964 <mrbc_decref>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	461c      	mov	r4, r3
 8004f6e:	f107 0310 	add.w	r3, r7, #16
 8004f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004f78:	bf00      	nop
 8004f7a:	373c      	adds	r7, #60	; 0x3c
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd90      	pop	{r4, r7, pc}

08004f80 <c_integer_inspect>:

//================================================================
/*! (method) inspect, to_s
*/
static void c_integer_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b09d      	sub	sp, #116	; 0x74
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	61f8      	str	r0, [r7, #28]
 8004f88:	61b9      	str	r1, [r7, #24]
 8004f8a:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8004f92:	2b07      	cmp	r3, #7
 8004f94:	d112      	bne.n	8004fbc <c_integer_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f008 fdca 	bl	800db38 <mrbc_symid_to_str>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	69bc      	ldr	r4, [r7, #24]
 8004fa8:	463b      	mov	r3, r7
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fd1f 	bl	80049f0 <mrbc_string_new_cstr>
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8004fba:	e046      	b.n	800504a <c_integer_inspect+0xca>
  }

  int base = 10;
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if( argc ) {
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d010      	beq.n	8004fe8 <c_integer_inspect+0x68>
    base = mrbc_integer(v[1]);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	3310      	adds	r3, #16
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if( base < 2 || base > 36 ) {
 8004fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	dd02      	ble.n	8004fda <c_integer_inspect+0x5a>
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	2b24      	cmp	r3, #36	; 0x24
 8004fd8:	dd06      	ble.n	8004fe8 <c_integer_inspect+0x68>
      mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "invalid radix %d", base);
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <c_integer_inspect+0xd0>)
 8004fde:	491d      	ldr	r1, [pc, #116]	; (8005054 <c_integer_inspect+0xd4>)
 8004fe0:	69f8      	ldr	r0, [r7, #28]
 8004fe2:	f006 fa63 	bl	800b4ac <mrbc_raisef>
      return;
 8004fe6:	e030      	b.n	800504a <c_integer_inspect+0xca>
    }
  }

  mrbc_printf_t pf;
  char buf[16];
  mrbc_printf_init( &pf, buf, sizeof(buf), NULL );
 8004fe8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004fec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	f7ff fd14 	bl	8004a20 <mrbc_printf_init>
  pf.fmt.type = 'd';
 8004ff8:	2364      	movs	r3, #100	; 0x64
 8004ffa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  mrbc_printf_int( &pf, v->i, base );
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	6899      	ldr	r1, [r3, #8]
 8005002:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005004:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005008:	4618      	mov	r0, r3
 800500a:	f005 fdef 	bl	800abec <mrbc_printf_int>
  mrbc_printf_end( &pf );
 800500e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fd26 	bl	8004a64 <mrbc_printf_end>

  mrbc_value value = mrbc_string_new_cstr(vm, buf);
 8005018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800501c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005020:	69f9      	ldr	r1, [r7, #28]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fce4 	bl	80049f0 <mrbc_string_new_cstr>
  SET_RETURN(value);
 8005028:	f107 0420 	add.w	r4, r7, #32
 800502c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005036:	69b8      	ldr	r0, [r7, #24]
 8005038:	f7ff fc94 	bl	8004964 <mrbc_decref>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	461c      	mov	r4, r3
 8005040:	f107 0320 	add.w	r3, r7, #32
 8005044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800504a:	3774      	adds	r7, #116	; 0x74
 800504c:	46bd      	mov	sp, r7
 800504e:	bd90      	pop	{r4, r7, pc}
 8005050:	08018be0 	.word	0x08018be0
 8005054:	20000154 	.word	0x20000154

08005058 <c_float_positive>:

//================================================================
/*! (operator) unary +
*/
static void c_float_positive(struct VM *vm, mrbc_value v[], int argc)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  // do nothing
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <c_float_negative>:

//================================================================
/*! (operator) unary -
*/
static void c_float_negative(struct VM *vm, mrbc_value v[], int argc)
{
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  mrbc_float_t num = mrbc_float(v[0]);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005082:	e9c7 2306 	strd	r2, r3, [r7, #24]
  SET_FLOAT_RETURN( -num );
 8005086:	69bc      	ldr	r4, [r7, #24]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800508e:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f7ff fc66 	bl	8004964 <mrbc_decref>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2205      	movs	r2, #5
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bdb0      	pop	{r4, r5, r7, pc}

080050b0 <c_float_abs>:

//================================================================
/*! (method) abs
*/
static void c_float_abs(struct VM *vm, mrbc_value v[], int argc)
{
 80050b0:	b5b0      	push	{r4, r5, r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  if( mrbc_float(v[0]) < 0 ) {
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	f7fb fd1f 	bl	8000b0c <__aeabi_dcmplt>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d100      	bne.n	80050d6 <c_float_abs+0x26>
    mrbc_float(v[0]) = -mrbc_float(v[0]);
  }
}
 80050d4:	e008      	b.n	80050e8 <c_float_abs+0x38>
    mrbc_float(v[0]) = -mrbc_float(v[0]);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80050dc:	4614      	mov	r4, r2
 80050de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bdb0      	pop	{r4, r5, r7, pc}

080050f0 <c_float_to_i>:

//================================================================
/*! (method) to_i
*/
static void c_float_to_i(struct VM *vm, mrbc_value v[], int argc)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  mrbc_int_t i = (mrbc_int_t)mrbc_float(v[0]);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f7fb fd29 	bl	8000b5c <__aeabi_d2iz>
 800510a:	4603      	mov	r3, r0
 800510c:	617b      	str	r3, [r7, #20]
  SET_INT_RETURN( i );
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	68b8      	ldr	r0, [r7, #8]
 8005114:	f7ff fc26 	bl	8004964 <mrbc_decref>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2204      	movs	r2, #4
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <c_float_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_float_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b097      	sub	sp, #92	; 0x5c
 8005130:	af02      	add	r7, sp, #8
 8005132:	61f8      	str	r0, [r7, #28]
 8005134:	61b9      	str	r1, [r7, #24]
 8005136:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f993 3000 	ldrsb.w	r3, [r3]
 800513e:	2b07      	cmp	r3, #7
 8005140:	d112      	bne.n	8005168 <c_float_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800514a:	4618      	mov	r0, r3
 800514c:	f008 fcf4 	bl	800db38 <mrbc_symid_to_str>
 8005150:	4602      	mov	r2, r0
 8005152:	69bc      	ldr	r4, [r7, #24]
 8005154:	463b      	mov	r3, r7
 8005156:	69f9      	ldr	r1, [r7, #28]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fc49 	bl	80049f0 <mrbc_string_new_cstr>
 800515e:	463b      	mov	r3, r7
 8005160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005166:	e023      	b.n	80051b0 <c_float_inspect+0x84>
    return;
  }

  char buf[16];

  snprintf( buf, sizeof(buf), "%g", v->d );
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800516e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8005172:	e9cd 2300 	strd	r2, r3, [sp]
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <c_float_inspect+0x8c>)
 8005178:	2110      	movs	r1, #16
 800517a:	f011 f9a9 	bl	80164d0 <sniprintf>
  mrbc_value value = mrbc_string_new_cstr(vm, buf);
 800517e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005182:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005186:	69f9      	ldr	r1, [r7, #28]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fc31 	bl	80049f0 <mrbc_string_new_cstr>
  SET_RETURN(value);
 800518e:	f107 0420 	add.w	r4, r7, #32
 8005192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005196:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800519c:	69b8      	ldr	r0, [r7, #24]
 800519e:	f7ff fbe1 	bl	8004964 <mrbc_decref>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	461c      	mov	r4, r3
 80051a6:	f107 0320 	add.w	r3, r7, #32
 80051aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80051b0:	3754      	adds	r7, #84	; 0x54
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd90      	pop	{r4, r7, pc}
 80051b6:	bf00      	nop
 80051b8:	08018bfc 	.word	0x08018bfc

080051bc <mrbc_incref>:
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f993 3000 	ldrsb.w	r3, [r3]
 80051ca:	2b07      	cmp	r3, #7
 80051cc:	dd1e      	ble.n	800520c <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	885b      	ldrh	r3, [r3, #2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <mrbc_incref+0x2a>
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <mrbc_incref+0x58>)
 80051da:	4a0f      	ldr	r2, [pc, #60]	; (8005218 <mrbc_incref+0x5c>)
 80051dc:	f240 11c3 	movw	r1, #451	; 0x1c3
 80051e0:	480e      	ldr	r0, [pc, #56]	; (800521c <mrbc_incref+0x60>)
 80051e2:	f010 f9d5 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	885b      	ldrh	r3, [r3, #2]
 80051ec:	2bff      	cmp	r3, #255	; 0xff
 80051ee:	d106      	bne.n	80051fe <mrbc_incref+0x42>
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <mrbc_incref+0x64>)
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <mrbc_incref+0x5c>)
 80051f4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80051f8:	4808      	ldr	r0, [pc, #32]	; (800521c <mrbc_incref+0x60>)
 80051fa:	f010 f9c9 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	885a      	ldrh	r2, [r3, #2]
 8005204:	3201      	adds	r2, #1
 8005206:	b292      	uxth	r2, r2
 8005208:	805a      	strh	r2, [r3, #2]
 800520a:	e000      	b.n	800520e <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800520c:	bf00      	nop
}
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	08018c08 	.word	0x08018c08
 8005218:	0801abd0 	.word	0x0801abd0
 800521c:	08018c20 	.word	0x08018c20
 8005220:	08018c3c 	.word	0x08018c3c

08005224 <mrbc_decref>:
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f993 3000 	ldrsb.w	r3, [r3]
 8005232:	2b07      	cmp	r3, #7
 8005234:	dd2c      	ble.n	8005290 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	885b      	ldrh	r3, [r3, #2]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <mrbc_decref+0x2a>
 8005240:	4b16      	ldr	r3, [pc, #88]	; (800529c <mrbc_decref+0x78>)
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <mrbc_decref+0x7c>)
 8005244:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8005248:	4816      	ldr	r0, [pc, #88]	; (80052a4 <mrbc_decref+0x80>)
 800524a:	f010 f9a1 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	885b      	ldrh	r3, [r3, #2]
 8005254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005258:	4293      	cmp	r3, r2
 800525a:	d106      	bne.n	800526a <mrbc_decref+0x46>
 800525c:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <mrbc_decref+0x84>)
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <mrbc_decref+0x7c>)
 8005260:	f240 11d3 	movw	r1, #467	; 0x1d3
 8005264:	480f      	ldr	r0, [pc, #60]	; (80052a4 <mrbc_decref+0x80>)
 8005266:	f010 f993 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	885a      	ldrh	r2, [r3, #2]
 8005270:	3a01      	subs	r2, #1
 8005272:	b292      	uxth	r2, r2
 8005274:	805a      	strh	r2, [r3, #2]
 8005276:	885b      	ldrh	r3, [r3, #2]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f993 3000 	ldrsb.w	r3, [r3]
 8005282:	461a      	mov	r2, r3
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <mrbc_decref+0x88>)
 8005286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
 800528e:	e002      	b.n	8005296 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8005294:	bf00      	nop
}
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08018c08 	.word	0x08018c08
 80052a0:	0801abac 	.word	0x0801abac
 80052a4:	08018c20 	.word	0x08018c20
 80052a8:	08018c58 	.word	0x08018c58
 80052ac:	0801bde8 	.word	0x0801bde8

080052b0 <mrbc_decref_empty>:
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  mrbc_decref(v);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ffb3 	bl	8005224 <mrbc_decref>
  v->tt = MRBC_TT_EMPTY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <mrbc_symbol_cstr>:

//================================================================
/*! get c-language string (char *)
*/
static inline const char * mrbc_symbol_cstr(const mrbc_value *v)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return mrbc_symid_to_str(v->i);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	b21b      	sxth	r3, r3
 80052da:	4618      	mov	r0, r3
 80052dc:	f008 fc2c 	bl	800db38 <mrbc_symid_to_str>
 80052e0:	4603      	mov	r3, r0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <mrbc_is_nested_symid>:
  @param  sym_id	target symbol ID.
  @return int		result.
  @see	make_nested_symbol_s
*/
static inline int mrbc_is_nested_symid(mrbc_sym sym_id)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 80052f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f008 fc1d 	bl	800db38 <mrbc_symid_to_str>
 80052fe:	60f8      	str	r0, [r7, #12]

  return ('0' <= s[0] && s[0] <= ('9'+6));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b2f      	cmp	r3, #47	; 0x2f
 8005306:	d905      	bls.n	8005314 <mrbc_is_nested_symid+0x2a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b3f      	cmp	r3, #63	; 0x3f
 800530e:	d801      	bhi.n	8005314 <mrbc_is_nested_symid+0x2a>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <mrbc_is_nested_symid+0x2c>
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <find_class_by_object>:

  @param  obj	pointer to object
  @return	pointer to mrbc_class
*/
static inline mrbc_class *find_class_by_object(const mrbc_value *obj)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f993 3000 	ldrsb.w	r3, [r3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	da05      	bge.n	800533e <find_class_by_object+0x1e>
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <find_class_by_object+0x94>)
 8005334:	4a20      	ldr	r2, [pc, #128]	; (80053b8 <find_class_by_object+0x98>)
 8005336:	21bf      	movs	r1, #191	; 0xbf
 8005338:	4820      	ldr	r0, [pc, #128]	; (80053bc <find_class_by_object+0x9c>)
 800533a:	f010 f929 	bl	8015590 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f993 3000 	ldrsb.w	r3, [r3]
 8005344:	2b0e      	cmp	r3, #14
 8005346:	dd05      	ble.n	8005354 <find_class_by_object+0x34>
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <find_class_by_object+0xa0>)
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <find_class_by_object+0x98>)
 800534c:	21c0      	movs	r1, #192	; 0xc0
 800534e:	481b      	ldr	r0, [pc, #108]	; (80053bc <find_class_by_object+0x9c>)
 8005350:	f010 f91e 	bl	8015590 <__assert_func>

  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f993 3000 	ldrsb.w	r3, [r3]
 800535a:	461a      	mov	r2, r3
 800535c:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <find_class_by_object+0xa4>)
 800535e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005362:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11f      	bne.n	80053aa <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f993 3000 	ldrsb.w	r3, [r3]
 8005370:	2b0e      	cmp	r3, #14
 8005372:	d00f      	beq.n	8005394 <find_class_by_object+0x74>
 8005374:	2b0e      	cmp	r3, #14
 8005376:	dc12      	bgt.n	800539e <find_class_by_object+0x7e>
 8005378:	2b07      	cmp	r3, #7
 800537a:	d002      	beq.n	8005382 <find_class_by_object+0x62>
 800537c:	2b08      	cmp	r3, #8
 800537e:	d004      	beq.n	800538a <find_class_by_object+0x6a>
 8005380:	e00d      	b.n	800539e <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e00f      	b.n	80053aa <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e00a      	b.n	80053aa <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e005      	b.n	80053aa <find_class_by_object+0x8a>
    default:
      assert(!"Invalid value type.");
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <find_class_by_object+0xa8>)
 80053a0:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <find_class_by_object+0x98>)
 80053a2:	21c9      	movs	r1, #201	; 0xc9
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <find_class_by_object+0x9c>)
 80053a6:	f010 f8f3 	bl	8015590 <__assert_func>
    }
  }

  return cls;
 80053aa:	68fb      	ldr	r3, [r7, #12]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	08018c74 	.word	0x08018c74
 80053b8:	0801abb8 	.word	0x0801abb8
 80053bc:	08018c8c 	.word	0x08018c8c
 80053c0:	08018ca8 	.word	0x08018ca8
 80053c4:	0801ad44 	.word	0x0801ad44
 80053c8:	08018ccc 	.word	0x08018ccc

080053cc <mrbc_string_new_cstr>:
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <mrbc_string_new_cstr+0x1c>
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fa ff08 	bl	80001f4 <strlen>
 80053e4:	4603      	mov	r3, r0
 80053e6:	e000      	b.n	80053ea <mrbc_string_new_cstr+0x1e>
 80053e8:	2300      	movs	r3, #0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	f001 feca 	bl	8007188 <mrbc_string_new>
}
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <mrbc_string_size>:
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  return str->string->size;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	889b      	ldrh	r3, [r3, #4]
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <mrbc_string_cstr>:
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	689b      	ldr	r3, [r3, #8]
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <mrbc_printf_init>:
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  pf->p = pf->buf = buf;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	609a      	str	r2, [r3, #8]
  pf->buf_end = buf + size - 1;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3b01      	subs	r3, #1
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	441a      	add	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
  pf->fstr = fstr;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	60da      	str	r2, [r3, #12]
  pf->fmt = (struct RPrintfFormat){0};
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3310      	adds	r3, #16
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <mrbc_printf_end>:
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  *pf->p = '\0';
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <mrbc_printf_len>:

  @param  pf	pointer to mrbc_printf
  @return	length
*/
static inline int mrbc_printf_len( mrbc_printf_t *pf )
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  return pf->p - pf->buf;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1ad3      	subs	r3, r2, r3
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <mrbc_printf_str>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
static inline int mrbc_printf_str( mrbc_printf_t *pf, const char *str, int pad )
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  return mrbc_printf_bstr( pf, str, (str ? strlen(str) : 0), pad );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <mrbc_printf_str+0x1e>
 80054c0:	68b8      	ldr	r0, [r7, #8]
 80054c2:	f7fa fe97 	bl	80001f4 <strlen>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	e000      	b.n	80054ce <mrbc_printf_str+0x20>
 80054cc:	2200      	movs	r2, #0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f005 fb04 	bl	800aae0 <mrbc_printf_bstr>
 80054d8:	4603      	mov	r3, r0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <set_sym_name_by_id>:
/***** Local functions ******************************************************/
//================================================================
/*! set symbol name by symbol ID
 */
static int set_sym_name_by_id( char *buf, int bufsiz, mrbc_sym sym_id )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  if( !mrbc_is_nested_symid(sym_id) ) {
 80054f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fef7 	bl	80052ea <mrbc_is_nested_symid>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10c      	bne.n	800551c <set_sym_name_by_id+0x38>
    return mrbc_strcpy( buf, bufsiz, mrbc_symid_to_str(sym_id) );
 8005502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005506:	4618      	mov	r0, r3
 8005508:	f008 fb16 	bl	800db38 <mrbc_symid_to_str>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f008 fefc 	bl	800e310 <mrbc_strcpy>
 8005518:	4603      	mov	r3, r0
 800551a:	e02e      	b.n	800557a <set_sym_name_by_id+0x96>
  }

  // nested case.
  mrbc_sym id1, id2;
  mrbc_separate_nested_symid( sym_id, &id1, &id2 );
 800551c:	f107 0210 	add.w	r2, r7, #16
 8005520:	f107 0112 	add.w	r1, r7, #18
 8005524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005528:	4618      	mov	r0, r3
 800552a:	f008 fbb5 	bl	800dc98 <mrbc_separate_nested_symid>

  int n = set_sym_name_by_id( buf, bufsiz, id1 );
 800552e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005532:	461a      	mov	r2, r3
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff ffd4 	bl	80054e4 <set_sym_name_by_id>
 800553c:	6178      	str	r0, [r7, #20]
  n += mrbc_strcpy( buf+n, bufsiz-n, "::" );
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	18d0      	adds	r0, r2, r3
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <set_sym_name_by_id+0xa0>)
 800554c:	4619      	mov	r1, r3
 800554e:	f008 fedf 	bl	800e310 <mrbc_strcpy>
 8005552:	4602      	mov	r2, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
  n += set_sym_name_by_id( buf+n, bufsiz-n, id2 );
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	18d0      	adds	r0, r2, r3
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800556a:	4619      	mov	r1, r3
 800556c:	f7ff ffba 	bl	80054e4 <set_sym_name_by_id>
 8005570:	4602      	mov	r2, r0
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4413      	add	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  return n;
 8005578:	697b      	ldr	r3, [r7, #20]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	08018ce4 	.word	0x08018ce4

08005588 <mrbc_instance_call_initialize>:
/***** global functions *****************************************************/
//================================================================
/*! call initializer
 */
void mrbc_instance_call_initialize( struct VM *vm, mrbc_value v[], int argc )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  // call the initialize method.
  mrbc_method method;
  if( !mrbc_find_method(&method, v[0].instance->cls, MRBC_SYM(initialize))) {
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	2276      	movs	r2, #118	; 0x76
 80055a0:	4618      	mov	r0, r3
 80055a2:	f004 f87b 	bl	800969c <mrbc_find_method>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d034      	beq.n	8005616 <mrbc_instance_call_initialize+0x8e>
    return;
  }

  if( method.c_func ) {
 80055ac:	7d7b      	ldrb	r3, [r7, #21]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d016      	beq.n	80055e0 <mrbc_instance_call_initialize+0x58>
    method.func(vm, v, argc);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	4798      	blx	r3
    for( int i = 1; i <= argc; i++ ) {
 80055bc:	2301      	movs	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
 80055c0:	e009      	b.n	80055d6 <mrbc_instance_call_initialize+0x4e>
      mrbc_decref_empty( v + i );
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fe70 	bl	80052b0 <mrbc_decref_empty>
    for( int i = 1; i <= argc; i++ ) {
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	ddf1      	ble.n	80055c2 <mrbc_instance_call_initialize+0x3a>
    }
    return;
 80055de:	e01b      	b.n	8005618 <mrbc_instance_call_initialize+0x90>
  }

  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm, MRBC_SYM(initialize),
					       (v - vm->cur_regs), argc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	1ad3      	subs	r3, r2, r3
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm, MRBC_SYM(initialize),
 80055e8:	111b      	asrs	r3, r3, #4
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2176      	movs	r1, #118	; 0x76
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f009 fa39 	bl	800ea68 <mrbc_push_callinfo>
 80055f6:	6238      	str	r0, [r7, #32]
  callinfo->own_class = method.cls;
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	615a      	str	r2, [r3, #20]

  vm->cur_irep = method.irep;
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	611a      	str	r2, [r3, #16]
  vm->cur_regs = v;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	615a      	str	r2, [r3, #20]
 8005614:	e000      	b.n	8005618 <mrbc_instance_call_initialize+0x90>
    return;
 8005616:	bf00      	nop
}
 8005618:	3728      	adds	r7, #40	; 0x28
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <c_object_new>:
/***** Object class *********************************************************/
//================================================================
/*! (method) new
 */
static void c_object_new(struct VM *vm, mrbc_value v[], int argc)
{
 800561e:	b590      	push	{r4, r7, lr}
 8005620:	b089      	sub	sp, #36	; 0x24
 8005622:	af00      	add	r7, sp, #0
 8005624:	61f8      	str	r0, [r7, #28]
 8005626:	61b9      	str	r1, [r7, #24]
 8005628:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_instance_new(vm, v[0].cls, 0);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	69bc      	ldr	r4, [r7, #24]
 8005630:	4638      	mov	r0, r7
 8005632:	2300      	movs	r3, #0
 8005634:	69f9      	ldr	r1, [r7, #28]
 8005636:	f003 ff17 	bl	8009468 <mrbc_instance_new>
 800563a:	463b      	mov	r3, r7
 800563c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800563e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_instance_call_initialize( vm, v, argc );
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	69f8      	ldr	r0, [r7, #28]
 8005648:	f7ff ff9e 	bl	8005588 <mrbc_instance_call_initialize>
}
 800564c:	bf00      	nop
 800564e:	3724      	adds	r7, #36	; 0x24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd90      	pop	{r4, r7, pc}

08005654 <c_object_not>:

//================================================================
/*! (operator) !
 */
static void c_object_not(struct VM *vm, mrbc_value v[], int argc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN( mrbc_type(v[0]) == MRBC_TT_NIL || mrbc_type(v[0]) == MRBC_TT_FALSE );
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f993 3000 	ldrsb.w	r3, [r3]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d004      	beq.n	8005674 <c_object_not+0x20>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f993 3000 	ldrsb.w	r3, [r3]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d101      	bne.n	8005678 <c_object_not+0x24>
 8005674:	2303      	movs	r3, #3
 8005676:	e000      	b.n	800567a <c_object_not+0x26>
 8005678:	2302      	movs	r3, #2
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68b8      	ldr	r0, [r7, #8]
 800567e:	f7ff fdd1 	bl	8005224 <mrbc_decref>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	b25a      	sxtb	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	701a      	strb	r2, [r3, #0]
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <c_object_neq>:

//================================================================
/*! (operator) !=
 */
static void c_object_neq(struct VM *vm, mrbc_value v[], int argc)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
  int result = mrbc_compare( &v[0], &v[1] );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	3310      	adds	r3, #16
 80056a2:	4619      	mov	r1, r3
 80056a4:	68b8      	ldr	r0, [r7, #8]
 80056a6:	f008 fcc7 	bl	800e038 <mrbc_compare>
 80056aa:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN( result != 0 );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <c_object_neq+0x24>
 80056b2:	2303      	movs	r3, #3
 80056b4:	e000      	b.n	80056b8 <c_object_neq+0x26>
 80056b6:	2302      	movs	r3, #2
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	68b8      	ldr	r0, [r7, #8]
 80056bc:	f7ff fdb2 	bl	8005224 <mrbc_decref>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	b25a      	sxtb	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	701a      	strb	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <c_object_compare>:

//================================================================
/*! (operator) <=>
 */
static void c_object_compare(struct VM *vm, mrbc_value v[], int argc)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  int result = mrbc_compare( &v[0], &v[1] );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	3310      	adds	r3, #16
 80056e0:	4619      	mov	r1, r3
 80056e2:	68b8      	ldr	r0, [r7, #8]
 80056e4:	f008 fca8 	bl	800e038 <mrbc_compare>
 80056e8:	6178      	str	r0, [r7, #20]
  SET_INT_RETURN( result );
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	68b8      	ldr	r0, [r7, #8]
 80056f0:	f7ff fd98 	bl	8005224 <mrbc_decref>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2204      	movs	r2, #4
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <c_object_equal2>:

//================================================================
/*! (operator) ==
 */
static void c_object_equal2(struct VM *vm, mrbc_value v[], int argc)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  int result = mrbc_compare( &v[0], &v[1] );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3310      	adds	r3, #16
 8005718:	4619      	mov	r1, r3
 800571a:	68b8      	ldr	r0, [r7, #8]
 800571c:	f008 fc8c 	bl	800e038 <mrbc_compare>
 8005720:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN( result == 0 );
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <c_object_equal2+0x24>
 8005728:	2303      	movs	r3, #3
 800572a:	e000      	b.n	800572e <c_object_equal2+0x26>
 800572c:	2302      	movs	r3, #2
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	68b8      	ldr	r0, [r7, #8]
 8005732:	f7ff fd77 	bl	8005224 <mrbc_decref>
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	b25a      	sxtb	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	701a      	strb	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <c_object_equal3>:

//================================================================
/*! (operator) ===
 */
static void c_object_equal3(struct VM *vm, mrbc_value v[], int argc)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  int result;

  if( mrbc_type(v[0]) == MRBC_TT_CLASS ) {
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f993 3000 	ldrsb.w	r3, [r3]
 8005758:	2b07      	cmp	r3, #7
 800575a:	d10a      	bne.n	8005772 <c_object_equal3+0x2c>
    result = mrbc_obj_is_kind_of( &v[1], v[0].cls );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f103 0210 	add.w	r2, r3, #16
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f003 ff7c 	bl	8009666 <mrbc_obj_is_kind_of>
 800576e:	6178      	str	r0, [r7, #20]
 8005770:	e00c      	b.n	800578c <c_object_equal3+0x46>
  } else {
    result = (mrbc_compare( &v[0], &v[1] ) == 0);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	3310      	adds	r3, #16
 8005776:	4619      	mov	r1, r3
 8005778:	68b8      	ldr	r0, [r7, #8]
 800577a:	f008 fc5d 	bl	800e038 <mrbc_compare>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	617b      	str	r3, [r7, #20]
  }

  SET_BOOL_RETURN( result );
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <c_object_equal3+0x50>
 8005792:	2303      	movs	r3, #3
 8005794:	e000      	b.n	8005798 <c_object_equal3+0x52>
 8005796:	2302      	movs	r3, #2
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68b8      	ldr	r0, [r7, #8]
 800579c:	f7ff fd42 	bl	8005224 <mrbc_decref>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	b25a      	sxtb	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	701a      	strb	r2, [r3, #0]
}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <c_object_class>:

//================================================================
/*! (method) class
 */
static void c_object_class(struct VM *vm, mrbc_value v[], int argc)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b08d      	sub	sp, #52	; 0x34
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  mrbc_value value = {.tt = MRBC_TT_CLASS};
 80057bc:	f107 0320 	add.w	r3, r7, #32
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	60da      	str	r2, [r3, #12]
 80057ca:	2307      	movs	r3, #7
 80057cc:	f887 3020 	strb.w	r3, [r7, #32]
  value.cls = find_class_by_object( v );
 80057d0:	68b8      	ldr	r0, [r7, #8]
 80057d2:	f7ff fda5 	bl	8005320 <find_class_by_object>
 80057d6:	4603      	mov	r3, r0
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SET_RETURN( value );
 80057da:	f107 0410 	add.w	r4, r7, #16
 80057de:	f107 0320 	add.w	r3, r7, #32
 80057e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80057e8:	68b8      	ldr	r0, [r7, #8]
 80057ea:	f7ff fd1b 	bl	8005224 <mrbc_decref>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	461c      	mov	r4, r3
 80057f2:	f107 0310 	add.w	r3, r7, #16
 80057f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80057fc:	bf00      	nop
 80057fe:	3734      	adds	r7, #52	; 0x34
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}

08005804 <c_object_dup>:

//================================================================
/*! (method) dup
 */
static void c_object_dup(struct VM *vm, mrbc_value v[], int argc)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b089      	sub	sp, #36	; 0x24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[0]) == MRBC_TT_OBJECT ) {
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f993 3000 	ldrsb.w	r3, [r3]
 8005816:	2b08      	cmp	r3, #8
 8005818:	d11d      	bne.n	8005856 <c_object_dup+0x52>
    mrbc_value new_obj = mrbc_instance_new(vm, v->instance->cls, 0);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	f107 0010 	add.w	r0, r7, #16
 8005824:	2300      	movs	r3, #0
 8005826:	68f9      	ldr	r1, [r7, #12]
 8005828:	f003 fe1e 	bl	8009468 <mrbc_instance_new>
    mrbc_kv_dup( &v->instance->ivar, &new_obj.instance->ivar );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f103 0208 	add.w	r2, r3, #8
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3308      	adds	r3, #8
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f006 fb51 	bl	800bee2 <mrbc_kv_dup>

    mrbc_decref( v );
 8005840:	68b8      	ldr	r0, [r7, #8]
 8005842:	f7ff fcef 	bl	8005224 <mrbc_decref>
    *v = new_obj;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	461c      	mov	r4, r3
 800584a:	f107 0310 	add.w	r3, r7, #16
 800584e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005854:	e000      	b.n	8005858 <c_object_dup+0x54>
    return;
  }


  // TODO: need support TT_PROC and TT_RANGE. but really need?
  return;
 8005856:	bf00      	nop
}
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd90      	pop	{r4, r7, pc}

0800585e <c_object_block_given>:

//================================================================
/*! (method) block_given?
 */
static void c_object_block_given(struct VM *vm, mrbc_value v[], int argc)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
  mrbc_callinfo *callinfo = vm->callinfo_tail;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	61fb      	str	r3, [r7, #28]
  if( !callinfo ) goto RETURN_FALSE;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d02f      	beq.n	80058d6 <c_object_block_given+0x78>

  mrbc_value *regs = callinfo->cur_regs + callinfo->reg_offset;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	7f9b      	ldrb	r3, [r3, #30]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	4413      	add	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]

  if( mrbc_type(regs[0]) == MRBC_TT_PROC ) {
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f993 3000 	ldrsb.w	r3, [r3]
 800588a:	2b09      	cmp	r3, #9
 800588c:	d10d      	bne.n	80058aa <c_object_block_given+0x4c>
    callinfo = regs[0].proc->callinfo_self;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	61fb      	str	r3, [r7, #28]
    if( !callinfo ) goto RETURN_FALSE;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01e      	beq.n	80058da <c_object_block_given+0x7c>

    regs = callinfo->cur_regs + callinfo->reg_offset;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	7f9b      	ldrb	r3, [r3, #30]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	4413      	add	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
  }

  SET_BOOL_RETURN( mrbc_type(regs[callinfo->n_args+1]) == MRBC_TT_PROC );
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	7fdb      	ldrb	r3, [r3, #31]
 80058ae:	3301      	adds	r3, #1
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4413      	add	r3, r2
 80058b6:	f993 3000 	ldrsb.w	r3, [r3]
 80058ba:	2b09      	cmp	r3, #9
 80058bc:	d101      	bne.n	80058c2 <c_object_block_given+0x64>
 80058be:	2303      	movs	r3, #3
 80058c0:	e000      	b.n	80058c4 <c_object_block_given+0x66>
 80058c2:	2302      	movs	r3, #2
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f7ff fcac 	bl	8005224 <mrbc_decref>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	b25a      	sxtb	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	701a      	strb	r2, [r3, #0]
  return;
 80058d4:	e008      	b.n	80058e8 <c_object_block_given+0x8a>
  if( !callinfo ) goto RETURN_FALSE;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <c_object_block_given+0x7e>
    if( !callinfo ) goto RETURN_FALSE;
 80058da:	bf00      	nop

 RETURN_FALSE:
  SET_FALSE_RETURN();
 80058dc:	68b8      	ldr	r0, [r7, #8]
 80058de:	f7ff fca1 	bl	8005224 <mrbc_decref>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2202      	movs	r2, #2
 80058e6:	701a      	strb	r2, [r3, #0]
}
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <c_object_kind_of>:

//================================================================
/*! (method) is_a, kind_of
 */
static void c_object_kind_of(struct VM *vm, mrbc_value v[], int argc)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_CLASS ) {
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	3310      	adds	r3, #16
 8005900:	f993 3000 	ldrsb.w	r3, [r3]
 8005904:	2b07      	cmp	r3, #7
 8005906:	d005      	beq.n	8005914 <c_object_kind_of+0x24>
    mrbc_raise(vm, MRBC_CLASS(TypeError), "class required");
 8005908:	4a0e      	ldr	r2, [pc, #56]	; (8005944 <c_object_kind_of+0x54>)
 800590a:	490f      	ldr	r1, [pc, #60]	; (8005948 <c_object_kind_of+0x58>)
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f005 fd79 	bl	800b404 <mrbc_raise>
    return;
 8005912:	e014      	b.n	800593e <c_object_kind_of+0x4e>
  }

  SET_BOOL_RETURN( mrbc_obj_is_kind_of( &v[0], v[1].cls ));
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3310      	adds	r3, #16
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4619      	mov	r1, r3
 800591c:	68b8      	ldr	r0, [r7, #8]
 800591e:	f003 fea2 	bl	8009666 <mrbc_obj_is_kind_of>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <c_object_kind_of+0x3c>
 8005928:	2303      	movs	r3, #3
 800592a:	e000      	b.n	800592e <c_object_kind_of+0x3e>
 800592c:	2302      	movs	r3, #2
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	68b8      	ldr	r0, [r7, #8]
 8005932:	f7ff fc77 	bl	8005224 <mrbc_decref>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	b25a      	sxtb	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	701a      	strb	r2, [r3, #0]
}
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	08018ce8 	.word	0x08018ce8
 8005948:	200001b4 	.word	0x200001b4

0800594c <c_object_nil>:

//================================================================
/*! (method) nil?
 */
static void c_object_nil(struct VM *vm, mrbc_value v[], int argc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN( mrbc_type(v[0]) == MRBC_TT_NIL );
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f993 3000 	ldrsb.w	r3, [r3]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <c_object_nil+0x1a>
 8005962:	2303      	movs	r3, #3
 8005964:	e000      	b.n	8005968 <c_object_nil+0x1c>
 8005966:	2302      	movs	r3, #2
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	68b8      	ldr	r0, [r7, #8]
 800596c:	f7ff fc5a 	bl	8005224 <mrbc_decref>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	b25a      	sxtb	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	701a      	strb	r2, [r3, #0]
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <c_object_p>:

//================================================================
/*! (method) p
 */
static void c_object_p(struct VM *vm, mrbc_value v[], int argc)
{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b093      	sub	sp, #76	; 0x4c
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  int i;
  for( i = 1; i <= argc; i++ ) {
 800598c:	2301      	movs	r3, #1
 800598e:	647b      	str	r3, [r7, #68]	; 0x44
 8005990:	e009      	b.n	80059a6 <c_object_p+0x26>
    mrbc_p( &v[i] );
 8005992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	4413      	add	r3, r2
 800599a:	4618      	mov	r0, r3
 800599c:	f004 fcc5 	bl	800a32a <mrbc_p>
  for( i = 1; i <= argc; i++ ) {
 80059a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a2:	3301      	adds	r3, #1
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
 80059a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	ddf1      	ble.n	8005992 <c_object_p+0x12>
  }

  if (argc == 0) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <c_object_p+0x42>
    SET_NIL_RETURN();
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f7ff fc35 	bl	8005224 <mrbc_decref>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
      }
      value.array->n_stored = argc;
      SET_RETURN(value);
    }
  }
}
 80059c0:	e061      	b.n	8005a86 <c_object_p+0x106>
  } else if (argc == 1) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d116      	bne.n	80059f6 <c_object_p+0x76>
    mrbc_incref( &v[1] );
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	3310      	adds	r3, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fbf5 	bl	80051bc <mrbc_incref>
    SET_RETURN(v[1]);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80059d8:	3310      	adds	r3, #16
 80059da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80059e0:	68b8      	ldr	r0, [r7, #8]
 80059e2:	f7ff fc1f 	bl	8005224 <mrbc_decref>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	461c      	mov	r4, r3
 80059ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80059f4:	e047      	b.n	8005a86 <c_object_p+0x106>
    mrbc_value value = mrbc_array_new(vm, argc);
 80059f6:	f107 0320 	add.w	r3, r7, #32
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68f9      	ldr	r1, [r7, #12]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fc fc97 	bl	8002332 <mrbc_array_new>
    if( value.array == NULL ) {
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <c_object_p+0x98>
      SET_NIL_RETURN();  // ENOMEM
 8005a0a:	68b8      	ldr	r0, [r7, #8]
 8005a0c:	f7ff fc0a 	bl	8005224 <mrbc_decref>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
}
 8005a16:	e036      	b.n	8005a86 <c_object_p+0x106>
      for ( i = 1; i <= argc; i++ ) {
 8005a18:	2301      	movs	r3, #1
 8005a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1c:	e01a      	b.n	8005a54 <c_object_p+0xd4>
        mrbc_incref( &v[i] );
 8005a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4413      	add	r3, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fbc8 	bl	80051bc <mrbc_incref>
        value.array->data[i-1] = v[i];
 8005a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	18d1      	adds	r1, r2, r3
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a3a:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	4413      	add	r3, r2
 8005a44:	461c      	mov	r4, r3
 8005a46:	460b      	mov	r3, r1
 8005a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      for ( i = 1; i <= argc; i++ ) {
 8005a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a50:	3301      	adds	r3, #1
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	dde0      	ble.n	8005a1e <c_object_p+0x9e>
      value.array->n_stored = argc;
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	b292      	uxth	r2, r2
 8005a62:	80da      	strh	r2, [r3, #6]
      SET_RETURN(value);
 8005a64:	f107 0410 	add.w	r4, r7, #16
 8005a68:	f107 0320 	add.w	r3, r7, #32
 8005a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005a72:	68b8      	ldr	r0, [r7, #8]
 8005a74:	f7ff fbd6 	bl	8005224 <mrbc_decref>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	461c      	mov	r4, r3
 8005a7c:	f107 0310 	add.w	r3, r7, #16
 8005a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005a86:	bf00      	nop
 8005a88:	374c      	adds	r7, #76	; 0x4c
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd90      	pop	{r4, r7, pc}

08005a8e <c_object_print>:

//================================================================
/*! (method) print
 */
static void c_object_print(struct VM *vm, mrbc_value v[], int argc)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  int i;
  for( i = 1; i <= argc; i++ ) {
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e009      	b.n	8005ab4 <c_object_print+0x26>
    mrbc_print_sub( &v[i] );
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f004 fd39 	bl	800a520 <mrbc_print_sub>
  for( i = 1; i <= argc; i++ ) {
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	ddf1      	ble.n	8005aa0 <c_object_print+0x12>
  }
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <c_object_puts>:

//================================================================
/*! (method) puts
 */
static void c_object_puts(struct VM *vm, mrbc_value v[], int argc)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  int i;
  if( argc ){
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d017      	beq.n	8005b08 <c_object_puts+0x42>
    for( i = 1; i <= argc; i++ ) {
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e00f      	b.n	8005afe <c_object_puts+0x38>
      if( mrbc_puts_sub( &v[i] ) == 0 ) mrbc_putchar('\n');
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f004 fce8 	bl	800a4bc <mrbc_puts_sub>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <c_object_puts+0x32>
 8005af2:	200a      	movs	r0, #10
 8005af4:	f004 fac6 	bl	800a084 <mrbc_putchar>
    for( i = 1; i <= argc; i++ ) {
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	3301      	adds	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	ddeb      	ble.n	8005ade <c_object_puts+0x18>
 8005b06:	e002      	b.n	8005b0e <c_object_puts+0x48>
    }
  } else {
    mrbc_putchar('\n');
 8005b08:	200a      	movs	r0, #10
 8005b0a:	f004 fabb 	bl	800a084 <mrbc_putchar>
  }
  SET_NIL_RETURN();
 8005b0e:	68b8      	ldr	r0, [r7, #8]
 8005b10:	f7ff fb88 	bl	8005224 <mrbc_decref>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <c_object_raise>:
  case 4. raise ExceptionObject
  case 5. raise ExceptionClass, "message"
  case 6. raise ExceptionObject, "message"
*/
static void c_object_raise(struct VM *vm, mrbc_value v[], int argc)
{
 8005b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b26:	b08b      	sub	sp, #44	; 0x2c
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	61f8      	str	r0, [r7, #28]
 8005b2c:	61b9      	str	r1, [r7, #24]
 8005b2e:	617a      	str	r2, [r7, #20]
  assert( !mrbc_israised(vm) );
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8005b36:	2b0e      	cmp	r3, #14
 8005b38:	d106      	bne.n	8005b48 <c_object_raise+0x24>
 8005b3a:	4b7d      	ldr	r3, [pc, #500]	; (8005d30 <c_object_raise+0x20c>)
 8005b3c:	4a7d      	ldr	r2, [pc, #500]	; (8005d34 <c_object_raise+0x210>)
 8005b3e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005b42:	487d      	ldr	r0, [pc, #500]	; (8005d38 <c_object_raise+0x214>)
 8005b44:	f00f fd24 	bl	8015590 <__assert_func>

  // case 1. raise (no argument)
  if( argc == 0 ) {
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10e      	bne.n	8005b6c <c_object_raise+0x48>
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(RuntimeError), "", 0 );
 8005b4e:	69fc      	ldr	r4, [r7, #28]
 8005b50:	4638      	mov	r0, r7
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	4b79      	ldr	r3, [pc, #484]	; (8005d3c <c_object_raise+0x218>)
 8005b58:	4a79      	ldr	r2, [pc, #484]	; (8005d40 <c_object_raise+0x21c>)
 8005b5a:	69f9      	ldr	r1, [r7, #28]
 8005b5c:	f005 fb9c 	bl	800b298 <mrbc_exception_new>
 8005b60:	3428      	adds	r4, #40	; 0x28
 8005b62:	463b      	mov	r3, r7
 8005b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005b6a:	e0c3      	b.n	8005cf4 <c_object_raise+0x1d0>
  } else

  // case 2. raise "message"
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING ) {
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d11f      	bne.n	8005bb2 <c_object_raise+0x8e>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3310      	adds	r3, #16
 8005b76:	f993 3000 	ldrsb.w	r3, [r3]
 8005b7a:	2b0b      	cmp	r3, #11
 8005b7c:	d119      	bne.n	8005bb2 <c_object_raise+0x8e>
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(RuntimeError),
			mrbc_string_cstr(&v[1]), mrbc_string_size(&v[1]) );
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3310      	adds	r3, #16
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fc47 	bl	8005416 <mrbc_string_cstr>
 8005b88:	4605      	mov	r5, r0
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3310      	adds	r3, #16
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(RuntimeError),
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fc34 	bl	80053fc <mrbc_string_size>
 8005b94:	4603      	mov	r3, r0
 8005b96:	69fc      	ldr	r4, [r7, #28]
 8005b98:	4638      	mov	r0, r7
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	4a68      	ldr	r2, [pc, #416]	; (8005d40 <c_object_raise+0x21c>)
 8005ba0:	69f9      	ldr	r1, [r7, #28]
 8005ba2:	f005 fb79 	bl	800b298 <mrbc_exception_new>
 8005ba6:	3428      	adds	r4, #40	; 0x28
 8005ba8:	463b      	mov	r3, r7
 8005baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005bb0:	e0a0      	b.n	8005cf4 <c_object_raise+0x1d0>
  } else

  // case 3. raise ExceptionClass
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_CLASS &&
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d11f      	bne.n	8005bf8 <c_object_raise+0xd4>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	3310      	adds	r3, #16
 8005bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d119      	bne.n	8005bf8 <c_object_raise+0xd4>
      mrbc_obj_is_kind_of( &v[1], MRBC_CLASS(Exception))) {
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	3310      	adds	r3, #16
 8005bc8:	495e      	ldr	r1, [pc, #376]	; (8005d44 <c_object_raise+0x220>)
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f003 fd4b 	bl	8009666 <mrbc_obj_is_kind_of>
 8005bd0:	4603      	mov	r3, r0
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_CLASS &&
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <c_object_raise+0xd4>
    vm->exception = mrbc_exception_new( vm, v[1].cls, 0, 0 );
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	3310      	adds	r3, #16
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	69fc      	ldr	r4, [r7, #28]
 8005bde:	4638      	mov	r0, r7
 8005be0:	2300      	movs	r3, #0
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2300      	movs	r3, #0
 8005be6:	69f9      	ldr	r1, [r7, #28]
 8005be8:	f005 fb56 	bl	800b298 <mrbc_exception_new>
 8005bec:	3428      	adds	r4, #40	; 0x28
 8005bee:	463b      	mov	r3, r7
 8005bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005bf6:	e07d      	b.n	8005cf4 <c_object_raise+0x1d0>
  } else

  // case 4. raise ExceptionObject
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_EXCEPTION ) {
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d113      	bne.n	8005c26 <c_object_raise+0x102>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3310      	adds	r3, #16
 8005c02:	f993 3000 	ldrsb.w	r3, [r3]
 8005c06:	2b0e      	cmp	r3, #14
 8005c08:	d10d      	bne.n	8005c26 <c_object_raise+0x102>
    mrbc_incref( &v[1] );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fad4 	bl	80051bc <mrbc_incref>
    vm->exception = v[1];
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005c24:	e066      	b.n	8005cf4 <c_object_raise+0x1d0>
  } else

  // case 5. raise ExceptionClass, "param"
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_CLASS
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d128      	bne.n	8005c7e <c_object_raise+0x15a>
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3310      	adds	r3, #16
 8005c30:	f993 3000 	ldrsb.w	r3, [r3]
 8005c34:	2b07      	cmp	r3, #7
 8005c36:	d122      	bne.n	8005c7e <c_object_raise+0x15a>
                && mrbc_type(v[2]) == MRBC_TT_STRING ) {
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	3320      	adds	r3, #32
 8005c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8005c40:	2b0b      	cmp	r3, #11
 8005c42:	d11c      	bne.n	8005c7e <c_object_raise+0x15a>
    vm->exception = mrbc_exception_new( vm, v[1].cls,
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	3310      	adds	r3, #16
 8005c48:	689d      	ldr	r5, [r3, #8]
			mrbc_string_cstr(&v[2]), mrbc_string_size(&v[2]) );
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	3320      	adds	r3, #32
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fbe1 	bl	8005416 <mrbc_string_cstr>
 8005c54:	4606      	mov	r6, r0
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3320      	adds	r3, #32
    vm->exception = mrbc_exception_new( vm, v[1].cls,
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fbce 	bl	80053fc <mrbc_string_size>
 8005c60:	4603      	mov	r3, r0
 8005c62:	69fc      	ldr	r4, [r7, #28]
 8005c64:	4638      	mov	r0, r7
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4633      	mov	r3, r6
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	69f9      	ldr	r1, [r7, #28]
 8005c6e:	f005 fb13 	bl	800b298 <mrbc_exception_new>
 8005c72:	3428      	adds	r4, #40	; 0x28
 8005c74:	463b      	mov	r3, r7
 8005c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005c7c:	e03a      	b.n	8005cf4 <c_object_raise+0x1d0>
  } else

  // case 6. raise ExceptionObject, "param"
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_EXCEPTION
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d129      	bne.n	8005cd8 <c_object_raise+0x1b4>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	3310      	adds	r3, #16
 8005c88:	f993 3000 	ldrsb.w	r3, [r3]
 8005c8c:	2b0e      	cmp	r3, #14
 8005c8e:	d123      	bne.n	8005cd8 <c_object_raise+0x1b4>
                && mrbc_type(v[2]) == MRBC_TT_STRING ) {
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	3320      	adds	r3, #32
 8005c94:	f993 3000 	ldrsb.w	r3, [r3]
 8005c98:	2b0b      	cmp	r3, #11
 8005c9a:	d11d      	bne.n	8005cd8 <c_object_raise+0x1b4>
    vm->exception = mrbc_exception_new( vm, v[1].exception->cls,
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	3310      	adds	r3, #16
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	685d      	ldr	r5, [r3, #4]
			mrbc_string_cstr(&v[2]), mrbc_string_size(&v[2]) );
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	3320      	adds	r3, #32
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fbb4 	bl	8005416 <mrbc_string_cstr>
 8005cae:	4606      	mov	r6, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	3320      	adds	r3, #32
    vm->exception = mrbc_exception_new( vm, v[1].exception->cls,
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fba1 	bl	80053fc <mrbc_string_size>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	69fc      	ldr	r4, [r7, #28]
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4633      	mov	r3, r6
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	69f9      	ldr	r1, [r7, #28]
 8005cc8:	f005 fae6 	bl	800b298 <mrbc_exception_new>
 8005ccc:	3428      	adds	r4, #40	; 0x28
 8005cce:	463b      	mov	r3, r7
 8005cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005cd6:	e00d      	b.n	8005cf4 <c_object_raise+0x1d0>
  } else {

    // fail.
    vm->exception = mrbc_exception_new( vm, MRBC_CLASS(ArgumentError), 0, 0 );
 8005cd8:	69fc      	ldr	r4, [r7, #28]
 8005cda:	4638      	mov	r0, r7
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <c_object_raise+0x224>)
 8005ce4:	69f9      	ldr	r1, [r7, #28]
 8005ce6:	f005 fad7 	bl	800b298 <mrbc_exception_new>
 8005cea:	3428      	adds	r4, #40	; 0x28
 8005cec:	463b      	mov	r3, r7
 8005cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  // set raised method to exception instance.
  if( vm->callinfo_tail != 0 &&
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <c_object_raise+0x1fc>
      vm->exception.tt == MRBC_TT_EXCEPTION &&
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
  if( vm->callinfo_tail != 0 &&
 8005d02:	2b0e      	cmp	r3, #14
 8005d04:	d10c      	bne.n	8005d20 <c_object_raise+0x1fc>
      vm->exception.exception->method_id == 0 ) {
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
      vm->exception.tt == MRBC_TT_EXCEPTION &&
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <c_object_raise+0x1fc>
    vm->exception.exception->method_id = vm->callinfo_tail->method_id;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8005d1e:	811a      	strh	r2, [r3, #8]
  }

  vm->flag_preemption = 2;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2202      	movs	r2, #2
 8005d24:	70da      	strb	r2, [r3, #3]
}
 8005d26:	bf00      	nop
 8005d28:	3724      	adds	r7, #36	; 0x24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	08018cf8 	.word	0x08018cf8
 8005d34:	0801abdc 	.word	0x0801abdc
 8005d38:	08018d0c 	.word	0x08018d0c
 8005d3c:	08018d2c 	.word	0x08018d2c
 8005d40:	200001a4 	.word	0x200001a4
 8005d44:	2000010c 	.word	0x2000010c
 8005d48:	20000154 	.word	0x20000154

08005d4c <c_object_object_id>:
#if defined(MRBC_DEBUG)
//================================================================
/*! (method - debug) object_id
 */
static void c_object_object_id(struct VM *vm, mrbc_value v[], int argc)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  // tiny implementation.
  SET_INT_RETURN( mrbc_integer(v[0]) );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f7ff fa60 	bl	8005224 <mrbc_decref>
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2204      	movs	r2, #4
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <c_object_instance_methods>:

//================================================================
/*! (method - debug) instance_methods
 */
static void c_object_instance_methods(struct VM *vm, mrbc_value v[], int argc)
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b089      	sub	sp, #36	; 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  // TODO: check argument.

  // temporary code for operation check.
  mrbc_printf("[");
 8005d84:	4819      	ldr	r0, [pc, #100]	; (8005dec <c_object_instance_methods+0x74>)
 8005d86:	f004 f9cd 	bl	800a124 <mrbc_printf>
  int flag_first = 1;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]

  mrbc_class *cls = find_class_by_object( v );
 8005d8e:	68b8      	ldr	r0, [r7, #8]
 8005d90:	f7ff fac6 	bl	8005320 <find_class_by_object>
 8005d94:	6178      	str	r0, [r7, #20]
  mrbc_method *method = cls->method_link;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	61bb      	str	r3, [r7, #24]
  while( method ) {
 8005d9c:	e016      	b.n	8005dcc <c_object_instance_methods+0x54>
    mrbc_printf("%s:%s", (flag_first ? "" : ", "),
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <c_object_instance_methods+0x30>
 8005da4:	4c12      	ldr	r4, [pc, #72]	; (8005df0 <c_object_instance_methods+0x78>)
 8005da6:	e000      	b.n	8005daa <c_object_instance_methods+0x32>
 8005da8:	4c12      	ldr	r4, [pc, #72]	; (8005df4 <c_object_instance_methods+0x7c>)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f007 fec1 	bl	800db38 <mrbc_symid_to_str>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	4621      	mov	r1, r4
 8005dbc:	480e      	ldr	r0, [pc, #56]	; (8005df8 <c_object_instance_methods+0x80>)
 8005dbe:	f004 f9b1 	bl	800a124 <mrbc_printf>
		mrbc_symid_to_str(method->sym_id) );
    flag_first = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
    method = method->next;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	61bb      	str	r3, [r7, #24]
  while( method ) {
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <c_object_instance_methods+0x26>
  }

  mrbc_printf("]");
 8005dd2:	480a      	ldr	r0, [pc, #40]	; (8005dfc <c_object_instance_methods+0x84>)
 8005dd4:	f004 f9a6 	bl	800a124 <mrbc_printf>

  SET_NIL_RETURN();
 8005dd8:	68b8      	ldr	r0, [r7, #8]
 8005dda:	f7ff fa23 	bl	8005224 <mrbc_decref>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
}
 8005de4:	bf00      	nop
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd90      	pop	{r4, r7, pc}
 8005dec:	08018d30 	.word	0x08018d30
 8005df0:	08018d2c 	.word	0x08018d2c
 8005df4:	08018d34 	.word	0x08018d34
 8005df8:	08018d38 	.word	0x08018d38
 8005dfc:	08018d40 	.word	0x08018d40

08005e00 <c_object_instance_variables>:

//================================================================
/*! (method - debug) instance_variables
 */
static void c_object_instance_variables(struct VM *vm, mrbc_value v[], int argc)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  // temporary code for operation check.
#if 1
  mrbc_kv_handle *kvh = &v[0].instance->ivar;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	3308      	adds	r3, #8
 8005e12:	613b      	str	r3, [r7, #16]

  mrbc_printf("n = %d/%d ", kvh->n_stored, kvh->data_size);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	481b      	ldr	r0, [pc, #108]	; (8005e90 <c_object_instance_variables+0x90>)
 8005e22:	f004 f97f 	bl	800a124 <mrbc_printf>
  mrbc_printf("[");
 8005e26:	481b      	ldr	r0, [pc, #108]	; (8005e94 <c_object_instance_variables+0x94>)
 8005e28:	f004 f97c 	bl	800a124 <mrbc_printf>

  int i;
  for( i = 0; i < kvh->n_stored; i++ ) {
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e01b      	b.n	8005e6a <c_object_instance_variables+0x6a>
    mrbc_printf("%s:@%s", (i == 0 ? "" : ", "),
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <c_object_instance_variables+0x3c>
 8005e38:	4c17      	ldr	r4, [pc, #92]	; (8005e98 <c_object_instance_variables+0x98>)
 8005e3a:	e000      	b.n	8005e3e <c_object_instance_variables+0x3e>
 8005e3c:	4c17      	ldr	r4, [pc, #92]	; (8005e9c <c_object_instance_variables+0x9c>)
		mrbc_symid_to_str( kvh->data[i].sym_id ));
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4613      	mov	r3, r2
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	4413      	add	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	440b      	add	r3, r1
    mrbc_printf("%s:@%s", (i == 0 ? "" : ", "),
 8005e4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f007 fe70 	bl	800db38 <mrbc_symid_to_str>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4810      	ldr	r0, [pc, #64]	; (8005ea0 <c_object_instance_variables+0xa0>)
 8005e60:	f004 f960 	bl	800a124 <mrbc_printf>
  for( i = 0; i < kvh->n_stored; i++ ) {
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	3301      	adds	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	885b      	ldrh	r3, [r3, #2]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	dbdd      	blt.n	8005e32 <c_object_instance_variables+0x32>
  }

  mrbc_printf("]\n");
 8005e76:	480b      	ldr	r0, [pc, #44]	; (8005ea4 <c_object_instance_variables+0xa4>)
 8005e78:	f004 f954 	bl	800a124 <mrbc_printf>
#endif
  SET_NIL_RETURN();
 8005e7c:	68b8      	ldr	r0, [r7, #8]
 8005e7e:	f7ff f9d1 	bl	8005224 <mrbc_decref>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd90      	pop	{r4, r7, pc}
 8005e90:	08018d44 	.word	0x08018d44
 8005e94:	08018d30 	.word	0x08018d30
 8005e98:	08018d2c 	.word	0x08018d2c
 8005e9c:	08018d34 	.word	0x08018d34
 8005ea0:	08018d50 	.word	0x08018d50
 8005ea4:	08018d58 	.word	0x08018d58

08005ea8 <c_object_memory_statistics>:
#if !defined(MRBC_ALLOC_LIBC)
//================================================================
/*! (method - debug) memory_statistics
 */
static void c_object_memory_statistics(struct VM *vm, mrbc_value v[], int argc)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b0b1      	sub	sp, #196	; 0xc4
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  struct MRBC_ALLOC_STATISTICS mem;

  mrbc_alloc_statistics( &mem );
 8005eb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fc f907 	bl	80020cc <mrbc_alloc_statistics>
  if( argc == 0 || mrbc_type(v[1]) == MRBC_TT_TRUE ) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <c_object_memory_statistics+0x28>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3310      	adds	r3, #16
 8005ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d11a      	bne.n	8005f06 <c_object_memory_statistics+0x5e>
    mrbc_printf("Memory Statistics\n");
 8005ed0:	4866      	ldr	r0, [pc, #408]	; (800606c <c_object_memory_statistics+0x1c4>)
 8005ed2:	f004 f927 	bl	800a124 <mrbc_printf>
    mrbc_printf("  Total: %d\n", mem.total);
 8005ed6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005eda:	4619      	mov	r1, r3
 8005edc:	4864      	ldr	r0, [pc, #400]	; (8006070 <c_object_memory_statistics+0x1c8>)
 8005ede:	f004 f921 	bl	800a124 <mrbc_printf>
    mrbc_printf("  Used : %d\n", mem.used);
 8005ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4862      	ldr	r0, [pc, #392]	; (8006074 <c_object_memory_statistics+0x1cc>)
 8005eea:	f004 f91b 	bl	800a124 <mrbc_printf>
    mrbc_printf("  Free : %d\n", mem.free);
 8005eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4860      	ldr	r0, [pc, #384]	; (8006078 <c_object_memory_statistics+0x1d0>)
 8005ef6:	f004 f915 	bl	800a124 <mrbc_printf>
    mrbc_printf("  Frag.: %d\n", mem.fragmentation);
 8005efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005efe:	4619      	mov	r1, r3
 8005f00:	485e      	ldr	r0, [pc, #376]	; (800607c <c_object_memory_statistics+0x1d4>)
 8005f02:	f004 f90f 	bl	800a124 <mrbc_printf>
  }

  // make a return value.
  mrbc_value ret = mrbc_hash_new(vm, 4);
 8005f06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	68f9      	ldr	r1, [r7, #12]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd ff83 	bl	8003e1a <mrbc_hash_new>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("total") ),
 8005f14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	2306      	movs	r3, #6
 8005f24:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8005f28:	4855      	ldr	r0, [pc, #340]	; (8006080 <c_object_memory_statistics+0x1d8>)
 8005f2a:	f007 fdcd 	bl	800dac8 <mrbc_str_to_symid>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		      &mrbc_integer_value( mem.total ));
 8005f34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	2304      	movs	r3, #4
 8005f44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8005f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("total") ),
 8005f50:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005f54:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005f58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe f80e 	bl	8003f7e <mrbc_hash_set>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("used") ),
 8005f62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	2306      	movs	r3, #6
 8005f72:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8005f76:	4843      	ldr	r0, [pc, #268]	; (8006084 <c_object_memory_statistics+0x1dc>)
 8005f78:	f007 fda6 	bl	800dac8 <mrbc_str_to_symid>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	67bb      	str	r3, [r7, #120]	; 0x78
		      &mrbc_integer_value( mem.used ));
 8005f80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	2304      	movs	r3, #4
 8005f90:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8005f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f98:	66bb      	str	r3, [r7, #104]	; 0x68
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("used") ),
 8005f9a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f9e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005fa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fd ffe9 	bl	8003f7e <mrbc_hash_set>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("free") ),
 8005fac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	2306      	movs	r3, #6
 8005fbc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8005fc0:	4831      	ldr	r0, [pc, #196]	; (8006088 <c_object_memory_statistics+0x1e0>)
 8005fc2:	f007 fd81 	bl	800dac8 <mrbc_str_to_symid>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	65bb      	str	r3, [r7, #88]	; 0x58
		      &mrbc_integer_value( mem.free ));
 8005fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
 8005fd6:	60da      	str	r2, [r3, #12]
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("free") ),
 8005fe4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005fe8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005fec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fd ffc4 	bl	8003f7e <mrbc_hash_set>
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("fragmentation") ),
 8005ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	609a      	str	r2, [r3, #8]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	2306      	movs	r3, #6
 8006006:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800600a:	4820      	ldr	r0, [pc, #128]	; (800608c <c_object_memory_statistics+0x1e4>)
 800600c:	f007 fd5c 	bl	800dac8 <mrbc_str_to_symid>
 8006010:	4603      	mov	r3, r0
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38
		      &mrbc_integer_value( mem.fragmentation ));
 8006014:	f107 0320 	add.w	r3, r7, #32
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	605a      	str	r2, [r3, #4]
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	2304      	movs	r3, #4
 8006024:	f887 3020 	strb.w	r3, [r7, #32]
 8006028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
  mrbc_hash_set(&ret, &mrbc_symbol_value( mrbc_str_to_symid("fragmentation") ),
 800602e:	f107 0220 	add.w	r2, r7, #32
 8006032:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006036:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd ff9f 	bl	8003f7e <mrbc_hash_set>

  SET_RETURN(ret);
 8006040:	f107 0410 	add.w	r4, r7, #16
 8006044:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800604a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800604e:	68b8      	ldr	r0, [r7, #8]
 8006050:	f7ff f8e8 	bl	8005224 <mrbc_decref>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	461c      	mov	r4, r3
 8006058:	f107 0310 	add.w	r3, r7, #16
 800605c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800605e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006062:	bf00      	nop
 8006064:	37c4      	adds	r7, #196	; 0xc4
 8006066:	46bd      	mov	sp, r7
 8006068:	bd90      	pop	{r4, r7, pc}
 800606a:	bf00      	nop
 800606c:	08018d5c 	.word	0x08018d5c
 8006070:	08018d70 	.word	0x08018d70
 8006074:	08018d80 	.word	0x08018d80
 8006078:	08018d90 	.word	0x08018d90
 800607c:	08018da0 	.word	0x08018da0
 8006080:	08018db0 	.word	0x08018db0
 8006084:	08018db8 	.word	0x08018db8
 8006088:	08018dc0 	.word	0x08018dc0
 800608c:	08018dc8 	.word	0x08018dc8

08006090 <c_object_getiv>:

//================================================================
/*! (method) instance variable getter used by attr_reader.
 */
static void c_object_getiv(struct VM *vm, mrbc_value v[], int argc)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b08f      	sub	sp, #60	; 0x3c
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  mrbc_sym sym_id = mrbc_get_callee_symid(vm);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f008 fcb1 	bl	800ea04 <mrbc_get_callee_symid>
 80060a2:	4603      	mov	r3, r0
 80060a4:	86fb      	strh	r3, [r7, #54]	; 0x36
  mrbc_value ret = mrbc_instance_getiv(&v[0], sym_id);
 80060a6:	f107 0320 	add.w	r3, r7, #32
 80060aa:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f003 fa54 	bl	800955e <mrbc_instance_getiv>

  SET_RETURN(ret);
 80060b6:	f107 0410 	add.w	r4, r7, #16
 80060ba:	f107 0320 	add.w	r3, r7, #32
 80060be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80060c4:	68b8      	ldr	r0, [r7, #8]
 80060c6:	f7ff f8ad 	bl	8005224 <mrbc_decref>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	461c      	mov	r4, r3
 80060ce:	f107 0310 	add.w	r3, r7, #16
 80060d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80060d8:	bf00      	nop
 80060da:	373c      	adds	r7, #60	; 0x3c
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd90      	pop	{r4, r7, pc}

080060e0 <c_object_setiv>:

//================================================================
/*! (method) instance variable setter used by attr_accessor.
 */
static void c_object_setiv(struct VM *vm, mrbc_value v[], int argc)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  const char *name = mrbc_get_callee_name(vm);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f008 fca1 	bl	800ea34 <mrbc_get_callee_name>
 80060f2:	61f8      	str	r0, [r7, #28]
  int len = strlen(name);
 80060f4:	69f8      	ldr	r0, [r7, #28]
 80060f6:	f7fa f87d 	bl	80001f4 <strlen>
 80060fa:	4603      	mov	r3, r0
 80060fc:	61bb      	str	r3, [r7, #24]
  char *namebuf = mrbc_alloc(vm, len);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	4618      	mov	r0, r3
 8006102:	f7fb fccf 	bl	8001aa4 <mrbc_raw_alloc>
 8006106:	6178      	str	r0, [r7, #20]
  if( !namebuf ) return;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d01e      	beq.n	800614c <c_object_setiv+0x6c>

  memcpy( namebuf, name, len-1 );
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	3b01      	subs	r3, #1
 8006112:	461a      	mov	r2, r3
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	6978      	ldr	r0, [r7, #20]
 8006118:	f010 fb15 	bl	8016746 <memcpy>
  namebuf[len-1] = '\0';	// delete '='
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	3b01      	subs	r3, #1
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4413      	add	r3, r2
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
  mrbc_sym sym_id = mrbc_str_to_symid(namebuf);
 8006128:	6978      	ldr	r0, [r7, #20]
 800612a:	f007 fccd 	bl	800dac8 <mrbc_str_to_symid>
 800612e:	4603      	mov	r3, r0
 8006130:	827b      	strh	r3, [r7, #18]

  mrbc_instance_setiv(&v[0], sym_id, &v[1]);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f103 0210 	add.w	r2, r3, #16
 8006138:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800613c:	4619      	mov	r1, r3
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f003 f9f6 	bl	8009530 <mrbc_instance_setiv>
  mrbc_free(vm, namebuf);
 8006144:	6978      	ldr	r0, [r7, #20]
 8006146:	f7fb fe89 	bl	8001e5c <mrbc_raw_free>
 800614a:	e000      	b.n	800614e <c_object_setiv+0x6e>
  if( !namebuf ) return;
 800614c:	bf00      	nop
}
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <c_object_attr_reader>:

//================================================================
/*! (class method) access method 'attr_reader'
 */
static void c_object_attr_reader(struct VM *vm, mrbc_value v[], int argc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  int i;
  for( i = 1; i <= argc; i++ ) {
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e01f      	b.n	80061a6 <c_object_attr_reader+0x52>
    if( mrbc_type(v[i]) != MRBC_TT_SYMBOL ) {
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	f993 3000 	ldrsb.w	r3, [r3]
 8006172:	2b06      	cmp	r3, #6
 8006174:	d005      	beq.n	8006182 <c_object_attr_reader+0x2e>
      // Not support "String" only :symbol
      mrbc_raise(vm, MRBC_CLASS(TypeError), "not a symbol");
 8006176:	4a0f      	ldr	r2, [pc, #60]	; (80061b4 <c_object_attr_reader+0x60>)
 8006178:	490f      	ldr	r1, [pc, #60]	; (80061b8 <c_object_attr_reader+0x64>)
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f005 f942 	bl	800b404 <mrbc_raise>
      return;
 8006180:	e015      	b.n	80061ae <c_object_attr_reader+0x5a>
    }

    // define reader method
    const char *name = mrbc_symbol_cstr(&v[i]);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4413      	add	r3, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff f89e 	bl	80052cc <mrbc_symbol_cstr>
 8006190:	6138      	str	r0, [r7, #16]
    mrbc_define_method(vm, v[0].cls, name, c_object_getiv);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6899      	ldr	r1, [r3, #8]
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <c_object_attr_reader+0x68>)
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f003 f924 	bl	80093e8 <mrbc_define_method>
  for( i = 1; i <= argc; i++ ) {
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3301      	adds	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	dddb      	ble.n	8006166 <c_object_attr_reader+0x12>
  }
}
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	08018dd8 	.word	0x08018dd8
 80061b8:	200001b4 	.word	0x200001b4
 80061bc:	08006091 	.word	0x08006091

080061c0 <c_object_attr_accessor>:

//================================================================
/*! (class method) access method 'attr_accessor'
 */
static void c_object_attr_accessor(struct VM *vm, mrbc_value v[], int argc)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	61f8      	str	r0, [r7, #28]
 80061c8:	61b9      	str	r1, [r7, #24]
 80061ca:	617a      	str	r2, [r7, #20]
  int i;
  for( i = 1; i <= argc; i++ ) {
 80061cc:	2301      	movs	r3, #1
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d0:	e04e      	b.n	8006270 <c_object_attr_accessor+0xb0>
    if( mrbc_type(v[i]) != MRBC_TT_SYMBOL ) {
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4413      	add	r3, r2
 80061da:	f993 3000 	ldrsb.w	r3, [r3]
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d005      	beq.n	80061ee <c_object_attr_accessor+0x2e>
      // Not support "String" only :symbol
      mrbc_raise(vm, MRBC_CLASS(TypeError), "not a symbol");
 80061e2:	4a28      	ldr	r2, [pc, #160]	; (8006284 <c_object_attr_accessor+0xc4>)
 80061e4:	4928      	ldr	r1, [pc, #160]	; (8006288 <c_object_attr_accessor+0xc8>)
 80061e6:	69f8      	ldr	r0, [r7, #28]
 80061e8:	f005 f90c 	bl	800b404 <mrbc_raise>
      return;
 80061ec:	e046      	b.n	800627c <c_object_attr_accessor+0xbc>
    }

    // define reader method
    const char *name = mrbc_symbol_cstr(&v[i]);
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4413      	add	r3, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff f868 	bl	80052cc <mrbc_symbol_cstr>
 80061fc:	62b8      	str	r0, [r7, #40]	; 0x28
    mrbc_define_method(vm, v[0].cls, name, c_object_getiv);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	6899      	ldr	r1, [r3, #8]
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <c_object_attr_accessor+0xcc>)
 8006204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006206:	69f8      	ldr	r0, [r7, #28]
 8006208:	f003 f8ee 	bl	80093e8 <mrbc_define_method>

    // make string "....=" and define writer method.
    int len = strlen(name);
 800620c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620e:	f7f9 fff1 	bl	80001f4 <strlen>
 8006212:	4603      	mov	r3, r0
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
    char *namebuf = mrbc_alloc(vm, len+2);
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	3302      	adds	r3, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f7fb fc42 	bl	8001aa4 <mrbc_raw_alloc>
 8006220:	6238      	str	r0, [r7, #32]
    if( !namebuf ) return;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d028      	beq.n	800627a <c_object_attr_accessor+0xba>
    memcpy(namebuf, name, len);
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	461a      	mov	r2, r3
 800622c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800622e:	6a38      	ldr	r0, [r7, #32]
 8006230:	f010 fa89 	bl	8016746 <memcpy>
    namebuf[len] = '=';
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	4413      	add	r3, r2
 800623a:	223d      	movs	r2, #61	; 0x3d
 800623c:	701a      	strb	r2, [r3, #0]
    namebuf[len+1] = 0;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	3301      	adds	r3, #1
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
    mrbc_symbol_new(vm, namebuf);
 800624a:	463b      	mov	r3, r7
 800624c:	6a3a      	ldr	r2, [r7, #32]
 800624e:	69f9      	ldr	r1, [r7, #28]
 8006250:	4618      	mov	r0, r3
 8006252:	f007 fd9f 	bl	800dd94 <mrbc_symbol_new>
    mrbc_define_method(vm, v[0].cls, namebuf, c_object_setiv);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	6899      	ldr	r1, [r3, #8]
 800625a:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <c_object_attr_accessor+0xd0>)
 800625c:	6a3a      	ldr	r2, [r7, #32]
 800625e:	69f8      	ldr	r0, [r7, #28]
 8006260:	f003 f8c2 	bl	80093e8 <mrbc_define_method>
    mrbc_free(vm, namebuf);
 8006264:	6a38      	ldr	r0, [r7, #32]
 8006266:	f7fb fdf9 	bl	8001e5c <mrbc_raw_free>
  for( i = 1; i <= argc; i++ ) {
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	3301      	adds	r3, #1
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	429a      	cmp	r2, r3
 8006276:	ddac      	ble.n	80061d2 <c_object_attr_accessor+0x12>
 8006278:	e000      	b.n	800627c <c_object_attr_accessor+0xbc>
    if( !namebuf ) return;
 800627a:	bf00      	nop
  }
}
 800627c:	3730      	adds	r7, #48	; 0x30
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	08018dd8 	.word	0x08018dd8
 8006288:	200001b4 	.word	0x200001b4
 800628c:	08006091 	.word	0x08006091
 8006290:	080060e1 	.word	0x080060e1

08006294 <c_object_sprintf>:
#if MRBC_USE_STRING
//================================================================
/*! (method) sprintf
*/
static void c_object_sprintf(struct VM *vm, mrbc_value v[], int argc)
{
 8006294:	b5b0      	push	{r4, r5, r7, lr}
 8006296:	b09e      	sub	sp, #120	; 0x78
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  static const int BUF_INC_STEP = 32;	// bytes.

  mrbc_value *format = &v[1];
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	3310      	adds	r3, #16
 80062a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if( mrbc_type(*format) != MRBC_TT_STRING ) {
 80062a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062a8:	f993 3000 	ldrsb.w	r3, [r3]
 80062ac:	2b0b      	cmp	r3, #11
 80062ae:	d005      	beq.n	80062bc <c_object_sprintf+0x28>
    mrbc_raise(vm, MRBC_CLASS(TypeError), "sprintf");
 80062b0:	4ac1      	ldr	r2, [pc, #772]	; (80065b8 <c_object_sprintf+0x324>)
 80062b2:	49c2      	ldr	r1, [pc, #776]	; (80065bc <c_object_sprintf+0x328>)
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f005 f8a5 	bl	800b404 <mrbc_raise>
    return;
 80062ba:	e258      	b.n	800676e <c_object_sprintf+0x4da>
  }

  int buflen = BUF_INC_STEP;
 80062bc:	4bc0      	ldr	r3, [pc, #768]	; (80065c0 <c_object_sprintf+0x32c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	677b      	str	r3, [r7, #116]	; 0x74
  char *buf = mrbc_alloc(vm, buflen);
 80062c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fb fbed 	bl	8001aa4 <mrbc_raw_alloc>
 80062ca:	6678      	str	r0, [r7, #100]	; 0x64
  if( !buf ) { return; }	// ENOMEM raise?
 80062cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 824a 	beq.w	8006768 <c_object_sprintf+0x4d4>

  mrbc_printf_t pf;
  mrbc_printf_init( &pf, buf, buflen, mrbc_string_cstr(format) );
 80062d4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80062d6:	f7ff f89e 	bl	8005416 <mrbc_string_cstr>
 80062da:	4603      	mov	r3, r0
 80062dc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80062e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80062e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80062e4:	f7ff f8a4 	bl	8005430 <mrbc_printf_init>

  int i = 2;
 80062e8:	2302      	movs	r3, #2
 80062ea:	673b      	str	r3, [r7, #112]	; 0x70
  int ret;
  while( 1 ) {
    mrbc_printf_t pf_bak = pf;
 80062ec:	f107 0420 	add.w	r4, r7, #32
 80062f0:	f107 0548 	add.w	r5, r7, #72	; 0x48
 80062f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80062fc:	e884 0003 	stmia.w	r4, {r0, r1}
    ret = mrbc_printf_main( &pf );
 8006300:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006304:	4618      	mov	r0, r3
 8006306:	f004 fa9b 	bl	800a840 <mrbc_printf_main>
 800630a:	66f8      	str	r0, [r7, #108]	; 0x6c
    if( ret == 0 ) break;	// normal break loop.
 800630c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 81fe 	beq.w	8006710 <c_object_sprintf+0x47c>
    if( ret < 0 ) goto INCREASE_BUFFER;
 8006314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006316:	2b00      	cmp	r3, #0
 8006318:	f2c0 81e2 	blt.w	80066e0 <c_object_sprintf+0x44c>

    if( i > argc ) {
 800631c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	dd05      	ble.n	8006330 <c_object_sprintf+0x9c>
      mrbc_raise(vm, MRBC_CLASS(ArgumentError), "too few arguments");
 8006324:	4aa7      	ldr	r2, [pc, #668]	; (80065c4 <c_object_sprintf+0x330>)
 8006326:	49a8      	ldr	r1, [pc, #672]	; (80065c8 <c_object_sprintf+0x334>)
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f005 f86b 	bl	800b404 <mrbc_raise>
      break;
 800632e:	e1f0      	b.n	8006712 <c_object_sprintf+0x47e>
    }

    // maybe ret == 1
    switch(pf.fmt.type) {
 8006330:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8006334:	3b42      	subs	r3, #66	; 0x42
 8006336:	2b36      	cmp	r3, #54	; 0x36
 8006338:	f200 81a4 	bhi.w	8006684 <c_object_sprintf+0x3f0>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <c_object_sprintf+0xb0>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	0800658f 	.word	0x0800658f
 8006348:	08006685 	.word	0x08006685
 800634c:	08006685 	.word	0x08006685
 8006350:	08006621 	.word	0x08006621
 8006354:	08006685 	.word	0x08006685
 8006358:	08006621 	.word	0x08006621
 800635c:	08006685 	.word	0x08006685
 8006360:	08006685 	.word	0x08006685
 8006364:	08006685 	.word	0x08006685
 8006368:	08006685 	.word	0x08006685
 800636c:	08006685 	.word	0x08006685
 8006370:	08006685 	.word	0x08006685
 8006374:	08006685 	.word	0x08006685
 8006378:	08006685 	.word	0x08006685
 800637c:	08006685 	.word	0x08006685
 8006380:	08006685 	.word	0x08006685
 8006384:	08006685 	.word	0x08006685
 8006388:	08006685 	.word	0x08006685
 800638c:	08006685 	.word	0x08006685
 8006390:	08006685 	.word	0x08006685
 8006394:	08006685 	.word	0x08006685
 8006398:	08006685 	.word	0x08006685
 800639c:	080065cd 	.word	0x080065cd
 80063a0:	08006685 	.word	0x08006685
 80063a4:	08006685 	.word	0x08006685
 80063a8:	08006685 	.word	0x08006685
 80063ac:	08006685 	.word	0x08006685
 80063b0:	08006685 	.word	0x08006685
 80063b4:	08006685 	.word	0x08006685
 80063b8:	08006685 	.word	0x08006685
 80063bc:	08006685 	.word	0x08006685
 80063c0:	08006685 	.word	0x08006685
 80063c4:	0800658f 	.word	0x0800658f
 80063c8:	08006421 	.word	0x08006421
 80063cc:	080064f3 	.word	0x080064f3
 80063d0:	08006621 	.word	0x08006621
 80063d4:	08006621 	.word	0x08006621
 80063d8:	08006621 	.word	0x08006621
 80063dc:	08006685 	.word	0x08006685
 80063e0:	080064f3 	.word	0x080064f3
 80063e4:	08006685 	.word	0x08006685
 80063e8:	08006685 	.word	0x08006685
 80063ec:	08006685 	.word	0x08006685
 80063f0:	08006685 	.word	0x08006685
 80063f4:	08006685 	.word	0x08006685
 80063f8:	080065f7 	.word	0x080065f7
 80063fc:	08006685 	.word	0x08006685
 8006400:	08006685 	.word	0x08006685
 8006404:	08006685 	.word	0x08006685
 8006408:	08006481 	.word	0x08006481
 800640c:	08006685 	.word	0x08006685
 8006410:	080064f3 	.word	0x080064f3
 8006414:	08006685 	.word	0x08006685
 8006418:	08006685 	.word	0x08006685
 800641c:	080065cd 	.word	0x080065cd
    case 'c':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 8006420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	4413      	add	r3, r2
 8006428:	f993 3000 	ldrsb.w	r3, [r3]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d10c      	bne.n	800644a <c_object_sprintf+0x1b6>
	ret = mrbc_printf_char( &pf, v[i].i );
 8006430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	4413      	add	r3, r2
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f004 faf5 	bl	800aa30 <mrbc_printf_char>
 8006446:	66f8      	str	r0, [r7, #108]	; 0x6c
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
	ret = mrbc_printf_char( &pf, mrbc_string_cstr(&v[i])[0] );
      }
      break;
 8006448:	e11e      	b.n	8006688 <c_object_sprintf+0x3f4>
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
 800644a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4413      	add	r3, r2
 8006452:	f993 3000 	ldrsb.w	r3, [r3]
 8006456:	2b0b      	cmp	r3, #11
 8006458:	f040 8116 	bne.w	8006688 <c_object_sprintf+0x3f4>
	ret = mrbc_printf_char( &pf, mrbc_string_cstr(&v[i])[0] );
 800645c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	4413      	add	r3, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe ffd6 	bl	8005416 <mrbc_string_cstr>
 800646a:	4603      	mov	r3, r0
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f004 fada 	bl	800aa30 <mrbc_printf_char>
 800647c:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 800647e:	e103      	b.n	8006688 <c_object_sprintf+0x3f4>

    case 's':
      if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
 8006480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	4413      	add	r3, r2
 8006488:	f993 3000 	ldrsb.w	r3, [r3]
 800648c:	2b0b      	cmp	r3, #11
 800648e:	d117      	bne.n	80064c0 <c_object_sprintf+0x22c>
	ret = mrbc_printf_bstr( &pf, mrbc_string_cstr(&v[i]), mrbc_string_size(&v[i]),' ');
 8006490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4413      	add	r3, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe ffbc 	bl	8005416 <mrbc_string_cstr>
 800649e:	4604      	mov	r4, r0
 80064a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	4413      	add	r3, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe ffa7 	bl	80053fc <mrbc_string_size>
 80064ae:	4602      	mov	r2, r0
 80064b0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80064b4:	2320      	movs	r3, #32
 80064b6:	4621      	mov	r1, r4
 80064b8:	f004 fb12 	bl	800aae0 <mrbc_printf_bstr>
 80064bc:	66f8      	str	r0, [r7, #108]	; 0x6c
      } else if( mrbc_type(v[i]) == MRBC_TT_SYMBOL ) {
	ret = mrbc_printf_str( &pf, mrbc_symbol_cstr( &v[i] ), ' ');
      }
      break;
 80064be:	e0e5      	b.n	800668c <c_object_sprintf+0x3f8>
      } else if( mrbc_type(v[i]) == MRBC_TT_SYMBOL ) {
 80064c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	4413      	add	r3, r2
 80064c8:	f993 3000 	ldrsb.w	r3, [r3]
 80064cc:	2b06      	cmp	r3, #6
 80064ce:	f040 80dd 	bne.w	800668c <c_object_sprintf+0x3f8>
	ret = mrbc_printf_str( &pf, mrbc_symbol_cstr( &v[i] ), ' ');
 80064d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	4413      	add	r3, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe fef6 	bl	80052cc <mrbc_symbol_cstr>
 80064e0:	4601      	mov	r1, r0
 80064e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80064e6:	2220      	movs	r2, #32
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe ffe0 	bl	80054ae <mrbc_printf_str>
 80064ee:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 80064f0:	e0cc      	b.n	800668c <c_object_sprintf+0x3f8>

    case 'd':
    case 'i':
    case 'u':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 80064f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4413      	add	r3, r2
 80064fa:	f993 3000 	ldrsb.w	r3, [r3]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d10c      	bne.n	800651c <c_object_sprintf+0x288>
	ret = mrbc_printf_int( &pf, v[i].i, 10);
 8006502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	6899      	ldr	r1, [r3, #8]
 800650c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006510:	220a      	movs	r2, #10
 8006512:	4618      	mov	r0, r3
 8006514:	f004 fb6a 	bl	800abec <mrbc_printf_int>
 8006518:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
	mrbc_int_t ival = atol(mrbc_string_cstr(&v[i]));
	ret = mrbc_printf_int( &pf, ival, 10 );
      }
      break;
 800651a:	e0b9      	b.n	8006690 <c_object_sprintf+0x3fc>
      } else if( mrbc_type(v[i]) == MRBC_TT_FLOAT ) {
 800651c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	f993 3000 	ldrsb.w	r3, [r3]
 8006528:	2b05      	cmp	r3, #5
 800652a:	d112      	bne.n	8006552 <c_object_sprintf+0x2be>
	ret = mrbc_printf_int( &pf, (mrbc_int_t)v[i].d, 10);
 800652c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	4413      	add	r3, r2
 8006534:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006538:	4610      	mov	r0, r2
 800653a:	4619      	mov	r1, r3
 800653c:	f7fa fb0e 	bl	8000b5c <__aeabi_d2iz>
 8006540:	4601      	mov	r1, r0
 8006542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006546:	220a      	movs	r2, #10
 8006548:	4618      	mov	r0, r3
 800654a:	f004 fb4f 	bl	800abec <mrbc_printf_int>
 800654e:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 8006550:	e09e      	b.n	8006690 <c_object_sprintf+0x3fc>
      } else if( mrbc_type(v[i]) == MRBC_TT_STRING ) {
 8006552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4413      	add	r3, r2
 800655a:	f993 3000 	ldrsb.w	r3, [r3]
 800655e:	2b0b      	cmp	r3, #11
 8006560:	f040 8096 	bne.w	8006690 <c_object_sprintf+0x3fc>
	mrbc_int_t ival = atol(mrbc_string_cstr(&v[i]));
 8006564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	4413      	add	r3, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe ff52 	bl	8005416 <mrbc_string_cstr>
 8006572:	4603      	mov	r3, r0
 8006574:	4618      	mov	r0, r3
 8006576:	f00f f82c 	bl	80155d2 <atol>
 800657a:	6638      	str	r0, [r7, #96]	; 0x60
	ret = mrbc_printf_int( &pf, ival, 10 );
 800657c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006580:	220a      	movs	r2, #10
 8006582:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006584:	4618      	mov	r0, r3
 8006586:	f004 fb31 	bl	800abec <mrbc_printf_int>
 800658a:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 800658c:	e080      	b.n	8006690 <c_object_sprintf+0x3fc>

    case 'b':
    case 'B':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 800658e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	4413      	add	r3, r2
 8006596:	f993 3000 	ldrsb.w	r3, [r3]
 800659a:	2b04      	cmp	r3, #4
 800659c:	d17a      	bne.n	8006694 <c_object_sprintf+0x400>
	ret = mrbc_printf_bit( &pf, v[i].i, 1);
 800659e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4413      	add	r3, r2
 80065a6:	6899      	ldr	r1, [r3, #8]
 80065a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065ac:	2201      	movs	r2, #1
 80065ae:	4618      	mov	r0, r3
 80065b0:	f004 fc4c 	bl	800ae4c <mrbc_printf_bit>
 80065b4:	66f8      	str	r0, [r7, #108]	; 0x6c
      }
      break;
 80065b6:	e06d      	b.n	8006694 <c_object_sprintf+0x400>
 80065b8:	08018de8 	.word	0x08018de8
 80065bc:	200001b4 	.word	0x200001b4
 80065c0:	0801abec 	.word	0x0801abec
 80065c4:	08018df0 	.word	0x08018df0
 80065c8:	20000154 	.word	0x20000154

    case 'x':
    case 'X':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 80065cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	4413      	add	r3, r2
 80065d4:	f993 3000 	ldrsb.w	r3, [r3]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d15d      	bne.n	8006698 <c_object_sprintf+0x404>
	ret = mrbc_printf_bit( &pf, v[i].i, 4);
 80065dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4413      	add	r3, r2
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065ea:	2204      	movs	r2, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f004 fc2d 	bl	800ae4c <mrbc_printf_bit>
 80065f2:	66f8      	str	r0, [r7, #108]	; 0x6c
      }
      break;
 80065f4:	e050      	b.n	8006698 <c_object_sprintf+0x404>

    case 'o':
      if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 80065f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	4413      	add	r3, r2
 80065fe:	f993 3000 	ldrsb.w	r3, [r3]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d14a      	bne.n	800669c <c_object_sprintf+0x408>
	ret = mrbc_printf_bit( &pf, v[i].i, 3);
 8006606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4413      	add	r3, r2
 800660e:	6899      	ldr	r1, [r3, #8]
 8006610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006614:	2203      	movs	r2, #3
 8006616:	4618      	mov	r0, r3
 8006618:	f004 fc18 	bl	800ae4c <mrbc_printf_bit>
 800661c:	66f8      	str	r0, [r7, #108]	; 0x6c
      }
      break;
 800661e:	e03d      	b.n	800669c <c_object_sprintf+0x408>
    case 'f':
    case 'e':
    case 'E':
    case 'g':
    case 'G':
      if( mrbc_type(v[i]) == MRBC_TT_FLOAT ) {
 8006620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	4413      	add	r3, r2
 8006628:	f993 3000 	ldrsb.w	r3, [r3]
 800662c:	2b05      	cmp	r3, #5
 800662e:	d110      	bne.n	8006652 <c_object_sprintf+0x3be>
	ret = mrbc_printf_float( &pf, v[i].d );
 8006630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	4413      	add	r3, r2
 8006638:	ed93 7b02 	vldr	d7, [r3, #8]
 800663c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006640:	eeb0 0a47 	vmov.f32	s0, s14
 8006644:	eef0 0a67 	vmov.f32	s1, s15
 8006648:	4618      	mov	r0, r3
 800664a:	f004 fccd 	bl	800afe8 <mrbc_printf_float>
 800664e:	66f8      	str	r0, [r7, #108]	; 0x6c
      } else if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
	ret = mrbc_printf_float( &pf, v[i].i );
      }
      break;
 8006650:	e026      	b.n	80066a0 <c_object_sprintf+0x40c>
      } else if( mrbc_type(v[i]) == MRBC_TT_INTEGER ) {
 8006652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	4413      	add	r3, r2
 800665a:	f993 3000 	ldrsb.w	r3, [r3]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d11e      	bne.n	80066a0 <c_object_sprintf+0x40c>
	ret = mrbc_printf_float( &pf, v[i].i );
 8006662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f7f9 ff71 	bl	8000554 <__aeabi_i2d>
 8006672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006676:	ec41 0b10 	vmov	d0, r0, r1
 800667a:	4618      	mov	r0, r3
 800667c:	f004 fcb4 	bl	800afe8 <mrbc_printf_float>
 8006680:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 8006682:	e00d      	b.n	80066a0 <c_object_sprintf+0x40c>
#endif

    default:
      break;
 8006684:	bf00      	nop
 8006686:	e00c      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 8006688:	bf00      	nop
 800668a:	e00a      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 800668c:	bf00      	nop
 800668e:	e008      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 8006690:	bf00      	nop
 8006692:	e006      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <c_object_sprintf+0x40e>
      break;
 80066a0:	bf00      	nop
    }
    if( ret >= 0 ) {
 80066a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	db03      	blt.n	80066b0 <c_object_sprintf+0x41c>
      i++;
 80066a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066aa:	3301      	adds	r3, #1
 80066ac:	673b      	str	r3, [r7, #112]	; 0x70
 80066ae:	e61d      	b.n	80062ec <c_object_sprintf+0x58>
      continue;		// normal next loop.
    }

    // maybe buffer full. (ret == -1)
    if( pf.fmt.width > BUF_INC_STEP ) buflen += pf.fmt.width;
 80066b0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80066b4:	461a      	mov	r2, r3
 80066b6:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <c_object_sprintf+0x4e0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	dd05      	ble.n	80066ca <c_object_sprintf+0x436>
 80066be:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80066c2:	461a      	mov	r2, r3
 80066c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c6:	4413      	add	r3, r2
 80066c8:	677b      	str	r3, [r7, #116]	; 0x74
    pf = pf_bak;
 80066ca:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80066ce:	f107 0520 	add.w	r5, r7, #32
 80066d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80066da:	e884 0003 	stmia.w	r4, {r0, r1}
 80066de:	e000      	b.n	80066e2 <c_object_sprintf+0x44e>
    if( ret < 0 ) goto INCREASE_BUFFER;
 80066e0:	bf00      	nop

  INCREASE_BUFFER:
    buflen += BUF_INC_STEP;
 80066e2:	4b24      	ldr	r3, [pc, #144]	; (8006774 <c_object_sprintf+0x4e0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80066e8:	4413      	add	r3, r2
 80066ea:	677b      	str	r3, [r7, #116]	; 0x74
    buf = mrbc_realloc(vm, pf.buf, buflen);
 80066ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fb fc4e 	bl	8001f94 <mrbc_raw_realloc>
 80066f8:	6678      	str	r0, [r7, #100]	; 0x64
    if( !buf ) { return; }	// ENOMEM raise? TODO: leak memory.
 80066fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d035      	beq.n	800676c <c_object_sprintf+0x4d8>
    mrbc_printf_replace_buffer(&pf, buf, buflen);
 8006700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006704:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006706:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006708:	4618      	mov	r0, r3
 800670a:	f004 f877 	bl	800a7fc <mrbc_printf_replace_buffer>
 800670e:	e5ed      	b.n	80062ec <c_object_sprintf+0x58>
    if( ret == 0 ) break;	// normal break loop.
 8006710:	bf00      	nop
  }
  mrbc_printf_end( &pf );
 8006712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe feac 	bl	8005474 <mrbc_printf_end>

  buflen = mrbc_printf_len( &pf );
 800671c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe feb5 	bl	8005490 <mrbc_printf_len>
 8006726:	6778      	str	r0, [r7, #116]	; 0x74
  mrbc_realloc(vm, pf.buf, buflen+1);	// shrink suitable size.
 8006728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800672a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672c:	3301      	adds	r3, #1
 800672e:	4619      	mov	r1, r3
 8006730:	4610      	mov	r0, r2
 8006732:	f7fb fc2f 	bl	8001f94 <mrbc_raw_realloc>

  mrbc_value value = mrbc_string_new_alloc( vm, pf.buf, buflen );
 8006736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006738:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800673c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	f000 fd84 	bl	800724c <mrbc_string_new_alloc>

  SET_RETURN(value);
 8006744:	f107 0410 	add.w	r4, r7, #16
 8006748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800674c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800674e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006752:	68b8      	ldr	r0, [r7, #8]
 8006754:	f7fe fd66 	bl	8005224 <mrbc_decref>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	461c      	mov	r4, r3
 800675c:	f107 0310 	add.w	r3, r7, #16
 8006760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006766:	e002      	b.n	800676e <c_object_sprintf+0x4da>
  if( !buf ) { return; }	// ENOMEM raise?
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <c_object_sprintf+0x4da>
    if( !buf ) { return; }	// ENOMEM raise? TODO: leak memory.
 800676c:	bf00      	nop
}
 800676e:	3778      	adds	r7, #120	; 0x78
 8006770:	46bd      	mov	sp, r7
 8006772:	bdb0      	pop	{r4, r5, r7, pc}
 8006774:	0801abec 	.word	0x0801abec

08006778 <c_object_printf>:

//================================================================
/*! (method) printf
*/
static void c_object_printf(struct VM *vm, mrbc_value v[], int argc)
{
 8006778:	b590      	push	{r4, r7, lr}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  c_object_sprintf(vm, v, argc);
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fd83 	bl	8006294 <c_object_sprintf>
  mrbc_nprint( mrbc_string_cstr(v), mrbc_string_size(v) );
 800678e:	68b8      	ldr	r0, [r7, #8]
 8006790:	f7fe fe41 	bl	8005416 <mrbc_string_cstr>
 8006794:	4604      	mov	r4, r0
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f7fe fe30 	bl	80053fc <mrbc_string_size>
 800679c:	4603      	mov	r3, r0
 800679e:	4619      	mov	r1, r3
 80067a0:	4620      	mov	r0, r4
 80067a2:	f003 fcb1 	bl	800a108 <mrbc_nprint>
  SET_NIL_RETURN();
 80067a6:	68b8      	ldr	r0, [r7, #8]
 80067a8:	f7fe fd3c 	bl	8005224 <mrbc_decref>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd90      	pop	{r4, r7, pc}
	...

080067bc <c_object_to_s>:

//================================================================
/*! (method) to_s
 */
static void c_object_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b09d      	sub	sp, #116	; 0x74
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  char buf[64];
  char *s = buf;
 80067c8:	f107 0320 	add.w	r3, r7, #32
 80067cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  mrbc_sym sym_id = find_class_by_object(&v[0])->sym_id;
 80067ce:	68b8      	ldr	r0, [r7, #8]
 80067d0:	f7fe fda6 	bl	8005320 <find_class_by_object>
 80067d4:	4603      	mov	r3, r0
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

  if( v[0].tt != MRBC_TT_CLASS ) {
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f993 3000 	ldrsb.w	r3, [r3]
 80067e2:	2b07      	cmp	r3, #7
 80067e4:	d009      	beq.n	80067fa <c_object_to_s+0x3e>
    buf[0] = '#'; buf[1] = '<';
 80067e6:	2323      	movs	r3, #35	; 0x23
 80067e8:	f887 3020 	strb.w	r3, [r7, #32]
 80067ec:	233c      	movs	r3, #60	; 0x3c
 80067ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    s = buf + 2;
 80067f2:	f107 0320 	add.w	r3, r7, #32
 80067f6:	3302      	adds	r3, #2
 80067f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  int bufsiz = sizeof(buf) - (s - buf);
 80067fa:	f107 0320 	add.w	r3, r7, #32
 80067fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006806:	667b      	str	r3, [r7, #100]	; 0x64
  int n = set_sym_name_by_id( s, bufsiz, sym_id );
 8006808:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800680c:	461a      	mov	r2, r3
 800680e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006810:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006812:	f7fe fe67 	bl	80054e4 <set_sym_name_by_id>
 8006816:	6638      	str	r0, [r7, #96]	; 0x60

  if( v[0].tt != MRBC_TT_CLASS ) {
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f993 3000 	ldrsb.w	r3, [r3]
 800681e:	2b07      	cmp	r3, #7
 8006820:	d00a      	beq.n	8006838 <c_object_to_s+0x7c>
    mrbc_snprintf(s+n, bufsiz-n, ":%08x>", (uint32_t)
 8006822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006826:	18d0      	adds	r0, r2, r3
 8006828:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800682a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800682c:	1ad1      	subs	r1, r2, r3
#if defined(UINTPTR_MAX)
	(uintptr_t)
#endif
	v->instance );
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	689b      	ldr	r3, [r3, #8]
    mrbc_snprintf(s+n, bufsiz-n, ":%08x>", (uint32_t)
 8006832:	4a0c      	ldr	r2, [pc, #48]	; (8006864 <c_object_to_s+0xa8>)
 8006834:	f003 fc88 	bl	800a148 <mrbc_snprintf>
  }

  SET_RETURN( mrbc_string_new_cstr( vm, buf ));
 8006838:	f107 0310 	add.w	r3, r7, #16
 800683c:	f107 0220 	add.w	r2, r7, #32
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe fdc2 	bl	80053cc <mrbc_string_new_cstr>
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	f7fe fceb 	bl	8005224 <mrbc_decref>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	461c      	mov	r4, r3
 8006852:	f107 0310 	add.w	r3, r7, #16
 8006856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800685c:	bf00      	nop
 800685e:	3774      	adds	r7, #116	; 0x74
 8006860:	46bd      	mov	sp, r7
 8006862:	bd90      	pop	{r4, r7, pc}
 8006864:	08018e04 	.word	0x08018e04

08006868 <c_proc_new>:
/***** Proc class ***********************************************************/
//================================================================
/*! (method) new
*/
static void c_proc_new(struct VM *vm, mrbc_value v[], int argc)
{
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_PROC ) {
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	3310      	adds	r3, #16
 8006878:	f993 3000 	ldrsb.w	r3, [r3]
 800687c:	2b09      	cmp	r3, #9
 800687e:	d005      	beq.n	800688c <c_proc_new+0x24>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError),
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <c_proc_new+0x40>)
 8006882:	490a      	ldr	r1, [pc, #40]	; (80068ac <c_proc_new+0x44>)
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f004 fdbd 	bl	800b404 <mrbc_raise>
	       "tried to create Proc object without a block");
    return;
 800688a:	e00a      	b.n	80068a2 <c_proc_new+0x3a>
  }

  v[0] = v[1];
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4614      	mov	r4, r2
 8006892:	3310      	adds	r3, #16
 8006894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  v[1].tt = MRBC_TT_EMPTY;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3310      	adds	r3, #16
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
}
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd90      	pop	{r4, r7, pc}
 80068a8:	08018e0c 	.word	0x08018e0c
 80068ac:	20000154 	.word	0x20000154

080068b0 <c_proc_call>:

//================================================================
/*! (method) call
*/
static void c_proc_call(struct VM *vm, mrbc_value v[], int argc)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  assert( mrbc_type(v[0]) == MRBC_TT_PROC );
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f993 3000 	ldrsb.w	r3, [r3]
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d006      	beq.n	80068d4 <c_proc_call+0x24>
 80068c6:	4b1d      	ldr	r3, [pc, #116]	; (800693c <c_proc_call+0x8c>)
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <c_proc_call+0x90>)
 80068ca:	f240 310a 	movw	r1, #778	; 0x30a
 80068ce:	481d      	ldr	r0, [pc, #116]	; (8006944 <c_proc_call+0x94>)
 80068d0:	f00e fe5e 	bl	8015590 <__assert_func>

  mrbc_callinfo *callinfo_self = v[0].proc->callinfo_self;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm,
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <c_proc_call+0x3a>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 80068e8:	e000      	b.n	80068ec <c_proc_call+0x3c>
 80068ea:	2100      	movs	r1, #0
				(callinfo_self ? callinfo_self->method_id : 0),
				v - vm->cur_regs, argc);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	1ad3      	subs	r3, r2, r3
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm,
 80068f4:	111b      	asrs	r3, r3, #4
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f008 f8b4 	bl	800ea68 <mrbc_push_callinfo>
 8006900:	6138      	str	r0, [r7, #16]
  if( !callinfo ) return;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d014      	beq.n	8006932 <c_proc_call+0x82>

  if( callinfo_self ) {
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <c_proc_call+0x66>
    callinfo->own_class = callinfo_self->own_class;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	615a      	str	r2, [r3, #20]
  }

  // target irep
  vm->cur_irep = v[0].proc->irep;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	611a      	str	r2, [r3, #16]
  vm->cur_regs = v;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	615a      	str	r2, [r3, #20]
 8006930:	e000      	b.n	8006934 <c_proc_call+0x84>
  if( !callinfo ) return;
 8006932:	bf00      	nop
}
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	08018e38 	.word	0x08018e38
 8006940:	0801abf0 	.word	0x0801abf0
 8006944:	08018d0c 	.word	0x08018d0c

08006948 <c_nil_to_i>:
/***** Nil class ************************************************************/
//================================================================
/*! (method) to_i
*/
static void c_nil_to_i(struct VM *vm, mrbc_value v[], int argc)
{
 8006948:	b480      	push	{r7}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  v[0] = mrbc_integer_value(0);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	461a      	mov	r2, r3
 8006958:	2300      	movs	r3, #0
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	6053      	str	r3, [r2, #4]
 800695e:	6093      	str	r3, [r2, #8]
 8006960:	60d3      	str	r3, [r2, #12]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2204      	movs	r2, #4
 8006966:	701a      	strb	r2, [r3, #0]
}
 8006968:	bf00      	nop
 800696a:	3724      	adds	r7, #36	; 0x24
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <c_nil_to_a>:

//================================================================
/*! (method) to_a
*/
static void c_nil_to_a(struct VM *vm, mrbc_value v[], int argc)
{
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b089      	sub	sp, #36	; 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	61f8      	str	r0, [r7, #28]
 800697c:	61b9      	str	r1, [r7, #24]
 800697e:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_array_new(vm, 0);
 8006980:	69bc      	ldr	r4, [r7, #24]
 8006982:	463b      	mov	r3, r7
 8006984:	2200      	movs	r2, #0
 8006986:	69f9      	ldr	r1, [r7, #28]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fb fcd2 	bl	8002332 <mrbc_array_new>
 800698e:	463b      	mov	r3, r7
 8006990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006996:	bf00      	nop
 8006998:	3724      	adds	r7, #36	; 0x24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd90      	pop	{r4, r7, pc}

0800699e <c_nil_to_h>:

//================================================================
/*! (method) to_h
*/
static void c_nil_to_h(struct VM *vm, mrbc_value v[], int argc)
{
 800699e:	b590      	push	{r4, r7, lr}
 80069a0:	b089      	sub	sp, #36	; 0x24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	61f8      	str	r0, [r7, #28]
 80069a6:	61b9      	str	r1, [r7, #24]
 80069a8:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_hash_new(vm, 0);
 80069aa:	69bc      	ldr	r4, [r7, #24]
 80069ac:	463b      	mov	r3, r7
 80069ae:	2200      	movs	r2, #0
 80069b0:	69f9      	ldr	r1, [r7, #28]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fa31 	bl	8003e1a <mrbc_hash_new>
 80069b8:	463b      	mov	r3, r7
 80069ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80069c0:	bf00      	nop
 80069c2:	3724      	adds	r7, #36	; 0x24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}

080069c8 <c_nil_to_f>:
#if MRBC_USE_FLOAT
//================================================================
/*! (method) to_f
*/
static void c_nil_to_f(struct VM *vm, mrbc_value v[], int argc)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	; 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  v[0] = mrbc_float_value(vm,0);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2205      	movs	r2, #5
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80069e8:	bf00      	nop
 80069ea:	3724      	adds	r7, #36	; 0x24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <c_nil_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect
*/
static void c_nil_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	61f8      	str	r0, [r7, #28]
 80069fc:	61b9      	str	r1, [r7, #24]
 80069fe:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new_cstr(vm, "nil");
 8006a00:	69bc      	ldr	r4, [r7, #24]
 8006a02:	463b      	mov	r3, r7
 8006a04:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <c_nil_inspect+0x2c>)
 8006a06:	69f9      	ldr	r1, [r7, #28]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fcdf 	bl	80053cc <mrbc_string_new_cstr>
 8006a0e:	463b      	mov	r3, r7
 8006a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a16:	bf00      	nop
 8006a18:	3724      	adds	r7, #36	; 0x24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd90      	pop	{r4, r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	08018e58 	.word	0x08018e58

08006a24 <c_nil_to_s>:

//================================================================
/*! (method) to_s
*/
static void c_nil_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	61f8      	str	r0, [r7, #28]
 8006a2c:	61b9      	str	r1, [r7, #24]
 8006a2e:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new(vm, NULL, 0);
 8006a30:	69bc      	ldr	r4, [r7, #24]
 8006a32:	4638      	mov	r0, r7
 8006a34:	2300      	movs	r3, #0
 8006a36:	2200      	movs	r2, #0
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	f000 fba5 	bl	8007188 <mrbc_string_new>
 8006a3e:	463b      	mov	r3, r7
 8006a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a46:	bf00      	nop
 8006a48:	3724      	adds	r7, #36	; 0x24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd90      	pop	{r4, r7, pc}
	...

08006a50 <c_true_to_s>:
#if MRBC_USE_STRING
//================================================================
/*! (method) to_s
*/
static void c_true_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b089      	sub	sp, #36	; 0x24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	61f8      	str	r0, [r7, #28]
 8006a58:	61b9      	str	r1, [r7, #24]
 8006a5a:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new_cstr(vm, "true");
 8006a5c:	69bc      	ldr	r4, [r7, #24]
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4a06      	ldr	r2, [pc, #24]	; (8006a7c <c_true_to_s+0x2c>)
 8006a62:	69f9      	ldr	r1, [r7, #28]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe fcb1 	bl	80053cc <mrbc_string_new_cstr>
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a72:	bf00      	nop
 8006a74:	3724      	adds	r7, #36	; 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd90      	pop	{r4, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08018e5c 	.word	0x08018e5c

08006a80 <c_false_to_s>:
#if MRBC_USE_STRING
//================================================================
/*! (method) False#to_s
*/
static void c_false_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b089      	sub	sp, #36	; 0x24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	61f8      	str	r0, [r7, #28]
 8006a88:	61b9      	str	r1, [r7, #24]
 8006a8a:	617a      	str	r2, [r7, #20]
  v[0] = mrbc_string_new_cstr(vm, "false");
 8006a8c:	69bc      	ldr	r4, [r7, #24]
 8006a8e:	463b      	mov	r3, r7
 8006a90:	4a06      	ldr	r2, [pc, #24]	; (8006aac <c_false_to_s+0x2c>)
 8006a92:	69f9      	ldr	r1, [r7, #28]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fc99 	bl	80053cc <mrbc_string_new_cstr>
 8006a9a:	463b      	mov	r3, r7
 8006a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006aa2:	bf00      	nop
 8006aa4:	3724      	adds	r7, #36	; 0x24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	08018e64 	.word	0x08018e64

08006ab0 <mrbc_decref>:
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f993 3000 	ldrsb.w	r3, [r3]
 8006abe:	2b07      	cmp	r3, #7
 8006ac0:	dd2c      	ble.n	8006b1c <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	885b      	ldrh	r3, [r3, #2]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <mrbc_decref+0x2a>
 8006acc:	4b16      	ldr	r3, [pc, #88]	; (8006b28 <mrbc_decref+0x78>)
 8006ace:	4a17      	ldr	r2, [pc, #92]	; (8006b2c <mrbc_decref+0x7c>)
 8006ad0:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8006ad4:	4816      	ldr	r0, [pc, #88]	; (8006b30 <mrbc_decref+0x80>)
 8006ad6:	f00e fd5b 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	885b      	ldrh	r3, [r3, #2]
 8006ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d106      	bne.n	8006af6 <mrbc_decref+0x46>
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <mrbc_decref+0x84>)
 8006aea:	4a10      	ldr	r2, [pc, #64]	; (8006b2c <mrbc_decref+0x7c>)
 8006aec:	f240 11d3 	movw	r1, #467	; 0x1d3
 8006af0:	480f      	ldr	r0, [pc, #60]	; (8006b30 <mrbc_decref+0x80>)
 8006af2:	f00e fd4d 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	885a      	ldrh	r2, [r3, #2]
 8006afc:	3a01      	subs	r2, #1
 8006afe:	b292      	uxth	r2, r2
 8006b00:	805a      	strh	r2, [r3, #2]
 8006b02:	885b      	ldrh	r3, [r3, #2]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10b      	bne.n	8006b20 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <mrbc_decref+0x88>)
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	e002      	b.n	8006b22 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8006b20:	bf00      	nop
}
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	08018ea0 	.word	0x08018ea0
 8006b2c:	0801ac20 	.word	0x0801ac20
 8006b30:	08018eb8 	.word	0x08018eb8
 8006b34:	08018ed4 	.word	0x08018ed4
 8006b38:	0801bde8 	.word	0x0801bde8

08006b3c <mrbc_string_new_cstr>:
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <mrbc_string_new_cstr+0x1c>
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7f9 fb50 	bl	80001f4 <strlen>
 8006b54:	4603      	mov	r3, r0
 8006b56:	e000      	b.n	8006b5a <mrbc_string_new_cstr+0x1e>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	f000 fb12 	bl	8007188 <mrbc_string_new>
}
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <mrbc_string_append_cstr>:
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 8006b76:	6838      	ldr	r0, [r7, #0]
 8006b78:	f7f9 fb3c 	bl	80001f4 <strlen>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fc98 	bl	80074b8 <mrbc_string_append_cbuf>
 8006b88:	4603      	mov	r3, r0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <mrbc_range_first>:
/***** Inline functions *****************************************************/
//================================================================
/*! get first value
*/
static inline mrbc_value mrbc_range_first(const mrbc_value *v)
{
 8006b92:	b490      	push	{r4, r7}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  return v->range->first;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc90      	pop	{r4, r7}
 8006bb4:	4770      	bx	lr

08006bb6 <mrbc_range_last>:

//================================================================
/*! get last value
*/
static inline mrbc_value mrbc_range_last(const mrbc_value *v)
{
 8006bb6:	b490      	push	{r4, r7}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  return v->range->last;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	3318      	adds	r3, #24
 8006bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc90      	pop	{r4, r7}
 8006bd8:	4770      	bx	lr

08006bda <mrbc_range_new>:
  @param  last		pointer to last value.
  @param  flag_exclude	true: exclude the end object, otherwise include.
  @return		range object.
*/
mrbc_value mrbc_range_new(struct VM *vm, mrbc_value *first, mrbc_value *last, int flag_exclude)
{
 8006bda:	b590      	push	{r4, r7, lr}
 8006bdc:	b089      	sub	sp, #36	; 0x24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
  mrbc_value value = {.tt = MRBC_TT_RANGE};
 8006be8:	f107 0310 	add.w	r3, r7, #16
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	743b      	strb	r3, [r7, #16]

  value.range = mrbc_alloc(vm, sizeof(mrbc_range));
 8006bfa:	2028      	movs	r0, #40	; 0x28
 8006bfc:	f7fa ff52 	bl	8001aa4 <mrbc_raw_alloc>
 8006c00:	4603      	mov	r3, r0
 8006c02:	61bb      	str	r3, [r7, #24]
  if( !value.range ) return value;		// ENOMEM
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d107      	bne.n	8006c1a <mrbc_range_new+0x40>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	461c      	mov	r4, r3
 8006c0e:	f107 0310 	add.w	r3, r7, #16
 8006c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006c18:	e023      	b.n	8006c62 <mrbc_range_new+0x88>

  MRBC_INIT_OBJECT_HEADER( value.range, "RA" );
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	805a      	strh	r2, [r3, #2]
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2252      	movs	r2, #82	; 0x52
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2241      	movs	r2, #65	; 0x41
 8006c2a:	705a      	strb	r2, [r3, #1]
  value.range->flag_exclude = flag_exclude;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	711a      	strb	r2, [r3, #4]
  value.range->first = *first;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	f103 0408 	add.w	r4, r3, #8
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  value.range->last = *last;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	f103 0418 	add.w	r4, r3, #24
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return value;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	461c      	mov	r4, r3
 8006c58:	f107 0310 	add.w	r3, r7, #16
 8006c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd90      	pop	{r4, r7, pc}

08006c6a <mrbc_range_delete>:
/*! destructor

  @param  v 	pointer to target.
*/
void mrbc_range_delete(mrbc_value *v)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  mrbc_decref( &v->range->first );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	3308      	adds	r3, #8
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff ff19 	bl	8006ab0 <mrbc_decref>
  mrbc_decref( &v->range->last );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	3318      	adds	r3, #24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff ff13 	bl	8006ab0 <mrbc_decref>

  mrbc_raw_free( v->range );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fb f8e4 	bl	8001e5c <mrbc_raw_free>
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <mrbc_range_compare>:
  @retval 0	v1 == v2
  @retval plus	v1 >  v2
  @retval minus	v1 <  v2
*/
int mrbc_range_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  int res;

  res = mrbc_compare( &v1->range->first, &v2->range->first );
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f103 0208 	add.w	r2, r3, #8
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f007 f9be 	bl	800e038 <mrbc_compare>
 8006cbc:	60f8      	str	r0, [r7, #12]
  if( res != 0 ) return res;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <mrbc_range_compare+0x2c>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	e018      	b.n	8006cfa <mrbc_range_compare+0x5e>

  res = mrbc_compare( &v1->range->last, &v2->range->last );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f103 0218 	add.w	r2, r3, #24
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	3318      	adds	r3, #24
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f007 f9ad 	bl	800e038 <mrbc_compare>
 8006cde:	60f8      	str	r0, [r7, #12]
  if( res != 0 ) return res;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <mrbc_range_compare+0x4e>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	e007      	b.n	8006cfa <mrbc_range_compare+0x5e>

  return (int)v2->range->flag_exclude - (int)v1->range->flag_exclude;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	791b      	ldrb	r3, [r3, #4]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	791b      	ldrb	r3, [r3, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <c_range_equal3>:

//================================================================
/*! (method) ===
*/
static void c_range_equal3(struct VM *vm, mrbc_value v[], int argc)
{
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b095      	sub	sp, #84	; 0x54
 8006d08:	af04      	add	r7, sp, #16
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[0]) == MRBC_TT_CLASS ) {
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f993 3000 	ldrsb.w	r3, [r3]
 8006d16:	2b07      	cmp	r3, #7
 8006d18:	d121      	bne.n	8006d5e <c_range_equal3+0x5a>
    mrbc_value result = mrbc_send( vm, v, argc, &v[1], "kind_of?", 1, &v[0] );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	f107 0020 	add.w	r0, r7, #32
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	9203      	str	r2, [sp, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	9202      	str	r2, [sp, #8]
 8006d2a:	4a2e      	ldr	r2, [pc, #184]	; (8006de4 <c_range_equal3+0xe0>)
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	68f9      	ldr	r1, [r7, #12]
 8006d36:	f002 fd53 	bl	80097e0 <mrbc_send>
    SET_RETURN( result );
 8006d3a:	f107 0410 	add.w	r4, r7, #16
 8006d3e:	f107 0320 	add.w	r3, r7, #32
 8006d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d48:	68b8      	ldr	r0, [r7, #8]
 8006d4a:	f7ff feb1 	bl	8006ab0 <mrbc_decref>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	461c      	mov	r4, r3
 8006d52:	f107 0310 	add.w	r3, r7, #16
 8006d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d5c:	e03f      	b.n	8006dde <c_range_equal3+0xda>
    return;
  }

  int cmp_first = mrbc_compare( &v[0].range->first, &v[1] );
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f103 0208 	add.w	r2, r3, #8
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	3310      	adds	r3, #16
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f007 f963 	bl	800e038 <mrbc_compare>
 8006d72:	63b8      	str	r0, [r7, #56]	; 0x38
  int result = (cmp_first <= 0);
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfd4      	ite	le
 8006d7a:	2301      	movle	r3, #1
 8006d7c:	2300      	movgt	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( !result ) goto DONE;
 8006d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01b      	beq.n	8006dc0 <c_range_equal3+0xbc>

  int cmp_last  = mrbc_compare( &v[1], &v[0].range->last );
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f103 0210 	add.w	r2, r3, #16
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	3318      	adds	r3, #24
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f007 f94e 	bl	800e038 <mrbc_compare>
 8006d9c:	6378      	str	r0, [r7, #52]	; 0x34
  result = (v->range->flag_exclude) ? (cmp_last < 0) : (cmp_last <= 0);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <c_range_equal3+0xac>
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	0fdb      	lsrs	r3, r3, #31
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e005      	b.n	8006dbc <c_range_equal3+0xb8>
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bfd4      	ite	le
 8006db6:	2301      	movle	r3, #1
 8006db8:	2300      	movgt	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dbe:	e000      	b.n	8006dc2 <c_range_equal3+0xbe>
  if( !result ) goto DONE;
 8006dc0:	bf00      	nop

 DONE:
  SET_BOOL_RETURN( result );
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <c_range_equal3+0xc8>
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e000      	b.n	8006dce <c_range_equal3+0xca>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	68b8      	ldr	r0, [r7, #8]
 8006dd2:	f7ff fe6d 	bl	8006ab0 <mrbc_decref>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	b25a      	sxtb	r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	701a      	strb	r2, [r3, #0]
}
 8006dde:	3744      	adds	r7, #68	; 0x44
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd90      	pop	{r4, r7, pc}
 8006de4:	08018ef0 	.word	0x08018ef0

08006de8 <c_range_first>:

//================================================================
/*! (method) first
*/
static void c_range_first(struct VM *vm, mrbc_value v[], int argc)
{
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b08d      	sub	sp, #52	; 0x34
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_range_first(v);
 8006df4:	f107 0320 	add.w	r3, r7, #32
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fec9 	bl	8006b92 <mrbc_range_first>
  SET_RETURN(ret);
 8006e00:	f107 0410 	add.w	r4, r7, #16
 8006e04:	f107 0320 	add.w	r3, r7, #32
 8006e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e0e:	68b8      	ldr	r0, [r7, #8]
 8006e10:	f7ff fe4e 	bl	8006ab0 <mrbc_decref>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	461c      	mov	r4, r3
 8006e18:	f107 0310 	add.w	r3, r7, #16
 8006e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006e22:	bf00      	nop
 8006e24:	3734      	adds	r7, #52	; 0x34
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd90      	pop	{r4, r7, pc}

08006e2a <c_range_last>:

//================================================================
/*! (method) last
*/
static void c_range_last(struct VM *vm, mrbc_value v[], int argc)
{
 8006e2a:	b590      	push	{r4, r7, lr}
 8006e2c:	b08d      	sub	sp, #52	; 0x34
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_range_last(v);
 8006e36:	f107 0320 	add.w	r3, r7, #32
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff feba 	bl	8006bb6 <mrbc_range_last>
  SET_RETURN(ret);
 8006e42:	f107 0410 	add.w	r4, r7, #16
 8006e46:	f107 0320 	add.w	r3, r7, #32
 8006e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e50:	68b8      	ldr	r0, [r7, #8]
 8006e52:	f7ff fe2d 	bl	8006ab0 <mrbc_decref>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	461c      	mov	r4, r3
 8006e5a:	f107 0310 	add.w	r3, r7, #16
 8006e5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006e64:	bf00      	nop
 8006e66:	3734      	adds	r7, #52	; 0x34
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd90      	pop	{r4, r7, pc}

08006e6c <c_range_exclude_end>:

//================================================================
/*! (method) exclude_end?
*/
static void c_range_exclude_end(struct VM *vm, mrbc_value v[], int argc)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  int result = v->range->flag_exclude;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	791b      	ldrb	r3, [r3, #4]
 8006e7e:	617b      	str	r3, [r7, #20]
  SET_BOOL_RETURN( result );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <c_range_exclude_end+0x1e>
 8006e86:	2303      	movs	r3, #3
 8006e88:	e000      	b.n	8006e8c <c_range_exclude_end+0x20>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	68b8      	ldr	r0, [r7, #8]
 8006e90:	f7ff fe0e 	bl	8006ab0 <mrbc_decref>
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	b25a      	sxtb	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	701a      	strb	r2, [r3, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <c_range_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect, to_s
*/
static void c_range_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 8006ea4:	b590      	push	{r4, r7, lr}
 8006ea6:	b09f      	sub	sp, #124	; 0x7c
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	61f8      	str	r0, [r7, #28]
 8006eac:	61b9      	str	r1, [r7, #24]
 8006eae:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	d112      	bne.n	8006ee0 <c_range_inspect+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f006 fe38 	bl	800db38 <mrbc_symid_to_str>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	69bc      	ldr	r4, [r7, #24]
 8006ecc:	463b      	mov	r3, r7
 8006ece:	69f9      	ldr	r1, [r7, #28]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fe33 	bl	8006b3c <mrbc_string_new_cstr>
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8006ede:	e05f      	b.n	8006fa0 <c_range_inspect+0xfc>
  }

  mrbc_value ret = mrbc_string_new(vm, NULL, 0);
 8006ee0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	f000 f94d 	bl	8007188 <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8006eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d04e      	beq.n	8006f92 <c_range_inspect+0xee>

  int i;
  for( i = 0; i < 2; i++ ) {
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ef8:	e036      	b.n	8006f68 <c_range_inspect+0xc4>
    if( i != 0 ) mrbc_string_append_cstr( &ret, ".." );
 8006efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <c_range_inspect+0x68>
 8006f00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f04:	4928      	ldr	r1, [pc, #160]	; (8006fa8 <c_range_inspect+0x104>)
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff fe30 	bl	8006b6c <mrbc_string_append_cstr>
    mrbc_value v1 = (i == 0) ? mrbc_range_first(v) : mrbc_range_last(v);
 8006f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <c_range_inspect+0x7c>
 8006f12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fe3a 	bl	8006b92 <mrbc_range_first>
 8006f1e:	e005      	b.n	8006f2c <c_range_inspect+0x88>
 8006f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f24:	69b9      	ldr	r1, [r7, #24]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fe45 	bl	8006bb6 <mrbc_range_last>
    mrbc_value s1 = mrbc_send( vm, v, argc, &v1, "inspect", 0 );
 8006f2c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006f30:	2300      	movs	r3, #0
 8006f32:	9302      	str	r3, [sp, #8]
 8006f34:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <c_range_inspect+0x108>)
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	69f9      	ldr	r1, [r7, #28]
 8006f44:	f002 fc4c 	bl	80097e0 <mrbc_send>
    mrbc_string_append( &ret, &s1 );
 8006f48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fa57 	bl	8007406 <mrbc_string_append>
    mrbc_string_delete( &s1 );
 8006f58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 f9b1 	bl	80072c4 <mrbc_string_delete>
  for( i = 0; i < 2; i++ ) {
 8006f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f64:	3301      	adds	r3, #1
 8006f66:	667b      	str	r3, [r7, #100]	; 0x64
 8006f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	ddc5      	ble.n	8006efa <c_range_inspect+0x56>
  }

  SET_RETURN(ret);
 8006f6e:	f107 0420 	add.w	r4, r7, #32
 8006f72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006f7c:	69b8      	ldr	r0, [r7, #24]
 8006f7e:	f7ff fd97 	bl	8006ab0 <mrbc_decref>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	461c      	mov	r4, r3
 8006f86:	f107 0320 	add.w	r3, r7, #32
 8006f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;
 8006f90:	e006      	b.n	8006fa0 <c_range_inspect+0xfc>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8006f92:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8006f94:	69b8      	ldr	r0, [r7, #24]
 8006f96:	f7ff fd8b 	bl	8006ab0 <mrbc_decref>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
}
 8006fa0:	376c      	adds	r7, #108	; 0x6c
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd90      	pop	{r4, r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	08018efc 	.word	0x08018efc
 8006fac:	08018f00 	.word	0x08018f00

08006fb0 <mrbc_incref>:
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f993 3000 	ldrsb.w	r3, [r3]
 8006fbe:	2b07      	cmp	r3, #7
 8006fc0:	dd1e      	ble.n	8007000 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	885b      	ldrh	r3, [r3, #2]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <mrbc_incref+0x2a>
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <mrbc_incref+0x58>)
 8006fce:	4a0f      	ldr	r2, [pc, #60]	; (800700c <mrbc_incref+0x5c>)
 8006fd0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006fd4:	480e      	ldr	r0, [pc, #56]	; (8007010 <mrbc_incref+0x60>)
 8006fd6:	f00e fadb 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	885b      	ldrh	r3, [r3, #2]
 8006fe0:	2bff      	cmp	r3, #255	; 0xff
 8006fe2:	d106      	bne.n	8006ff2 <mrbc_incref+0x42>
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <mrbc_incref+0x64>)
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <mrbc_incref+0x5c>)
 8006fe8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006fec:	4808      	ldr	r0, [pc, #32]	; (8007010 <mrbc_incref+0x60>)
 8006fee:	f00e facf 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	885a      	ldrh	r2, [r3, #2]
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	805a      	strh	r2, [r3, #2]
 8006ffe:	e000      	b.n	8007002 <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8007000:	bf00      	nop
}
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	08018f10 	.word	0x08018f10
 800700c:	0801ad38 	.word	0x0801ad38
 8007010:	08018f28 	.word	0x08018f28
 8007014:	08018f44 	.word	0x08018f44

08007018 <mrbc_decref>:
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f993 3000 	ldrsb.w	r3, [r3]
 8007026:	2b07      	cmp	r3, #7
 8007028:	dd2c      	ble.n	8007084 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	885b      	ldrh	r3, [r3, #2]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <mrbc_decref+0x2a>
 8007034:	4b16      	ldr	r3, [pc, #88]	; (8007090 <mrbc_decref+0x78>)
 8007036:	4a17      	ldr	r2, [pc, #92]	; (8007094 <mrbc_decref+0x7c>)
 8007038:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800703c:	4816      	ldr	r0, [pc, #88]	; (8007098 <mrbc_decref+0x80>)
 800703e:	f00e faa7 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	885b      	ldrh	r3, [r3, #2]
 8007048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800704c:	4293      	cmp	r3, r2
 800704e:	d106      	bne.n	800705e <mrbc_decref+0x46>
 8007050:	4b12      	ldr	r3, [pc, #72]	; (800709c <mrbc_decref+0x84>)
 8007052:	4a10      	ldr	r2, [pc, #64]	; (8007094 <mrbc_decref+0x7c>)
 8007054:	f240 11d3 	movw	r1, #467	; 0x1d3
 8007058:	480f      	ldr	r0, [pc, #60]	; (8007098 <mrbc_decref+0x80>)
 800705a:	f00e fa99 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	885a      	ldrh	r2, [r3, #2]
 8007064:	3a01      	subs	r2, #1
 8007066:	b292      	uxth	r2, r2
 8007068:	805a      	strh	r2, [r3, #2]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f993 3000 	ldrsb.w	r3, [r3]
 8007076:	461a      	mov	r2, r3
 8007078:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <mrbc_decref+0x88>)
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
 8007082:	e002      	b.n	800708a <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8007088:	bf00      	nop
}
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	08018f10 	.word	0x08018f10
 8007094:	0801ad2c 	.word	0x0801ad2c
 8007098:	08018f28 	.word	0x08018f28
 800709c:	08018f60 	.word	0x08018f60
 80070a0:	0801bde8 	.word	0x0801bde8

080070a4 <mrbc_string_new_cstr>:
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <mrbc_string_new_cstr+0x1c>
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7f9 f89c 	bl	80001f4 <strlen>
 80070bc:	4603      	mov	r3, r0
 80070be:	e000      	b.n	80070c2 <mrbc_string_new_cstr+0x1e>
 80070c0:	2300      	movs	r3, #0
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	f000 f85e 	bl	8007188 <mrbc_string_new>
}
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <mrbc_string_size>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return str->string->size;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	889b      	ldrh	r3, [r3, #4]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <mrbc_string_cstr>:
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	689b      	ldr	r3, [r3, #8]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <mrbc_string_append_cstr>:
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 8007112:	6838      	ldr	r0, [r7, #0]
 8007114:	f7f9 f86e 	bl	80001f4 <strlen>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9ca 	bl	80074b8 <mrbc_string_append_cbuf>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <mrbc_array_size>:
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	88db      	ldrh	r3, [r3, #6]
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <is_space>:

  @param  ch	character code.
  @return	result.
*/
static int is_space( int ch )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  static const char ws[] = " \t\r\n\f\v";	// '\0' on tail

  int i;
  for( i = 0; i < sizeof(ws); i++ ) {
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e00c      	b.n	8007170 <is_space+0x28>
    if( ch == ws[i] ) return 1;
 8007156:	4a0b      	ldr	r2, [pc, #44]	; (8007184 <is_space+0x3c>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4293      	cmp	r3, r2
 8007164:	d101      	bne.n	800716a <is_space+0x22>
 8007166:	2301      	movs	r3, #1
 8007168:	e006      	b.n	8007178 <is_space+0x30>
  for( i = 0; i < sizeof(ws); i++ ) {
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3301      	adds	r3, #1
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b06      	cmp	r3, #6
 8007174:	d9ef      	bls.n	8007156 <is_space+0xe>
  }
  return 0;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	0801ad24 	.word	0x0801ad24

08007188 <mrbc_string_new>:
  @param  src	source string or NULL
  @param  len	source length
  @return 	string object
*/
mrbc_value mrbc_string_new(struct VM *vm, const void *src, int len)
{
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b08b      	sub	sp, #44	; 0x2c
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  mrbc_value value = {.tt = MRBC_TT_STRING};
 8007196:	f107 0310 	add.w	r3, r7, #16
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	609a      	str	r2, [r3, #8]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	230b      	movs	r3, #11
 80071a6:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle and string buffer.
  */
  mrbc_string *h = mrbc_alloc(vm, sizeof(mrbc_string));
 80071a8:	200c      	movs	r0, #12
 80071aa:	f7fa fc7b 	bl	8001aa4 <mrbc_raw_alloc>
 80071ae:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;		// ENOMEM
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d107      	bne.n	80071c6 <mrbc_string_new+0x3e>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	461c      	mov	r4, r3
 80071ba:	f107 0310 	add.w	r3, r7, #16
 80071be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80071c4:	e03e      	b.n	8007244 <mrbc_string_new+0xbc>

  uint8_t *str = mrbc_alloc(vm, len+1);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fa fc6a 	bl	8001aa4 <mrbc_raw_alloc>
 80071d0:	6238      	str	r0, [r7, #32]
  if( !str ) {				// ENOMEM
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <mrbc_string_new+0x66>
    mrbc_raw_free( h );
 80071d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071da:	f7fa fe3f 	bl	8001e5c <mrbc_raw_free>
    return value;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	461c      	mov	r4, r3
 80071e2:	f107 0310 	add.w	r3, r7, #16
 80071e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80071ec:	e02a      	b.n	8007244 <mrbc_string_new+0xbc>
  }

  MRBC_INIT_OBJECT_HEADER( h, "ST" );
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	2201      	movs	r2, #1
 80071f2:	805a      	strh	r2, [r3, #2]
 80071f4:	2253      	movs	r2, #83	; 0x53
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	2254      	movs	r2, #84	; 0x54
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	705a      	strb	r2, [r3, #1]
  h->size = len;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	b29a      	uxth	r2, r3
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	809a      	strh	r2, [r3, #4]
  h->data = str;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	609a      	str	r2, [r3, #8]

  /*
    Copy a source string.
  */
  if( src == NULL ) {
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <mrbc_string_new+0x94>
    str[0] = '\0';
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e00a      	b.n	8007232 <mrbc_string_new+0xaa>
  } else {
    memcpy( str, src, len );
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	6a38      	ldr	r0, [r7, #32]
 8007224:	f00f fa8f 	bl	8016746 <memcpy>
    str[len] = '\0';
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	6a3a      	ldr	r2, [r7, #32]
 800722c:	4413      	add	r3, r2
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
  }

  value.string = h;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	61bb      	str	r3, [r7, #24]
  return value;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	461c      	mov	r4, r3
 800723a:	f107 0310 	add.w	r3, r7, #16
 800723e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	372c      	adds	r7, #44	; 0x2c
 8007248:	46bd      	mov	sp, r7
 800724a:	bd90      	pop	{r4, r7, pc}

0800724c <mrbc_string_new_alloc>:
  @param  buf	pointer to allocated buffer
  @param  len	length
  @return 	string object
*/
mrbc_value mrbc_string_new_alloc(struct VM *vm, void *buf, int len)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b08b      	sub	sp, #44	; 0x2c
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
  mrbc_value value = {.tt = MRBC_TT_STRING};
 800725a:	f107 0310 	add.w	r3, r7, #16
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	609a      	str	r2, [r3, #8]
 8007266:	60da      	str	r2, [r3, #12]
 8007268:	230b      	movs	r3, #11
 800726a:	743b      	strb	r3, [r7, #16]

  /*
    Allocate handle
  */
  mrbc_string *h = mrbc_alloc(vm, sizeof(mrbc_string));
 800726c:	200c      	movs	r0, #12
 800726e:	f7fa fc19 	bl	8001aa4 <mrbc_raw_alloc>
 8007272:	6278      	str	r0, [r7, #36]	; 0x24
  if( !h ) return value;		// ENOMEM
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d107      	bne.n	800728a <mrbc_string_new_alloc+0x3e>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	461c      	mov	r4, r3
 800727e:	f107 0310 	add.w	r3, r7, #16
 8007282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007288:	e018      	b.n	80072bc <mrbc_string_new_alloc+0x70>

  MRBC_INIT_OBJECT_HEADER( h, "ST" );
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	2201      	movs	r2, #1
 800728e:	805a      	strh	r2, [r3, #2]
 8007290:	2253      	movs	r2, #83	; 0x53
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	2254      	movs	r2, #84	; 0x54
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	705a      	strb	r2, [r3, #1]
  h->size = len;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	809a      	strh	r2, [r3, #4]
  h->data = buf;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	609a      	str	r2, [r3, #8]

  value.string = h;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	61bb      	str	r3, [r7, #24]
  return value;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	461c      	mov	r4, r3
 80072b2:	f107 0310 	add.w	r3, r7, #16
 80072b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	372c      	adds	r7, #44	; 0x2c
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd90      	pop	{r4, r7, pc}

080072c4 <mrbc_string_delete>:
/*! destructor

  @param  str	pointer to target value
*/
void mrbc_string_delete(mrbc_value *str)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  mrbc_raw_free(str->string->data);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fa fdc2 	bl	8001e5c <mrbc_raw_free>
  mrbc_raw_free(str->string);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fa fdbd 	bl	8001e5c <mrbc_raw_free>
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <mrbc_string_clear>:

//================================================================
/*! clear content
*/
void mrbc_string_clear(mrbc_value *str)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  mrbc_raw_realloc(str->string->data, 1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2101      	movs	r1, #1
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fa fe4a 	bl	8001f94 <mrbc_raw_realloc>
  str->string->data[0] = '\0';
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
  str->string->size = 0;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2200      	movs	r2, #0
 8007310:	809a      	strh	r2, [r3, #4]
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <mrbc_string_dup>:
  @param  vm	pointer to VM.
  @param  s1	pointer to target value
  @return	new string as s1 + s2
*/
mrbc_value mrbc_string_dup(struct VM *vm, mrbc_value *s1)
{
 800731a:	b590      	push	{r4, r7, lr}
 800731c:	b08b      	sub	sp, #44	; 0x2c
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
  mrbc_string *h1 = s1->string;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_value value = mrbc_string_new(vm, NULL, h1->size);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	889b      	ldrh	r3, [r3, #4]
 8007330:	f107 0010 	add.w	r0, r7, #16
 8007334:	2200      	movs	r2, #0
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	f7ff ff26 	bl	8007188 <mrbc_string_new>
  if( value.string == NULL ) return value;		// ENOMEM
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <mrbc_string_dup+0x38>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	461c      	mov	r4, r3
 8007346:	f107 0310 	add.w	r3, r7, #16
 800734a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800734c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007350:	e010      	b.n	8007374 <mrbc_string_dup+0x5a>

  memcpy( value.string->data, h1->data, h1->size + 1 );
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	6898      	ldr	r0, [r3, #8]
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	6899      	ldr	r1, [r3, #8]
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	889b      	ldrh	r3, [r3, #4]
 800735e:	3301      	adds	r3, #1
 8007360:	461a      	mov	r2, r3
 8007362:	f00f f9f0 	bl	8016746 <memcpy>

  return value;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	461c      	mov	r4, r3
 800736a:	f107 0310 	add.w	r3, r7, #16
 800736e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	372c      	adds	r7, #44	; 0x2c
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}

0800737c <mrbc_string_add>:
  @param  s1	pointer to target value 1
  @param  s2	pointer to target value 2
  @return	new string as s1 + s2
*/
mrbc_value mrbc_string_add(struct VM *vm, const mrbc_value *s1, const mrbc_value *s2)
{
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b08b      	sub	sp, #44	; 0x2c
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
  mrbc_string *h1 = s1->string;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
  mrbc_string *h2 = s2->string;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	623b      	str	r3, [r7, #32]

  mrbc_value value = mrbc_string_new(vm, NULL, h1->size + h2->size);
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	889b      	ldrh	r3, [r3, #4]
 800739a:	461a      	mov	r2, r3
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	889b      	ldrh	r3, [r3, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	f107 0010 	add.w	r0, r7, #16
 80073a6:	2200      	movs	r2, #0
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	f7ff feed 	bl	8007188 <mrbc_string_new>
  if( value.string == NULL ) return value;		// ENOMEM
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d107      	bne.n	80073c4 <mrbc_string_add+0x48>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	461c      	mov	r4, r3
 80073b8:	f107 0310 	add.w	r3, r7, #16
 80073bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80073c2:	e01c      	b.n	80073fe <mrbc_string_add+0x82>

  memcpy( value.string->data,            h1->data, h1->size );
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	6898      	ldr	r0, [r3, #8]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	6899      	ldr	r1, [r3, #8]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	889b      	ldrh	r3, [r3, #4]
 80073d0:	461a      	mov	r2, r3
 80073d2:	f00f f9b8 	bl	8016746 <memcpy>
  memcpy( value.string->data + h1->size, h2->data, h2->size + 1 );
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073dc:	8892      	ldrh	r2, [r2, #4]
 80073de:	1898      	adds	r0, r3, r2
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	6899      	ldr	r1, [r3, #8]
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	889b      	ldrh	r3, [r3, #4]
 80073e8:	3301      	adds	r3, #1
 80073ea:	461a      	mov	r2, r3
 80073ec:	f00f f9ab 	bl	8016746 <memcpy>

  return value;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	461c      	mov	r4, r3
 80073f4:	f107 0310 	add.w	r3, r7, #16
 80073f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	372c      	adds	r7, #44	; 0x2c
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}

08007406 <mrbc_string_append>:
  @param  s1	pointer to target value 1
  @param  s2	pointer to target value 2
  @return	mrbc_error_code
*/
int mrbc_string_append(mrbc_value *s1, const mrbc_value *s2)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  int len1 = s1->string->size;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	889b      	ldrh	r3, [r3, #4]
 8007416:	617b      	str	r3, [r7, #20]
  int len2 = (mrbc_type(*s2) == MRBC_TT_STRING) ? s2->string->size : 1;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f993 3000 	ldrsb.w	r3, [r3]
 800741e:	2b0b      	cmp	r3, #11
 8007420:	d103      	bne.n	800742a <mrbc_string_append+0x24>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	889b      	ldrh	r3, [r3, #4]
 8007428:	e000      	b.n	800742c <mrbc_string_append+0x26>
 800742a:	2301      	movs	r3, #1
 800742c:	613b      	str	r3, [r7, #16]

  uint8_t *str = mrbc_raw_realloc(s1->string->data, len1+len2+1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	6898      	ldr	r0, [r3, #8]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	4413      	add	r3, r2
 800743a:	3301      	adds	r3, #1
 800743c:	4619      	mov	r1, r3
 800743e:	f7fa fda9 	bl	8001f94 <mrbc_raw_realloc>
 8007442:	60f8      	str	r0, [r7, #12]
  if( !str ) return E_NOMEMORY_ERROR;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <mrbc_string_append+0x48>
 800744a:	2301      	movs	r3, #1
 800744c:	e030      	b.n	80074b0 <mrbc_string_append+0xaa>

  if( mrbc_type(*s2) == MRBC_TT_STRING ) {
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	f993 3000 	ldrsb.w	r3, [r3]
 8007454:	2b0b      	cmp	r3, #11
 8007456:	d10b      	bne.n	8007470 <mrbc_string_append+0x6a>
    memcpy(str + len1, s2->string->data, len2 + 1);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	18d0      	adds	r0, r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	6899      	ldr	r1, [r3, #8]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	3301      	adds	r3, #1
 8007468:	461a      	mov	r2, r3
 800746a:	f00f f96c 	bl	8016746 <memcpy>
 800746e:	e011      	b.n	8007494 <mrbc_string_append+0x8e>
  } else if( mrbc_type(*s2) == MRBC_TT_INTEGER ) {
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	f993 3000 	ldrsb.w	r3, [r3]
 8007476:	2b04      	cmp	r3, #4
 8007478:	d10c      	bne.n	8007494 <mrbc_string_append+0x8e>
    str[len1] = s2->i;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6899      	ldr	r1, [r3, #8]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	b2ca      	uxtb	r2, r1
 8007486:	701a      	strb	r2, [r3, #0]
    str[len1+1] = '\0';
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	3301      	adds	r3, #1
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
  }

  s1->string->size = len1 + len2;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	b299      	uxth	r1, r3
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	440a      	add	r2, r1
 80074a2:	b292      	uxth	r2, r2
 80074a4:	809a      	strh	r2, [r3, #4]
  s1->string->data = str;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	609a      	str	r2, [r3, #8]

  return 0;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <mrbc_string_append_cbuf>:
  @param  s2	pointer to buffer
  @param  len2	buffer size
  @return	mrbc_error_code
*/
int mrbc_string_append_cbuf(mrbc_value *s1, const void *s2, int len2)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  int len1 = s1->string->size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	889b      	ldrh	r3, [r3, #4]
 80074ca:	617b      	str	r3, [r7, #20]

  uint8_t *str = mrbc_raw_realloc(s1->string->data, len1+len2+1);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	6898      	ldr	r0, [r3, #8]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	3301      	adds	r3, #1
 80074da:	4619      	mov	r1, r3
 80074dc:	f7fa fd5a 	bl	8001f94 <mrbc_raw_realloc>
 80074e0:	6138      	str	r0, [r7, #16]
  if( !str ) return E_NOMEMORY_ERROR;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <mrbc_string_append_cbuf+0x34>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e02a      	b.n	8007542 <mrbc_string_append_cbuf+0x8a>

  if( s2 ) {
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d010      	beq.n	8007514 <mrbc_string_append_cbuf+0x5c>
    memcpy(str + len1, s2, len2);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4413      	add	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f00f f922 	bl	8016746 <memcpy>
    str[len1 + len2] = 0;
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	461a      	mov	r2, r3
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e008      	b.n	8007526 <mrbc_string_append_cbuf+0x6e>
  } else {
    memset(str + len1, 0, len2 + 1);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	18d0      	adds	r0, r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3301      	adds	r3, #1
 800751e:	461a      	mov	r2, r3
 8007520:	2100      	movs	r1, #0
 8007522:	f00f f876 	bl	8016612 <memset>
  }

  s1->string->size = len1 + len2;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	b299      	uxth	r1, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	440a      	add	r2, r1
 8007534:	b292      	uxth	r2, r2
 8007536:	809a      	strh	r2, [r3, #4]
  s1->string->data = str;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	609a      	str	r2, [r3, #8]

  return 0;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <mrbc_string_index>:
  @param  pattern	pointer to substring
  @param  offset	search offset
  @return		position index. or minus value if not found.
*/
int mrbc_string_index(const mrbc_value *src, const mrbc_value *pattern, int offset)
{
 800754a:	b590      	push	{r4, r7, lr}
 800754c:	b089      	sub	sp, #36	; 0x24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  char *p1 = mrbc_string_cstr(src) + offset;
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fdc9 	bl	80070ee <mrbc_string_cstr>
 800755c:	4602      	mov	r2, r0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	61fb      	str	r3, [r7, #28]
  char *p2 = mrbc_string_cstr(pattern);
 8007564:	68b8      	ldr	r0, [r7, #8]
 8007566:	f7ff fdc2 	bl	80070ee <mrbc_string_cstr>
 800756a:	6178      	str	r0, [r7, #20]
  int try_cnt = mrbc_string_size(src) - mrbc_string_size(pattern) - offset;
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7ff fdb1 	bl	80070d4 <mrbc_string_size>
 8007572:	4604      	mov	r4, r0
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f7ff fdad 	bl	80070d4 <mrbc_string_size>
 800757a:	4603      	mov	r3, r0
 800757c:	1ae2      	subs	r2, r4, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	61bb      	str	r3, [r7, #24]

  while( try_cnt >= 0 ) {
 8007584:	e018      	b.n	80075b8 <mrbc_string_index+0x6e>
    if( memcmp( p1, p2, mrbc_string_size(pattern) ) == 0 ) {
 8007586:	68b8      	ldr	r0, [r7, #8]
 8007588:	f7ff fda4 	bl	80070d4 <mrbc_string_size>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	6979      	ldr	r1, [r7, #20]
 8007592:	69f8      	ldr	r0, [r7, #28]
 8007594:	f00f f813 	bl	80165be <memcmp>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <mrbc_string_index+0x62>
      return p1 - mrbc_string_cstr(src);	// matched.
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fda5 	bl	80070ee <mrbc_string_cstr>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	e00a      	b.n	80075c2 <mrbc_string_index+0x78>
    }
    try_cnt--;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
    p1++;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	3301      	adds	r3, #1
 80075b6:	61fb      	str	r3, [r7, #28]
  while( try_cnt >= 0 ) {
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	dae3      	bge.n	8007586 <mrbc_string_index+0x3c>
  }

  return -1;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3724      	adds	r7, #36	; 0x24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd90      	pop	{r4, r7, pc}

080075ca <mrbc_string_strip>:
  @param  src	pointer to target value
  @param  mode	1:left-side, 2:right-side, 3:each
  @return	0 when not removed.
*/
int mrbc_string_strip(mrbc_value *src, int mode)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  char *p1 = mrbc_string_cstr(src);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fd8a 	bl	80070ee <mrbc_string_cstr>
 80075da:	6178      	str	r0, [r7, #20]
  char *p2 = p1 + mrbc_string_size(src) - 1;
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fd79 	bl	80070d4 <mrbc_string_size>
 80075e2:	4603      	mov	r3, r0
 80075e4:	3b01      	subs	r3, #1
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4413      	add	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

  // left-side
  if( mode & 0x01 ) {
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d017      	beq.n	8007626 <mrbc_string_strip+0x5c>
    while( p1 <= p2 ) {
 80075f6:	e00e      	b.n	8007616 <mrbc_string_strip+0x4c>
      if( *p1 == '\0' ) break;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00f      	beq.n	8007620 <mrbc_string_strip+0x56>
      if( !is_space(*p1) ) break;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fd9f 	bl	8007148 <is_space>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <mrbc_string_strip+0x5a>
      p1++;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3301      	adds	r3, #1
 8007614:	617b      	str	r3, [r7, #20]
    while( p1 <= p2 ) {
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	429a      	cmp	r2, r3
 800761c:	d9ec      	bls.n	80075f8 <mrbc_string_strip+0x2e>
 800761e:	e002      	b.n	8007626 <mrbc_string_strip+0x5c>
      if( *p1 == '\0' ) break;
 8007620:	bf00      	nop
 8007622:	e000      	b.n	8007626 <mrbc_string_strip+0x5c>
      if( !is_space(*p1) ) break;
 8007624:	bf00      	nop
    }
  }
  // right-side
  if( mode & 0x02 ) {
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d011      	beq.n	8007654 <mrbc_string_strip+0x8a>
    while( p1 <= p2 ) {
 8007630:	e00a      	b.n	8007648 <mrbc_string_strip+0x7e>
      if( !is_space(*p2) ) break;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fd86 	bl	8007148 <is_space>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <mrbc_string_strip+0x88>
      p2--;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3b01      	subs	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
    while( p1 <= p2 ) {
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	429a      	cmp	r2, r3
 800764e:	d9f0      	bls.n	8007632 <mrbc_string_strip+0x68>
 8007650:	e000      	b.n	8007654 <mrbc_string_strip+0x8a>
      if( !is_space(*p2) ) break;
 8007652:	bf00      	nop
    }
  }

  int new_size = p2 - p1 + 1;
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
  if( mrbc_string_size(src) == new_size ) return 0;
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fd38 	bl	80070d4 <mrbc_string_size>
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4293      	cmp	r3, r2
 800766a:	d101      	bne.n	8007670 <mrbc_string_strip+0xa6>
 800766c:	2300      	movs	r3, #0
 800766e:	e01e      	b.n	80076ae <mrbc_string_strip+0xe4>

  char *buf = mrbc_string_cstr(src);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff fd3c 	bl	80070ee <mrbc_string_cstr>
 8007676:	60b8      	str	r0, [r7, #8]
  if( p1 != buf ) memmove( buf, p1, new_size );
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	429a      	cmp	r2, r3
 800767e:	d005      	beq.n	800768c <mrbc_string_strip+0xc2>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	461a      	mov	r2, r3
 8007684:	6979      	ldr	r1, [r7, #20]
 8007686:	68b8      	ldr	r0, [r7, #8]
 8007688:	f00e ffa9 	bl	80165de <memmove>
  buf[new_size] = '\0';
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
  mrbc_raw_realloc(buf, new_size+1);	// shrink suitable size.
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	4619      	mov	r1, r3
 800769c:	68b8      	ldr	r0, [r7, #8]
 800769e:	f7fa fc79 	bl	8001f94 <mrbc_raw_realloc>
  src->string->size = new_size;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	b292      	uxth	r2, r2
 80076aa:	809a      	strh	r2, [r3, #4]

  return 1;
 80076ac:	2301      	movs	r3, #1
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <mrbc_string_chomp>:

  @param  src	pointer to target value
  @return	0 when not removed.
*/
int mrbc_string_chomp(mrbc_value *src)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  char *p1 = mrbc_string_cstr(src);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fd15 	bl	80070ee <mrbc_string_cstr>
 80076c4:	6138      	str	r0, [r7, #16]
  char *p2 = p1 + mrbc_string_size(src) - 1;
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fd04 	bl	80070d4 <mrbc_string_size>
 80076cc:	4603      	mov	r3, r0
 80076ce:	3b01      	subs	r3, #1
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  if( *p2 == '\n' ) {
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b0a      	cmp	r3, #10
 80076dc:	d102      	bne.n	80076e4 <mrbc_string_chomp+0x2e>
    p2--;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
  }
  if( *p2 == '\r' ) {
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b0d      	cmp	r3, #13
 80076ea:	d102      	bne.n	80076f2 <mrbc_string_chomp+0x3c>
    p2--;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	617b      	str	r3, [r7, #20]
  }

  int new_size = p2 - p1 + 1;
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
  if( mrbc_string_size(src) == new_size ) return 0;
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fce9 	bl	80070d4 <mrbc_string_size>
 8007702:	4602      	mov	r2, r0
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4293      	cmp	r3, r2
 8007708:	d101      	bne.n	800770e <mrbc_string_chomp+0x58>
 800770a:	2300      	movs	r3, #0
 800770c:	e00e      	b.n	800772c <mrbc_string_chomp+0x76>

  char *buf = mrbc_string_cstr(src);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff fced 	bl	80070ee <mrbc_string_cstr>
 8007714:	60b8      	str	r0, [r7, #8]
  buf[new_size] = '\0';
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	4413      	add	r3, r2
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
  src->string->size = new_size;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	b292      	uxth	r2, r2
 8007728:	809a      	strh	r2, [r3, #4]

  return 1;
 800772a:	2301      	movs	r3, #1
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <mrbc_string_upcase>:

  @param    str     pointer to target value
  @return   count   number of upcased characters
*/
static int mrbc_string_upcase(mrbc_value *str)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  int len = str->string->size;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	889b      	ldrh	r3, [r3, #4]
 8007742:	617b      	str	r3, [r7, #20]
  int count = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
  uint8_t *data = str->string->data;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	60fb      	str	r3, [r7, #12]
  while (len != 0) {
 8007750:	e01b      	b.n	800778a <mrbc_string_upcase+0x56>
    len--;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3b01      	subs	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
    if ('a' <= data[len] && data[len] <= 'z') {
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b60      	cmp	r3, #96	; 0x60
 8007762:	d912      	bls.n	800778a <mrbc_string_upcase+0x56>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b7a      	cmp	r3, #122	; 0x7a
 800776e:	d80c      	bhi.n	800778a <mrbc_string_upcase+0x56>
      data[len] = data[len] - ('a' - 'A');
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	440b      	add	r3, r1
 800777e:	3a20      	subs	r2, #32
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	701a      	strb	r2, [r3, #0]
      count++;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3301      	adds	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
  while (len != 0) {
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e0      	bne.n	8007752 <mrbc_string_upcase+0x1e>
    }
  }
  return count;
 8007790:	693b      	ldr	r3, [r7, #16]
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <mrbc_string_downcase>:

  @param    str     pointer to target value
  @return   count   number of downcased characters
*/
static int mrbc_string_downcase(mrbc_value *str)
{
 800779e:	b480      	push	{r7}
 80077a0:	b087      	sub	sp, #28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  int len = str->string->size;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	889b      	ldrh	r3, [r3, #4]
 80077ac:	617b      	str	r3, [r7, #20]
  int count = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
  uint8_t *data = str->string->data;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	60fb      	str	r3, [r7, #12]
  while (len != 0) {
 80077ba:	e01b      	b.n	80077f4 <mrbc_string_downcase+0x56>
    len--;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	3b01      	subs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
    if ('A' <= data[len] && data[len] <= 'Z') {
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d912      	bls.n	80077f4 <mrbc_string_downcase+0x56>
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b5a      	cmp	r3, #90	; 0x5a
 80077d8:	d80c      	bhi.n	80077f4 <mrbc_string_downcase+0x56>
      data[len] = data[len] + ('a' - 'A');
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	440b      	add	r3, r1
 80077e8:	3220      	adds	r2, #32
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
      count++;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	3301      	adds	r3, #1
 80077f2:	613b      	str	r3, [r7, #16]
  while (len != 0) {
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e0      	bne.n	80077bc <mrbc_string_downcase+0x1e>
    }
  }
  return count;
 80077fa:	693b      	ldr	r3, [r7, #16]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <c_string_new>:

//================================================================
/*! (method) new
*/
static void c_string_new(struct VM *vm, mrbc_value v[], int argc)
{
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b091      	sub	sp, #68	; 0x44
 800780c:	af00      	add	r7, sp, #0
 800780e:	61f8      	str	r0, [r7, #28]
 8007810:	61b9      	str	r1, [r7, #24]
 8007812:	617a      	str	r2, [r7, #20]
  if (argc == 1 && mrbc_type(v[1]) != MRBC_TT_STRING) {
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10b      	bne.n	8007832 <c_string_new+0x2a>
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	3310      	adds	r3, #16
 800781e:	f993 3000 	ldrsb.w	r3, [r3]
 8007822:	2b0b      	cmp	r3, #11
 8007824:	d005      	beq.n	8007832 <c_string_new+0x2a>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into String");
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <c_string_new+0x98>)
 8007828:	491e      	ldr	r1, [pc, #120]	; (80078a4 <c_string_new+0x9c>)
 800782a:	69f8      	ldr	r0, [r7, #28]
 800782c:	f003 fdea 	bl	800b404 <mrbc_raise>
    return;
 8007830:	e032      	b.n	8007898 <c_string_new+0x90>
  }
  if (argc > 1) {
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b01      	cmp	r3, #1
 8007836:	dd05      	ble.n	8007844 <c_string_new+0x3c>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "wrong number of arguments (expected 0..1)");
 8007838:	4a1b      	ldr	r2, [pc, #108]	; (80078a8 <c_string_new+0xa0>)
 800783a:	491c      	ldr	r1, [pc, #112]	; (80078ac <c_string_new+0xa4>)
 800783c:	69f8      	ldr	r0, [r7, #28]
 800783e:	f003 fde1 	bl	800b404 <mrbc_raise>
    return;
 8007842:	e029      	b.n	8007898 <c_string_new+0x90>
  }

  mrbc_value value;
  if (argc == 0) {
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d107      	bne.n	800785a <c_string_new+0x52>
    value = mrbc_string_new(vm, NULL, 0);
 800784a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800784e:	2300      	movs	r3, #0
 8007850:	2200      	movs	r2, #0
 8007852:	69f9      	ldr	r1, [r7, #28]
 8007854:	f7ff fc98 	bl	8007188 <mrbc_string_new>
 8007858:	e00d      	b.n	8007876 <c_string_new+0x6e>
  } else {
    value = mrbc_string_dup(vm, &v[1]);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f103 0210 	add.w	r2, r3, #16
 8007860:	463b      	mov	r3, r7
 8007862:	69f9      	ldr	r1, [r7, #28]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fd58 	bl	800731a <mrbc_string_dup>
 800786a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800786e:	463b      	mov	r3, r7
 8007870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
  SET_RETURN(value);
 8007876:	f107 0420 	add.w	r4, r7, #32
 800787a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800787e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007884:	69b8      	ldr	r0, [r7, #24]
 8007886:	f7ff fbc7 	bl	8007018 <mrbc_decref>
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	461c      	mov	r4, r3
 800788e:	f107 0320 	add.w	r3, r7, #32
 8007892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007898:	3744      	adds	r7, #68	; 0x44
 800789a:	46bd      	mov	sp, r7
 800789c:	bd90      	pop	{r4, r7, pc}
 800789e:	bf00      	nop
 80078a0:	08018f7c 	.word	0x08018f7c
 80078a4:	200001b4 	.word	0x200001b4
 80078a8:	08018fa0 	.word	0x08018fa0
 80078ac:	20000154 	.word	0x20000154

080078b0 <c_string_add>:

//================================================================
/*! (method) +
*/
static void c_string_add(struct VM *vm, mrbc_value v[], int argc)
{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b08d      	sub	sp, #52	; 0x34
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_STRING ) {
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	3310      	adds	r3, #16
 80078c0:	f993 3000 	ldrsb.w	r3, [r3]
 80078c4:	2b0b      	cmp	r3, #11
 80078c6:	d005      	beq.n	80078d4 <c_string_add+0x24>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80078c8:	2200      	movs	r2, #0
 80078ca:	4910      	ldr	r1, [pc, #64]	; (800790c <c_string_add+0x5c>)
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f003 fd99 	bl	800b404 <mrbc_raise>
 80078d2:	e018      	b.n	8007906 <c_string_add+0x56>
    return;
  }

  mrbc_value value = mrbc_string_add(vm, &v[0], &v[1]);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	3310      	adds	r3, #16
 80078d8:	f107 0020 	add.w	r0, r7, #32
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68f9      	ldr	r1, [r7, #12]
 80078e0:	f7ff fd4c 	bl	800737c <mrbc_string_add>
  SET_RETURN(value);
 80078e4:	f107 0410 	add.w	r4, r7, #16
 80078e8:	f107 0320 	add.w	r3, r7, #32
 80078ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80078f2:	68b8      	ldr	r0, [r7, #8]
 80078f4:	f7ff fb90 	bl	8007018 <mrbc_decref>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	461c      	mov	r4, r3
 80078fc:	f107 0310 	add.w	r3, r7, #16
 8007900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007906:	3734      	adds	r7, #52	; 0x34
 8007908:	46bd      	mov	sp, r7
 800790a:	bd90      	pop	{r4, r7, pc}
 800790c:	20000154 	.word	0x20000154

08007910 <c_string_mul>:

//================================================================
/*! (method) *
*/
static void c_string_mul(struct VM *vm, mrbc_value v[], int argc)
{
 8007910:	b590      	push	{r4, r7, lr}
 8007912:	b08f      	sub	sp, #60	; 0x3c
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  if( mrbc_type(v[1]) != MRBC_TT_INTEGER ) {
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3310      	adds	r3, #16
 8007920:	f993 3000 	ldrsb.w	r3, [r3]
 8007924:	2b04      	cmp	r3, #4
 8007926:	d005      	beq.n	8007934 <c_string_mul+0x24>
    mrbc_raise( vm, MRBC_CLASS(TypeError), "no implicit conversion into String");
 8007928:	4a2f      	ldr	r2, [pc, #188]	; (80079e8 <c_string_mul+0xd8>)
 800792a:	4930      	ldr	r1, [pc, #192]	; (80079ec <c_string_mul+0xdc>)
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f003 fd69 	bl	800b404 <mrbc_raise>
    return;
 8007932:	e056      	b.n	80079e2 <c_string_mul+0xd2>
  }

  if( v[1].i < 0 ) {
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3310      	adds	r3, #16
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	da05      	bge.n	800794a <c_string_mul+0x3a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "negative argument");
 800793e:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <c_string_mul+0xe0>)
 8007940:	492c      	ldr	r1, [pc, #176]	; (80079f4 <c_string_mul+0xe4>)
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f003 fd5e 	bl	800b404 <mrbc_raise>
    return;
 8007948:	e04b      	b.n	80079e2 <c_string_mul+0xd2>
  }

  mrbc_value value = mrbc_string_new(vm, NULL,
			mrbc_string_size(&v[0]) * mrbc_integer(v[1]));
 800794a:	68b8      	ldr	r0, [r7, #8]
 800794c:	f7ff fbc2 	bl	80070d4 <mrbc_string_size>
 8007950:	4602      	mov	r2, r0
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3310      	adds	r3, #16
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	fb02 f303 	mul.w	r3, r2, r3
  mrbc_value value = mrbc_string_new(vm, NULL,
 800795c:	f107 0020 	add.w	r0, r7, #32
 8007960:	2200      	movs	r2, #0
 8007962:	68f9      	ldr	r1, [r7, #12]
 8007964:	f7ff fc10 	bl	8007188 <mrbc_string_new>
  if( value.string == NULL ) return;		// ENOMEM
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d038      	beq.n	80079e0 <c_string_mul+0xd0>

  uint8_t *p = value.string->data;
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
  int i;
  for( i = 0; i < v[1].i; i++ ) {
 8007974:	2300      	movs	r3, #0
 8007976:	633b      	str	r3, [r7, #48]	; 0x30
 8007978:	e017      	b.n	80079aa <c_string_mul+0x9a>
    memcpy( p, mrbc_string_cstr(&v[0]), mrbc_string_size(&v[0]) );
 800797a:	68b8      	ldr	r0, [r7, #8]
 800797c:	f7ff fbb7 	bl	80070ee <mrbc_string_cstr>
 8007980:	4604      	mov	r4, r0
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7ff fba6 	bl	80070d4 <mrbc_string_size>
 8007988:	4603      	mov	r3, r0
 800798a:	461a      	mov	r2, r3
 800798c:	4621      	mov	r1, r4
 800798e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007990:	f00e fed9 	bl	8016746 <memcpy>
    p += mrbc_string_size(&v[0]);
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f7ff fb9d 	bl	80070d4 <mrbc_string_size>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	4413      	add	r3, r2
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34
  for( i = 0; i < v[1].i; i++ ) {
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	3301      	adds	r3, #1
 80079a8:	633b      	str	r3, [r7, #48]	; 0x30
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3310      	adds	r3, #16
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b2:	429a      	cmp	r2, r3
 80079b4:	dbe1      	blt.n	800797a <c_string_mul+0x6a>
  }
  *p = 0;
 80079b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]

  SET_RETURN(value);
 80079bc:	f107 0410 	add.w	r4, r7, #16
 80079c0:	f107 0320 	add.w	r3, r7, #32
 80079c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80079ca:	68b8      	ldr	r0, [r7, #8]
 80079cc:	f7ff fb24 	bl	8007018 <mrbc_decref>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	461c      	mov	r4, r3
 80079d4:	f107 0310 	add.w	r3, r7, #16
 80079d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80079de:	e000      	b.n	80079e2 <c_string_mul+0xd2>
  if( value.string == NULL ) return;		// ENOMEM
 80079e0:	bf00      	nop
}
 80079e2:	373c      	adds	r7, #60	; 0x3c
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd90      	pop	{r4, r7, pc}
 80079e8:	08018f7c 	.word	0x08018f7c
 80079ec:	200001b4 	.word	0x200001b4
 80079f0:	08018fcc 	.word	0x08018fcc
 80079f4:	20000154 	.word	0x20000154

080079f8 <c_string_size>:

//================================================================
/*! (method) size, length
*/
static void c_string_size(struct VM *vm, mrbc_value v[], int argc)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  mrbc_int_t size = mrbc_string_size(&v[0]);
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f7ff fb65 	bl	80070d4 <mrbc_string_size>
 8007a0a:	6178      	str	r0, [r7, #20]

  SET_INT_RETURN( size );
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f7ff fb01 	bl	8007018 <mrbc_decref>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	609a      	str	r2, [r3, #8]
}
 8007a22:	bf00      	nop
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <c_string_to_i>:

//================================================================
/*! (method) to_i
*/
static void c_string_to_i(struct VM *vm, mrbc_value v[], int argc)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  int base = 10;
 8007a38:	230a      	movs	r3, #10
 8007a3a:	61fb      	str	r3, [r7, #28]
  if( argc ) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00f      	beq.n	8007a62 <c_string_to_i+0x36>
    base = v[1].i;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	3310      	adds	r3, #16
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	61fb      	str	r3, [r7, #28]
    if( base < 2 || base > 36 ) {
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	dd02      	ble.n	8007a56 <c_string_to_i+0x2a>
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	2b24      	cmp	r3, #36	; 0x24
 8007a54:	dd05      	ble.n	8007a62 <c_string_to_i+0x36>
      mrbc_raise( vm, MRBC_CLASS(ArgumentError), "invalid radix");
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <c_string_to_i+0x64>)
 8007a58:	490e      	ldr	r1, [pc, #56]	; (8007a94 <c_string_to_i+0x68>)
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f003 fcd2 	bl	800b404 <mrbc_raise>
      return;
 8007a60:	e013      	b.n	8007a8a <c_string_to_i+0x5e>
    }
  }

  mrbc_int_t i = mrbc_atoi( mrbc_string_cstr(v), base );
 8007a62:	68b8      	ldr	r0, [r7, #8]
 8007a64:	f7ff fb43 	bl	80070ee <mrbc_string_cstr>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	69f9      	ldr	r1, [r7, #28]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f006 fbf7 	bl	800e260 <mrbc_atoi>
 8007a72:	61b8      	str	r0, [r7, #24]

  SET_INT_RETURN( i );
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	68b8      	ldr	r0, [r7, #8]
 8007a7a:	f7ff facd 	bl	8007018 <mrbc_decref>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2204      	movs	r2, #4
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	609a      	str	r2, [r3, #8]
}
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	08018fe0 	.word	0x08018fe0
 8007a94:	20000154 	.word	0x20000154

08007a98 <c_string_to_f>:
#if MRBC_USE_FLOAT
//================================================================
/*! (method) to_f
*/
static void c_string_to_f(struct VM *vm, mrbc_value v[], int argc)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  mrbc_float_t d = atof(mrbc_string_cstr(v));
 8007aa4:	68b8      	ldr	r0, [r7, #8]
 8007aa6:	f7ff fb22 	bl	80070ee <mrbc_string_cstr>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f00d fd8d 	bl	80155cc <atof>
 8007ab2:	ed87 0b06 	vstr	d0, [r7, #24]

  SET_FLOAT_RETURN( d );
 8007ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007abe:	68b8      	ldr	r0, [r7, #8]
 8007ac0:	f7ff faaa 	bl	8007018 <mrbc_decref>
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2205      	movs	r2, #5
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ad0:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <c_string_to_s>:

//================================================================
/*! (method) to_s
*/
static void c_string_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	61f8      	str	r0, [r7, #28]
 8007ae4:	61b9      	str	r1, [r7, #24]
 8007ae6:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f993 3000 	ldrsb.w	r3, [r3]
 8007aee:	2b07      	cmp	r3, #7
 8007af0:	d112      	bne.n	8007b18 <c_string_to_s+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f006 f81c 	bl	800db38 <mrbc_symid_to_str>
 8007b00:	4602      	mov	r2, r0
 8007b02:	69bc      	ldr	r4, [r7, #24]
 8007b04:	463b      	mov	r3, r7
 8007b06:	69f9      	ldr	r1, [r7, #28]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff facb 	bl	80070a4 <mrbc_string_new_cstr>
 8007b0e:	463b      	mov	r3, r7
 8007b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 8007b16:	bf00      	nop
  }
}
 8007b18:	3724      	adds	r7, #36	; 0x24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd90      	pop	{r4, r7, pc}

08007b1e <c_string_append>:

//================================================================
/*! (method) <<
*/
static void c_string_append(struct VM *vm, mrbc_value v[], int argc)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
  if( !mrbc_string_append( &v[0], &v[1] ) ) {
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3310      	adds	r3, #16
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68b8      	ldr	r0, [r7, #8]
 8007b32:	f7ff fc68 	bl	8007406 <mrbc_string_append>
    // raise ? ENOMEM
  }
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <c_string_slice>:

//================================================================
/*! (method) []
*/
static void c_string_slice(struct VM *vm, mrbc_value v[], int argc)
{
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b091      	sub	sp, #68	; 0x44
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  int target_len = mrbc_string_size(v);
 8007b4c:	68b8      	ldr	r0, [r7, #8]
 8007b4e:	f7ff fac1 	bl	80070d4 <mrbc_string_size>
 8007b52:	6378      	str	r0, [r7, #52]	; 0x34
  int pos = mrbc_integer(v[1]);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	3310      	adds	r3, #16
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  int len;

  // in case of slice!(nth) -> String | nil
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d108      	bne.n	8007b74 <c_string_slice+0x34>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3310      	adds	r3, #16
 8007b66:	f993 3000 	ldrsb.w	r3, [r3]
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d102      	bne.n	8007b74 <c_string_slice+0x34>
    len = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b72:	e019      	b.n	8007ba8 <c_string_slice+0x68>

  // in case of slice!(nth, len) -> String | nil
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d110      	bne.n	8007b9c <c_string_slice+0x5c>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3310      	adds	r3, #16
 8007b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d10a      	bne.n	8007b9c <c_string_slice+0x5c>
	                  mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	3320      	adds	r3, #32
 8007b8a:	f993 3000 	ldrsb.w	r3, [r3]
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d104      	bne.n	8007b9c <c_string_slice+0x5c>
    len = mrbc_integer(v[2]);
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	3320      	adds	r3, #32
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b9a:	e005      	b.n	8007ba8 <c_string_slice+0x68>

  // other case
  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4929      	ldr	r1, [pc, #164]	; (8007c44 <c_string_slice+0x104>)
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f003 fc2f 	bl	800b404 <mrbc_raise>
    return;
 8007ba6:	e04a      	b.n	8007c3e <c_string_slice+0xfe>
  }

  if( pos < 0 ) pos += target_len;
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da03      	bge.n	8007bb6 <c_string_slice+0x76>
 8007bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	4413      	add	r3, r2
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( pos < 0 ) goto RETURN_NIL;
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	db33      	blt.n	8007c24 <c_string_slice+0xe4>
  if( len > (target_len - pos) ) len = target_len - pos;
 8007bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	dd03      	ble.n	8007bd0 <c_string_slice+0x90>
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
  if( len < 0 ) goto RETURN_NIL;
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	db28      	blt.n	8007c28 <c_string_slice+0xe8>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d102      	bne.n	8007be2 <c_string_slice+0xa2>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	dd24      	ble.n	8007c2c <c_string_slice+0xec>

  mrbc_value ret = mrbc_string_new(vm, mrbc_string_cstr(v) + pos, len);
 8007be2:	68b8      	ldr	r0, [r7, #8]
 8007be4:	f7ff fa83 	bl	80070ee <mrbc_string_cstr>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	441a      	add	r2, r3
 8007bee:	f107 0020 	add.w	r0, r7, #32
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	68f9      	ldr	r1, [r7, #12]
 8007bf6:	f7ff fac7 	bl	8007188 <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <c_string_slice+0xf0>

  SET_RETURN(ret);
 8007c00:	f107 0410 	add.w	r4, r7, #16
 8007c04:	f107 0320 	add.w	r3, r7, #32
 8007c08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007c0e:	68b8      	ldr	r0, [r7, #8]
 8007c10:	f7ff fa02 	bl	8007018 <mrbc_decref>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	461c      	mov	r4, r3
 8007c18:	f107 0310 	add.w	r3, r7, #16
 8007c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;		// normal return
 8007c22:	e00c      	b.n	8007c3e <c_string_slice+0xfe>
  if( pos < 0 ) goto RETURN_NIL;
 8007c24:	bf00      	nop
 8007c26:	e004      	b.n	8007c32 <c_string_slice+0xf2>
  if( len < 0 ) goto RETURN_NIL;
 8007c28:	bf00      	nop
 8007c2a:	e002      	b.n	8007c32 <c_string_slice+0xf2>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 8007c2c:	bf00      	nop
 8007c2e:	e000      	b.n	8007c32 <c_string_slice+0xf2>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8007c30:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 8007c32:	68b8      	ldr	r0, [r7, #8]
 8007c34:	f7ff f9f0 	bl	8007018 <mrbc_decref>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
}
 8007c3e:	3744      	adds	r7, #68	; 0x44
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd90      	pop	{r4, r7, pc}
 8007c44:	20000154 	.word	0x20000154

08007c48 <c_string_insert>:

//================================================================
/*! (method) []=
*/
static void c_string_insert(struct VM *vm, mrbc_value v[], int argc)
{
 8007c48:	b590      	push	{r4, r7, lr}
 8007c4a:	b08d      	sub	sp, #52	; 0x34
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  const mrbc_value *val;

  /*
    in case of self[nth] = val
  */
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d115      	bne.n	8007c86 <c_string_insert+0x3e>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	3310      	adds	r3, #16
 8007c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d10f      	bne.n	8007c86 <c_string_insert+0x3e>
                   mrbc_type(v[2]) == MRBC_TT_STRING ) {
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	3320      	adds	r3, #32
 8007c6a:	f993 3000 	ldrsb.w	r3, [r3]
  if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007c6e:	2b0b      	cmp	r3, #11
 8007c70:	d109      	bne.n	8007c86 <c_string_insert+0x3e>
    nth = v[1].i;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	3310      	adds	r3, #16
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = 1;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    val = &v[2];
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3320      	adds	r3, #32
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
 8007c84:	e026      	b.n	8007cd4 <c_string_insert+0x8c>
  }
  /*
    in case of self[nth, len] = val
  */
  else if( argc == 3 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d11d      	bne.n	8007cc8 <c_string_insert+0x80>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	3310      	adds	r3, #16
 8007c90:	f993 3000 	ldrsb.w	r3, [r3]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d117      	bne.n	8007cc8 <c_string_insert+0x80>
	                mrbc_type(v[2]) == MRBC_TT_INTEGER &&
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	3320      	adds	r3, #32
 8007c9c:	f993 3000 	ldrsb.w	r3, [r3]
  else if( argc == 3 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d111      	bne.n	8007cc8 <c_string_insert+0x80>
	                mrbc_type(v[3]) == MRBC_TT_STRING ) {
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3330      	adds	r3, #48	; 0x30
 8007ca8:	f993 3000 	ldrsb.w	r3, [r3]
	                mrbc_type(v[2]) == MRBC_TT_INTEGER &&
 8007cac:	2b0b      	cmp	r3, #11
 8007cae:	d10b      	bne.n	8007cc8 <c_string_insert+0x80>
    nth = v[1].i;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    len = v[2].i;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	3320      	adds	r3, #32
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    val = &v[3];
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3330      	adds	r3, #48	; 0x30
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cc6:	e005      	b.n	8007cd4 <c_string_insert+0x8c>
  }
  /*
    other cases
  */
  else {
    mrbc_raise( vm, MRBC_CLASS(TypeError), "Not supported." );
 8007cc8:	4a43      	ldr	r2, [pc, #268]	; (8007dd8 <c_string_insert+0x190>)
 8007cca:	4944      	ldr	r1, [pc, #272]	; (8007ddc <c_string_insert+0x194>)
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f003 fb99 	bl	800b404 <mrbc_raise>
    return;
 8007cd2:	e07e      	b.n	8007dd2 <c_string_insert+0x18a>
  }

  int len1 = v->string->size;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	889b      	ldrh	r3, [r3, #4]
 8007cda:	61fb      	str	r3, [r7, #28]
  int len2 = val->string->size;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	889b      	ldrh	r3, [r3, #4]
 8007ce2:	61bb      	str	r3, [r7, #24]
  if( nth < 0 ) nth = len1 + nth;		// adjust to positive number.
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	da03      	bge.n	8007cf2 <c_string_insert+0xaa>
 8007cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( len > len1 - nth ) len = len1 - nth;
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	dd03      	ble.n	8007d06 <c_string_insert+0xbe>
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	62bb      	str	r3, [r7, #40]	; 0x28
  if( nth < 0 || nth > len1 || len < 0) {
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db06      	blt.n	8007d1a <c_string_insert+0xd2>
 8007d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	dc02      	bgt.n	8007d1a <c_string_insert+0xd2>
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da06      	bge.n	8007d28 <c_string_insert+0xe0>
    mrbc_raisef( vm, MRBC_CLASS(IndexError), "index %d out of string", nth );
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	4a30      	ldr	r2, [pc, #192]	; (8007de0 <c_string_insert+0x198>)
 8007d1e:	4931      	ldr	r1, [pc, #196]	; (8007de4 <c_string_insert+0x19c>)
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f003 fbc3 	bl	800b4ac <mrbc_raisef>
    return;
 8007d26:	e054      	b.n	8007dd2 <c_string_insert+0x18a>
  }

  int len3 = len1 + len2 - len;			// final length.
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	441a      	add	r2, r3
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	617b      	str	r3, [r7, #20]
  uint8_t *str = v->string->data;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	623b      	str	r3, [r7, #32]
  if( len1 < len3 ) {
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	da09      	bge.n	8007d58 <c_string_insert+0x110>
    str = mrbc_realloc(vm, str, len3+1);	// expand
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	3301      	adds	r3, #1
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6a38      	ldr	r0, [r7, #32]
 8007d4c:	f7fa f922 	bl	8001f94 <mrbc_raw_realloc>
 8007d50:	6238      	str	r0, [r7, #32]
    if( !str ) return;
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d03b      	beq.n	8007dd0 <c_string_insert+0x188>
  }

  memmove( str + nth + len2, str + nth + len, len1 - nth - len + 1 );
 8007d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	6a3a      	ldr	r2, [r7, #32]
 8007d60:	18d0      	adds	r0, r2, r3
 8007d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	4413      	add	r3, r2
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	18d1      	adds	r1, r2, r3
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	1ad2      	subs	r2, r2, r3
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	3301      	adds	r3, #1
 8007d78:	461a      	mov	r2, r3
 8007d7a:	f00e fc30 	bl	80165de <memmove>
  memcpy( str + nth, mrbc_string_cstr(val), len2 );
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	18d4      	adds	r4, r2, r3
 8007d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d86:	f7ff f9b2 	bl	80070ee <mrbc_string_cstr>
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4620      	mov	r0, r4
 8007d92:	f00e fcd8 	bl	8016746 <memcpy>

  if( len1 > len3 ) {
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	dd06      	ble.n	8007dac <c_string_insert+0x164>
    str = mrbc_realloc(vm, str, len3+1);	// shrink
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3301      	adds	r3, #1
 8007da2:	4619      	mov	r1, r3
 8007da4:	6a38      	ldr	r0, [r7, #32]
 8007da6:	f7fa f8f5 	bl	8001f94 <mrbc_raw_realloc>
 8007daa:	6238      	str	r0, [r7, #32]
  }

  v->string->size = len1 + len2 - len;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4413      	add	r3, r2
 8007db6:	b299      	uxth	r1, r3
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	1a8a      	subs	r2, r1, r2
 8007dc2:	b292      	uxth	r2, r2
 8007dc4:	809a      	strh	r2, [r3, #4]
  v->string->data = str;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	609a      	str	r2, [r3, #8]
 8007dce:	e000      	b.n	8007dd2 <c_string_insert+0x18a>
    if( !str ) return;
 8007dd0:	bf00      	nop
}
 8007dd2:	3734      	adds	r7, #52	; 0x34
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd90      	pop	{r4, r7, pc}
 8007dd8:	08018ff0 	.word	0x08018ff0
 8007ddc:	200001b4 	.word	0x200001b4
 8007de0:	08019000 	.word	0x08019000
 8007de4:	20000164 	.word	0x20000164

08007de8 <c_string_chomp>:

//================================================================
/*! (method) chomp
*/
static void c_string_chomp(struct VM *vm, mrbc_value v[], int argc)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b08d      	sub	sp, #52	; 0x34
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8007df4:	f107 0320 	add.w	r3, r7, #32
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fa8c 	bl	800731a <mrbc_string_dup>

  mrbc_string_chomp(&ret);
 8007e02:	f107 0320 	add.w	r3, r7, #32
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fc55 	bl	80076b6 <mrbc_string_chomp>

  SET_RETURN(ret);
 8007e0c:	f107 0410 	add.w	r4, r7, #16
 8007e10:	f107 0320 	add.w	r3, r7, #32
 8007e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e1a:	68b8      	ldr	r0, [r7, #8]
 8007e1c:	f7ff f8fc 	bl	8007018 <mrbc_decref>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	461c      	mov	r4, r3
 8007e24:	f107 0310 	add.w	r3, r7, #16
 8007e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007e2e:	bf00      	nop
 8007e30:	3734      	adds	r7, #52	; 0x34
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd90      	pop	{r4, r7, pc}

08007e36 <c_string_clear>:

//================================================================
/*! (method) clear
*/
static void c_string_clear(struct VM *vm, mrbc_value v[], int argc)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  mrbc_string_clear(&v[0]);
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f7ff fa51 	bl	80072ea <mrbc_string_clear>
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <c_string_chomp_self>:

//================================================================
/*! (method) chomp!
*/
static void c_string_chomp_self(struct VM *vm, mrbc_value v[], int argc)
{
 8007e50:	b590      	push	{r4, r7, lr}
 8007e52:	b08d      	sub	sp, #52	; 0x34
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  if( mrbc_string_chomp(&v[0]) == 0 ) {
 8007e5c:	68b8      	ldr	r0, [r7, #8]
 8007e5e:	f7ff fc2a 	bl	80076b6 <mrbc_string_chomp>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d113      	bne.n	8007e90 <c_string_chomp_self+0x40>
    SET_RETURN( mrbc_nil_value() );
 8007e68:	f107 0320 	add.w	r3, r7, #32
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3020 	strb.w	r3, [r7, #32]
 8007e7c:	68b8      	ldr	r0, [r7, #8]
 8007e7e:	f7ff f8cb 	bl	8007018 <mrbc_decref>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	461c      	mov	r4, r3
 8007e86:	f107 0320 	add.w	r3, r7, #32
 8007e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 8007e90:	bf00      	nop
 8007e92:	3734      	adds	r7, #52	; 0x34
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd90      	pop	{r4, r7, pc}

08007e98 <c_string_dup>:

//================================================================
/*! (method) dup
*/
static void c_string_dup(struct VM *vm, mrbc_value v[], int argc)
{
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b08d      	sub	sp, #52	; 0x34
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8007ea4:	f107 0320 	add.w	r3, r7, #32
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fa34 	bl	800731a <mrbc_string_dup>

  SET_RETURN(ret);
 8007eb2:	f107 0410 	add.w	r4, r7, #16
 8007eb6:	f107 0320 	add.w	r3, r7, #32
 8007eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f7ff f8a9 	bl	8007018 <mrbc_decref>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	461c      	mov	r4, r3
 8007eca:	f107 0310 	add.w	r3, r7, #16
 8007ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007ed4:	bf00      	nop
 8007ed6:	3734      	adds	r7, #52	; 0x34
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}

08007edc <c_string_empty>:

//================================================================
/*! (method) empty?
*/
static void c_string_empty(struct VM *vm, mrbc_value v[], int argc)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  SET_BOOL_RETURN( !mrbc_string_size( &v[0] ));
 8007ee8:	68b8      	ldr	r0, [r7, #8]
 8007eea:	f7ff f8f3 	bl	80070d4 <mrbc_string_size>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <c_string_empty+0x1c>
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e000      	b.n	8007efa <c_string_empty+0x1e>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	68b8      	ldr	r0, [r7, #8]
 8007efe:	f7ff f88b 	bl	8007018 <mrbc_decref>
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	b25a      	sxtb	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	701a      	strb	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <c_string_getbyte>:

//================================================================
/*! (method) getbyte
*/
static void c_string_getbyte(struct VM *vm, mrbc_value v[], int argc)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b088      	sub	sp, #32
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	607a      	str	r2, [r7, #4]
  int len = mrbc_string_size(&v[0]);
 8007f1e:	68b8      	ldr	r0, [r7, #8]
 8007f20:	f7ff f8d8 	bl	80070d4 <mrbc_string_size>
 8007f24:	61b8      	str	r0, [r7, #24]
  mrbc_int_t idx = mrbc_integer(v[1]);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3310      	adds	r3, #16
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	61fb      	str	r3, [r7, #28]

  if( idx >= 0 ) {
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db07      	blt.n	8007f44 <c_string_getbyte+0x32>
    if( idx >= len ) idx = -1;
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	db07      	blt.n	8007f4c <c_string_getbyte+0x3a>
 8007f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	e003      	b.n	8007f4c <c_string_getbyte+0x3a>
  } else {
    idx += len;
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	4413      	add	r3, r2
 8007f4a:	61fb      	str	r3, [r7, #28]
  }
  if( idx >= 0 ) {
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	db11      	blt.n	8007f76 <c_string_getbyte+0x64>
    SET_INT_RETURN( ((uint8_t *)mrbc_string_cstr(&v[0]))[idx] );
 8007f52:	68b8      	ldr	r0, [r7, #8]
 8007f54:	f7ff f8cb 	bl	80070ee <mrbc_string_cstr>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	68b8      	ldr	r0, [r7, #8]
 8007f64:	f7ff f858 	bl	8007018 <mrbc_decref>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	609a      	str	r2, [r3, #8]
  } else {
    SET_NIL_RETURN();
  }
}
 8007f74:	e005      	b.n	8007f82 <c_string_getbyte+0x70>
    SET_NIL_RETURN();
 8007f76:	68b8      	ldr	r0, [r7, #8]
 8007f78:	f7ff f84e 	bl	8007018 <mrbc_decref>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	701a      	strb	r2, [r3, #0]
}
 8007f82:	bf00      	nop
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <c_string_index>:

//================================================================
/*! (method) index
*/
static void c_string_index(struct VM *vm, mrbc_value v[], int argc)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  int index;
  int offset;

  if( argc == 1 ) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d102      	bne.n	8007fa4 <c_string_index+0x18>
    offset = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	e020      	b.n	8007fe6 <c_string_index+0x5a>

  } else if( argc == 2 && mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d117      	bne.n	8007fda <c_string_index+0x4e>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	3320      	adds	r3, #32
 8007fae:	f993 3000 	ldrsb.w	r3, [r3]
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d111      	bne.n	8007fda <c_string_index+0x4e>
    offset = v[2].i;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3320      	adds	r3, #32
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
    if( offset < 0 ) offset += mrbc_string_size(&v[0]);
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da06      	bge.n	8007fd2 <c_string_index+0x46>
 8007fc4:	68b8      	ldr	r0, [r7, #8]
 8007fc6:	f7ff f885 	bl	80070d4 <mrbc_string_size>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	61fb      	str	r3, [r7, #28]
    if( offset < 0 ) goto NIL_RETURN;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da06      	bge.n	8007fe6 <c_string_index+0x5a>
 8007fd8:	e01d      	b.n	8008016 <c_string_index+0x8a>

  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4912      	ldr	r1, [pc, #72]	; (8008028 <c_string_index+0x9c>)
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f003 fa10 	bl	800b404 <mrbc_raise>
    return;
 8007fe4:	e01d      	b.n	8008022 <c_string_index+0x96>
  }

  index = mrbc_string_index(&v[0], &v[1], offset);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	3310      	adds	r3, #16
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	4619      	mov	r1, r3
 8007fee:	68b8      	ldr	r0, [r7, #8]
 8007ff0:	f7ff faab 	bl	800754a <mrbc_string_index>
 8007ff4:	61b8      	str	r0, [r7, #24]
  if( index < 0 ) goto NIL_RETURN;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	db0b      	blt.n	8008014 <c_string_index+0x88>

  SET_INT_RETURN(index);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	68b8      	ldr	r0, [r7, #8]
 8008002:	f7ff f809 	bl	8007018 <mrbc_decref>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2204      	movs	r2, #4
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	609a      	str	r2, [r3, #8]
  return;
 8008012:	e006      	b.n	8008022 <c_string_index+0x96>
  if( index < 0 ) goto NIL_RETURN;
 8008014:	bf00      	nop

 NIL_RETURN:
  SET_NIL_RETURN();
 8008016:	68b8      	ldr	r0, [r7, #8]
 8008018:	f7fe fffe 	bl	8007018 <mrbc_decref>
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2201      	movs	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]
}
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000154 	.word	0x20000154

0800802c <c_string_inspect>:

//================================================================
/*! (method) inspect
*/
static void c_string_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b093      	sub	sp, #76	; 0x4c
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  char buf[10] = "\\x";
 8008038:	f647 035c 	movw	r3, #30812	; 0x785c
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
 800803e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	809a      	strh	r2, [r3, #4]
  mrbc_value ret = mrbc_string_new_cstr(vm, "\"");
 8008048:	f107 0320 	add.w	r3, r7, #32
 800804c:	4a34      	ldr	r2, [pc, #208]	; (8008120 <c_string_inspect+0xf4>)
 800804e:	68f9      	ldr	r1, [r7, #12]
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff f827 	bl	80070a4 <mrbc_string_new_cstr>
  const unsigned char *s = (const unsigned char *)mrbc_string_cstr(v);
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	f7ff f849 	bl	80070ee <mrbc_string_cstr>
 800805c:	6438      	str	r0, [r7, #64]	; 0x40
  int i;
  for( i = 0; i < mrbc_string_size(v); i++ ) {
 800805e:	2300      	movs	r3, #0
 8008060:	647b      	str	r3, [r7, #68]	; 0x44
 8008062:	e03b      	b.n	80080dc <c_string_inspect+0xb0>
    if( s[i] < ' ' || 0x7f <= s[i] ) {	// tiny isprint()
 8008064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008068:	4413      	add	r3, r2
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b1f      	cmp	r3, #31
 800806e:	d905      	bls.n	800807c <c_string_inspect+0x50>
 8008070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008074:	4413      	add	r3, r2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b7e      	cmp	r3, #126	; 0x7e
 800807a:	d91d      	bls.n	80080b8 <c_string_inspect+0x8c>
      buf[2] = "0123456789ABCDEF"[s[i] >> 4];
 800807c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800807e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008080:	4413      	add	r3, r2
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	091b      	lsrs	r3, r3, #4
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	4b26      	ldr	r3, [pc, #152]	; (8008124 <c_string_inspect+0xf8>)
 800808c:	5c9b      	ldrb	r3, [r3, r2]
 800808e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      buf[3] = "0123456789ABCDEF"[s[i] & 0x0f];
 8008092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008096:	4413      	add	r3, r2
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	4a21      	ldr	r2, [pc, #132]	; (8008124 <c_string_inspect+0xf8>)
 80080a0:	5cd3      	ldrb	r3, [r2, r3]
 80080a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      mrbc_string_append_cstr(&ret, buf);
 80080a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80080aa:	f107 0320 	add.w	r3, r7, #32
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff f829 	bl	8007108 <mrbc_string_append_cstr>
 80080b6:	e00e      	b.n	80080d6 <c_string_inspect+0xaa>
    } else {
      buf[3] = s[i];
 80080b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080bc:	4413      	add	r3, r2
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      mrbc_string_append_cstr(&ret, buf+3);
 80080c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080c8:	3303      	adds	r3, #3
 80080ca:	f107 0220 	add.w	r2, r7, #32
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f7ff f819 	bl	8007108 <mrbc_string_append_cstr>
  for( i = 0; i < mrbc_string_size(v); i++ ) {
 80080d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d8:	3301      	adds	r3, #1
 80080da:	647b      	str	r3, [r7, #68]	; 0x44
 80080dc:	68b8      	ldr	r0, [r7, #8]
 80080de:	f7fe fff9 	bl	80070d4 <mrbc_string_size>
 80080e2:	4602      	mov	r2, r0
 80080e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e6:	4293      	cmp	r3, r2
 80080e8:	dbbc      	blt.n	8008064 <c_string_inspect+0x38>
    }
  }
  mrbc_string_append_cstr(&ret, "\"");
 80080ea:	f107 0320 	add.w	r3, r7, #32
 80080ee:	490c      	ldr	r1, [pc, #48]	; (8008120 <c_string_inspect+0xf4>)
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff f809 	bl	8007108 <mrbc_string_append_cstr>

  SET_RETURN( ret );
 80080f6:	f107 0410 	add.w	r4, r7, #16
 80080fa:	f107 0320 	add.w	r3, r7, #32
 80080fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008104:	68b8      	ldr	r0, [r7, #8]
 8008106:	f7fe ff87 	bl	8007018 <mrbc_decref>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	461c      	mov	r4, r3
 800810e:	f107 0310 	add.w	r3, r7, #16
 8008112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008118:	bf00      	nop
 800811a:	374c      	adds	r7, #76	; 0x4c
 800811c:	46bd      	mov	sp, r7
 800811e:	bd90      	pop	{r4, r7, pc}
 8008120:	08019018 	.word	0x08019018
 8008124:	0801901c 	.word	0x0801901c

08008128 <c_string_ord>:

//================================================================
/*! (method) ord
*/
static void c_string_ord(struct VM *vm, mrbc_value v[], int argc)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  if( mrbc_string_size(v) == 0 ) {
 8008134:	68b8      	ldr	r0, [r7, #8]
 8008136:	f7fe ffcd 	bl	80070d4 <mrbc_string_size>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <c_string_ord+0x24>
    mrbc_raise(vm, MRBC_CLASS(ArgumentError), "empty string");
 8008140:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <c_string_ord+0x4c>)
 8008142:	490d      	ldr	r1, [pc, #52]	; (8008178 <c_string_ord+0x50>)
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f003 f95d 	bl	800b404 <mrbc_raise>
    return;
 800814a:	e010      	b.n	800816e <c_string_ord+0x46>
  }

  int i = ((uint8_t *)mrbc_string_cstr(v))[0];
 800814c:	68b8      	ldr	r0, [r7, #8]
 800814e:	f7fe ffce 	bl	80070ee <mrbc_string_cstr>
 8008152:	4603      	mov	r3, r0
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	617b      	str	r3, [r7, #20]

  SET_INT_RETURN( i );
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	68b8      	ldr	r0, [r7, #8]
 800815e:	f7fe ff5b 	bl	8007018 <mrbc_decref>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2204      	movs	r2, #4
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	609a      	str	r2, [r3, #8]
}
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	08019030 	.word	0x08019030
 8008178:	20000154 	.word	0x20000154

0800817c <c_string_slice_self>:

//================================================================
/*! (method) slice!
*/
static void c_string_slice_self(struct VM *vm, mrbc_value v[], int argc)
{
 800817c:	b5b0      	push	{r4, r5, r7, lr}
 800817e:	b090      	sub	sp, #64	; 0x40
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  int target_len = mrbc_string_size(v);
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f7fe ffa3 	bl	80070d4 <mrbc_string_size>
 800818e:	6378      	str	r0, [r7, #52]	; 0x34
  int pos = mrbc_integer(v[1]);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	3310      	adds	r3, #16
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
  int len;

  // in case of slice!(nth) -> String | nil
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_INTEGER ) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d108      	bne.n	80081b0 <c_string_slice_self+0x34>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	3310      	adds	r3, #16
 80081a2:	f993 3000 	ldrsb.w	r3, [r3]
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d102      	bne.n	80081b0 <c_string_slice_self+0x34>
    len = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ae:	e019      	b.n	80081e4 <c_string_slice_self+0x68>

  // in case of slice!(nth, len) -> String | nil
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d110      	bne.n	80081d8 <c_string_slice_self+0x5c>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	3310      	adds	r3, #16
 80081ba:	f993 3000 	ldrsb.w	r3, [r3]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d10a      	bne.n	80081d8 <c_string_slice_self+0x5c>
	                  mrbc_type(v[2]) == MRBC_TT_INTEGER ) {
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3320      	adds	r3, #32
 80081c6:	f993 3000 	ldrsb.w	r3, [r3]
  } else if( argc == 2 && mrbc_type(v[1]) == MRBC_TT_INTEGER &&
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d104      	bne.n	80081d8 <c_string_slice_self+0x5c>
    len = mrbc_integer(v[2]);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	3320      	adds	r3, #32
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d6:	e005      	b.n	80081e4 <c_string_slice_self+0x68>

  // other case
  } else {
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 80081d8:	2200      	movs	r2, #0
 80081da:	4945      	ldr	r1, [pc, #276]	; (80082f0 <c_string_slice_self+0x174>)
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f003 f911 	bl	800b404 <mrbc_raise>
    return;
 80081e2:	e082      	b.n	80082ea <c_string_slice_self+0x16e>
  }

  if( pos < 0 ) pos += target_len;
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	da03      	bge.n	80081f2 <c_string_slice_self+0x76>
 80081ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	4413      	add	r3, r2
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( pos < 0 ) goto RETURN_NIL;
 80081f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	db6b      	blt.n	80082d0 <c_string_slice_self+0x154>
  if( len > (target_len - pos) ) len = target_len - pos;
 80081f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008200:	429a      	cmp	r2, r3
 8008202:	dd03      	ble.n	800820c <c_string_slice_self+0x90>
 8008204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	63bb      	str	r3, [r7, #56]	; 0x38
  if( len < 0 ) goto RETURN_NIL;
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	db60      	blt.n	80082d4 <c_string_slice_self+0x158>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d102      	bne.n	800821e <c_string_slice_self+0xa2>
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	dd5c      	ble.n	80082d8 <c_string_slice_self+0x15c>

  mrbc_value ret = mrbc_string_new(vm, mrbc_string_cstr(v) + pos, len);
 800821e:	68b8      	ldr	r0, [r7, #8]
 8008220:	f7fe ff65 	bl	80070ee <mrbc_string_cstr>
 8008224:	4602      	mov	r2, r0
 8008226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008228:	441a      	add	r2, r3
 800822a:	f107 0020 	add.w	r0, r7, #32
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	68f9      	ldr	r1, [r7, #12]
 8008232:	f7fe ffa9 	bl	8007188 <mrbc_string_new>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d04f      	beq.n	80082dc <c_string_slice_self+0x160>

  if( len > 0 ) {
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd34      	ble.n	80082ac <c_string_slice_self+0x130>
    memmove( mrbc_string_cstr(v) + pos, mrbc_string_cstr(v) + pos + len,
 8008242:	68b8      	ldr	r0, [r7, #8]
 8008244:	f7fe ff53 	bl	80070ee <mrbc_string_cstr>
 8008248:	4602      	mov	r2, r0
 800824a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824c:	18d4      	adds	r4, r2, r3
 800824e:	68b8      	ldr	r0, [r7, #8]
 8008250:	f7fe ff4d 	bl	80070ee <mrbc_string_cstr>
 8008254:	4601      	mov	r1, r0
 8008256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	4413      	add	r3, r2
 800825c:	18cd      	adds	r5, r1, r3
	     mrbc_string_size(v) - pos - len + 1 );
 800825e:	68b8      	ldr	r0, [r7, #8]
 8008260:	f7fe ff38 	bl	80070d4 <mrbc_string_size>
 8008264:	4602      	mov	r2, r0
 8008266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008268:	1ad2      	subs	r2, r2, r3
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	3301      	adds	r3, #1
    memmove( mrbc_string_cstr(v) + pos, mrbc_string_cstr(v) + pos + len,
 8008270:	461a      	mov	r2, r3
 8008272:	4629      	mov	r1, r5
 8008274:	4620      	mov	r0, r4
 8008276:	f00e f9b2 	bl	80165de <memmove>
    v->string->size = mrbc_string_size(v) - len;
 800827a:	68b8      	ldr	r0, [r7, #8]
 800827c:	f7fe ff2a 	bl	80070d4 <mrbc_string_size>
 8008280:	4603      	mov	r3, r0
 8008282:	b299      	uxth	r1, r3
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	b29a      	uxth	r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	1a8a      	subs	r2, r1, r2
 800828e:	b292      	uxth	r2, r2
 8008290:	809a      	strh	r2, [r3, #4]
    mrbc_raw_realloc( mrbc_string_cstr(v), mrbc_string_size(v)+1 );
 8008292:	68b8      	ldr	r0, [r7, #8]
 8008294:	f7fe ff2b 	bl	80070ee <mrbc_string_cstr>
 8008298:	4604      	mov	r4, r0
 800829a:	68b8      	ldr	r0, [r7, #8]
 800829c:	f7fe ff1a 	bl	80070d4 <mrbc_string_size>
 80082a0:	4603      	mov	r3, r0
 80082a2:	3301      	adds	r3, #1
 80082a4:	4619      	mov	r1, r3
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7f9 fe74 	bl	8001f94 <mrbc_raw_realloc>
  }

  SET_RETURN(ret);
 80082ac:	f107 0410 	add.w	r4, r7, #16
 80082b0:	f107 0320 	add.w	r3, r7, #32
 80082b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80082ba:	68b8      	ldr	r0, [r7, #8]
 80082bc:	f7fe feac 	bl	8007018 <mrbc_decref>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	461c      	mov	r4, r3
 80082c4:	f107 0310 	add.w	r3, r7, #16
 80082c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return;		// normal return
 80082ce:	e00c      	b.n	80082ea <c_string_slice_self+0x16e>
  if( pos < 0 ) goto RETURN_NIL;
 80082d0:	bf00      	nop
 80082d2:	e004      	b.n	80082de <c_string_slice_self+0x162>
  if( len < 0 ) goto RETURN_NIL;
 80082d4:	bf00      	nop
 80082d6:	e002      	b.n	80082de <c_string_slice_self+0x162>
  if( argc == 1 && len <= 0 ) goto RETURN_NIL;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <c_string_slice_self+0x162>
  if( !ret.string ) goto RETURN_NIL;		// ENOMEM
 80082dc:	bf00      	nop

 RETURN_NIL:
  SET_NIL_RETURN();
 80082de:	68b8      	ldr	r0, [r7, #8]
 80082e0:	f7fe fe9a 	bl	8007018 <mrbc_decref>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2201      	movs	r2, #1
 80082e8:	701a      	strb	r2, [r3, #0]
}
 80082ea:	3740      	adds	r7, #64	; 0x40
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bdb0      	pop	{r4, r5, r7, pc}
 80082f0:	20000154 	.word	0x20000154

080082f4 <c_string_split>:

//================================================================
/*! (method) split
*/
static void c_string_split(struct VM *vm, mrbc_value v[], int argc)
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b0a5      	sub	sp, #148	; 0x94
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	61f8      	str	r0, [r7, #28]
 80082fc:	61b9      	str	r1, [r7, #24]
 80082fe:	617a      	str	r2, [r7, #20]
  mrbc_value ret = mrbc_array_new(vm, 0);
 8008300:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008304:	2200      	movs	r2, #0
 8008306:	69f9      	ldr	r1, [r7, #28]
 8008308:	4618      	mov	r0, r3
 800830a:	f7fa f812 	bl	8002332 <mrbc_array_new>
  if( mrbc_string_size(&v[0]) == 0 ) goto DONE;
 800830e:	69b8      	ldr	r0, [r7, #24]
 8008310:	f7fe fee0 	bl	80070d4 <mrbc_string_size>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 817f 	beq.w	800861a <c_string_split+0x326>

  // check limit parameter.
  int limit = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if( argc >= 2 ) {
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b01      	cmp	r3, #1
 8008326:	dd1e      	ble.n	8008366 <c_string_split+0x72>
    if( mrbc_type(v[2]) != MRBC_TT_INTEGER ) {
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	3320      	adds	r3, #32
 800832c:	f993 3000 	ldrsb.w	r3, [r3]
 8008330:	2b04      	cmp	r3, #4
 8008332:	d005      	beq.n	8008340 <c_string_split+0x4c>
      mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008334:	2200      	movs	r2, #0
 8008336:	49ba      	ldr	r1, [pc, #744]	; (8008620 <c_string_split+0x32c>)
 8008338:	69f8      	ldr	r0, [r7, #28]
 800833a:	f003 f863 	bl	800b404 <mrbc_raise>
      return;
 800833e:	e187      	b.n	8008650 <c_string_split+0x35c>
    }
    limit = v[2].i;
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	3320      	adds	r3, #32
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if( limit == 1 ) {
 800834a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d109      	bne.n	8008366 <c_string_split+0x72>
      mrbc_array_push( &ret, &v[0] );
 8008352:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008356:	69b9      	ldr	r1, [r7, #24]
 8008358:	4618      	mov	r0, r3
 800835a:	f7fa f91a 	bl	8002592 <mrbc_array_push>
      mrbc_incref( &v[0] );
 800835e:	69b8      	ldr	r0, [r7, #24]
 8008360:	f7fe fe26 	bl	8006fb0 <mrbc_incref>
      goto DONE;
 8008364:	e163      	b.n	800862e <c_string_split+0x33a>
    }
  }

  // check separator parameter.
  mrbc_value sep = (argc == 0) ? mrbc_string_new_cstr(vm, " ") : v[1];
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d107      	bne.n	800837c <c_string_split+0x88>
 800836c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008370:	4aac      	ldr	r2, [pc, #688]	; (8008624 <c_string_split+0x330>)
 8008372:	69f9      	ldr	r1, [r7, #28]
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe fe95 	bl	80070a4 <mrbc_string_new_cstr>
 800837a:	e006      	b.n	800838a <c_string_split+0x96>
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8008382:	3310      	adds	r3, #16
 8008384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  switch( mrbc_type(sep) ) {
 800838a:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 800838e:	2b01      	cmp	r3, #1
 8008390:	d002      	beq.n	8008398 <c_string_split+0xa4>
 8008392:	2b0b      	cmp	r3, #11
 8008394:	d013      	beq.n	80083be <c_string_split+0xca>
 8008396:	e00c      	b.n	80083b2 <c_string_split+0xbe>
  case MRBC_TT_NIL:
    sep = mrbc_string_new_cstr(vm, " ");
 8008398:	463b      	mov	r3, r7
 800839a:	4aa2      	ldr	r2, [pc, #648]	; (8008624 <c_string_split+0x330>)
 800839c:	69f9      	ldr	r1, [r7, #28]
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fe80 	bl	80070a4 <mrbc_string_new_cstr>
 80083a4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80083a8:	463b      	mov	r3, r7
 80083aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80083ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    break;
 80083b0:	e006      	b.n	80083c0 <c_string_split+0xcc>

  case MRBC_TT_STRING:
    break;

  default:
    mrbc_raise( vm, MRBC_CLASS(TypeError), 0 );
 80083b2:	2200      	movs	r2, #0
 80083b4:	499c      	ldr	r1, [pc, #624]	; (8008628 <c_string_split+0x334>)
 80083b6:	69f8      	ldr	r0, [r7, #28]
 80083b8:	f003 f824 	bl	800b404 <mrbc_raise>
    return;
 80083bc:	e148      	b.n	8008650 <c_string_split+0x35c>
    break;
 80083be:	bf00      	nop
  }

  int flag_strip = (mrbc_string_cstr(&sep)[0] == ' ') &&
 80083c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fe92 	bl	80070ee <mrbc_string_cstr>
 80083ca:	4603      	mov	r3, r0
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d109      	bne.n	80083e6 <c_string_split+0xf2>
		   (mrbc_string_size(&sep) == 1);
 80083d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fe7c 	bl	80070d4 <mrbc_string_size>
 80083dc:	4603      	mov	r3, r0
  int flag_strip = (mrbc_string_cstr(&sep)[0] == ' ') &&
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <c_string_split+0xf2>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <c_string_split+0xf4>
 80083e6:	2300      	movs	r3, #0
 80083e8:	67bb      	str	r3, [r7, #120]	; 0x78
  int offset = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int sep_len = mrbc_string_size(&sep);
 80083f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fe fe6d 	bl	80070d4 <mrbc_string_size>
 80083fa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  if( sep_len == 0 ) sep_len++;
 80083fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <c_string_split+0x11c>
 8008406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800840a:	3301      	adds	r3, #1
 800840c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  while( 1 ) {
    int pos, len = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	67fb      	str	r3, [r7, #124]	; 0x7c

    if( flag_strip ) {
 8008414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008416:	2b00      	cmp	r3, #0
 8008418:	d026      	beq.n	8008468 <c_string_split+0x174>
      for( ; offset < mrbc_string_size(&v[0]); offset++ ) {
 800841a:	e012      	b.n	8008442 <c_string_split+0x14e>
	if( !is_space( mrbc_string_cstr(&v[0])[offset] )) break;
 800841c:	69b8      	ldr	r0, [r7, #24]
 800841e:	f7fe fe66 	bl	80070ee <mrbc_string_cstr>
 8008422:	4602      	mov	r2, r0
 8008424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008428:	4413      	add	r3, r2
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fe8b 	bl	8007148 <is_space>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00d      	beq.n	8008454 <c_string_split+0x160>
      for( ; offset < mrbc_string_size(&v[0]); offset++ ) {
 8008438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800843c:	3301      	adds	r3, #1
 800843e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008442:	69b8      	ldr	r0, [r7, #24]
 8008444:	f7fe fe46 	bl	80070d4 <mrbc_string_size>
 8008448:	4602      	mov	r2, r0
 800844a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800844e:	4293      	cmp	r3, r2
 8008450:	dbe4      	blt.n	800841c <c_string_split+0x128>
 8008452:	e000      	b.n	8008456 <c_string_split+0x162>
	if( !is_space( mrbc_string_cstr(&v[0])[offset] )) break;
 8008454:	bf00      	nop
      }
      if( offset > mrbc_string_size(&v[0])) break;
 8008456:	69b8      	ldr	r0, [r7, #24]
 8008458:	f7fe fe3c 	bl	80070d4 <mrbc_string_size>
 800845c:	4602      	mov	r2, r0
 800845e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008462:	4293      	cmp	r3, r2
 8008464:	f300 8098 	bgt.w	8008598 <c_string_split+0x2a4>
    }

    // check limit
    if( limit > 0 && mrbc_array_size(&ret)+1 >= limit ) {
 8008468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd0f      	ble.n	8008490 <c_string_split+0x19c>
 8008470:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fe5a 	bl	800712e <mrbc_array_size>
 800847a:	4603      	mov	r3, r0
 800847c:	3301      	adds	r3, #1
 800847e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008482:	429a      	cmp	r2, r3
 8008484:	dc04      	bgt.n	8008490 <c_string_split+0x19c>
      pos = -1;
 8008486:	f04f 33ff 	mov.w	r3, #4294967295
 800848a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      goto SPLIT_ITEM;
 800848e:	e056      	b.n	800853e <c_string_split+0x24a>
    }

    // split by space character.
    if( flag_strip ) {
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	2b00      	cmp	r3, #0
 8008494:	d028      	beq.n	80084e8 <c_string_split+0x1f4>
      pos = offset;
 8008496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800849a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      for( ; pos < mrbc_string_size(&v[0]); pos++ ) {
 800849e:	e012      	b.n	80084c6 <c_string_split+0x1d2>
	if( is_space( mrbc_string_cstr(&v[0])[pos] )) break;
 80084a0:	69b8      	ldr	r0, [r7, #24]
 80084a2:	f7fe fe24 	bl	80070ee <mrbc_string_cstr>
 80084a6:	4602      	mov	r2, r0
 80084a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084ac:	4413      	add	r3, r2
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fe49 	bl	8007148 <is_space>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10d      	bne.n	80084d8 <c_string_split+0x1e4>
      for( ; pos < mrbc_string_size(&v[0]); pos++ ) {
 80084bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084c0:	3301      	adds	r3, #1
 80084c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084c6:	69b8      	ldr	r0, [r7, #24]
 80084c8:	f7fe fe04 	bl	80070d4 <mrbc_string_size>
 80084cc:	4602      	mov	r2, r0
 80084ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084d2:	4293      	cmp	r3, r2
 80084d4:	dbe4      	blt.n	80084a0 <c_string_split+0x1ac>
 80084d6:	e000      	b.n	80084da <c_string_split+0x1e6>
	if( is_space( mrbc_string_cstr(&v[0])[pos] )) break;
 80084d8:	bf00      	nop
      }
      len = pos - offset;
 80084da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	67fb      	str	r3, [r7, #124]	; 0x7c
      goto SPLIT_ITEM;
 80084e6:	e02a      	b.n	800853e <c_string_split+0x24a>
    }

    // split by each character.
    if( mrbc_string_size(&sep) == 0 ) {
 80084e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fdf1 	bl	80070d4 <mrbc_string_size>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d112      	bne.n	800851e <c_string_split+0x22a>
      pos = (offset < mrbc_string_size(&v[0])-1) ? offset : -1;
 80084f8:	69b8      	ldr	r0, [r7, #24]
 80084fa:	f7fe fdeb 	bl	80070d4 <mrbc_string_size>
 80084fe:	4603      	mov	r3, r0
 8008500:	3b01      	subs	r3, #1
 8008502:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008506:	429a      	cmp	r2, r3
 8008508:	da02      	bge.n	8008510 <c_string_split+0x21c>
 800850a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800850e:	e001      	b.n	8008514 <c_string_split+0x220>
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      len = 1;
 8008518:	2301      	movs	r3, #1
 800851a:	67fb      	str	r3, [r7, #124]	; 0x7c
      goto SPLIT_ITEM;
 800851c:	e00f      	b.n	800853e <c_string_split+0x24a>
    }

    // split by specified character.
    pos = mrbc_string_index( &v[0], &sep, offset );
 800851e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008522:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008526:	4619      	mov	r1, r3
 8008528:	69b8      	ldr	r0, [r7, #24]
 800852a:	f7ff f80e 	bl	800754a <mrbc_string_index>
 800852e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    len = pos - offset;
 8008532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	67fb      	str	r3, [r7, #124]	; 0x7c


  SPLIT_ITEM:
    if( pos < 0 ) len = mrbc_string_size(&v[0]) - offset;
 800853e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008542:	2b00      	cmp	r3, #0
 8008544:	da07      	bge.n	8008556 <c_string_split+0x262>
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f7fe fdc4 	bl	80070d4 <mrbc_string_size>
 800854c:	4602      	mov	r2, r0
 800854e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	67fb      	str	r3, [r7, #124]	; 0x7c

    mrbc_value v1 = mrbc_string_new(vm, mrbc_string_cstr(&v[0]) + offset, len);
 8008556:	69b8      	ldr	r0, [r7, #24]
 8008558:	f7fe fdc9 	bl	80070ee <mrbc_string_cstr>
 800855c:	4602      	mov	r2, r0
 800855e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008562:	441a      	add	r2, r3
 8008564:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8008568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800856a:	69f9      	ldr	r1, [r7, #28]
 800856c:	f7fe fe0c 	bl	8007188 <mrbc_string_new>
    mrbc_array_push( &ret, &v1 );
 8008570:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008574:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f7fa f809 	bl	8002592 <mrbc_array_push>

    if( pos < 0 ) break;
 8008580:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008584:	2b00      	cmp	r3, #0
 8008586:	db09      	blt.n	800859c <c_string_split+0x2a8>
    offset = pos + sep_len;
 8008588:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800858c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008590:	4413      	add	r3, r2
 8008592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while( 1 ) {
 8008596:	e73b      	b.n	8008410 <c_string_split+0x11c>
      if( offset > mrbc_string_size(&v[0])) break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <c_string_split+0x2aa>
    if( pos < 0 ) break;
 800859c:	bf00      	nop
  }

  // remove trailing empty item
  if( limit == 0 ) {
 800859e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d12a      	bne.n	80085fc <c_string_split+0x308>
    while( 1 ) {
      int idx = mrbc_array_size(&ret) - 1;
 80085a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fdbf 	bl	800712e <mrbc_array_size>
 80085b0:	4603      	mov	r3, r0
 80085b2:	3b01      	subs	r3, #1
 80085b4:	677b      	str	r3, [r7, #116]	; 0x74
      if( idx < 0 ) break;
 80085b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db1c      	blt.n	80085f6 <c_string_split+0x302>

      mrbc_value v1 = mrbc_array_get( &ret, idx );
 80085bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085c0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80085c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f9 ffae 	bl	8002528 <mrbc_array_get>
      if( mrbc_string_size(&v1) != 0 ) break;
 80085cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe fd7f 	bl	80070d4 <mrbc_string_size>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10e      	bne.n	80085fa <c_string_split+0x306>

      mrbc_array_remove(&ret, idx);
 80085dc:	463b      	mov	r3, r7
 80085de:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80085e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fa f944 	bl	8002872 <mrbc_array_remove>
      mrbc_string_delete( &v1 );
 80085ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fe68 	bl	80072c4 <mrbc_string_delete>
    while( 1 ) {
 80085f4:	e7d7      	b.n	80085a6 <c_string_split+0x2b2>
      if( idx < 0 ) break;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <c_string_split+0x308>
      if( mrbc_string_size(&v1) != 0 ) break;
 80085fa:	bf00      	nop
    }
  }

  if( argc == 0 || mrbc_type(v[1]) == MRBC_TT_NIL ) {
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <c_string_split+0x31a>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	3310      	adds	r3, #16
 8008606:	f993 3000 	ldrsb.w	r3, [r3]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d10e      	bne.n	800862c <c_string_split+0x338>
    mrbc_string_delete(&sep);
 800860e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fe56 	bl	80072c4 <mrbc_string_delete>
 8008618:	e009      	b.n	800862e <c_string_split+0x33a>
  if( mrbc_string_size(&v[0]) == 0 ) goto DONE;
 800861a:	bf00      	nop
 800861c:	e007      	b.n	800862e <c_string_split+0x33a>
 800861e:	bf00      	nop
 8008620:	20000154 	.word	0x20000154
 8008624:	08019040 	.word	0x08019040
 8008628:	200001b4 	.word	0x200001b4
  }

 DONE:
 800862c:	bf00      	nop
  SET_RETURN( ret );
 800862e:	f107 0420 	add.w	r4, r7, #32
 8008632:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800863c:	69b8      	ldr	r0, [r7, #24]
 800863e:	f7fe fceb 	bl	8007018 <mrbc_decref>
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	461c      	mov	r4, r3
 8008646:	f107 0320 	add.w	r3, r7, #32
 800864a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800864c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008650:	3794      	adds	r7, #148	; 0x94
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}
 8008656:	bf00      	nop

08008658 <c_string_lstrip>:

//================================================================
/*! (method) lstrip
*/
static void c_string_lstrip(struct VM *vm, mrbc_value v[], int argc)
{
 8008658:	b590      	push	{r4, r7, lr}
 800865a:	b08d      	sub	sp, #52	; 0x34
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008664:	f107 0320 	add.w	r3, r7, #32
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fe54 	bl	800731a <mrbc_string_dup>

  mrbc_string_strip(&ret, 0x01);	// 1: left side only
 8008672:	f107 0320 	add.w	r3, r7, #32
 8008676:	2101      	movs	r1, #1
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe ffa6 	bl	80075ca <mrbc_string_strip>

  SET_RETURN(ret);
 800867e:	f107 0410 	add.w	r4, r7, #16
 8008682:	f107 0320 	add.w	r3, r7, #32
 8008686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800868c:	68b8      	ldr	r0, [r7, #8]
 800868e:	f7fe fcc3 	bl	8007018 <mrbc_decref>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	461c      	mov	r4, r3
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800869c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80086a0:	bf00      	nop
 80086a2:	3734      	adds	r7, #52	; 0x34
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd90      	pop	{r4, r7, pc}

080086a8 <c_string_lstrip_self>:

//================================================================
/*! (method) lstrip!
*/
static void c_string_lstrip_self(struct VM *vm, mrbc_value v[], int argc)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b08d      	sub	sp, #52	; 0x34
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  if( mrbc_string_strip(&v[0], 0x01) == 0 ) {	// 1: left side only
 80086b4:	2101      	movs	r1, #1
 80086b6:	68b8      	ldr	r0, [r7, #8]
 80086b8:	f7fe ff87 	bl	80075ca <mrbc_string_strip>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d113      	bne.n	80086ea <c_string_lstrip_self+0x42>
    SET_RETURN( mrbc_nil_value() );
 80086c2:	f107 0320 	add.w	r3, r7, #32
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	609a      	str	r2, [r3, #8]
 80086ce:	60da      	str	r2, [r3, #12]
 80086d0:	2301      	movs	r3, #1
 80086d2:	f887 3020 	strb.w	r3, [r7, #32]
 80086d6:	68b8      	ldr	r0, [r7, #8]
 80086d8:	f7fe fc9e 	bl	8007018 <mrbc_decref>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	461c      	mov	r4, r3
 80086e0:	f107 0320 	add.w	r3, r7, #32
 80086e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 80086ea:	bf00      	nop
 80086ec:	3734      	adds	r7, #52	; 0x34
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd90      	pop	{r4, r7, pc}

080086f2 <c_string_rstrip>:

//================================================================
/*! (method) rstrip
*/
static void c_string_rstrip(struct VM *vm, mrbc_value v[], int argc)
{
 80086f2:	b590      	push	{r4, r7, lr}
 80086f4:	b08d      	sub	sp, #52	; 0x34
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 80086fe:	f107 0320 	add.w	r3, r7, #32
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fe07 	bl	800731a <mrbc_string_dup>

  mrbc_string_strip(&ret, 0x02);	// 2: right side only
 800870c:	f107 0320 	add.w	r3, r7, #32
 8008710:	2102      	movs	r1, #2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe ff59 	bl	80075ca <mrbc_string_strip>

  SET_RETURN(ret);
 8008718:	f107 0410 	add.w	r4, r7, #16
 800871c:	f107 0320 	add.w	r3, r7, #32
 8008720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008726:	68b8      	ldr	r0, [r7, #8]
 8008728:	f7fe fc76 	bl	8007018 <mrbc_decref>
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	461c      	mov	r4, r3
 8008730:	f107 0310 	add.w	r3, r7, #16
 8008734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800873a:	bf00      	nop
 800873c:	3734      	adds	r7, #52	; 0x34
 800873e:	46bd      	mov	sp, r7
 8008740:	bd90      	pop	{r4, r7, pc}

08008742 <c_string_rstrip_self>:

//================================================================
/*! (method) rstrip!
*/
static void c_string_rstrip_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008742:	b590      	push	{r4, r7, lr}
 8008744:	b08d      	sub	sp, #52	; 0x34
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
  if( mrbc_string_strip(&v[0], 0x02) == 0 ) {	// 2: right side only
 800874e:	2102      	movs	r1, #2
 8008750:	68b8      	ldr	r0, [r7, #8]
 8008752:	f7fe ff3a 	bl	80075ca <mrbc_string_strip>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d113      	bne.n	8008784 <c_string_rstrip_self+0x42>
    SET_RETURN( mrbc_nil_value() );
 800875c:	f107 0320 	add.w	r3, r7, #32
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	605a      	str	r2, [r3, #4]
 8008766:	609a      	str	r2, [r3, #8]
 8008768:	60da      	str	r2, [r3, #12]
 800876a:	2301      	movs	r3, #1
 800876c:	f887 3020 	strb.w	r3, [r7, #32]
 8008770:	68b8      	ldr	r0, [r7, #8]
 8008772:	f7fe fc51 	bl	8007018 <mrbc_decref>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	461c      	mov	r4, r3
 800877a:	f107 0320 	add.w	r3, r7, #32
 800877e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 8008784:	bf00      	nop
 8008786:	3734      	adds	r7, #52	; 0x34
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}

0800878c <c_string_strip>:

//================================================================
/*! (method) strip
*/
static void c_string_strip(struct VM *vm, mrbc_value v[], int argc)
{
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b08d      	sub	sp, #52	; 0x34
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008798:	f107 0320 	add.w	r3, r7, #32
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fdba 	bl	800731a <mrbc_string_dup>

  mrbc_string_strip(&ret, 0x03);	// 3: left and right
 80087a6:	f107 0320 	add.w	r3, r7, #32
 80087aa:	2103      	movs	r1, #3
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe ff0c 	bl	80075ca <mrbc_string_strip>

  SET_RETURN(ret);
 80087b2:	f107 0410 	add.w	r4, r7, #16
 80087b6:	f107 0320 	add.w	r3, r7, #32
 80087ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80087c0:	68b8      	ldr	r0, [r7, #8]
 80087c2:	f7fe fc29 	bl	8007018 <mrbc_decref>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	461c      	mov	r4, r3
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80087d4:	bf00      	nop
 80087d6:	3734      	adds	r7, #52	; 0x34
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd90      	pop	{r4, r7, pc}

080087dc <c_string_strip_self>:

//================================================================
/*! (method) strip!
*/
static void c_string_strip_self(struct VM *vm, mrbc_value v[], int argc)
{
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b08d      	sub	sp, #52	; 0x34
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  if( mrbc_string_strip(&v[0], 0x03) == 0 ) {	// 3: left and right
 80087e8:	2103      	movs	r1, #3
 80087ea:	68b8      	ldr	r0, [r7, #8]
 80087ec:	f7fe feed 	bl	80075ca <mrbc_string_strip>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d113      	bne.n	800881e <c_string_strip_self+0x42>
    SET_RETURN( mrbc_nil_value() );
 80087f6:	f107 0320 	add.w	r3, r7, #32
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	605a      	str	r2, [r3, #4]
 8008800:	609a      	str	r2, [r3, #8]
 8008802:	60da      	str	r2, [r3, #12]
 8008804:	2301      	movs	r3, #1
 8008806:	f887 3020 	strb.w	r3, [r7, #32]
 800880a:	68b8      	ldr	r0, [r7, #8]
 800880c:	f7fe fc04 	bl	8007018 <mrbc_decref>
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	461c      	mov	r4, r3
 8008814:	f107 0320 	add.w	r3, r7, #32
 8008818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800881a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
}
 800881e:	bf00      	nop
 8008820:	3734      	adds	r7, #52	; 0x34
 8008822:	46bd      	mov	sp, r7
 8008824:	bd90      	pop	{r4, r7, pc}

08008826 <c_string_to_sym>:

//================================================================
/*! (method) to_sym
*/
static void c_string_to_sym(struct VM *vm, mrbc_value v[], int argc)
{
 8008826:	b590      	push	{r4, r7, lr}
 8008828:	b08d      	sub	sp, #52	; 0x34
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_symbol_new(vm, mrbc_string_cstr(&v[0]));
 8008832:	68b8      	ldr	r0, [r7, #8]
 8008834:	f7fe fc5b 	bl	80070ee <mrbc_string_cstr>
 8008838:	4602      	mov	r2, r0
 800883a:	f107 0320 	add.w	r3, r7, #32
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	4618      	mov	r0, r3
 8008842:	f005 faa7 	bl	800dd94 <mrbc_symbol_new>

  SET_RETURN(ret);
 8008846:	f107 0410 	add.w	r4, r7, #16
 800884a:	f107 0320 	add.w	r3, r7, #32
 800884e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008854:	68b8      	ldr	r0, [r7, #8]
 8008856:	f7fe fbdf 	bl	8007018 <mrbc_decref>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	461c      	mov	r4, r3
 800885e:	f107 0310 	add.w	r3, r7, #16
 8008862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008868:	bf00      	nop
 800886a:	3734      	adds	r7, #52	; 0x34
 800886c:	46bd      	mov	sp, r7
 800886e:	bd90      	pop	{r4, r7, pc}

08008870 <tr_free_pattern>:
  struct tr_pattern *next;
  char ch[];
};

static void tr_free_pattern( struct tr_pattern *pat )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  while( pat ) {
 8008878:	e007      	b.n	800888a <tr_free_pattern+0x1a>
    struct tr_pattern *p = pat->next;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	60fb      	str	r3, [r7, #12]
    mrbc_raw_free( pat );
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7f9 faeb 	bl	8001e5c <mrbc_raw_free>
    pat = p;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	607b      	str	r3, [r7, #4]
  while( pat ) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f4      	bne.n	800887a <tr_free_pattern+0xa>
  }
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <tr_parse_pattern>:

static struct tr_pattern * tr_parse_pattern( struct VM *vm, const mrbc_value *v_pattern, int flag_reverse_enable )
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b08e      	sub	sp, #56	; 0x38
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	607a      	str	r2, [r7, #4]
  const char *pattern = mrbc_string_cstr( v_pattern );
 80088a6:	68b8      	ldr	r0, [r7, #8]
 80088a8:	f7fe fc21 	bl	80070ee <mrbc_string_cstr>
 80088ac:	6238      	str	r0, [r7, #32]
  int pattern_length = mrbc_string_size( v_pattern );
 80088ae:	68b8      	ldr	r0, [r7, #8]
 80088b0:	f7fe fc10 	bl	80070d4 <mrbc_string_size>
 80088b4:	61f8      	str	r0, [r7, #28]
  int flag_reverse = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	637b      	str	r3, [r7, #52]	; 0x34
  struct tr_pattern *ret = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	633b      	str	r3, [r7, #48]	; 0x30

  int i = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if( flag_reverse_enable && pattern_length >= 2 && pattern[i] == '^' ) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80a3 	beq.w	8008a10 <tr_parse_pattern+0x176>
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	f340 809f 	ble.w	8008a10 <tr_parse_pattern+0x176>
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	6a3a      	ldr	r2, [r7, #32]
 80088d6:	4413      	add	r3, r2
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b5e      	cmp	r3, #94	; 0x5e
 80088dc:	f040 8098 	bne.w	8008a10 <tr_parse_pattern+0x176>
    flag_reverse = 1;
 80088e0:	2301      	movs	r3, #1
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
    i++;
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	3301      	adds	r3, #1
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  struct tr_pattern *pat1;
  while( i < pattern_length ) {
 80088ea:	e091      	b.n	8008a10 <tr_parse_pattern+0x176>
    // is range pattern ?
    if( (i+2) < pattern_length && pattern[i+1] == '-' ) {
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	3302      	adds	r3, #2
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	dd3a      	ble.n	800896c <tr_parse_pattern+0xd2>
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	3301      	adds	r3, #1
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	4413      	add	r3, r2
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b2d      	cmp	r3, #45	; 0x2d
 8008902:	d133      	bne.n	800896c <tr_parse_pattern+0xd2>
      pat1 = mrbc_alloc( vm, sizeof(struct tr_pattern) + 2 );
 8008904:	200a      	movs	r0, #10
 8008906:	f7f9 f8cd 	bl	8001aa4 <mrbc_raw_alloc>
 800890a:	62b8      	str	r0, [r7, #40]	; 0x28
      if( pat1 != NULL ) {
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	d028      	beq.n	8008964 <tr_parse_pattern+0xca>
	pat1->type = 2;
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	2202      	movs	r2, #2
 8008916:	701a      	strb	r2, [r3, #0]
	pat1->flag_reverse = flag_reverse;
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	705a      	strb	r2, [r3, #1]
	pat1->n = pattern[i+2] - pattern[i] + 1;
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	3302      	adds	r3, #2
 8008924:	6a3a      	ldr	r2, [r7, #32]
 8008926:	4413      	add	r3, r2
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b29a      	uxth	r2, r3
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	6a39      	ldr	r1, [r7, #32]
 8008930:	440b      	add	r3, r1
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	b29b      	uxth	r3, r3
 800893a:	3301      	adds	r3, #1
 800893c:	b29b      	uxth	r3, r3
 800893e:	b21a      	sxth	r2, r3
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	805a      	strh	r2, [r3, #2]
	pat1->next = NULL;
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	2200      	movs	r2, #0
 8008948:	605a      	str	r2, [r3, #4]
	pat1->ch[0] = pattern[i];
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	4413      	add	r3, r2
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	721a      	strb	r2, [r3, #8]
	pat1->ch[1] = pattern[i+2];
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	3302      	adds	r3, #2
 800895a:	6a3a      	ldr	r2, [r7, #32]
 800895c:	4413      	add	r3, r2
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	725a      	strb	r2, [r3, #9]
      }
      i += 3;
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	3303      	adds	r3, #3
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800896a:	e03e      	b.n	80089ea <tr_parse_pattern+0x150>

    } else {
      // in order pattern.
      int start_pos = i++;
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008972:	61bb      	str	r3, [r7, #24]
      while( i < pattern_length ) {
 8008974:	e00e      	b.n	8008994 <tr_parse_pattern+0xfa>
	if( (i+2) < pattern_length && pattern[i+1] == '-' ) break;
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	3302      	adds	r3, #2
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	429a      	cmp	r2, r3
 800897e:	dd06      	ble.n	800898e <tr_parse_pattern+0xf4>
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	3301      	adds	r3, #1
 8008984:	6a3a      	ldr	r2, [r7, #32]
 8008986:	4413      	add	r3, r2
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b2d      	cmp	r3, #45	; 0x2d
 800898c:	d007      	beq.n	800899e <tr_parse_pattern+0x104>
	i++;
 800898e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008990:	3301      	adds	r3, #1
 8008992:	62fb      	str	r3, [r7, #44]	; 0x2c
      while( i < pattern_length ) {
 8008994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	429a      	cmp	r2, r3
 800899a:	dbec      	blt.n	8008976 <tr_parse_pattern+0xdc>
 800899c:	e000      	b.n	80089a0 <tr_parse_pattern+0x106>
	if( (i+2) < pattern_length && pattern[i+1] == '-' ) break;
 800899e:	bf00      	nop
      }

      int len = i - start_pos;
 80089a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	617b      	str	r3, [r7, #20]
      pat1 = mrbc_alloc( vm, sizeof(struct tr_pattern) + len );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	3308      	adds	r3, #8
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7f9 f879 	bl	8001aa4 <mrbc_raw_alloc>
 80089b2:	62b8      	str	r0, [r7, #40]	; 0x28
      if( pat1 != NULL ) {
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d017      	beq.n	80089ea <tr_parse_pattern+0x150>
	pat1->type = 1;
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
	pat1->flag_reverse = flag_reverse;
 80089c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	705a      	strb	r2, [r3, #1]
	pat1->n = len;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	b21a      	sxth	r2, r3
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	805a      	strh	r2, [r3, #2]
	pat1->next = NULL;
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	2200      	movs	r2, #0
 80089d4:	605a      	str	r2, [r3, #4]
	memcpy( pat1->ch, &pattern[start_pos], len );
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	f103 0008 	add.w	r0, r3, #8
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	6a3a      	ldr	r2, [r7, #32]
 80089e0:	4413      	add	r3, r2
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f00d feae 	bl	8016746 <memcpy>
      }
    }

    // connect linked list.
    if( ret == NULL ) {
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <tr_parse_pattern+0x15c>
      ret = pat1;
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	633b      	str	r3, [r7, #48]	; 0x30
 80089f4:	e00c      	b.n	8008a10 <tr_parse_pattern+0x176>
    } else {
      struct tr_pattern *p = ret;
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
      while( p->next != NULL ) { p = p->next; }
 80089fa:	e002      	b.n	8008a02 <tr_parse_pattern+0x168>
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1f8      	bne.n	80089fc <tr_parse_pattern+0x162>
      p->next = pat1;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0e:	605a      	str	r2, [r3, #4]
  while( i < pattern_length ) {
 8008a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	f6ff af69 	blt.w	80088ec <tr_parse_pattern+0x52>
    }
  }

  return ret;
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3738      	adds	r7, #56	; 0x38
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <tr_find_character>:

static int tr_find_character( const struct tr_pattern *pat, int ch )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  int ret = -1;
 8008a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a32:	617b      	str	r3, [r7, #20]
  int n_sum = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
  int flag_reverse = pat ? pat->flag_reverse : 0;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <tr_find_character+0x20>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	785b      	ldrb	r3, [r3, #1]
 8008a42:	e000      	b.n	8008a46 <tr_find_character+0x22>
 8008a44:	2300      	movs	r3, #0
 8008a46:	60bb      	str	r3, [r7, #8]

  while( pat != NULL ) {
 8008a48:	e03b      	b.n	8008ac2 <tr_find_character+0x9e>
    if( pat->type == 1 ) {	// in-order
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d11a      	bne.n	8008a88 <tr_find_character+0x64>
      int i;
      for( i = 0; i < pat->n; i++ ) {
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e00f      	b.n	8008a78 <tr_find_character+0x54>
	if( pat->ch[i] == ch ) ret = n_sum + i;
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	3308      	adds	r3, #8
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d103      	bne.n	8008a72 <tr_find_character+0x4e>
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]
      for( i = 0; i < pat->n; i++ ) {
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4293      	cmp	r3, r2
 8008a84:	dbe8      	blt.n	8008a58 <tr_find_character+0x34>
 8008a86:	e012      	b.n	8008aae <tr_find_character+0x8a>
      }
    } else {	// pat->type == 2  range
      if( pat->ch[0] <= ch && ch <= pat->ch[1] ) ret = n_sum + ch - pat->ch[0];
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	7a1b      	ldrb	r3, [r3, #8]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	db0c      	blt.n	8008aae <tr_find_character+0x8a>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	7a5b      	ldrb	r3, [r3, #9]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	dc06      	bgt.n	8008aae <tr_find_character+0x8a>
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	7a12      	ldrb	r2, [r2, #8]
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	617b      	str	r3, [r7, #20]
    }
    n_sum += pat->n;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4413      	add	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
    pat = pat->next;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	607b      	str	r3, [r7, #4]
  while( pat != NULL ) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1c0      	bne.n	8008a4a <tr_find_character+0x26>
  }

  if( flag_reverse ) {
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d008      	beq.n	8008ae0 <tr_find_character+0xbc>
    return (ret < 0) ? INT_MAX : -1;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	da02      	bge.n	8008ada <tr_find_character+0xb6>
 8008ad4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008ad8:	e003      	b.n	8008ae2 <tr_find_character+0xbe>
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	e000      	b.n	8008ae2 <tr_find_character+0xbe>
  }
  return ret;
 8008ae0:	697b      	ldr	r3, [r7, #20]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <tr_get_character>:

static int tr_get_character( const struct tr_pattern *pat, int n_th )
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  int n_sum = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
  while( pat != NULL ) {
 8008afc:	e039      	b.n	8008b72 <tr_get_character+0x84>
    if( n_th < (n_sum + pat->n) ) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b04:	461a      	mov	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4413      	add	r3, r2
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	da13      	bge.n	8008b38 <tr_get_character+0x4a>
      int i = (n_th - n_sum);
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	60bb      	str	r3, [r7, #8]
      return (pat->type == 1) ? pat->ch[i] :pat->ch[0] + i;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d105      	bne.n	8008b2c <tr_get_character+0x3e>
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4413      	add	r3, r2
 8008b26:	3308      	adds	r3, #8
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	e027      	b.n	8008b7c <tr_get_character+0x8e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7a1b      	ldrb	r3, [r3, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	e021      	b.n	8008b7c <tr_get_character+0x8e>
    }
    if( pat->next == NULL ) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10e      	bne.n	8008b5e <tr_get_character+0x70>
      return (pat->type == 1) ? pat->ch[pat->n - 1] : pat->ch[1];
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d107      	bne.n	8008b58 <tr_get_character+0x6a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	7a1b      	ldrb	r3, [r3, #8]
 8008b56:	e011      	b.n	8008b7c <tr_get_character+0x8e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7a5b      	ldrb	r3, [r3, #9]
 8008b5c:	e00e      	b.n	8008b7c <tr_get_character+0x8e>
    }
    n_sum += pat->n;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008b64:	461a      	mov	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
    pat = pat->next;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	607b      	str	r3, [r7, #4]
  while( pat != NULL ) {
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1c2      	bne.n	8008afe <tr_get_character+0x10>
  }

  return -1;
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <tr_main>:

static int tr_main( struct VM *vm, mrbc_value v[], int argc )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	; 0x30
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  if( !(argc == 2 && mrbc_type(v[1]) == MRBC_TT_STRING &&
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d10b      	bne.n	8008bb2 <tr_main+0x2a>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3310      	adds	r3, #16
 8008b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8008ba2:	2b0b      	cmp	r3, #11
 8008ba4:	d105      	bne.n	8008bb2 <tr_main+0x2a>
	             mrbc_type(v[2]) == MRBC_TT_STRING)) {
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	3320      	adds	r3, #32
 8008baa:	f993 3000 	ldrsb.w	r3, [r3]
  if( !(argc == 2 && mrbc_type(v[1]) == MRBC_TT_STRING &&
 8008bae:	2b0b      	cmp	r3, #11
 8008bb0:	d007      	beq.n	8008bc2 <tr_main+0x3a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	493b      	ldr	r1, [pc, #236]	; (8008ca4 <tr_main+0x11c>)
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f002 fc24 	bl	800b404 <mrbc_raise>
    return -1;
 8008bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc0:	e06c      	b.n	8008c9c <tr_main+0x114>
  }

  struct tr_pattern *pat = tr_parse_pattern( vm, &v[1], 1 );
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4619      	mov	r1, r3
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7ff fe65 	bl	800889a <tr_parse_pattern>
 8008bd0:	6238      	str	r0, [r7, #32]
  if( pat == NULL ) return 0;
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <tr_main+0x54>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	e05f      	b.n	8008c9c <tr_main+0x114>

  struct tr_pattern *rep = tr_parse_pattern( vm, &v[2], 0 );
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	3320      	adds	r3, #32
 8008be0:	2200      	movs	r2, #0
 8008be2:	4619      	mov	r1, r3
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fe58 	bl	800889a <tr_parse_pattern>
 8008bea:	61f8      	str	r0, [r7, #28]

  int flag_changed = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *s = mrbc_string_cstr( &v[0] );
 8008bf0:	68b8      	ldr	r0, [r7, #8]
 8008bf2:	f7fe fa7c 	bl	80070ee <mrbc_string_cstr>
 8008bf6:	61b8      	str	r0, [r7, #24]
  int len = mrbc_string_size( &v[0] );
 8008bf8:	68b8      	ldr	r0, [r7, #8]
 8008bfa:	f7fe fa6b 	bl	80070d4 <mrbc_string_size>
 8008bfe:	62b8      	str	r0, [r7, #40]	; 0x28
  int i;
  for( i = 0; i < len; i++ ) {
 8008c00:	2300      	movs	r3, #0
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
 8008c04:	e033      	b.n	8008c6e <tr_main+0xe6>
    int n = tr_find_character( pat, s[i] );
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6a38      	ldr	r0, [r7, #32]
 8008c12:	f7ff ff07 	bl	8008a24 <tr_find_character>
 8008c16:	6178      	str	r0, [r7, #20]
    if( n < 0 ) continue;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	db23      	blt.n	8008c66 <tr_main+0xde>

    flag_changed = 1;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( rep == NULL ) {
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d113      	bne.n	8008c50 <tr_main+0xc8>
      memmove( s + i, s + i + 1, len - i );
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	18d0      	adds	r0, r2, r3
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	3301      	adds	r3, #1
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	18d1      	adds	r1, r2, r3
 8008c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f00d fcce 	bl	80165de <memmove>
      len--;
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	3b01      	subs	r3, #1
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28
      i--;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4e:	e00b      	b.n	8008c68 <tr_main+0xe0>
    } else {
      s[i] = tr_get_character( rep, n );
 8008c50:	6979      	ldr	r1, [r7, #20]
 8008c52:	69f8      	ldr	r0, [r7, #28]
 8008c54:	f7ff ff4b 	bl	8008aee <tr_get_character>
 8008c58:	4601      	mov	r1, r0
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	4413      	add	r3, r2
 8008c60:	b2ca      	uxtb	r2, r1
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e000      	b.n	8008c68 <tr_main+0xe0>
    if( n < 0 ) continue;
 8008c66:	bf00      	nop
  for( i = 0; i < len; i++ ) {
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	429a      	cmp	r2, r3
 8008c74:	dbc7      	blt.n	8008c06 <tr_main+0x7e>
    }
  }

  tr_free_pattern( pat );
 8008c76:	6a38      	ldr	r0, [r7, #32]
 8008c78:	f7ff fdfa 	bl	8008870 <tr_free_pattern>
  tr_free_pattern( rep );
 8008c7c:	69f8      	ldr	r0, [r7, #28]
 8008c7e:	f7ff fdf7 	bl	8008870 <tr_free_pattern>

  v[0].string->size = len;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c88:	b292      	uxth	r2, r2
 8008c8a:	809a      	strh	r2, [r3, #4]
  v[0].string->data[len] = 0;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	4413      	add	r3, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]

  return flag_changed;
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3730      	adds	r7, #48	; 0x30
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000154 	.word	0x20000154

08008ca8 <c_string_tr>:

static void c_string_tr(struct VM *vm, mrbc_value v[], int argc)
{
 8008ca8:	b590      	push	{r4, r7, lr}
 8008caa:	b08d      	sub	sp, #52	; 0x34
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup( vm, &v[0] );
 8008cb4:	f107 0320 	add.w	r3, r7, #32
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fb2c 	bl	800731a <mrbc_string_dup>
  SET_RETURN( ret );
 8008cc2:	f107 0410 	add.w	r4, r7, #16
 8008cc6:	f107 0320 	add.w	r3, r7, #32
 8008cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008cd0:	68b8      	ldr	r0, [r7, #8]
 8008cd2:	f7fe f9a1 	bl	8007018 <mrbc_decref>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	461c      	mov	r4, r3
 8008cda:	f107 0310 	add.w	r3, r7, #16
 8008cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  tr_main(vm, v, argc);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff4d 	bl	8008b88 <tr_main>
}
 8008cee:	bf00      	nop
 8008cf0:	3734      	adds	r7, #52	; 0x34
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd90      	pop	{r4, r7, pc}

08008cf6 <c_string_tr_self>:

//================================================================
/*! (method) tr!
*/
static void c_string_tr_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	607a      	str	r2, [r7, #4]
  int flag_changed = tr_main(vm, v, argc);
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff ff3e 	bl	8008b88 <tr_main>
 8008d0c:	6178      	str	r0, [r7, #20]

  if( !flag_changed ) {
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d105      	bne.n	8008d20 <c_string_tr_self+0x2a>
    SET_NIL_RETURN();
 8008d14:	68b8      	ldr	r0, [r7, #8]
 8008d16:	f7fe f97f 	bl	8007018 <mrbc_decref>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	701a      	strb	r2, [r3, #0]
  }
}
 8008d20:	bf00      	nop
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <c_string_start_with>:

//================================================================
/*! (method) start_with?
*/
static void c_string_start_with(struct VM *vm, mrbc_value v[], int argc)
{
 8008d28:	b5b0      	push	{r4, r5, r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  if( !(argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING)) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d105      	bne.n	8008d46 <c_string_start_with+0x1e>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3310      	adds	r3, #16
 8008d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8008d42:	2b0b      	cmp	r3, #11
 8008d44:	d005      	beq.n	8008d52 <c_string_start_with+0x2a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008d46:	2200      	movs	r2, #0
 8008d48:	4920      	ldr	r1, [pc, #128]	; (8008dcc <c_string_start_with+0xa4>)
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f002 fb5a 	bl	800b404 <mrbc_raise>
    return;
 8008d50:	e038      	b.n	8008dc4 <c_string_start_with+0x9c>
  }

  int ret;
  if( mrbc_string_size(&v[0]) < mrbc_string_size(&v[1]) ) {
 8008d52:	68b8      	ldr	r0, [r7, #8]
 8008d54:	f7fe f9be 	bl	80070d4 <mrbc_string_size>
 8008d58:	4604      	mov	r4, r0
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	3310      	adds	r3, #16
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe f9b8 	bl	80070d4 <mrbc_string_size>
 8008d64:	4603      	mov	r3, r0
 8008d66:	429c      	cmp	r4, r3
 8008d68:	da02      	bge.n	8008d70 <c_string_start_with+0x48>
    ret = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	e01b      	b.n	8008da8 <c_string_start_with+0x80>
  } else {
    ret = (memcmp( mrbc_string_cstr(&v[0]), mrbc_string_cstr(&v[1]),
 8008d70:	68b8      	ldr	r0, [r7, #8]
 8008d72:	f7fe f9bc 	bl	80070ee <mrbc_string_cstr>
 8008d76:	4604      	mov	r4, r0
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	3310      	adds	r3, #16
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe f9b6 	bl	80070ee <mrbc_string_cstr>
 8008d82:	4605      	mov	r5, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3310      	adds	r3, #16
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe f9a3 	bl	80070d4 <mrbc_string_size>
 8008d8e:	4603      	mov	r3, r0
    ret = (memcmp( mrbc_string_cstr(&v[0]), mrbc_string_cstr(&v[1]),
 8008d90:	461a      	mov	r2, r3
 8008d92:	4629      	mov	r1, r5
 8008d94:	4620      	mov	r0, r4
 8008d96:	f00d fc12 	bl	80165be <memcmp>
 8008d9a:	4603      	mov	r3, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bf0c      	ite	eq
 8008da0:	2301      	moveq	r3, #1
 8008da2:	2300      	movne	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
    ret = (memcmp( mrbc_string_cstr(&v[0]), mrbc_string_cstr(&v[1]),
 8008da6:	617b      	str	r3, [r7, #20]
  }

  SET_BOOL_RETURN(ret);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <c_string_start_with+0x8a>
 8008dae:	2303      	movs	r3, #3
 8008db0:	e000      	b.n	8008db4 <c_string_start_with+0x8c>
 8008db2:	2302      	movs	r3, #2
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	68b8      	ldr	r0, [r7, #8]
 8008db8:	f7fe f92e 	bl	8007018 <mrbc_decref>
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	b25a      	sxtb	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	701a      	strb	r2, [r3, #0]
}
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000154 	.word	0x20000154

08008dd0 <c_string_end_with>:

//================================================================
/*! (method) end_with?
*/
static void c_string_end_with(struct VM *vm, mrbc_value v[], int argc)
{
 8008dd0:	b5b0      	push	{r4, r5, r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  if( !(argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING)) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d105      	bne.n	8008dee <c_string_end_with+0x1e>
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	3310      	adds	r3, #16
 8008de6:	f993 3000 	ldrsb.w	r3, [r3]
 8008dea:	2b0b      	cmp	r3, #11
 8008dec:	d005      	beq.n	8008dfa <c_string_end_with+0x2a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008dee:	2200      	movs	r2, #0
 8008df0:	4922      	ldr	r1, [pc, #136]	; (8008e7c <c_string_end_with+0xac>)
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f002 fb06 	bl	800b404 <mrbc_raise>
    return;
 8008df8:	e03d      	b.n	8008e76 <c_string_end_with+0xa6>
  }

  int ret;
  int offset = mrbc_string_size(&v[0]) - mrbc_string_size(&v[1]);
 8008dfa:	68b8      	ldr	r0, [r7, #8]
 8008dfc:	f7fe f96a 	bl	80070d4 <mrbc_string_size>
 8008e00:	4604      	mov	r4, r0
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	3310      	adds	r3, #16
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe f964 	bl	80070d4 <mrbc_string_size>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	1ae3      	subs	r3, r4, r3
 8008e10:	61bb      	str	r3, [r7, #24]
  if( offset < 0 ) {
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	da02      	bge.n	8008e1e <c_string_end_with+0x4e>
    ret = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
 8008e1c:	e01d      	b.n	8008e5a <c_string_end_with+0x8a>
  } else {
    ret = (memcmp( mrbc_string_cstr(&v[0]) + offset, mrbc_string_cstr(&v[1]),
 8008e1e:	68b8      	ldr	r0, [r7, #8]
 8008e20:	f7fe f965 	bl	80070ee <mrbc_string_cstr>
 8008e24:	4602      	mov	r2, r0
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	18d4      	adds	r4, r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	3310      	adds	r3, #16
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe f95d 	bl	80070ee <mrbc_string_cstr>
 8008e34:	4605      	mov	r5, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3310      	adds	r3, #16
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe f94a 	bl	80070d4 <mrbc_string_size>
 8008e40:	4603      	mov	r3, r0
    ret = (memcmp( mrbc_string_cstr(&v[0]) + offset, mrbc_string_cstr(&v[1]),
 8008e42:	461a      	mov	r2, r3
 8008e44:	4629      	mov	r1, r5
 8008e46:	4620      	mov	r0, r4
 8008e48:	f00d fbb9 	bl	80165be <memcmp>
 8008e4c:	4603      	mov	r3, r0
		   mrbc_string_size(&v[1]) ) == 0);
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	bf0c      	ite	eq
 8008e52:	2301      	moveq	r3, #1
 8008e54:	2300      	movne	r3, #0
 8008e56:	b2db      	uxtb	r3, r3
    ret = (memcmp( mrbc_string_cstr(&v[0]) + offset, mrbc_string_cstr(&v[1]),
 8008e58:	61fb      	str	r3, [r7, #28]
  }

  SET_BOOL_RETURN(ret);
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <c_string_end_with+0x94>
 8008e60:	2303      	movs	r3, #3
 8008e62:	e000      	b.n	8008e66 <c_string_end_with+0x96>
 8008e64:	2302      	movs	r3, #2
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	68b8      	ldr	r0, [r7, #8]
 8008e6a:	f7fe f8d5 	bl	8007018 <mrbc_decref>
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	b25a      	sxtb	r2, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	701a      	strb	r2, [r3, #0]
}
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e7c:	20000154 	.word	0x20000154

08008e80 <c_string_include>:

//================================================================
/*! (method) include?
*/
static void c_string_include(struct VM *vm, mrbc_value v[], int argc)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  if( !(argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING)) {
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d105      	bne.n	8008e9e <c_string_include+0x1e>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	3310      	adds	r3, #16
 8008e96:	f993 3000 	ldrsb.w	r3, [r3]
 8008e9a:	2b0b      	cmp	r3, #11
 8008e9c:	d005      	beq.n	8008eaa <c_string_include+0x2a>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	490e      	ldr	r1, [pc, #56]	; (8008edc <c_string_include+0x5c>)
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f002 faae 	bl	800b404 <mrbc_raise>
    return;
 8008ea8:	e015      	b.n	8008ed6 <c_string_include+0x56>
  }

  int ret = mrbc_string_index( &v[0], &v[1], 0 );
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	3310      	adds	r3, #16
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	68b8      	ldr	r0, [r7, #8]
 8008eb4:	f7fe fb49 	bl	800754a <mrbc_string_index>
 8008eb8:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN(ret >= 0);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	db01      	blt.n	8008ec4 <c_string_include+0x44>
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e000      	b.n	8008ec6 <c_string_include+0x46>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	68b8      	ldr	r0, [r7, #8]
 8008eca:	f7fe f8a5 	bl	8007018 <mrbc_decref>
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	b25a      	sxtb	r2, r3
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	701a      	strb	r2, [r3, #0]
}
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000154 	.word	0x20000154

08008ee0 <c_string_bytes>:

//================================================================
/*! (method) bytes
*/
static void c_string_bytes(struct VM *vm, mrbc_value v[], int argc)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b093      	sub	sp, #76	; 0x4c
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  /*
   * Note: This String#bytes doesn't support taking a block parameter.
   *       Use String#each_byte instead.
   */
  int len = mrbc_string_size(&v[0]);
 8008eec:	68b8      	ldr	r0, [r7, #8]
 8008eee:	f7fe f8f1 	bl	80070d4 <mrbc_string_size>
 8008ef2:	6438      	str	r0, [r7, #64]	; 0x40
  mrbc_value ret = mrbc_array_new(vm, len);
 8008ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7f9 fa18 	bl	8002332 <mrbc_array_new>
  int i;
  for (i = 0; i < len; i++) {
 8008f02:	2300      	movs	r3, #0
 8008f04:	647b      	str	r3, [r7, #68]	; 0x44
 8008f06:	e01b      	b.n	8008f40 <c_string_bytes+0x60>
    mrbc_array_set(&ret, i, &mrbc_integer_value(v[0].string->data[i]));
 8008f08:	f107 0320 	add.w	r3, r7, #32
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	605a      	str	r2, [r3, #4]
 8008f12:	609a      	str	r2, [r3, #8]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	2304      	movs	r3, #4
 8008f18:	f887 3020 	strb.w	r3, [r7, #32]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f24:	4413      	add	r3, r2
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f2a:	f107 0220 	add.w	r2, r7, #32
 8008f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f9 fa93 	bl	8002460 <mrbc_array_set>
  for (i = 0; i < len; i++) {
 8008f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f44:	429a      	cmp	r2, r3
 8008f46:	dbdf      	blt.n	8008f08 <c_string_bytes+0x28>
  }
  SET_RETURN(ret);
 8008f48:	f107 0410 	add.w	r4, r7, #16
 8008f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f56:	68b8      	ldr	r0, [r7, #8]
 8008f58:	f7fe f85e 	bl	8007018 <mrbc_decref>
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	461c      	mov	r4, r3
 8008f60:	f107 0310 	add.w	r3, r7, #16
 8008f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008f6a:	bf00      	nop
 8008f6c:	374c      	adds	r7, #76	; 0x4c
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd90      	pop	{r4, r7, pc}

08008f72 <c_string_upcase>:

//================================================================
/*! (method) upcase
*/
static void c_string_upcase(struct VM *vm, mrbc_value v[], int argc)
{
 8008f72:	b590      	push	{r4, r7, lr}
 8008f74:	b08d      	sub	sp, #52	; 0x34
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008f7e:	f107 0320 	add.w	r3, r7, #32
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	68f9      	ldr	r1, [r7, #12]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe f9c7 	bl	800731a <mrbc_string_dup>
  mrbc_string_upcase(&ret);
 8008f8c:	f107 0320 	add.w	r3, r7, #32
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fbcf 	bl	8007734 <mrbc_string_upcase>
  SET_RETURN(ret);
 8008f96:	f107 0410 	add.w	r4, r7, #16
 8008f9a:	f107 0320 	add.w	r3, r7, #32
 8008f9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008fa4:	68b8      	ldr	r0, [r7, #8]
 8008fa6:	f7fe f837 	bl	8007018 <mrbc_decref>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	461c      	mov	r4, r3
 8008fae:	f107 0310 	add.w	r3, r7, #16
 8008fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8008fb8:	bf00      	nop
 8008fba:	3734      	adds	r7, #52	; 0x34
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd90      	pop	{r4, r7, pc}

08008fc0 <c_string_upcase_self>:

//================================================================
/*! (method) upcase!
*/
static void c_string_upcase_self(struct VM *vm, mrbc_value v[], int argc)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  if (mrbc_string_upcase(&v[0]) == 0) {
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f7fe fbb1 	bl	8007734 <mrbc_string_upcase>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d105      	bne.n	8008fe4 <c_string_upcase_self+0x24>
    SET_NIL_RETURN();
 8008fd8:	68b8      	ldr	r0, [r7, #8]
 8008fda:	f7fe f81d 	bl	8007018 <mrbc_decref>
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <c_string_downcase>:

//================================================================
/*! (method) downcase
*/
static void c_string_downcase(struct VM *vm, mrbc_value v[], int argc)
{
 8008fec:	b590      	push	{r4, r7, lr}
 8008fee:	b08d      	sub	sp, #52	; 0x34
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_string_dup(vm, &v[0]);
 8008ff8:	f107 0320 	add.w	r3, r7, #32
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe f98a 	bl	800731a <mrbc_string_dup>
  mrbc_string_downcase(&ret);
 8009006:	f107 0320 	add.w	r3, r7, #32
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fbc7 	bl	800779e <mrbc_string_downcase>
  SET_RETURN(ret);
 8009010:	f107 0410 	add.w	r4, r7, #16
 8009014:	f107 0320 	add.w	r3, r7, #32
 8009018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800901a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800901e:	68b8      	ldr	r0, [r7, #8]
 8009020:	f7fd fffa 	bl	8007018 <mrbc_decref>
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	461c      	mov	r4, r3
 8009028:	f107 0310 	add.w	r3, r7, #16
 800902c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800902e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009032:	bf00      	nop
 8009034:	3734      	adds	r7, #52	; 0x34
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}

0800903a <c_string_downcase_self>:

//================================================================
/*! (method) downcase!
*/
static void c_string_downcase_self(struct VM *vm, mrbc_value v[], int argc)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
  if (mrbc_string_downcase(&v[0]) == 0) {
 8009046:	68b8      	ldr	r0, [r7, #8]
 8009048:	f7fe fba9 	bl	800779e <mrbc_string_downcase>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <c_string_downcase_self+0x24>
    SET_NIL_RETURN();
 8009052:	68b8      	ldr	r0, [r7, #8]
 8009054:	f7fd ffe0 	bl	8007018 <mrbc_decref>
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2201      	movs	r2, #1
 800905c:	701a      	strb	r2, [r3, #0]
  }
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <mrbc_incref>:
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f993 3000 	ldrsb.w	r3, [r3]
 8009076:	2b07      	cmp	r3, #7
 8009078:	dd1e      	ble.n	80090b8 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	885b      	ldrh	r3, [r3, #2]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d106      	bne.n	8009092 <mrbc_incref+0x2a>
 8009084:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <mrbc_incref+0x58>)
 8009086:	4a0f      	ldr	r2, [pc, #60]	; (80090c4 <mrbc_incref+0x5c>)
 8009088:	f240 11c3 	movw	r1, #451	; 0x1c3
 800908c:	480e      	ldr	r0, [pc, #56]	; (80090c8 <mrbc_incref+0x60>)
 800908e:	f00c fa7f 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	885b      	ldrh	r3, [r3, #2]
 8009098:	2bff      	cmp	r3, #255	; 0xff
 800909a:	d106      	bne.n	80090aa <mrbc_incref+0x42>
 800909c:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <mrbc_incref+0x64>)
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <mrbc_incref+0x5c>)
 80090a0:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80090a4:	4808      	ldr	r0, [pc, #32]	; (80090c8 <mrbc_incref+0x60>)
 80090a6:	f00c fa73 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	885a      	ldrh	r2, [r3, #2]
 80090b0:	3201      	adds	r2, #1
 80090b2:	b292      	uxth	r2, r2
 80090b4:	805a      	strh	r2, [r3, #2]
 80090b6:	e000      	b.n	80090ba <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80090b8:	bf00      	nop
}
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	0801904c 	.word	0x0801904c
 80090c4:	0801ad98 	.word	0x0801ad98
 80090c8:	08019064 	.word	0x08019064
 80090cc:	08019080 	.word	0x08019080

080090d0 <mrbc_decref>:
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f993 3000 	ldrsb.w	r3, [r3]
 80090de:	2b07      	cmp	r3, #7
 80090e0:	dd2c      	ble.n	800913c <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	885b      	ldrh	r3, [r3, #2]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d106      	bne.n	80090fa <mrbc_decref+0x2a>
 80090ec:	4b16      	ldr	r3, [pc, #88]	; (8009148 <mrbc_decref+0x78>)
 80090ee:	4a17      	ldr	r2, [pc, #92]	; (800914c <mrbc_decref+0x7c>)
 80090f0:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80090f4:	4816      	ldr	r0, [pc, #88]	; (8009150 <mrbc_decref+0x80>)
 80090f6:	f00c fa4b 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	885b      	ldrh	r3, [r3, #2]
 8009100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009104:	4293      	cmp	r3, r2
 8009106:	d106      	bne.n	8009116 <mrbc_decref+0x46>
 8009108:	4b12      	ldr	r3, [pc, #72]	; (8009154 <mrbc_decref+0x84>)
 800910a:	4a10      	ldr	r2, [pc, #64]	; (800914c <mrbc_decref+0x7c>)
 800910c:	f240 11d3 	movw	r1, #467	; 0x1d3
 8009110:	480f      	ldr	r0, [pc, #60]	; (8009150 <mrbc_decref+0x80>)
 8009112:	f00c fa3d 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	885a      	ldrh	r2, [r3, #2]
 800911c:	3a01      	subs	r2, #1
 800911e:	b292      	uxth	r2, r2
 8009120:	805a      	strh	r2, [r3, #2]
 8009122:	885b      	ldrh	r3, [r3, #2]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10b      	bne.n	8009140 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f993 3000 	ldrsb.w	r3, [r3]
 800912e:	461a      	mov	r2, r3
 8009130:	4b09      	ldr	r3, [pc, #36]	; (8009158 <mrbc_decref+0x88>)
 8009132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
 800913a:	e002      	b.n	8009142 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800913c:	bf00      	nop
 800913e:	e000      	b.n	8009142 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 8009140:	bf00      	nop
}
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	0801904c 	.word	0x0801904c
 800914c:	0801adbc 	.word	0x0801adbc
 8009150:	08019064 	.word	0x08019064
 8009154:	0801909c 	.word	0x0801909c
 8009158:	0801bde8 	.word	0x0801bde8

0800915c <find_class_by_object>:
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f993 3000 	ldrsb.w	r3, [r3]
 800916a:	2b00      	cmp	r3, #0
 800916c:	da05      	bge.n	800917a <find_class_by_object+0x1e>
 800916e:	4b20      	ldr	r3, [pc, #128]	; (80091f0 <find_class_by_object+0x94>)
 8009170:	4a20      	ldr	r2, [pc, #128]	; (80091f4 <find_class_by_object+0x98>)
 8009172:	21bf      	movs	r1, #191	; 0xbf
 8009174:	4820      	ldr	r0, [pc, #128]	; (80091f8 <find_class_by_object+0x9c>)
 8009176:	f00c fa0b 	bl	8015590 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f993 3000 	ldrsb.w	r3, [r3]
 8009180:	2b0e      	cmp	r3, #14
 8009182:	dd05      	ble.n	8009190 <find_class_by_object+0x34>
 8009184:	4b1d      	ldr	r3, [pc, #116]	; (80091fc <find_class_by_object+0xa0>)
 8009186:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <find_class_by_object+0x98>)
 8009188:	21c0      	movs	r1, #192	; 0xc0
 800918a:	481b      	ldr	r0, [pc, #108]	; (80091f8 <find_class_by_object+0x9c>)
 800918c:	f00c fa00 	bl	8015590 <__assert_func>
  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f993 3000 	ldrsb.w	r3, [r3]
 8009196:	461a      	mov	r2, r3
 8009198:	4b19      	ldr	r3, [pc, #100]	; (8009200 <find_class_by_object+0xa4>)
 800919a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919e:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d11f      	bne.n	80091e6 <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f993 3000 	ldrsb.w	r3, [r3]
 80091ac:	2b0e      	cmp	r3, #14
 80091ae:	d00f      	beq.n	80091d0 <find_class_by_object+0x74>
 80091b0:	2b0e      	cmp	r3, #14
 80091b2:	dc12      	bgt.n	80091da <find_class_by_object+0x7e>
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	d002      	beq.n	80091be <find_class_by_object+0x62>
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d004      	beq.n	80091c6 <find_class_by_object+0x6a>
 80091bc:	e00d      	b.n	80091da <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e00f      	b.n	80091e6 <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e00a      	b.n	80091e6 <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e005      	b.n	80091e6 <find_class_by_object+0x8a>
      assert(!"Invalid value type.");
 80091da:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <find_class_by_object+0xa8>)
 80091dc:	4a05      	ldr	r2, [pc, #20]	; (80091f4 <find_class_by_object+0x98>)
 80091de:	21c9      	movs	r1, #201	; 0xc9
 80091e0:	4805      	ldr	r0, [pc, #20]	; (80091f8 <find_class_by_object+0x9c>)
 80091e2:	f00c f9d5 	bl	8015590 <__assert_func>
  return cls;
 80091e6:	68fb      	ldr	r3, [r7, #12]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	080190b8 	.word	0x080190b8
 80091f4:	0801ada4 	.word	0x0801ada4
 80091f8:	080190d0 	.word	0x080190d0
 80091fc:	080190ec 	.word	0x080190ec
 8009200:	0801ad44 	.word	0x0801ad44
 8009204:	08019110 	.word	0x08019110

08009208 <mrbc_define_class>:
  @param  name		class name.
  @param  super		super class.
  @return		pointer to defined class.
*/
mrbc_class * mrbc_define_class(struct VM *vm, const char *name, mrbc_class *super)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08c      	sub	sp, #48	; 0x30
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  mrbc_sym sym_id = mrbc_str_to_symid(name);
 8009214:	68b8      	ldr	r0, [r7, #8]
 8009216:	f004 fc57 	bl	800dac8 <mrbc_str_to_symid>
 800921a:	4603      	mov	r3, r0
 800921c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  if( sym_id < 0 ) {
 800921e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009222:	2b00      	cmp	r3, #0
 8009224:	da06      	bge.n	8009234 <mrbc_define_class+0x2c>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8009226:	4a29      	ldr	r2, [pc, #164]	; (80092cc <mrbc_define_class+0xc4>)
 8009228:	4929      	ldr	r1, [pc, #164]	; (80092d0 <mrbc_define_class+0xc8>)
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f002 f8ea 	bl	800b404 <mrbc_raise>
    return 0;
 8009230:	2300      	movs	r3, #0
 8009232:	e047      	b.n	80092c4 <mrbc_define_class+0xbc>
  }

  // already defined?
  const mrbc_value *val = mrbc_get_const(sym_id);
 8009234:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8009238:	4618      	mov	r0, r3
 800923a:	f002 fb23 	bl	800b884 <mrbc_get_const>
 800923e:	62b8      	str	r0, [r7, #40]	; 0x28
  if( val ) {
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00d      	beq.n	8009262 <mrbc_define_class+0x5a>
    if( mrbc_type(*val) != MRBC_TT_CLASS ) {
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	f993 3000 	ldrsb.w	r3, [r3]
 800924c:	2b07      	cmp	r3, #7
 800924e:	d005      	beq.n	800925c <mrbc_define_class+0x54>
      mrbc_raisef(vm, MRBC_CLASS(TypeError), "%s is not a class", name);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <mrbc_define_class+0xcc>)
 8009254:	4920      	ldr	r1, [pc, #128]	; (80092d8 <mrbc_define_class+0xd0>)
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f002 f928 	bl	800b4ac <mrbc_raisef>
    }
    return val->cls;
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	e030      	b.n	80092c4 <mrbc_define_class+0xbc>
  }

  // create a new class.
  mrbc_class *cls = mrbc_raw_alloc_no_free( sizeof(mrbc_class) );
 8009262:	2010      	movs	r0, #16
 8009264:	f7f8 fd7e 	bl	8001d64 <mrbc_raw_alloc_no_free>
 8009268:	6278      	str	r0, [r7, #36]	; 0x24
  if( !cls ) return cls;	// ENOMEM
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <mrbc_define_class+0x6c>
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	e027      	b.n	80092c4 <mrbc_define_class+0xbc>

  cls->sym_id = sym_id;
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009278:	801a      	strh	r2, [r3, #0]
  cls->num_builtin_method = 0;
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	2200      	movs	r2, #0
 800927e:	805a      	strh	r2, [r3, #2]
  cls->super = super ? super : mrbc_class_object;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <mrbc_define_class+0x82>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	e000      	b.n	800928c <mrbc_define_class+0x84>
 800928a:	4b14      	ldr	r3, [pc, #80]	; (80092dc <mrbc_define_class+0xd4>)
 800928c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928e:	6053      	str	r3, [r2, #4]
  cls->method_link = 0;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	2200      	movs	r2, #0
 8009294:	609a      	str	r2, [r3, #8]
#if defined(MRBC_DEBUG)
  cls->name = name;
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	60da      	str	r2, [r3, #12]
#endif

  // register to global constant
  mrbc_set_const( sym_id, &(mrbc_value){.tt = MRBC_TT_CLASS, .cls = cls});
 800929c:	f107 0310 	add.w	r3, r7, #16
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	609a      	str	r2, [r3, #8]
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	2307      	movs	r3, #7
 80092ac:	743b      	strb	r3, [r7, #16]
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	f107 0210 	add.w	r2, r7, #16
 80092b6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f002 fa99 	bl	800b7f4 <mrbc_set_const>

  return cls;
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3730      	adds	r7, #48	; 0x30
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	08019128 	.word	0x08019128
 80092d0:	2000010c 	.word	0x2000010c
 80092d4:	08019144 	.word	0x08019144
 80092d8:	200001b4 	.word	0x200001b4
 80092dc:	20000064 	.word	0x20000064

080092e0 <mrbc_define_class_under>:
  @param  name		class name.
  @param  super		super class.
  @return		pointer to defined class.
*/
mrbc_class * mrbc_define_class_under(struct VM *vm, const mrbc_class *outer, const char *name, mrbc_class *super)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b094      	sub	sp, #80	; 0x50
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
  mrbc_sym sym_id = mrbc_str_to_symid(name);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f004 fbea 	bl	800dac8 <mrbc_str_to_symid>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  if( sym_id < 0 ) {
 80092fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80092fe:	2b00      	cmp	r3, #0
 8009300:	da06      	bge.n	8009310 <mrbc_define_class_under+0x30>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8009302:	4a33      	ldr	r2, [pc, #204]	; (80093d0 <mrbc_define_class_under+0xf0>)
 8009304:	4933      	ldr	r1, [pc, #204]	; (80093d4 <mrbc_define_class_under+0xf4>)
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f002 f87c 	bl	800b404 <mrbc_raise>
    return 0;
 800930c:	2300      	movs	r3, #0
 800930e:	e05b      	b.n	80093c8 <mrbc_define_class_under+0xe8>
  }

  // already defined?
  const mrbc_value *val = mrbc_get_class_const( outer, sym_id );
 8009310:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009314:	4619      	mov	r1, r3
 8009316:	68b8      	ldr	r0, [r7, #8]
 8009318:	f002 fac6 	bl	800b8a8 <mrbc_get_class_const>
 800931c:	64b8      	str	r0, [r7, #72]	; 0x48
  if( val ) {
 800931e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00d      	beq.n	8009340 <mrbc_define_class_under+0x60>
    assert( mrbc_type(*val) == MRBC_TT_CLASS );
 8009324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009326:	f993 3000 	ldrsb.w	r3, [r3]
 800932a:	2b07      	cmp	r3, #7
 800932c:	d005      	beq.n	800933a <mrbc_define_class_under+0x5a>
 800932e:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <mrbc_define_class_under+0xf8>)
 8009330:	4a2a      	ldr	r2, [pc, #168]	; (80093dc <mrbc_define_class_under+0xfc>)
 8009332:	2188      	movs	r1, #136	; 0x88
 8009334:	482a      	ldr	r0, [pc, #168]	; (80093e0 <mrbc_define_class_under+0x100>)
 8009336:	f00c f92b 	bl	8015590 <__assert_func>
    return val->cls;
 800933a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	e043      	b.n	80093c8 <mrbc_define_class_under+0xe8>
  }

  // create a new nested class.
  mrbc_class *cls = mrbc_raw_alloc_no_free( sizeof(mrbc_class) );
 8009340:	2010      	movs	r0, #16
 8009342:	f7f8 fd0f 	bl	8001d64 <mrbc_raw_alloc_no_free>
 8009346:	6478      	str	r0, [r7, #68]	; 0x44
  if( !cls ) return cls;	// ENOMEM
 8009348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <mrbc_define_class_under+0x72>
 800934e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009350:	e03a      	b.n	80093c8 <mrbc_define_class_under+0xe8>

  char buf[sizeof(mrbc_sym)*4+1];
  make_nested_symbol_s( buf, outer->sym_id, sym_id );
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f9b3 1000 	ldrsh.w	r1, [r3]
 8009358:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800935c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009360:	4618      	mov	r0, r3
 8009362:	f004 fc49 	bl	800dbf8 <make_nested_symbol_s>

  cls->sym_id = mrbc_symbol( mrbc_symbol_new( vm, buf ));
 8009366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800936a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	4618      	mov	r0, r3
 8009372:	f004 fd0f 	bl	800dd94 <mrbc_symbol_new>
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	b21a      	sxth	r2, r3
 800937a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937c:	801a      	strh	r2, [r3, #0]
  cls->num_builtin_method = 0;
 800937e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009380:	2200      	movs	r2, #0
 8009382:	805a      	strh	r2, [r3, #2]
  cls->super = super ? super : mrbc_class_object;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <mrbc_define_class_under+0xae>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	e000      	b.n	8009390 <mrbc_define_class_under+0xb0>
 800938e:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <mrbc_define_class_under+0x104>)
 8009390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009392:	6053      	str	r3, [r2, #4]
  cls->method_link = 0;
 8009394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009396:	2200      	movs	r2, #0
 8009398:	609a      	str	r2, [r3, #8]
#if defined(MRBC_DEBUG)
  cls->name = name;
 800939a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	60da      	str	r2, [r3, #12]
#endif

  mrbc_set_class_const( outer, sym_id,
			&(mrbc_value){.tt = MRBC_TT_CLASS, .cls = cls});
 80093a0:	f107 0310 	add.w	r3, r7, #16
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	605a      	str	r2, [r3, #4]
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	60da      	str	r2, [r3, #12]
 80093ae:	2307      	movs	r3, #7
 80093b0:	743b      	strb	r3, [r7, #16]
 80093b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093b4:	61bb      	str	r3, [r7, #24]
  mrbc_set_class_const( outer, sym_id,
 80093b6:	f107 0210 	add.w	r2, r7, #16
 80093ba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80093be:	4619      	mov	r1, r3
 80093c0:	68b8      	ldr	r0, [r7, #8]
 80093c2:	f002 fa39 	bl	800b838 <mrbc_set_class_const>

  return cls;
 80093c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3750      	adds	r7, #80	; 0x50
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	08019128 	.word	0x08019128
 80093d4:	2000010c 	.word	0x2000010c
 80093d8:	08019158 	.word	0x08019158
 80093dc:	0801ad80 	.word	0x0801ad80
 80093e0:	0801917c 	.word	0x0801917c
 80093e4:	20000064 	.word	0x20000064

080093e8 <mrbc_define_method>:
  @param  cls		pointer to class.
  @param  name		method name.
  @param  cfunc		pointer to function.
*/
void mrbc_define_method(struct VM *vm, mrbc_class *cls, const char *name, mrbc_func_t cfunc)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
  if( cls == NULL ) cls = mrbc_class_object;	// set default to Object.
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <mrbc_define_method+0x18>
 80093fc:	4b17      	ldr	r3, [pc, #92]	; (800945c <mrbc_define_method+0x74>)
 80093fe:	60bb      	str	r3, [r7, #8]

  mrbc_method *method = mrbc_raw_alloc_no_free( sizeof(mrbc_method) );
 8009400:	200c      	movs	r0, #12
 8009402:	f7f8 fcaf 	bl	8001d64 <mrbc_raw_alloc_no_free>
 8009406:	6178      	str	r0, [r7, #20]
  if( !method ) return; // ENOMEM
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d021      	beq.n	8009452 <mrbc_define_method+0x6a>

  method->type = 'm';
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	226d      	movs	r2, #109	; 0x6d
 8009412:	701a      	strb	r2, [r3, #0]
  method->c_func = 1;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2201      	movs	r2, #1
 8009418:	705a      	strb	r2, [r3, #1]
  method->sym_id = mrbc_str_to_symid( name );
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f004 fb54 	bl	800dac8 <mrbc_str_to_symid>
 8009420:	4603      	mov	r3, r0
 8009422:	461a      	mov	r2, r3
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	805a      	strh	r2, [r3, #2]
  if( method->sym_id < 0 ) {
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da04      	bge.n	800943c <mrbc_define_method+0x54>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8009432:	4a0b      	ldr	r2, [pc, #44]	; (8009460 <mrbc_define_method+0x78>)
 8009434:	490b      	ldr	r1, [pc, #44]	; (8009464 <mrbc_define_method+0x7c>)
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f001 ffe4 	bl	800b404 <mrbc_raise>
  }
  method->func = cfunc;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	605a      	str	r2, [r3, #4]
  method->next = cls->method_link;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	609a      	str	r2, [r3, #8]
  cls->method_link = method;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	609a      	str	r2, [r3, #8]
 8009450:	e000      	b.n	8009454 <mrbc_define_method+0x6c>
  if( !method ) return; // ENOMEM
 8009452:	bf00      	nop
}
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000064 	.word	0x20000064
 8009460:	08019128 	.word	0x08019128
 8009464:	2000010c 	.word	0x2000010c

08009468 <mrbc_instance_new>:
  @param  cls	Pointer to Class (mrbc_class).
  @param  size	size of additional data.
  @return       mrbc_instance object.
*/
mrbc_value mrbc_instance_new(struct VM *vm, mrbc_class *cls, int size)
{
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b089      	sub	sp, #36	; 0x24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
  mrbc_value v = {.tt = MRBC_TT_OBJECT};
 8009476:	f107 0310 	add.w	r3, r7, #16
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	605a      	str	r2, [r3, #4]
 8009480:	609a      	str	r2, [r3, #8]
 8009482:	60da      	str	r2, [r3, #12]
 8009484:	2308      	movs	r3, #8
 8009486:	743b      	strb	r3, [r7, #16]
  v.instance = mrbc_alloc(vm, sizeof(mrbc_instance) + size);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	3310      	adds	r3, #16
 800948c:	4618      	mov	r0, r3
 800948e:	f7f8 fb09 	bl	8001aa4 <mrbc_raw_alloc>
 8009492:	4603      	mov	r3, r0
 8009494:	61bb      	str	r3, [r7, #24]
  if( v.instance == NULL ) return v;	// ENOMEM
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d107      	bne.n	80094ac <mrbc_instance_new+0x44>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	461c      	mov	r4, r3
 80094a0:	f107 0310 	add.w	r3, r7, #16
 80094a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80094aa:	e02a      	b.n	8009502 <mrbc_instance_new+0x9a>

  if( mrbc_kv_init_handle(vm, &v.instance->ivar, 0) != 0 ) {
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	3308      	adds	r3, #8
 80094b0:	2200      	movs	r2, #0
 80094b2:	4619      	mov	r1, r3
 80094b4:	68b8      	ldr	r0, [r7, #8]
 80094b6:	f002 fb85 	bl	800bbc4 <mrbc_kv_init_handle>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00d      	beq.n	80094dc <mrbc_instance_new+0x74>
    mrbc_raw_free(v.instance);
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f8 fcca 	bl	8001e5c <mrbc_raw_free>
    v.instance = NULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61bb      	str	r3, [r7, #24]
    return v;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	461c      	mov	r4, r3
 80094d0:	f107 0310 	add.w	r3, r7, #16
 80094d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80094da:	e012      	b.n	8009502 <mrbc_instance_new+0x9a>
  }

  MRBC_INIT_OBJECT_HEADER( v.instance, "IN" );
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	2201      	movs	r2, #1
 80094e0:	805a      	strh	r2, [r3, #2]
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	2249      	movs	r2, #73	; 0x49
 80094e6:	701a      	strb	r2, [r3, #0]
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	224e      	movs	r2, #78	; 0x4e
 80094ec:	705a      	strb	r2, [r3, #1]
  v.instance->cls = cls;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	605a      	str	r2, [r3, #4]

  return v;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	461c      	mov	r4, r3
 80094f8:	f107 0310 	add.w	r3, r7, #16
 80094fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	3724      	adds	r7, #36	; 0x24
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}

0800950a <mrbc_instance_delete>:
/*! instance destructor

  @param  v	pointer to target value
*/
void mrbc_instance_delete(mrbc_value *v)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  mrbc_kv_delete_data( &v->instance->ivar );
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	3308      	adds	r3, #8
 8009518:	4618      	mov	r0, r3
 800951a:	f002 fb87 	bl	800bc2c <mrbc_kv_delete_data>
  mrbc_raw_free( v->instance );
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	4618      	mov	r0, r3
 8009524:	f7f8 fc9a 	bl	8001e5c <mrbc_raw_free>
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <mrbc_instance_setiv>:
  @param  obj		pointer to target.
  @param  sym_id	key symbol ID.
  @param  v		pointer to value.
*/
void mrbc_instance_setiv(mrbc_value *obj, mrbc_sym sym_id, mrbc_value *v)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	460b      	mov	r3, r1
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	817b      	strh	r3, [r7, #10]
  mrbc_incref(v);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7ff fd92 	bl	8009068 <mrbc_incref>
  mrbc_kv_set( &obj->instance->ivar, sym_id, v );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	3308      	adds	r3, #8
 800954a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4618      	mov	r0, r3
 8009552:	f002 fba5 	bl	800bca0 <mrbc_kv_set>
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <mrbc_instance_getiv>:
  @param  obj		pointer to target.
  @param  sym_id	key symbol ID.
  @return		value.
*/
mrbc_value mrbc_instance_getiv(mrbc_value *obj, mrbc_sym sym_id)
{
 800955e:	b590      	push	{r4, r7, lr}
 8009560:	b08b      	sub	sp, #44	; 0x2c
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	4613      	mov	r3, r2
 800956a:	80fb      	strh	r3, [r7, #6]
  mrbc_value *v = mrbc_kv_get( &obj->instance->ivar, sym_id );
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	3308      	adds	r3, #8
 8009572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f002 fc5d 	bl	800be38 <mrbc_kv_get>
 800957e:	6278      	str	r0, [r7, #36]	; 0x24
  if( !v ) return mrbc_nil_value();
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <mrbc_instance_getiv+0x3e>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	461a      	mov	r2, r3
 800958a:	2300      	movs	r3, #0
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	6053      	str	r3, [r2, #4]
 8009590:	6093      	str	r3, [r2, #8]
 8009592:	60d3      	str	r3, [r2, #12]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2201      	movs	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]

  mrbc_incref(v);
  return *v;
}
 800959a:	e008      	b.n	80095ae <mrbc_instance_getiv+0x50>
  mrbc_incref(v);
 800959c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800959e:	f7ff fd63 	bl	8009068 <mrbc_incref>
  return *v;
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	4614      	mov	r4, r2
 80095a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	372c      	adds	r7, #44	; 0x2c
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd90      	pop	{r4, r7, pc}

080095b6 <mrbc_proc_new>:
  @param  vm		Pointer to VM.
  @param  irep		Pointer to IREP.
  @return		mrbc_value of Proc object.
*/
mrbc_value mrbc_proc_new(struct VM *vm, void *irep)
{
 80095b6:	b590      	push	{r4, r7, lr}
 80095b8:	b089      	sub	sp, #36	; 0x24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
  mrbc_value val = {.tt = MRBC_TT_PROC};
 80095c2:	f107 0310 	add.w	r3, r7, #16
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	605a      	str	r2, [r3, #4]
 80095cc:	609a      	str	r2, [r3, #8]
 80095ce:	60da      	str	r2, [r3, #12]
 80095d0:	2309      	movs	r3, #9
 80095d2:	743b      	strb	r3, [r7, #16]

  val.proc = mrbc_alloc(vm, sizeof(mrbc_proc));
 80095d4:	2020      	movs	r0, #32
 80095d6:	f7f8 fa65 	bl	8001aa4 <mrbc_raw_alloc>
 80095da:	4603      	mov	r3, r0
 80095dc:	61bb      	str	r3, [r7, #24]
  if( !val.proc ) return val;	// ENOMEM
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <mrbc_proc_new+0x3e>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	461c      	mov	r4, r3
 80095e8:	f107 0310 	add.w	r3, r7, #16
 80095ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80095f2:	e027      	b.n	8009644 <mrbc_proc_new+0x8e>

  MRBC_INIT_OBJECT_HEADER( val.proc, "PR" );
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	2201      	movs	r2, #1
 80095f8:	805a      	strh	r2, [r3, #2]
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2250      	movs	r2, #80	; 0x50
 80095fe:	701a      	strb	r2, [r3, #0]
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2252      	movs	r2, #82	; 0x52
 8009604:	705a      	strb	r2, [r3, #1]
  val.proc->callinfo = vm->callinfo_tail;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	69d2      	ldr	r2, [r2, #28]
 800960c:	605a      	str	r2, [r3, #4]

  if( mrbc_type(vm->cur_regs[0]) == MRBC_TT_PROC ) {
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f993 3000 	ldrsb.w	r3, [r3]
 8009616:	2b09      	cmp	r3, #9
 8009618:	d106      	bne.n	8009628 <mrbc_proc_new+0x72>
    val.proc->callinfo_self = vm->cur_regs[0].proc->callinfo_self;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	6892      	ldr	r2, [r2, #8]
 8009624:	609a      	str	r2, [r3, #8]
 8009626:	e003      	b.n	8009630 <mrbc_proc_new+0x7a>
  } else {
    val.proc->callinfo_self = vm->callinfo_tail;
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	69d2      	ldr	r2, [r2, #28]
 800962e:	609a      	str	r2, [r3, #8]
  }

  val.proc->irep = irep;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	60da      	str	r2, [r3, #12]

  return val;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	461c      	mov	r4, r3
 800963a:	f107 0310 	add.w	r3, r7, #16
 800963e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	3724      	adds	r7, #36	; 0x24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd90      	pop	{r4, r7, pc}

0800964c <mrbc_proc_delete>:
/*! proc destructor

  @param  val	pointer to target value
*/
void mrbc_proc_delete(mrbc_value *val)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  mrbc_raw_free(val->proc);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4618      	mov	r0, r3
 800965a:	f7f8 fbff 	bl	8001e5c <mrbc_raw_free>
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <mrbc_obj_is_kind_of>:
  @param  obj	target object
  @param  cls	class
  @return	result
*/
int mrbc_obj_is_kind_of( const mrbc_value *obj, const mrbc_class *cls )
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  const mrbc_class *c = find_class_by_object( obj );
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff fd73 	bl	800915c <find_class_by_object>
 8009676:	60f8      	str	r0, [r7, #12]
  while( c != NULL ) {
 8009678:	e008      	b.n	800968c <mrbc_obj_is_kind_of+0x26>
    if( c == cls ) return 1;
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d101      	bne.n	8009686 <mrbc_obj_is_kind_of+0x20>
 8009682:	2301      	movs	r3, #1
 8009684:	e006      	b.n	8009694 <mrbc_obj_is_kind_of+0x2e>
    c = c->super;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	60fb      	str	r3, [r7, #12]
  while( c != NULL ) {
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1f3      	bne.n	800967a <mrbc_obj_is_kind_of+0x14>
  }

  return 0;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <mrbc_find_method>:
  @param  cls		search class.
  @param  sym_id	symbol id.
  @return		pointer to method or NULL.
*/
mrbc_method * mrbc_find_method( mrbc_method *r_method, mrbc_class *cls, mrbc_sym sym_id )
{
 800969c:	b480      	push	{r7}
 800969e:	b08d      	sub	sp, #52	; 0x34
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
  do {
    mrbc_method *method;
    for( method = cls->method_link; method != 0; method = method->next ) {
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096b0:	e013      	b.n	80096da <mrbc_find_method+0x3e>
      if( method->sym_id == sym_id ) {
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d109      	bne.n	80096d4 <mrbc_find_method+0x38>
	*r_method = *method;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80096c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	r_method->cls = cls;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	609a      	str	r2, [r3, #8]
	return r_method;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	e058      	b.n	8009786 <mrbc_find_method+0xea>
    for( method = cls->method_link; method != 0; method = method->next ) {
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e8      	bne.n	80096b2 <mrbc_find_method+0x16>
      }
    }

    struct RBuiltinClass *c = (struct RBuiltinClass *)cls;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	623b      	str	r3, [r7, #32]
    int right = c->num_builtin_method;
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80096ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if( right == 0 ) goto NEXT;
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d03f      	beq.n	8009772 <mrbc_find_method+0xd6>
    int left = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24

    while( left < right ) {
 80096f6:	e017      	b.n	8009728 <mrbc_find_method+0x8c>
      int mid = (left + right) / 2;
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	4413      	add	r3, r2
 80096fe:	0fda      	lsrs	r2, r3, #31
 8009700:	4413      	add	r3, r2
 8009702:	105b      	asrs	r3, r3, #1
 8009704:	61fb      	str	r3, [r7, #28]
      if( c->method_symbols[mid] < sym_id ) {
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	691a      	ldr	r2, [r3, #16]
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4413      	add	r3, r2
 8009710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009714:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009718:	429a      	cmp	r2, r3
 800971a:	dd03      	ble.n	8009724 <mrbc_find_method+0x88>
	left = mid + 1;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	3301      	adds	r3, #1
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
 8009722:	e001      	b.n	8009728 <mrbc_find_method+0x8c>
      } else {
	right = mid;
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	62bb      	str	r3, [r7, #40]	; 0x28
    while( left < right ) {
 8009728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	429a      	cmp	r2, r3
 800972e:	dbe3      	blt.n	80096f8 <mrbc_find_method+0x5c>
      }
    }

    if( c->method_symbols[right] == sym_id ) {
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	4413      	add	r3, r2
 800973a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800973e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009742:	429a      	cmp	r2, r3
 8009744:	d117      	bne.n	8009776 <mrbc_find_method+0xda>
      *r_method = (mrbc_method){
	.type = 'm',
	.c_func = 2,
	.sym_id = sym_id,
	.func = c->method_functions[right],
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	695a      	ldr	r2, [r3, #20]
 800974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	681a      	ldr	r2, [r3, #0]
      *r_method = (mrbc_method){
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	216d      	movs	r1, #109	; 0x6d
 8009756:	7019      	strb	r1, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2102      	movs	r1, #2
 800975c:	7059      	strb	r1, [r3, #1]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	88f9      	ldrh	r1, [r7, #6]
 8009762:	8059      	strh	r1, [r3, #2]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	609a      	str	r2, [r3, #8]
	.cls = cls };
      return r_method;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	e009      	b.n	8009786 <mrbc_find_method+0xea>
    if( right == 0 ) goto NEXT;
 8009772:	bf00      	nop
 8009774:	e000      	b.n	8009778 <mrbc_find_method+0xdc>
    }

  NEXT:
 8009776:	bf00      	nop
    cls = cls->super;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	60bb      	str	r3, [r7, #8]
  } while( cls != 0 );
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d192      	bne.n	80096aa <mrbc_find_method+0xe>

  return 0;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3734      	adds	r7, #52	; 0x34
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <mrbc_get_class_by_name>:

  @param  name		class name.
  @return		pointer to class object.
*/
mrbc_class * mrbc_get_class_by_name( const char *name )
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  mrbc_sym sym_id = mrbc_search_symid(name);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f004 fa00 	bl	800dba0 <mrbc_search_symid>
 80097a0:	4603      	mov	r3, r0
 80097a2:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) return NULL;
 80097a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da01      	bge.n	80097b0 <mrbc_get_class_by_name+0x1e>
 80097ac:	2300      	movs	r3, #0
 80097ae:	e013      	b.n	80097d8 <mrbc_get_class_by_name+0x46>

  mrbc_value *obj = mrbc_get_const(sym_id);
 80097b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f002 f865 	bl	800b884 <mrbc_get_const>
 80097ba:	60b8      	str	r0, [r7, #8]
  if( obj == NULL ) return NULL;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <mrbc_get_class_by_name+0x34>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e008      	b.n	80097d8 <mrbc_get_class_by_name+0x46>
  if( mrbc_type(*obj) != MRBC_TT_CLASS ) return NULL;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f993 3000 	ldrsb.w	r3, [r3]
 80097cc:	2b07      	cmp	r3, #7
 80097ce:	d001      	beq.n	80097d4 <mrbc_get_class_by_name+0x42>
 80097d0:	2300      	movs	r3, #0
 80097d2:	e001      	b.n	80097d8 <mrbc_get_class_by_name+0x46>

  return obj->cls;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	689b      	ldr	r3, [r3, #8]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <mrbc_send>:
    SET_RETURN(ret);
  }
 */
mrbc_value mrbc_send( struct VM *vm, mrbc_value *v, int reg_ofs,
		     mrbc_value *recv, const char *method_name, int argc, ... )
{
 80097e0:	b590      	push	{r4, r7, lr}
 80097e2:	b097      	sub	sp, #92	; 0x5c
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
  mrbc_method method;

  if( mrbc_find_method( &method, find_class_by_object(recv),
 80097ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80097f0:	f7ff fcb4 	bl	800915c <find_class_by_object>
 80097f4:	4604      	mov	r4, r0
 80097f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80097f8:	f004 f966 	bl	800dac8 <mrbc_str_to_symid>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009804:	4621      	mov	r1, r4
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff ff48 	bl	800969c <mrbc_find_method>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d108      	bne.n	8009824 <mrbc_send+0x44>
			mrbc_str_to_symid(method_name) ) == 0 ) {
    mrbc_printf("No method. vtype=%d method='%s'\n", mrbc_type(*recv), method_name );
 8009812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009814:	f993 3000 	ldrsb.w	r3, [r3]
 8009818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800981a:	4619      	mov	r1, r3
 800981c:	4840      	ldr	r0, [pc, #256]	; (8009920 <mrbc_send+0x140>)
 800981e:	f000 fc81 	bl	800a124 <mrbc_printf>
    goto ERROR;
 8009822:	e06e      	b.n	8009902 <mrbc_send+0x122>
  }
  if( !method.c_func ) {
 8009824:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8009828:	2b00      	cmp	r3, #0
 800982a:	d104      	bne.n	8009836 <mrbc_send+0x56>
    mrbc_printf("Method %s needs to be C function.\n", method_name );
 800982c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800982e:	483d      	ldr	r0, [pc, #244]	; (8009924 <mrbc_send+0x144>)
 8009830:	f000 fc78 	bl	800a124 <mrbc_printf>
    goto ERROR;
 8009834:	e065      	b.n	8009902 <mrbc_send+0x122>
  }

  // create call stack.
  mrbc_value *regs = v + reg_ofs + 2;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	3302      	adds	r3, #2
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4413      	add	r3, r2
 8009840:	653b      	str	r3, [r7, #80]	; 0x50
  mrbc_decref( &regs[0] );
 8009842:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009844:	f7ff fc44 	bl	80090d0 <mrbc_decref>
  regs[0] = *recv;
 8009848:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800984a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800984c:	4614      	mov	r4, r2
 800984e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref(recv);
 8009854:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009856:	f7ff fc07 	bl	8009068 <mrbc_incref>

  va_list ap;
  va_start(ap, argc);
 800985a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800985e:	643b      	str	r3, [r7, #64]	; 0x40
  int i;
  for( i = 1; i <= argc; i++ ) {
 8009860:	2301      	movs	r3, #1
 8009862:	657b      	str	r3, [r7, #84]	; 0x54
 8009864:	e016      	b.n	8009894 <mrbc_send+0xb4>
    mrbc_decref( &regs[i] );
 8009866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800986c:	4413      	add	r3, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff fc2e 	bl	80090d0 <mrbc_decref>
    regs[i] = *va_arg(ap, mrbc_value *);
 8009874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009876:	1d1a      	adds	r2, r3, #4
 8009878:	643a      	str	r2, [r7, #64]	; 0x40
 800987a:	6819      	ldr	r1, [r3, #0]
 800987c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009882:	4413      	add	r3, r2
 8009884:	461c      	mov	r4, r3
 8009886:	460b      	mov	r3, r1
 8009888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800988a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for( i = 1; i <= argc; i++ ) {
 800988e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009890:	3301      	adds	r3, #1
 8009892:	657b      	str	r3, [r7, #84]	; 0x54
 8009894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009898:	429a      	cmp	r2, r3
 800989a:	dde4      	ble.n	8009866 <mrbc_send+0x86>
  }
  mrbc_decref( &regs[i] );
 800989c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098a2:	4413      	add	r3, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fc13 	bl	80090d0 <mrbc_decref>
  regs[i] = mrbc_nil_value();
 80098aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098b0:	18d1      	adds	r1, r2, r3
 80098b2:	460a      	mov	r2, r1
 80098b4:	2300      	movs	r3, #0
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	6053      	str	r3, [r2, #4]
 80098ba:	6093      	str	r3, [r2, #8]
 80098bc:	60d3      	str	r3, [r2, #12]
 80098be:	2301      	movs	r3, #1
 80098c0:	700b      	strb	r3, [r1, #0]
  va_end(ap);

  // call method.
  method.func(vm, regs, argc);
 80098c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098c8:	68b8      	ldr	r0, [r7, #8]
 80098ca:	4798      	blx	r3
  mrbc_value ret = regs[0];
 80098cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ce:	f107 0420 	add.w	r4, r7, #32
 80098d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(; i >= 0; i-- ) {
 80098d8:	e008      	b.n	80098ec <mrbc_send+0x10c>
    regs[i].tt = MRBC_TT_EMPTY;
 80098da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098e0:	4413      	add	r3, r2
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
  for(; i >= 0; i-- ) {
 80098e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e8:	3b01      	subs	r3, #1
 80098ea:	657b      	str	r3, [r7, #84]	; 0x54
 80098ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	daf3      	bge.n	80098da <mrbc_send+0xfa>
  }

  return ret;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	461c      	mov	r4, r3
 80098f6:	f107 0320 	add.w	r3, r7, #32
 80098fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009900:	e009      	b.n	8009916 <mrbc_send+0x136>

 ERROR:
  return mrbc_nil_value();
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	461a      	mov	r2, r3
 8009906:	2300      	movs	r3, #0
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	6053      	str	r3, [r2, #4]
 800990c:	6093      	str	r3, [r2, #8]
 800990e:	60d3      	str	r3, [r2, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
}
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	375c      	adds	r7, #92	; 0x5c
 800991a:	46bd      	mov	sp, r7
 800991c:	bd90      	pop	{r4, r7, pc}
 800991e:	bf00      	nop
 8009920:	08019198 	.word	0x08019198
 8009924:	080191bc 	.word	0x080191bc

08009928 <c_ineffect>:

//================================================================
/*! (method) Ineffect operator / method
*/
void c_ineffect(struct VM *vm, mrbc_value v[], int argc)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  // nothing to do.
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <mrbc_run_mrblib>:

  @param  bytecode	bytecode (.mrb file)
  @return		dummy yet.
*/
int mrbc_run_mrblib(const void *bytecode)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  // instead of mrbc_vm_open()
  mrbc_vm *vm = mrbc_vm_new( MAX_REGS_SIZE );
 8009948:	206e      	movs	r0, #110	; 0x6e
 800994a:	f005 f937 	bl	800ebbc <mrbc_vm_new>
 800994e:	60f8      	str	r0, [r7, #12]
  if( !vm ) return -1;	// ENOMEM
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <mrbc_run_mrblib+0x1c>
 8009956:	f04f 33ff 	mov.w	r3, #4294967295
 800995a:	e023      	b.n	80099a4 <mrbc_run_mrblib+0x64>

  if( mrbc_load_mrb(vm, bytecode) ) {
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f002 fd56 	bl	800c410 <mrbc_load_mrb>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d006      	beq.n	8009978 <mrbc_run_mrblib+0x38>
    mrbc_print_exception(&vm->exception);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3328      	adds	r3, #40	; 0x28
 800996e:	4618      	mov	r0, r3
 8009970:	f001 fe08 	bl	800b584 <mrbc_print_exception>
    return 2;
 8009974:	2302      	movs	r3, #2
 8009976:	e015      	b.n	80099a4 <mrbc_run_mrblib+0x64>
  }

  int ret;

  mrbc_vm_begin(vm);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f005 f9df 	bl	800ed3c <mrbc_vm_begin>
  do {
    ret = mrbc_vm_run(vm);
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f009 fa3c 	bl	8012dfc <mrbc_vm_run>
 8009984:	60b8      	str	r0, [r7, #8]
  } while( ret == 0 );
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0f8      	beq.n	800997e <mrbc_run_mrblib+0x3e>
  mrbc_vm_end(vm);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f005 fa39 	bl	800ee04 <mrbc_vm_end>

  // instead of mrbc_vm_close()
  mrbc_raw_free( vm->top_irep );	// free only top-level mrbc_irep.
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	4618      	mov	r0, r3
 8009998:	f7f8 fa60 	bl	8001e5c <mrbc_raw_free>
					// (no need to free child ireps.)
  mrbc_raw_free( vm );
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7f8 fa5d 	bl	8001e5c <mrbc_raw_free>

  return ret;
 80099a2:	68bb      	ldr	r3, [r7, #8]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <mrbc_init_class>:

//================================================================
/*! initialize all classes.
 */
void mrbc_init_class(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
  extern const uint8_t mrblib_bytecode[];
  void mrbc_init_class_math(void);
  mrbc_value cls = {.tt = MRBC_TT_CLASS};
 80099b2:	463b      	mov	r3, r7
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	605a      	str	r2, [r3, #4]
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	60da      	str	r2, [r3, #12]
 80099be:	2307      	movs	r3, #7
 80099c0:	703b      	strb	r3, [r7, #0]

  cls.cls = MRBC_CLASS(Object);
 80099c2:	4b54      	ldr	r3, [pc, #336]	; (8009b14 <mrbc_init_class+0x168>)
 80099c4:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Object), &cls );
 80099c6:	463b      	mov	r3, r7
 80099c8:	4619      	mov	r1, r3
 80099ca:	2027      	movs	r0, #39	; 0x27
 80099cc:	f001 ff12 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NilClass);
 80099d0:	4b51      	ldr	r3, [pc, #324]	; (8009b18 <mrbc_init_class+0x16c>)
 80099d2:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NilClass), &cls );
 80099d4:	463b      	mov	r3, r7
 80099d6:	4619      	mov	r1, r3
 80099d8:	2023      	movs	r0, #35	; 0x23
 80099da:	f001 ff0b 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(FalseClass);
 80099de:	4b4f      	ldr	r3, [pc, #316]	; (8009b1c <mrbc_init_class+0x170>)
 80099e0:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(FalseClass), &cls );
 80099e2:	463b      	mov	r3, r7
 80099e4:	4619      	mov	r1, r3
 80099e6:	2019      	movs	r0, #25
 80099e8:	f001 ff04 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(TrueClass);
 80099ec:	4b4c      	ldr	r3, [pc, #304]	; (8009b20 <mrbc_init_class+0x174>)
 80099ee:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(TrueClass), &cls );
 80099f0:	463b      	mov	r3, r7
 80099f2:	4619      	mov	r1, r3
 80099f4:	2033      	movs	r0, #51	; 0x33
 80099f6:	f001 fefd 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Integer);
 80099fa:	4b4a      	ldr	r3, [pc, #296]	; (8009b24 <mrbc_init_class+0x178>)
 80099fc:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Integer), &cls );
 80099fe:	463b      	mov	r3, r7
 8009a00:	4619      	mov	r1, r3
 8009a02:	201d      	movs	r0, #29
 8009a04:	f001 fef6 	bl	800b7f4 <mrbc_set_const>

#if MRBC_USE_FLOAT
  cls.cls = MRBC_CLASS(Float);
 8009a08:	4b47      	ldr	r3, [pc, #284]	; (8009b28 <mrbc_init_class+0x17c>)
 8009a0a:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Float), &cls );
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	4619      	mov	r1, r3
 8009a10:	201a      	movs	r0, #26
 8009a12:	f001 feef 	bl	800b7f4 <mrbc_set_const>
#endif

  cls.cls = MRBC_CLASS(Symbol);
 8009a16:	4b45      	ldr	r3, [pc, #276]	; (8009b2c <mrbc_init_class+0x180>)
 8009a18:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Symbol), &cls );
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	2031      	movs	r0, #49	; 0x31
 8009a20:	f001 fee8 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Proc);
 8009a24:	4b42      	ldr	r3, [pc, #264]	; (8009b30 <mrbc_init_class+0x184>)
 8009a26:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Proc), &cls );
 8009a28:	463b      	mov	r3, r7
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	2029      	movs	r0, #41	; 0x29
 8009a2e:	f001 fee1 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Array);
 8009a32:	4b40      	ldr	r3, [pc, #256]	; (8009b34 <mrbc_init_class+0x188>)
 8009a34:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Array), &cls );
 8009a36:	463b      	mov	r3, r7
 8009a38:	4619      	mov	r1, r3
 8009a3a:	2016      	movs	r0, #22
 8009a3c:	f001 feda 	bl	800b7f4 <mrbc_set_const>

#if MRBC_USE_STRING
  cls.cls = MRBC_CLASS(String);
 8009a40:	4b3d      	ldr	r3, [pc, #244]	; (8009b38 <mrbc_init_class+0x18c>)
 8009a42:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(String), &cls );
 8009a44:	463b      	mov	r3, r7
 8009a46:	4619      	mov	r1, r3
 8009a48:	2030      	movs	r0, #48	; 0x30
 8009a4a:	f001 fed3 	bl	800b7f4 <mrbc_set_const>
#endif

  cls.cls = MRBC_CLASS(Range);
 8009a4e:	4b3b      	ldr	r3, [pc, #236]	; (8009b3c <mrbc_init_class+0x190>)
 8009a50:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Range), &cls );
 8009a52:	463b      	mov	r3, r7
 8009a54:	4619      	mov	r1, r3
 8009a56:	202c      	movs	r0, #44	; 0x2c
 8009a58:	f001 fecc 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Hash);
 8009a5c:	4b38      	ldr	r3, [pc, #224]	; (8009b40 <mrbc_init_class+0x194>)
 8009a5e:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Hash), &cls );
 8009a60:	463b      	mov	r3, r7
 8009a62:	4619      	mov	r1, r3
 8009a64:	201b      	movs	r0, #27
 8009a66:	f001 fec5 	bl	800b7f4 <mrbc_set_const>
  cls.cls = MRBC_CLASS(Math);
  mrbc_set_const( MRBC_SYM(Math), &cls );
  mrbc_init_class_math();
#endif

  cls.cls = MRBC_CLASS(Exception);
 8009a6a:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <mrbc_init_class+0x198>)
 8009a6c:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(Exception), &cls );
 8009a6e:	463b      	mov	r3, r7
 8009a70:	4619      	mov	r1, r3
 8009a72:	2018      	movs	r0, #24
 8009a74:	f001 febe 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NoMemoryError);
 8009a78:	4b33      	ldr	r3, [pc, #204]	; (8009b48 <mrbc_init_class+0x19c>)
 8009a7a:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NoMemoryError), &cls );
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	4619      	mov	r1, r3
 8009a80:	2024      	movs	r0, #36	; 0x24
 8009a82:	f001 feb7 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(StandardError);
 8009a86:	4b31      	ldr	r3, [pc, #196]	; (8009b4c <mrbc_init_class+0x1a0>)
 8009a88:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(StandardError), &cls );
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	202f      	movs	r0, #47	; 0x2f
 8009a90:	f001 feb0 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(ArgumentError);
 8009a94:	4b2e      	ldr	r3, [pc, #184]	; (8009b50 <mrbc_init_class+0x1a4>)
 8009a96:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(ArgumentError), &cls );
 8009a98:	463b      	mov	r3, r7
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	2015      	movs	r0, #21
 8009a9e:	f001 fea9 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(IndexError);
 8009aa2:	4b2c      	ldr	r3, [pc, #176]	; (8009b54 <mrbc_init_class+0x1a8>)
 8009aa4:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(IndexError), &cls );
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	201c      	movs	r0, #28
 8009aac:	f001 fea2 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NameError);
 8009ab0:	4b29      	ldr	r3, [pc, #164]	; (8009b58 <mrbc_init_class+0x1ac>)
 8009ab2:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NameError), &cls );
 8009ab4:	463b      	mov	r3, r7
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	2022      	movs	r0, #34	; 0x22
 8009aba:	f001 fe9b 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(NoMethodError);
 8009abe:	4b27      	ldr	r3, [pc, #156]	; (8009b5c <mrbc_init_class+0x1b0>)
 8009ac0:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(NoMethodError), &cls );
 8009ac2:	463b      	mov	r3, r7
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	2025      	movs	r0, #37	; 0x25
 8009ac8:	f001 fe94 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(RangeError);
 8009acc:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <mrbc_init_class+0x1b4>)
 8009ace:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(RangeError), &cls );
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	202d      	movs	r0, #45	; 0x2d
 8009ad6:	f001 fe8d 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(RuntimeError);
 8009ada:	4b22      	ldr	r3, [pc, #136]	; (8009b64 <mrbc_init_class+0x1b8>)
 8009adc:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(RuntimeError), &cls );
 8009ade:	463b      	mov	r3, r7
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	202e      	movs	r0, #46	; 0x2e
 8009ae4:	f001 fe86 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(TypeError);
 8009ae8:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <mrbc_init_class+0x1bc>)
 8009aea:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(TypeError), &cls );
 8009aec:	463b      	mov	r3, r7
 8009aee:	4619      	mov	r1, r3
 8009af0:	2034      	movs	r0, #52	; 0x34
 8009af2:	f001 fe7f 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(ZeroDivisionError);
 8009af6:	4b1d      	ldr	r3, [pc, #116]	; (8009b6c <mrbc_init_class+0x1c0>)
 8009af8:	60bb      	str	r3, [r7, #8]
  mrbc_set_const( MRBC_SYM(ZeroDivisionError), &cls );
 8009afa:	463b      	mov	r3, r7
 8009afc:	4619      	mov	r1, r3
 8009afe:	2036      	movs	r0, #54	; 0x36
 8009b00:	f001 fe78 	bl	800b7f4 <mrbc_set_const>

  mrbc_run_mrblib(mrblib_bytecode);
 8009b04:	481a      	ldr	r0, [pc, #104]	; (8009b70 <mrbc_init_class+0x1c4>)
 8009b06:	f7ff ff1b 	bl	8009940 <mrbc_run_mrblib>
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000064 	.word	0x20000064
 8009b18:	20000094 	.word	0x20000094
 8009b1c:	200000c4 	.word	0x200000c4
 8009b20:	200000ac 	.word	0x200000ac
 8009b24:	20000034 	.word	0x20000034
 8009b28:	2000004c 	.word	0x2000004c
 8009b2c:	20000594 	.word	0x20000594
 8009b30:	2000007c 	.word	0x2000007c
 8009b34:	20000004 	.word	0x20000004
 8009b38:	200000f4 	.word	0x200000f4
 8009b3c:	200000dc 	.word	0x200000dc
 8009b40:	2000001c 	.word	0x2000001c
 8009b44:	2000010c 	.word	0x2000010c
 8009b48:	20000124 	.word	0x20000124
 8009b4c:	20000144 	.word	0x20000144
 8009b50:	20000154 	.word	0x20000154
 8009b54:	20000164 	.word	0x20000164
 8009b58:	20000174 	.word	0x20000174
 8009b5c:	20000184 	.word	0x20000184
 8009b60:	20000194 	.word	0x20000194
 8009b64:	200001a4 	.word	0x200001a4
 8009b68:	200001b4 	.word	0x200001b4
 8009b6c:	200001c4 	.word	0x200001c4
 8009b70:	0801ae5c 	.word	0x0801ae5c

08009b74 <mrbc_symbol_cstr>:
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  return mrbc_symid_to_str(v->i);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	b21b      	sxth	r3, r3
 8009b82:	4618      	mov	r0, r3
 8009b84:	f003 ffd8 	bl	800db38 <mrbc_symid_to_str>
 8009b88:	4603      	mov	r3, r0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <mrbc_is_nested_symid>:
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	4603      	mov	r3, r0
 8009b9a:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 8009b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 ffc9 	bl	800db38 <mrbc_symid_to_str>
 8009ba6:	60f8      	str	r0, [r7, #12]
  return ('0' <= s[0] && s[0] <= ('9'+6));
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b2f      	cmp	r3, #47	; 0x2f
 8009bae:	d905      	bls.n	8009bbc <mrbc_is_nested_symid+0x2a>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8009bb6:	d801      	bhi.n	8009bbc <mrbc_is_nested_symid+0x2a>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e000      	b.n	8009bbe <mrbc_is_nested_symid+0x2c>
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <find_class_by_object>:
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	da05      	bge.n	8009be6 <find_class_by_object+0x1e>
 8009bda:	4b20      	ldr	r3, [pc, #128]	; (8009c5c <find_class_by_object+0x94>)
 8009bdc:	4a20      	ldr	r2, [pc, #128]	; (8009c60 <find_class_by_object+0x98>)
 8009bde:	21bf      	movs	r1, #191	; 0xbf
 8009be0:	4820      	ldr	r0, [pc, #128]	; (8009c64 <find_class_by_object+0x9c>)
 8009be2:	f00b fcd5 	bl	8015590 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f993 3000 	ldrsb.w	r3, [r3]
 8009bec:	2b0e      	cmp	r3, #14
 8009bee:	dd05      	ble.n	8009bfc <find_class_by_object+0x34>
 8009bf0:	4b1d      	ldr	r3, [pc, #116]	; (8009c68 <find_class_by_object+0xa0>)
 8009bf2:	4a1b      	ldr	r2, [pc, #108]	; (8009c60 <find_class_by_object+0x98>)
 8009bf4:	21c0      	movs	r1, #192	; 0xc0
 8009bf6:	481b      	ldr	r0, [pc, #108]	; (8009c64 <find_class_by_object+0x9c>)
 8009bf8:	f00b fcca 	bl	8015590 <__assert_func>
  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8009c02:	461a      	mov	r2, r3
 8009c04:	4b19      	ldr	r3, [pc, #100]	; (8009c6c <find_class_by_object+0xa4>)
 8009c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0a:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d11f      	bne.n	8009c52 <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f993 3000 	ldrsb.w	r3, [r3]
 8009c18:	2b0e      	cmp	r3, #14
 8009c1a:	d00f      	beq.n	8009c3c <find_class_by_object+0x74>
 8009c1c:	2b0e      	cmp	r3, #14
 8009c1e:	dc12      	bgt.n	8009c46 <find_class_by_object+0x7e>
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	d002      	beq.n	8009c2a <find_class_by_object+0x62>
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d004      	beq.n	8009c32 <find_class_by_object+0x6a>
 8009c28:	e00d      	b.n	8009c46 <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	e00f      	b.n	8009c52 <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e00a      	b.n	8009c52 <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e005      	b.n	8009c52 <find_class_by_object+0x8a>
      assert(!"Invalid value type.");
 8009c46:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <find_class_by_object+0xa8>)
 8009c48:	4a05      	ldr	r2, [pc, #20]	; (8009c60 <find_class_by_object+0x98>)
 8009c4a:	21c9      	movs	r1, #201	; 0xc9
 8009c4c:	4805      	ldr	r0, [pc, #20]	; (8009c64 <find_class_by_object+0x9c>)
 8009c4e:	f00b fc9f 	bl	8015590 <__assert_func>
  return cls;
 8009c52:	68fb      	ldr	r3, [r7, #12]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	080191e0 	.word	0x080191e0
 8009c60:	0801adc8 	.word	0x0801adc8
 8009c64:	080191f8 	.word	0x080191f8
 8009c68:	08019214 	.word	0x08019214
 8009c6c:	0801ad44 	.word	0x0801ad44
 8009c70:	08019238 	.word	0x08019238

08009c74 <mrbc_print>:
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  mrbc_nprint( str, strlen(str) );
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7f6 fab9 	bl	80001f4 <strlen>
 8009c82:	4603      	mov	r3, r0
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa3e 	bl	800a108 <mrbc_nprint>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <mrbc_printf_init>:
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
  pf->p = pf->buf = buf;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	609a      	str	r2, [r3, #8]
  pf->buf_end = buf + size - 1;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	441a      	add	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	605a      	str	r2, [r3, #4]
  pf->fstr = fstr;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	60da      	str	r2, [r3, #12]
  pf->fmt = (struct RPrintfFormat){0};
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3310      	adds	r3, #16
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	605a      	str	r2, [r3, #4]
}
 8009ccc:	bf00      	nop
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <mrbc_printf_clear>:
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  pf->p = pf->buf;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	609a      	str	r2, [r3, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <mrbc_printf_end>:
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  *pf->p = '\0';
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	2200      	movs	r2, #0
 8009d02:	701a      	strb	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <mrbc_printf_len>:
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  return pf->p - pf->buf;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1ad3      	subs	r3, r2, r3
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <mrbc_printf_str>:
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
  return mrbc_printf_bstr( pf, str, (str ? strlen(str) : 0), pad );
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <mrbc_printf_str+0x1e>
 8009d40:	68b8      	ldr	r0, [r7, #8]
 8009d42:	f7f6 fa57 	bl	80001f4 <strlen>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	e000      	b.n	8009d4e <mrbc_printf_str+0x20>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 fec4 	bl	800aae0 <mrbc_printf_bstr>
 8009d58:	4603      	mov	r3, r0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <mrbc_string_size>:
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  return str->string->size;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	889b      	ldrh	r3, [r3, #4]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <mrbc_string_cstr>:
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	689b      	ldr	r3, [r3, #8]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <mrbc_array_size>:
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	88db      	ldrh	r3, [r3, #6]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <mrbc_hash_iterator_new>:
{
 8009db0:	b490      	push	{r4, r7}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  ite.target = v->hash;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	60fb      	str	r3, [r7, #12]
  ite.point = v->hash->data;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	613b      	str	r3, [r7, #16]
  ite.p_end = ite.point + v->hash->n_stored;
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	88db      	ldrh	r3, [r3, #6]
 8009dd0:	011b      	lsls	r3, r3, #4
 8009dd2:	4413      	add	r3, r2
 8009dd4:	617b      	str	r3, [r7, #20]
  return ite;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	461c      	mov	r4, r3
 8009dda:	f107 030c 	add.w	r3, r7, #12
 8009dde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc90      	pop	{r4, r7}
 8009dee:	4770      	bx	lr

08009df0 <mrbc_hash_i_has_next>:
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  return ite->point < ite->p_end;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	bf34      	ite	cc
 8009e04:	2301      	movcc	r3, #1
 8009e06:	2300      	movcs	r3, #0
 8009e08:	b2db      	uxtb	r3, r3
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <mrbc_hash_i_next>:
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  mrbc_value *ret = ite->point;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	60fb      	str	r3, [r7, #12]
  ite->point += 2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f103 0220 	add.w	r2, r3, #32
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	605a      	str	r2, [r3, #4]
  return ret;
 8009e30:	68fb      	ldr	r3, [r7, #12]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <mrbc_range_first>:
{
 8009e3e:	b490      	push	{r4, r7}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  return v->range->first;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	4614      	mov	r4, r2
 8009e50:	3308      	adds	r3, #8
 8009e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc90      	pop	{r4, r7}
 8009e60:	4770      	bx	lr

08009e62 <mrbc_range_last>:
{
 8009e62:	b490      	push	{r4, r7}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  return v->range->last;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4614      	mov	r4, r2
 8009e74:	3318      	adds	r3, #24
 8009e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc90      	pop	{r4, r7}
 8009e84:	4770      	bx	lr

08009e86 <mrbc_range_exclude_end>:

//================================================================
/*! get exclude_end?
*/
static inline int mrbc_range_exclude_end(const mrbc_value *v)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  return v->range->flag_exclude;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	791b      	ldrb	r3, [r3, #4]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <mrbc_printf_sub_output_arg>:
/***** Local functions ******************************************************/
//----------------------------------------------------------------
/* sub function for mrbc_printf
*/
static int mrbc_printf_sub_output_arg( mrbc_printf_t *pf, va_list *ap )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  int ret;

  switch(pf->fmt.type) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7c1b      	ldrb	r3, [r3, #16]
 8009eae:	3b42      	subs	r3, #66	; 0x42
 8009eb0:	2b36      	cmp	r3, #54	; 0x36
 8009eb2:	f200 80de 	bhi.w	800a072 <mrbc_printf_sub_output_arg+0x1d2>
 8009eb6:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <mrbc_printf_sub_output_arg+0x1c>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009fff 	.word	0x08009fff
 8009ec0:	0800a073 	.word	0x0800a073
 8009ec4:	08009fe5 	.word	0x08009fe5
 8009ec8:	0800a033 	.word	0x0800a033
 8009ecc:	0800a073 	.word	0x0800a073
 8009ed0:	0800a033 	.word	0x0800a033
 8009ed4:	0800a073 	.word	0x0800a073
 8009ed8:	0800a073 	.word	0x0800a073
 8009edc:	0800a073 	.word	0x0800a073
 8009ee0:	0800a073 	.word	0x0800a073
 8009ee4:	0800a073 	.word	0x0800a073
 8009ee8:	0800a073 	.word	0x0800a073
 8009eec:	0800a073 	.word	0x0800a073
 8009ef0:	0800a073 	.word	0x0800a073
 8009ef4:	0800a073 	.word	0x0800a073
 8009ef8:	0800a073 	.word	0x0800a073
 8009efc:	0800a073 	.word	0x0800a073
 8009f00:	0800a073 	.word	0x0800a073
 8009f04:	0800a073 	.word	0x0800a073
 8009f08:	0800a073 	.word	0x0800a073
 8009f0c:	0800a073 	.word	0x0800a073
 8009f10:	0800a073 	.word	0x0800a073
 8009f14:	0800a019 	.word	0x0800a019
 8009f18:	0800a073 	.word	0x0800a073
 8009f1c:	0800a073 	.word	0x0800a073
 8009f20:	0800a073 	.word	0x0800a073
 8009f24:	0800a073 	.word	0x0800a073
 8009f28:	0800a073 	.word	0x0800a073
 8009f2c:	0800a073 	.word	0x0800a073
 8009f30:	0800a073 	.word	0x0800a073
 8009f34:	0800a073 	.word	0x0800a073
 8009f38:	0800a073 	.word	0x0800a073
 8009f3c:	08009fff 	.word	0x08009fff
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009fcb 	.word	0x08009fcb
 8009f48:	0800a033 	.word	0x0800a033
 8009f4c:	0800a033 	.word	0x0800a033
 8009f50:	0800a033 	.word	0x0800a033
 8009f54:	0800a073 	.word	0x0800a073
 8009f58:	08009fcb 	.word	0x08009fcb
 8009f5c:	0800a073 	.word	0x0800a073
 8009f60:	0800a073 	.word	0x0800a073
 8009f64:	0800a073 	.word	0x0800a073
 8009f68:	0800a073 	.word	0x0800a073
 8009f6c:	0800a073 	.word	0x0800a073
 8009f70:	0800a073 	.word	0x0800a073
 8009f74:	0800a05b 	.word	0x0800a05b
 8009f78:	0800a073 	.word	0x0800a073
 8009f7c:	0800a073 	.word	0x0800a073
 8009f80:	08009fb1 	.word	0x08009fb1
 8009f84:	0800a073 	.word	0x0800a073
 8009f88:	08009fcb 	.word	0x08009fcb
 8009f8c:	0800a073 	.word	0x0800a073
 8009f90:	0800a073 	.word	0x0800a073
 8009f94:	0800a019 	.word	0x0800a019
  case 'c':
    ret = mrbc_printf_char( pf, va_arg(*ap, int) );
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	1d19      	adds	r1, r3, #4
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fd42 	bl	800aa30 <mrbc_printf_char>
 8009fac:	60f8      	str	r0, [r7, #12]
    break;
 8009fae:	e063      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>

  case 's':
    ret = mrbc_printf_str( pf, va_arg(*ap, char *), ' ');
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	1d19      	adds	r1, r3, #4
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	6011      	str	r1, [r2, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff feb4 	bl	8009d2e <mrbc_printf_str>
 8009fc6:	60f8      	str	r0, [r7, #12]
    break;
 8009fc8:	e056      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>

  case 'd':
  case 'i':
  case 'u':
    ret = mrbc_printf_int( pf, va_arg(*ap, int), 10);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	1d19      	adds	r1, r3, #4
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	6011      	str	r1, [r2, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fe06 	bl	800abec <mrbc_printf_int>
 8009fe0:	60f8      	str	r0, [r7, #12]
    break;
 8009fe2:	e049      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>

  case 'D':	// for mrbc_int_t (see mrbc_print_sub)
    ret = mrbc_printf_int( pf, va_arg(*ap, mrbc_int_t), 10);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	1d19      	adds	r1, r3, #4
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	220a      	movs	r2, #10
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fdf9 	bl	800abec <mrbc_printf_int>
 8009ffa:	60f8      	str	r0, [r7, #12]
    break;
 8009ffc:	e03c      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>

  case 'b':
  case 'B':
    ret = mrbc_printf_bit( pf, va_arg(*ap, unsigned int), 1);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	1d19      	adds	r1, r3, #4
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	6011      	str	r1, [r2, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2201      	movs	r2, #1
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ff1c 	bl	800ae4c <mrbc_printf_bit>
 800a014:	60f8      	str	r0, [r7, #12]
    break;
 800a016:	e02f      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>

  case 'x':
  case 'X':
    ret = mrbc_printf_bit( pf, va_arg(*ap, unsigned int), 4);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	1d19      	adds	r1, r3, #4
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2204      	movs	r2, #4
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 ff0f 	bl	800ae4c <mrbc_printf_bit>
 800a02e:	60f8      	str	r0, [r7, #12]
    break;
 800a030:	e022      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>
  case 'f':
  case 'e':
  case 'E':
  case 'g':
  case 'G':
    ret = mrbc_printf_float( pf, va_arg(*ap, double) );
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	3307      	adds	r3, #7
 800a038:	f023 0307 	bic.w	r3, r3, #7
 800a03c:	f103 0108 	add.w	r1, r3, #8
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	6011      	str	r1, [r2, #0]
 800a044:	ed93 7b00 	vldr	d7, [r3]
 800a048:	eeb0 0a47 	vmov.f32	s0, s14
 800a04c:	eef0 0a67 	vmov.f32	s1, s15
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 ffc9 	bl	800afe8 <mrbc_printf_float>
 800a056:	60f8      	str	r0, [r7, #12]
    break;
 800a058:	e00e      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>
#endif
  case 'p':
    ret = mrbc_printf_pointer( pf, va_arg(*ap, void *) );
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	1d19      	adds	r1, r3, #4
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	6011      	str	r1, [r2, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f805 	bl	800b078 <mrbc_printf_pointer>
 800a06e:	60f8      	str	r0, [r7, #12]
    break;
 800a070:	e002      	b.n	800a078 <mrbc_printf_sub_output_arg+0x1d8>

  default:
    ret = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
    break;
 800a076:	bf00      	nop
  }

  return ret;
 800a078:	68fb      	ldr	r3, [r7, #12]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop

0800a084 <mrbc_putchar>:
/*! output a character

  @param  c	character
*/
void mrbc_putchar(char c)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  } else {
    hal_write(1, &c, 1);
  }

#else
    hal_write(1, &c, 1);
 800a08e:	1dfb      	adds	r3, r7, #7
 800a090:	2201      	movs	r2, #1
 800a092:	4619      	mov	r1, r3
 800a094:	2001      	movs	r0, #1
 800a096:	f001 fc89 	bl	800b9ac <hal_write>
#endif
}
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <mrbc_print_symbol>:
/*! display symbol name.

  @param  sym_id	symbol ID to print.
*/
void mrbc_print_symbol(mrbc_sym sym_id)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	80fb      	strh	r3, [r7, #6]
  // normal case
  if( !mrbc_is_nested_symid(sym_id) ) {
 800a0ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff fd6d 	bl	8009b92 <mrbc_is_nested_symid>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d109      	bne.n	800a0d2 <mrbc_print_symbol+0x2e>
    mrbc_print( mrbc_symid_to_str(sym_id) );
 800a0be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f003 fd38 	bl	800db38 <mrbc_symid_to_str>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fdd2 	bl	8009c74 <mrbc_print>
 800a0d0:	e015      	b.n	800a0fe <mrbc_print_symbol+0x5a>
    return;
  }

  // nested case
  mrbc_sym id1, id2;
  mrbc_separate_nested_symid( sym_id, &id1, &id2 );
 800a0d2:	f107 020c 	add.w	r2, r7, #12
 800a0d6:	f107 010e 	add.w	r1, r7, #14
 800a0da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f003 fdda 	bl	800dc98 <mrbc_separate_nested_symid>

  mrbc_print_symbol( id1 );
 800a0e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff ffdb 	bl	800a0a4 <mrbc_print_symbol>
  mrbc_print("::");
 800a0ee:	4805      	ldr	r0, [pc, #20]	; (800a104 <mrbc_print_symbol+0x60>)
 800a0f0:	f7ff fdc0 	bl	8009c74 <mrbc_print>
  mrbc_print_symbol( id2 );
 800a0f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff ffd3 	bl	800a0a4 <mrbc_print_symbol>
}
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	08019250 	.word	0x08019250

0800a108 <mrbc_nprint>:

  @param str	str
  @param size	byte length.
*/
void mrbc_nprint(const char *str, int size)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  if( p1 != p2 ) {
    hal_write(1, p2, p1 - p2);
  }

#else
  hal_write(1, str, size);
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	2001      	movs	r0, #1
 800a118:	f001 fc48 	bl	800b9ac <hal_write>
#endif
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <mrbc_printf>:
/*! formatted output conversion, output to console.

  @param  fstr		format string.
*/
void mrbc_printf(const char *fstr, ...)
{
 800a124:	b40f      	push	{r0, r1, r2, r3}
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fstr);
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	607b      	str	r3, [r7, #4]

  mrbc_vprintf( fstr, ap );
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	6938      	ldr	r0, [r7, #16]
 800a136:	f000 f83a 	bl	800a1ae <mrbc_vprintf>

  va_end(ap);
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a144:	b004      	add	sp, #16
 800a146:	4770      	bx	lr

0800a148 <mrbc_snprintf>:
  @param  buf		output buffer.
  @param  bufsiz	buffer size.
  @param  fstr		format string.
*/
void mrbc_snprintf(char *buf, int bufsiz, const char *fstr, ...)
{
 800a148:	b40c      	push	{r2, r3}
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b08a      	sub	sp, #40	; 0x28
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
  va_list ap;
  va_start(ap, fstr);
 800a154:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a158:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_printf_t pf;
  mrbc_printf_init( &pf, buf, bufsiz, fstr );
 800a15a:	f107 000c 	add.w	r0, r7, #12
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	f7ff fd96 	bl	8009c94 <mrbc_printf_init>

  while( 1 ) {
    if( mrbc_printf_main( &pf ) <= 0 ) break;
 800a168:	f107 030c 	add.w	r3, r7, #12
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fb67 	bl	800a840 <mrbc_printf_main>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	dd0b      	ble.n	800a190 <mrbc_snprintf+0x48>
				// normal end (==0) or buffer full (<0).
    if( mrbc_printf_sub_output_arg( &pf, &ap ) != 0 ) break;
 800a178:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff fe8c 	bl	8009ea0 <mrbc_printf_sub_output_arg>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d102      	bne.n	800a194 <mrbc_snprintf+0x4c>
    if( mrbc_printf_main( &pf ) <= 0 ) break;
 800a18e:	e7eb      	b.n	800a168 <mrbc_snprintf+0x20>
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <mrbc_snprintf+0x4e>
    if( mrbc_printf_sub_output_arg( &pf, &ap ) != 0 ) break;
 800a194:	bf00      	nop
  }

  mrbc_printf_end( &pf );
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff fdaa 	bl	8009cf4 <mrbc_printf_end>
  va_end(ap);
}
 800a1a0:	bf00      	nop
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1aa:	b002      	add	sp, #8
 800a1ac:	4770      	bx	lr

0800a1ae <mrbc_vprintf>:

  @param  fstr		format string.
  @param  ap		variable argument pointer.
*/
void mrbc_vprintf(const char *fstr, va_list ap)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b0a0      	sub	sp, #128	; 0x80
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  va_list ap1;
  va_copy( ap1, ap );
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	67bb      	str	r3, [r7, #120]	; 0x78

  mrbc_printf_t pf;
  char buf[MRBC_PRINTF_MAX_WIDTH];
  mrbc_printf_init( &pf, buf, sizeof(buf), fstr );
 800a1bc:	f107 010c 	add.w	r1, r7, #12
 800a1c0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2252      	movs	r2, #82	; 0x52
 800a1c8:	f7ff fd64 	bl	8009c94 <mrbc_printf_init>

  while( 1 ) {
    int ret = mrbc_printf_main( &pf );
 800a1cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 fb35 	bl	800a840 <mrbc_printf_main>
 800a1d6:	67f8      	str	r0, [r7, #124]	; 0x7c
    if( mrbc_printf_len( &pf ) ) {
 800a1d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fd97 	bl	8009d10 <mrbc_printf_len>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d010      	beq.n	800a20a <mrbc_vprintf+0x5c>
      mrbc_nprint( buf, mrbc_printf_len( &pf ) );
 800a1e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fd8f 	bl	8009d10 <mrbc_printf_len>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	f107 030c 	add.w	r3, r7, #12
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff ff84 	bl	800a108 <mrbc_nprint>
      mrbc_printf_clear( &pf );
 800a200:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff fd67 	bl	8009cd8 <mrbc_printf_clear>
    }
    if( ret == 0 ) break;
 800a20a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01e      	beq.n	800a24e <mrbc_vprintf+0xa0>
    if( ret < 0 ) continue;
 800a210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a212:	2b00      	cmp	r3, #0
 800a214:	db19      	blt.n	800a24a <mrbc_vprintf+0x9c>

    mrbc_printf_sub_output_arg( &pf, &ap1 );
 800a216:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a21a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a21e:	4611      	mov	r1, r2
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fe3d 	bl	8009ea0 <mrbc_printf_sub_output_arg>
    mrbc_nprint( buf, mrbc_printf_len( &pf ) );
 800a226:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fd70 	bl	8009d10 <mrbc_printf_len>
 800a230:	4602      	mov	r2, r0
 800a232:	f107 030c 	add.w	r3, r7, #12
 800a236:	4611      	mov	r1, r2
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff ff65 	bl	800a108 <mrbc_nprint>
    mrbc_printf_clear( &pf );
 800a23e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fd48 	bl	8009cd8 <mrbc_printf_clear>
 800a248:	e7c0      	b.n	800a1cc <mrbc_vprintf+0x1e>
    if( ret < 0 ) continue;
 800a24a:	bf00      	nop
  while( 1 ) {
 800a24c:	e7be      	b.n	800a1cc <mrbc_vprintf+0x1e>
    if( ret == 0 ) break;
 800a24e:	bf00      	nop
  }

  va_end(ap1);
}
 800a250:	bf00      	nop
 800a252:	3780      	adds	r7, #128	; 0x80
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <mrbc_vasprintf>:
  @param  bufsiz	buffer size.
  @param  fstr		format string.
  @param  ap		variable argument pointer.
*/
void mrbc_vasprintf(char **buf, int bufsiz, const char *fstr, va_list ap)
{
 800a258:	b5b0      	push	{r4, r5, r7, lr}
 800a25a:	b094      	sub	sp, #80	; 0x50
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
  va_list ap1, ap_bak;
  va_copy( ap1, ap );
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	647b      	str	r3, [r7, #68]	; 0x44

  mrbc_printf_t pf;
  mrbc_printf_init( &pf, *buf, bufsiz, fstr );
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6819      	ldr	r1, [r3, #0]
 800a26e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	f7ff fd0d 	bl	8009c94 <mrbc_printf_init>

  while( 1 ) {
    va_copy(ap_bak, ap1);
 800a27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a27c:	643b      	str	r3, [r7, #64]	; 0x40
    mrbc_printf_t pf_bak = pf;
 800a27e:	f107 0410 	add.w	r4, r7, #16
 800a282:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800a286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a28a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a28e:	e884 0003 	stmia.w	r4, {r0, r1}

    int ret = mrbc_printf_main( &pf );
 800a292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fad2 	bl	800a840 <mrbc_printf_main>
 800a29c:	64f8      	str	r0, [r7, #76]	; 0x4c
    if( ret == 0 ) break;	// normal break loop.
 800a29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d036      	beq.n	800a312 <mrbc_vasprintf+0xba>
    if( ret < 0 ) goto INCREASE_BUFFER;
 800a2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	db18      	blt.n	800a2dc <mrbc_vasprintf+0x84>

    ret = mrbc_printf_sub_output_arg( &pf, &ap1 );
 800a2aa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a2ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7ff fdf3 	bl	8009ea0 <mrbc_printf_sub_output_arg>
 800a2ba:	64f8      	str	r0, [r7, #76]	; 0x4c
    if( ret >= 0 ) goto NEXT_LOOP;
 800a2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da25      	bge.n	800a30e <mrbc_vasprintf+0xb6>

    va_end(ap1);
    va_copy(ap1, ap_bak);
 800a2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c4:	647b      	str	r3, [r7, #68]	; 0x44
    pf = pf_bak;
 800a2c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a2ca:	f107 0510 	add.w	r5, r7, #16
 800a2ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2d6:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2da:	e000      	b.n	800a2de <mrbc_vasprintf+0x86>
    if( ret < 0 ) goto INCREASE_BUFFER;
 800a2dc:	bf00      	nop

  INCREASE_BUFFER:
    bufsiz += 64;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	3340      	adds	r3, #64	; 0x40
 800a2e2:	60bb      	str	r3, [r7, #8]
    void *newbuf = mrbc_raw_realloc( pf.buf, bufsiz );
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7f7 fe52 	bl	8001f94 <mrbc_raw_realloc>
 800a2f0:	64b8      	str	r0, [r7, #72]	; 0x48
    if( !newbuf ) break;
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00e      	beq.n	800a316 <mrbc_vasprintf+0xbe>
    mrbc_printf_replace_buffer( &pf, newbuf, bufsiz );
 800a2f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a300:	4618      	mov	r0, r3
 800a302:	f000 fa7b 	bl	800a7fc <mrbc_printf_replace_buffer>
    *buf = newbuf;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	e7b5      	b.n	800a27a <mrbc_vasprintf+0x22>
    if( ret >= 0 ) goto NEXT_LOOP;
 800a30e:	bf00      	nop
  while( 1 ) {
 800a310:	e7b3      	b.n	800a27a <mrbc_vasprintf+0x22>
    if( ret == 0 ) break;	// normal break loop.
 800a312:	bf00      	nop
 800a314:	e000      	b.n	800a318 <mrbc_vasprintf+0xc0>
    if( !newbuf ) break;
 800a316:	bf00      	nop

  NEXT_LOOP:
    va_end(ap_bak);
  }

  mrbc_printf_end( &pf );
 800a318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff fce9 	bl	8009cf4 <mrbc_printf_end>
  va_end(ap1);
  va_end(ap_bak);
}
 800a322:	bf00      	nop
 800a324:	3750      	adds	r7, #80	; 0x50
 800a326:	46bd      	mov	sp, r7
 800a328:	bdb0      	pop	{r4, r5, r7, pc}

0800a32a <mrbc_p>:
/*! print mrbc_value

  @param  v	pointer to target value.
*/
void mrbc_p(const mrbc_value *v)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  mrbc_p_sub( v );
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f808 	bl	800a348 <mrbc_p_sub>
  mrbc_putchar('\n');
 800a338:	200a      	movs	r0, #10
 800a33a:	f7ff fea3 	bl	800a084 <mrbc_putchar>
}
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <mrbc_p_sub>:
/*! p - sub function

  @param  v	pointer to target value.
 */
int mrbc_p_sub(const mrbc_value *v)
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b08f      	sub	sp, #60	; 0x3c
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6178      	str	r0, [r7, #20]
  if( !v ) {
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <mrbc_p_sub+0x18>
    mrbc_print("(null)");	// wrong things are happen. but it give me a clue.
 800a356:	4852      	ldr	r0, [pc, #328]	; (800a4a0 <mrbc_p_sub+0x158>)
 800a358:	f7ff fc8c 	bl	8009c74 <mrbc_print>
    return 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	e09a      	b.n	800a496 <mrbc_p_sub+0x14e>
  }

  switch( mrbc_type(*v) ) {
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f993 3000 	ldrsb.w	r3, [r3]
 800a366:	3b01      	subs	r3, #1
 800a368:	2b0b      	cmp	r3, #11
 800a36a:	f200 808f 	bhi.w	800a48c <mrbc_p_sub+0x144>
 800a36e:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <mrbc_p_sub+0x2c>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a3a5 	.word	0x0800a3a5
 800a378:	0800a48d 	.word	0x0800a48d
 800a37c:	0800a48d 	.word	0x0800a48d
 800a380:	0800a48d 	.word	0x0800a48d
 800a384:	0800a48d 	.word	0x0800a48d
 800a388:	0800a3ad 	.word	0x0800a3ad
 800a38c:	0800a48d 	.word	0x0800a48d
 800a390:	0800a48d 	.word	0x0800a48d
 800a394:	0800a48d 	.word	0x0800a48d
 800a398:	0800a48d 	.word	0x0800a48d
 800a39c:	0800a3d5 	.word	0x0800a3d5
 800a3a0:	0800a43d 	.word	0x0800a43d
  case MRBC_TT_NIL:
    mrbc_print("nil");
 800a3a4:	483f      	ldr	r0, [pc, #252]	; (800a4a4 <mrbc_p_sub+0x15c>)
 800a3a6:	f7ff fc65 	bl	8009c74 <mrbc_print>
    break;
 800a3aa:	e073      	b.n	800a494 <mrbc_p_sub+0x14c>

  case MRBC_TT_SYMBOL:{
    const char *s = mrbc_symbol_cstr( v );
 800a3ac:	6978      	ldr	r0, [r7, #20]
 800a3ae:	f7ff fbe1 	bl	8009b74 <mrbc_symbol_cstr>
 800a3b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    const char *fmt = strchr(s, ':') ? "\":%s\"" : ":%s";
 800a3b4:	213a      	movs	r1, #58	; 0x3a
 800a3b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b8:	f00c f933 	bl	8016622 <strchr>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <mrbc_p_sub+0x7e>
 800a3c2:	4b39      	ldr	r3, [pc, #228]	; (800a4a8 <mrbc_p_sub+0x160>)
 800a3c4:	e000      	b.n	800a3c8 <mrbc_p_sub+0x80>
 800a3c6:	4b39      	ldr	r3, [pc, #228]	; (800a4ac <mrbc_p_sub+0x164>)
 800a3c8:	62bb      	str	r3, [r7, #40]	; 0x28
    mrbc_printf(fmt, s);
 800a3ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ce:	f7ff fea9 	bl	800a124 <mrbc_printf>
  } break;
 800a3d2:	e05f      	b.n	800a494 <mrbc_p_sub+0x14c>

#if MRBC_USE_STRING
  case MRBC_TT_STRING:{
    mrbc_putchar('"');
 800a3d4:	2022      	movs	r0, #34	; 0x22
 800a3d6:	f7ff fe55 	bl	800a084 <mrbc_putchar>
    const unsigned char *s = (const unsigned char *)mrbc_string_cstr(v);
 800a3da:	6978      	ldr	r0, [r7, #20]
 800a3dc:	f7ff fcce 	bl	8009d7c <mrbc_string_cstr>
 800a3e0:	6338      	str	r0, [r7, #48]	; 0x30
    int i;
    for( i = 0; i < mrbc_string_size(v); i++ ) {
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e6:	e01e      	b.n	800a426 <mrbc_p_sub+0xde>
      if( s[i] < ' ' || 0x7f <= s[i] ) {	// tiny isprint()
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ec:	4413      	add	r3, r2
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	2b1f      	cmp	r3, #31
 800a3f2:	d905      	bls.n	800a400 <mrbc_p_sub+0xb8>
 800a3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f8:	4413      	add	r3, r2
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b7e      	cmp	r3, #126	; 0x7e
 800a3fe:	d908      	bls.n	800a412 <mrbc_p_sub+0xca>
	mrbc_printf("\\x%02X", s[i]);
 800a400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a404:	4413      	add	r3, r2
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	4829      	ldr	r0, [pc, #164]	; (800a4b0 <mrbc_p_sub+0x168>)
 800a40c:	f7ff fe8a 	bl	800a124 <mrbc_printf>
 800a410:	e006      	b.n	800a420 <mrbc_p_sub+0xd8>
      } else {
	mrbc_putchar(s[i]);
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a416:	4413      	add	r3, r2
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fe32 	bl	800a084 <mrbc_putchar>
    for( i = 0; i < mrbc_string_size(v); i++ ) {
 800a420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a422:	3301      	adds	r3, #1
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff fc9b 	bl	8009d62 <mrbc_string_size>
 800a42c:	4602      	mov	r2, r0
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	4293      	cmp	r3, r2
 800a432:	dbd9      	blt.n	800a3e8 <mrbc_p_sub+0xa0>
      }
    }
    mrbc_putchar('"');
 800a434:	2022      	movs	r0, #34	; 0x22
 800a436:	f7ff fe25 	bl	800a084 <mrbc_putchar>
  } break;
 800a43a:	e02b      	b.n	800a494 <mrbc_p_sub+0x14c>
#endif

  case MRBC_TT_RANGE:{
    mrbc_value v1 = mrbc_range_first(v);
 800a43c:	f107 0318 	add.w	r3, r7, #24
 800a440:	6979      	ldr	r1, [r7, #20]
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff fcfb 	bl	8009e3e <mrbc_range_first>
    mrbc_p_sub(&v1);
 800a448:	f107 0318 	add.w	r3, r7, #24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff ff7b 	bl	800a348 <mrbc_p_sub>
    mrbc_print( mrbc_range_exclude_end(v) ? "..." : ".." );
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	f7ff fd17 	bl	8009e86 <mrbc_range_exclude_end>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <mrbc_p_sub+0x11a>
 800a45e:	4b15      	ldr	r3, [pc, #84]	; (800a4b4 <mrbc_p_sub+0x16c>)
 800a460:	e000      	b.n	800a464 <mrbc_p_sub+0x11c>
 800a462:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <mrbc_p_sub+0x170>)
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fc05 	bl	8009c74 <mrbc_print>
    v1 = mrbc_range_last(v);
 800a46a:	463b      	mov	r3, r7
 800a46c:	6979      	ldr	r1, [r7, #20]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fcf7 	bl	8009e62 <mrbc_range_last>
 800a474:	f107 0418 	add.w	r4, r7, #24
 800a478:	463b      	mov	r3, r7
 800a47a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a47c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_p_sub(&v1);
 800a480:	f107 0318 	add.w	r3, r7, #24
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff ff5f 	bl	800a348 <mrbc_p_sub>
  } break;
 800a48a:	e003      	b.n	800a494 <mrbc_p_sub+0x14c>

  default:
    mrbc_print_sub(v);
 800a48c:	6978      	ldr	r0, [r7, #20]
 800a48e:	f000 f847 	bl	800a520 <mrbc_print_sub>
    break;
 800a492:	bf00      	nop
  if( mrbc_type(*v) > MRBC_TT_INC_DEC_THRESHOLD ) {
    mrbc_printf("(%d)", v->obj->ref_count);
  }
#endif

  return 0;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	373c      	adds	r7, #60	; 0x3c
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd90      	pop	{r4, r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	08019254 	.word	0x08019254
 800a4a4:	0801925c 	.word	0x0801925c
 800a4a8:	08019260 	.word	0x08019260
 800a4ac:	08019268 	.word	0x08019268
 800a4b0:	0801926c 	.word	0x0801926c
 800a4b4:	08019274 	.word	0x08019274
 800a4b8:	08019278 	.word	0x08019278

0800a4bc <mrbc_puts_sub>:
  @param  v	pointer to target value.
  @retval 0	normal return.
  @retval 1	already output LF.
*/
int mrbc_puts_sub(const mrbc_value *v)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  if( mrbc_type(*v) == MRBC_TT_ARRAY ) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f993 3000 	ldrsb.w	r3, [r3]
 800a4ca:	2b0a      	cmp	r3, #10
 800a4cc:	d120      	bne.n	800a510 <mrbc_puts_sub+0x54>
    int i;
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	e014      	b.n	800a4fe <mrbc_puts_sub+0x42>
      if( i != 0 ) mrbc_putchar('\n');
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <mrbc_puts_sub+0x24>
 800a4da:	200a      	movs	r0, #10
 800a4dc:	f7ff fdd2 	bl	800a084 <mrbc_putchar>
      mrbc_value v1 = mrbc_array_get(v, i);
 800a4e0:	f107 0308 	add.w	r3, r7, #8
 800a4e4:	69fa      	ldr	r2, [r7, #28]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f8 f81d 	bl	8002528 <mrbc_array_get>
      mrbc_puts_sub(&v1);
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff ffe2 	bl	800a4bc <mrbc_puts_sub>
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fc49 	bl	8009d96 <mrbc_array_size>
 800a504:	4602      	mov	r2, r0
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4293      	cmp	r3, r2
 800a50a:	dbe3      	blt.n	800a4d4 <mrbc_puts_sub+0x18>
    }
    return 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e003      	b.n	800a518 <mrbc_puts_sub+0x5c>
  }

  return mrbc_print_sub(v);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f805 	bl	800a520 <mrbc_print_sub>
 800a516:	4603      	mov	r3, r0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <mrbc_print_sub>:
  @param  v	pointer to target value.
  @retval 0	normal return.
  @retval 1	already output LF.
*/
int mrbc_print_sub(const mrbc_value *v)
{
 800a520:	b590      	push	{r4, r7, lr}
 800a522:	b097      	sub	sp, #92	; 0x5c
 800a524:	af00      	add	r7, sp, #0
 800a526:	6178      	str	r0, [r7, #20]
  int ret = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	657b      	str	r3, [r7, #84]	; 0x54

  switch( mrbc_type(*v) ) {
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f993 3000 	ldrsb.w	r3, [r3]
 800a532:	3301      	adds	r3, #1
 800a534:	2b0f      	cmp	r3, #15
 800a536:	f200 8132 	bhi.w	800a79e <mrbc_print_sub+0x27e>
 800a53a:	a201      	add	r2, pc, #4	; (adr r2, 800a540 <mrbc_print_sub+0x20>)
 800a53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a540:	0800a74f 	.word	0x0800a74f
 800a544:	0800a581 	.word	0x0800a581
 800a548:	0800a7af 	.word	0x0800a7af
 800a54c:	0800a589 	.word	0x0800a589
 800a550:	0800a591 	.word	0x0800a591
 800a554:	0800a599 	.word	0x0800a599
 800a558:	0800a5a7 	.word	0x0800a5a7
 800a55c:	0800a5b5 	.word	0x0800a5b5
 800a560:	0800a5c3 	.word	0x0800a5c3
 800a564:	0800a5d3 	.word	0x0800a5d3
 800a568:	0800a5f9 	.word	0x0800a5f9
 800a56c:	0800a607 	.word	0x0800a607
 800a570:	0800a653 	.word	0x0800a653
 800a574:	0800a69b 	.word	0x0800a69b
 800a578:	0800a6eb 	.word	0x0800a6eb
 800a57c:	0800a75d 	.word	0x0800a75d
  case MRBC_TT_EMPTY:	mrbc_print("(empty)");		break;
 800a580:	488f      	ldr	r0, [pc, #572]	; (800a7c0 <mrbc_print_sub+0x2a0>)
 800a582:	f7ff fb77 	bl	8009c74 <mrbc_print>
 800a586:	e115      	b.n	800a7b4 <mrbc_print_sub+0x294>
  case MRBC_TT_NIL:					break;
  case MRBC_TT_FALSE:	mrbc_print("false");		break;
 800a588:	488e      	ldr	r0, [pc, #568]	; (800a7c4 <mrbc_print_sub+0x2a4>)
 800a58a:	f7ff fb73 	bl	8009c74 <mrbc_print>
 800a58e:	e111      	b.n	800a7b4 <mrbc_print_sub+0x294>
  case MRBC_TT_TRUE:	mrbc_print("true");		break;
 800a590:	488d      	ldr	r0, [pc, #564]	; (800a7c8 <mrbc_print_sub+0x2a8>)
 800a592:	f7ff fb6f 	bl	8009c74 <mrbc_print>
 800a596:	e10d      	b.n	800a7b4 <mrbc_print_sub+0x294>
  case MRBC_TT_INTEGER:	mrbc_printf("%D", v->i);	break;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	4619      	mov	r1, r3
 800a59e:	488b      	ldr	r0, [pc, #556]	; (800a7cc <mrbc_print_sub+0x2ac>)
 800a5a0:	f7ff fdc0 	bl	800a124 <mrbc_printf>
 800a5a4:	e106      	b.n	800a7b4 <mrbc_print_sub+0x294>
#if MRBC_USE_FLOAT
  case MRBC_TT_FLOAT:	mrbc_printf("%g", v->d);	break;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a5ac:	4888      	ldr	r0, [pc, #544]	; (800a7d0 <mrbc_print_sub+0x2b0>)
 800a5ae:	f7ff fdb9 	bl	800a124 <mrbc_printf>
 800a5b2:	e0ff      	b.n	800a7b4 <mrbc_print_sub+0x294>
#endif
  case MRBC_TT_SYMBOL:	mrbc_print_symbol(v->i);	break;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	b21b      	sxth	r3, r3
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fd72 	bl	800a0a4 <mrbc_print_symbol>
 800a5c0:	e0f8      	b.n	800a7b4 <mrbc_print_sub+0x294>
  case MRBC_TT_CLASS:	mrbc_print_symbol(v->cls->sym_id); break;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fd6a 	bl	800a0a4 <mrbc_print_symbol>
 800a5d0:	e0f0      	b.n	800a7b4 <mrbc_print_sub+0x294>

  case MRBC_TT_OBJECT:
    mrbc_printf("#<");
 800a5d2:	4880      	ldr	r0, [pc, #512]	; (800a7d4 <mrbc_print_sub+0x2b4>)
 800a5d4:	f7ff fda6 	bl	800a124 <mrbc_printf>
    mrbc_print_symbol( find_class_by_object(v)->sym_id );
 800a5d8:	6978      	ldr	r0, [r7, #20]
 800a5da:	f7ff faf5 	bl	8009bc8 <find_class_by_object>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff fd5d 	bl	800a0a4 <mrbc_print_symbol>
    mrbc_printf(":%08x>", v->instance );
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4879      	ldr	r0, [pc, #484]	; (800a7d8 <mrbc_print_sub+0x2b8>)
 800a5f2:	f7ff fd97 	bl	800a124 <mrbc_printf>
    break;
 800a5f6:	e0dd      	b.n	800a7b4 <mrbc_print_sub+0x294>

  case MRBC_TT_PROC:
    mrbc_printf("#<Proc:%08x>", v->proc );
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4877      	ldr	r0, [pc, #476]	; (800a7dc <mrbc_print_sub+0x2bc>)
 800a600:	f7ff fd90 	bl	800a124 <mrbc_printf>
    //mrbc_printf("#<Proc:%08x, callinfo=%p>", v->proc, v->proc->callinfo );
    break;
 800a604:	e0d6      	b.n	800a7b4 <mrbc_print_sub+0x294>

  case MRBC_TT_ARRAY:{
    mrbc_putchar('[');
 800a606:	205b      	movs	r0, #91	; 0x5b
 800a608:	f7ff fd3c 	bl	800a084 <mrbc_putchar>
    int i;
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a60c:	2300      	movs	r3, #0
 800a60e:	653b      	str	r3, [r7, #80]	; 0x50
 800a610:	e014      	b.n	800a63c <mrbc_print_sub+0x11c>
      if( i != 0 ) mrbc_print(", ");
 800a612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <mrbc_print_sub+0xfe>
 800a618:	4871      	ldr	r0, [pc, #452]	; (800a7e0 <mrbc_print_sub+0x2c0>)
 800a61a:	f7ff fb2b 	bl	8009c74 <mrbc_print>
      mrbc_value v1 = mrbc_array_get(v, i);
 800a61e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a624:	6979      	ldr	r1, [r7, #20]
 800a626:	4618      	mov	r0, r3
 800a628:	f7f7 ff7e 	bl	8002528 <mrbc_array_get>
      mrbc_p_sub(&v1);
 800a62c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a630:	4618      	mov	r0, r3
 800a632:	f7ff fe89 	bl	800a348 <mrbc_p_sub>
    for( i = 0; i < mrbc_array_size(v); i++ ) {
 800a636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a638:	3301      	adds	r3, #1
 800a63a:	653b      	str	r3, [r7, #80]	; 0x50
 800a63c:	6978      	ldr	r0, [r7, #20]
 800a63e:	f7ff fbaa 	bl	8009d96 <mrbc_array_size>
 800a642:	4602      	mov	r2, r0
 800a644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a646:	4293      	cmp	r3, r2
 800a648:	dbe3      	blt.n	800a612 <mrbc_print_sub+0xf2>
    }
    mrbc_putchar(']');
 800a64a:	205d      	movs	r0, #93	; 0x5d
 800a64c:	f7ff fd1a 	bl	800a084 <mrbc_putchar>
  } break;
 800a650:	e0b0      	b.n	800a7b4 <mrbc_print_sub+0x294>

#if MRBC_USE_STRING
  case MRBC_TT_STRING:
    mrbc_nprint( mrbc_string_cstr(v), mrbc_string_size(v) );
 800a652:	6978      	ldr	r0, [r7, #20]
 800a654:	f7ff fb92 	bl	8009d7c <mrbc_string_cstr>
 800a658:	4604      	mov	r4, r0
 800a65a:	6978      	ldr	r0, [r7, #20]
 800a65c:	f7ff fb81 	bl	8009d62 <mrbc_string_size>
 800a660:	4603      	mov	r3, r0
 800a662:	4619      	mov	r1, r3
 800a664:	4620      	mov	r0, r4
 800a666:	f7ff fd4f 	bl	800a108 <mrbc_nprint>
    if( mrbc_string_size(v) != 0 &&
 800a66a:	6978      	ldr	r0, [r7, #20]
 800a66c:	f7ff fb79 	bl	8009d62 <mrbc_string_size>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 809d 	beq.w	800a7b2 <mrbc_print_sub+0x292>
	mrbc_string_cstr(v)[ mrbc_string_size(v) - 1 ] == '\n' ) ret = 1;
 800a678:	6978      	ldr	r0, [r7, #20]
 800a67a:	f7ff fb7f 	bl	8009d7c <mrbc_string_cstr>
 800a67e:	4604      	mov	r4, r0
 800a680:	6978      	ldr	r0, [r7, #20]
 800a682:	f7ff fb6e 	bl	8009d62 <mrbc_string_size>
 800a686:	4603      	mov	r3, r0
 800a688:	3b01      	subs	r3, #1
 800a68a:	4423      	add	r3, r4
 800a68c:	781b      	ldrb	r3, [r3, #0]
    if( mrbc_string_size(v) != 0 &&
 800a68e:	2b0a      	cmp	r3, #10
 800a690:	f040 808f 	bne.w	800a7b2 <mrbc_print_sub+0x292>
	mrbc_string_cstr(v)[ mrbc_string_size(v) - 1 ] == '\n' ) ret = 1;
 800a694:	2301      	movs	r3, #1
 800a696:	657b      	str	r3, [r7, #84]	; 0x54
    break;
 800a698:	e08b      	b.n	800a7b2 <mrbc_print_sub+0x292>
#endif

  case MRBC_TT_RANGE:{
    mrbc_value v1 = mrbc_range_first(v);
 800a69a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a69e:	6979      	ldr	r1, [r7, #20]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fbcc 	bl	8009e3e <mrbc_range_first>
    mrbc_print_sub(&v1);
 800a6a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff ff38 	bl	800a520 <mrbc_print_sub>
    mrbc_print( mrbc_range_exclude_end(v) ? "..." : ".." );
 800a6b0:	6978      	ldr	r0, [r7, #20]
 800a6b2:	f7ff fbe8 	bl	8009e86 <mrbc_range_exclude_end>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <mrbc_print_sub+0x1a0>
 800a6bc:	4b49      	ldr	r3, [pc, #292]	; (800a7e4 <mrbc_print_sub+0x2c4>)
 800a6be:	e000      	b.n	800a6c2 <mrbc_print_sub+0x1a2>
 800a6c0:	4b49      	ldr	r3, [pc, #292]	; (800a7e8 <mrbc_print_sub+0x2c8>)
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fad6 	bl	8009c74 <mrbc_print>
    v1 = mrbc_range_last(v);
 800a6c8:	463b      	mov	r3, r7
 800a6ca:	6979      	ldr	r1, [r7, #20]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff fbc8 	bl	8009e62 <mrbc_range_last>
 800a6d2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a6da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_print_sub(&v1);
 800a6de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff ff1c 	bl	800a520 <mrbc_print_sub>
  } break;
 800a6e8:	e064      	b.n	800a7b4 <mrbc_print_sub+0x294>

  case MRBC_TT_HASH:{
    mrbc_putchar('{');
 800a6ea:	207b      	movs	r0, #123	; 0x7b
 800a6ec:	f7ff fcca 	bl	800a084 <mrbc_putchar>
    mrbc_hash_iterator ite = mrbc_hash_iterator_new(v);
 800a6f0:	f107 031c 	add.w	r3, r7, #28
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff fb5a 	bl	8009db0 <mrbc_hash_iterator_new>
    while( mrbc_hash_i_has_next(&ite) ) {
 800a6fc:	e01b      	b.n	800a736 <mrbc_print_sub+0x216>
      mrbc_value *vk = mrbc_hash_i_next(&ite);
 800a6fe:	f107 031c 	add.w	r3, r7, #28
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff fb87 	bl	8009e16 <mrbc_hash_i_next>
 800a708:	64f8      	str	r0, [r7, #76]	; 0x4c
      mrbc_p_sub(vk);
 800a70a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a70c:	f7ff fe1c 	bl	800a348 <mrbc_p_sub>
      mrbc_print("=>");
 800a710:	4836      	ldr	r0, [pc, #216]	; (800a7ec <mrbc_print_sub+0x2cc>)
 800a712:	f7ff faaf 	bl	8009c74 <mrbc_print>
      mrbc_p_sub(vk+1);
 800a716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a718:	3310      	adds	r3, #16
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fe14 	bl	800a348 <mrbc_p_sub>
      if( mrbc_hash_i_has_next(&ite) ) mrbc_print(", ");
 800a720:	f107 031c 	add.w	r3, r7, #28
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff fb63 	bl	8009df0 <mrbc_hash_i_has_next>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <mrbc_print_sub+0x216>
 800a730:	482b      	ldr	r0, [pc, #172]	; (800a7e0 <mrbc_print_sub+0x2c0>)
 800a732:	f7ff fa9f 	bl	8009c74 <mrbc_print>
    while( mrbc_hash_i_has_next(&ite) ) {
 800a736:	f107 031c 	add.w	r3, r7, #28
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fb58 	bl	8009df0 <mrbc_hash_i_has_next>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1db      	bne.n	800a6fe <mrbc_print_sub+0x1de>
    }
    mrbc_putchar('}');
 800a746:	207d      	movs	r0, #125	; 0x7d
 800a748:	f7ff fc9c 	bl	800a084 <mrbc_putchar>
  } break;
 800a74c:	e032      	b.n	800a7b4 <mrbc_print_sub+0x294>

  case MRBC_TT_HANDLE:
    mrbc_printf("#<Handle:%08x>", v->handle );
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	4619      	mov	r1, r3
 800a754:	4826      	ldr	r0, [pc, #152]	; (800a7f0 <mrbc_print_sub+0x2d0>)
 800a756:	f7ff fce5 	bl	800a124 <mrbc_printf>
    break;
 800a75a:	e02b      	b.n	800a7b4 <mrbc_print_sub+0x294>

  case MRBC_TT_EXCEPTION:
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a766:	4618      	mov	r0, r3
 800a768:	f003 f9e6 	bl	800db38 <mrbc_symid_to_str>
 800a76c:	4604      	mov	r4, r0
		 v->exception->message ?
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	68db      	ldr	r3, [r3, #12]
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <mrbc_print_sub+0x260>
		   (const char *)v->exception->message :
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	689b      	ldr	r3, [r3, #8]
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	e008      	b.n	800a792 <mrbc_print_sub+0x272>
		   mrbc_symid_to_str(v->exception->cls->sym_id) );
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f003 f9d4 	bl	800db38 <mrbc_symid_to_str>
 800a790:	4603      	mov	r3, r0
    mrbc_printf("#<%s: %s>", mrbc_symid_to_str(v->exception->cls->sym_id),
 800a792:	461a      	mov	r2, r3
 800a794:	4621      	mov	r1, r4
 800a796:	4817      	ldr	r0, [pc, #92]	; (800a7f4 <mrbc_print_sub+0x2d4>)
 800a798:	f7ff fcc4 	bl	800a124 <mrbc_printf>
    break;
 800a79c:	e00a      	b.n	800a7b4 <mrbc_print_sub+0x294>

  default:
    mrbc_printf("Not support MRBC_TT_XX(%d)", mrbc_type(*v));
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f993 3000 	ldrsb.w	r3, [r3]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4814      	ldr	r0, [pc, #80]	; (800a7f8 <mrbc_print_sub+0x2d8>)
 800a7a8:	f7ff fcbc 	bl	800a124 <mrbc_printf>
    break;
 800a7ac:	e002      	b.n	800a7b4 <mrbc_print_sub+0x294>
  case MRBC_TT_NIL:					break;
 800a7ae:	bf00      	nop
 800a7b0:	e000      	b.n	800a7b4 <mrbc_print_sub+0x294>
    break;
 800a7b2:	bf00      	nop
  }

  return ret;
 800a7b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	375c      	adds	r7, #92	; 0x5c
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd90      	pop	{r4, r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	0801927c 	.word	0x0801927c
 800a7c4:	08019284 	.word	0x08019284
 800a7c8:	0801928c 	.word	0x0801928c
 800a7cc:	08019294 	.word	0x08019294
 800a7d0:	08019298 	.word	0x08019298
 800a7d4:	0801929c 	.word	0x0801929c
 800a7d8:	080192a0 	.word	0x080192a0
 800a7dc:	080192a8 	.word	0x080192a8
 800a7e0:	080192b8 	.word	0x080192b8
 800a7e4:	08019274 	.word	0x08019274
 800a7e8:	08019278 	.word	0x08019278
 800a7ec:	080192bc 	.word	0x080192bc
 800a7f0:	080192c0 	.word	0x080192c0
 800a7f4:	080192d0 	.word	0x080192d0
 800a7f8:	080192dc 	.word	0x080192dc

0800a7fc <mrbc_printf_replace_buffer>:
  @param  pf	pointer to mrbc_printf
  @param  buf	pointer to output buffer.
  @param  size	buffer size.
*/
void mrbc_printf_replace_buffer(mrbc_printf_t *pf, char *buf, int size)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  int p_ofs = pf->p - pf->buf;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	617b      	str	r3, [r7, #20]
  pf->buf = buf;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	601a      	str	r2, [r3, #0]
  pf->buf_end = buf + size - 1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	605a      	str	r2, [r3, #4]
  pf->p = pf->buf + p_ofs;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	441a      	add	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	609a      	str	r2, [r3, #8]
}
 800a832:	bf00      	nop
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
	...

0800a840 <mrbc_printf_main>:
  @retval 1	found a format identifier.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_main( mrbc_printf_t *pf )
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  int ch = -1;
 800a848:	f04f 33ff 	mov.w	r3, #4294967295
 800a84c:	617b      	str	r3, [r7, #20]
  pf->fmt = (struct RPrintfFormat){0};
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3310      	adds	r3, #16
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	605a      	str	r2, [r3, #4]

  while( pf->p < pf->buf_end && (ch = *pf->fstr) != '\0' ) {
 800a858:	e019      	b.n	800a88e <mrbc_printf_main+0x4e>
    pf->fstr++;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	60da      	str	r2, [r3, #12]
    if( ch == '%' ) {
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b25      	cmp	r3, #37	; 0x25
 800a868:	d109      	bne.n	800a87e <mrbc_printf_main+0x3e>
      if( *pf->fstr == '%' ) {	// is "%%"
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b25      	cmp	r3, #37	; 0x25
 800a872:	d121      	bne.n	800a8b8 <mrbc_printf_main+0x78>
	pf->fstr++;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60da      	str	r2, [r3, #12]
      } else {
	goto PARSE_FLAG;
      }
    }
    *pf->p++ = ch;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	1c59      	adds	r1, r3, #1
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6091      	str	r1, [r2, #8]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	b2d2      	uxtb	r2, r2
 800a88c:	701a      	strb	r2, [r3, #0]
  while( pf->p < pf->buf_end && (ch = *pf->fstr) != '\0' ) {
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	689a      	ldr	r2, [r3, #8]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	429a      	cmp	r2, r3
 800a898:	d206      	bcs.n	800a8a8 <mrbc_printf_main+0x68>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1d8      	bne.n	800a85a <mrbc_printf_main+0x1a>
  }
  return -(ch != '\0');
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	bf14      	ite	ne
 800a8ae:	2301      	movne	r3, #1
 800a8b0:	2300      	moveq	r3, #0
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	425b      	negs	r3, r3
 800a8b6:	e0b5      	b.n	800aa24 <mrbc_printf_main+0x1e4>
	goto PARSE_FLAG;
 800a8b8:	bf00      	nop


 PARSE_FLAG:
  // parse format - '%' [flag] [width] [.precision] type
  //   e.g. "%05d"
  while( (ch = *pf->fstr) ) {
 800a8ba:	e046      	b.n	800a94a <mrbc_printf_main+0x10a>
    switch( ch ) {
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	3b20      	subs	r3, #32
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d84a      	bhi.n	800a95a <mrbc_printf_main+0x11a>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <mrbc_printf_main+0x8c>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a91d 	.word	0x0800a91d
 800a8d0:	0800a95b 	.word	0x0800a95b
 800a8d4:	0800a95b 	.word	0x0800a95b
 800a8d8:	0800a95b 	.word	0x0800a95b
 800a8dc:	0800a95b 	.word	0x0800a95b
 800a8e0:	0800a95b 	.word	0x0800a95b
 800a8e4:	0800a95b 	.word	0x0800a95b
 800a8e8:	0800a95b 	.word	0x0800a95b
 800a8ec:	0800a95b 	.word	0x0800a95b
 800a8f0:	0800a95b 	.word	0x0800a95b
 800a8f4:	0800a95b 	.word	0x0800a95b
 800a8f8:	0800a911 	.word	0x0800a911
 800a8fc:	0800a95b 	.word	0x0800a95b
 800a900:	0800a929 	.word	0x0800a929
 800a904:	0800a95b 	.word	0x0800a95b
 800a908:	0800a95b 	.word	0x0800a95b
 800a90c:	0800a935 	.word	0x0800a935
    case '+': pf->fmt.flag_plus = 1; break;
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	7c53      	ldrb	r3, [r2, #17]
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	7453      	strb	r3, [r2, #17]
 800a91a:	e011      	b.n	800a940 <mrbc_printf_main+0x100>
    case ' ': pf->fmt.flag_space = 1; break;
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7c53      	ldrb	r3, [r2, #17]
 800a920:	f043 0304 	orr.w	r3, r3, #4
 800a924:	7453      	strb	r3, [r2, #17]
 800a926:	e00b      	b.n	800a940 <mrbc_printf_main+0x100>
    case '-': pf->fmt.flag_minus = 1; break;
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	7c53      	ldrb	r3, [r2, #17]
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	7453      	strb	r3, [r2, #17]
 800a932:	e005      	b.n	800a940 <mrbc_printf_main+0x100>
    case '0': pf->fmt.flag_zero = 1; break;
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c53      	ldrb	r3, [r2, #17]
 800a938:	f043 0308 	orr.w	r3, r3, #8
 800a93c:	7453      	strb	r3, [r2, #17]
 800a93e:	bf00      	nop
    default : goto PARSE_WIDTH;
    }
    pf->fstr++;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60da      	str	r2, [r3, #12]
  while( (ch = *pf->fstr) ) {
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1b1      	bne.n	800a8bc <mrbc_printf_main+0x7c>
  }

 PARSE_WIDTH:
 800a958:	e000      	b.n	800a95c <mrbc_printf_main+0x11c>
    default : goto PARSE_WIDTH;
 800a95a:	bf00      	nop
  while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {	// isdigit()
 800a95c:	e014      	b.n	800a988 <mrbc_printf_main+0x148>
    pf->fmt.width = pf->fmt.width * 10 + ch;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a964:	b29b      	uxth	r3, r3
 800a966:	461a      	mov	r2, r3
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	b29b      	uxth	r3, r3
 800a974:	4413      	add	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	b21a      	sxth	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	825a      	strh	r2, [r3, #18]
    pf->fstr++;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60da      	str	r2, [r3, #12]
  while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {	// isdigit()
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	3b30      	subs	r3, #48	; 0x30
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	db04      	blt.n	800a9a2 <mrbc_printf_main+0x162>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b09      	cmp	r3, #9
 800a99c:	dc01      	bgt.n	800a9a2 <mrbc_printf_main+0x162>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e000      	b.n	800a9a4 <mrbc_printf_main+0x164>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1da      	bne.n	800a95e <mrbc_printf_main+0x11e>
  }
  if( *pf->fstr == '.' ) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a9b0:	d12a      	bne.n	800aa08 <mrbc_printf_main+0x1c8>
    pf->fstr++;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60da      	str	r2, [r3, #12]
    while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {
 800a9bc:	e014      	b.n	800a9e8 <mrbc_printf_main+0x1a8>
      pf->fmt.precision = pf->fmt.precision * 10 + ch;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	0092      	lsls	r2, r2, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	b21a      	sxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	829a      	strh	r2, [r3, #20]
      pf->fstr++;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60da      	str	r2, [r3, #12]
    while( (void)(ch = *pf->fstr - '0'), (0 <= ch && ch <= 9)) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	3b30      	subs	r3, #48	; 0x30
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	db04      	blt.n	800aa02 <mrbc_printf_main+0x1c2>
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	2b09      	cmp	r3, #9
 800a9fc:	dc01      	bgt.n	800aa02 <mrbc_printf_main+0x1c2>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <mrbc_printf_main+0x1c4>
 800aa02:	2300      	movs	r3, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1da      	bne.n	800a9be <mrbc_printf_main+0x17e>
    }
  }
  if( *pf->fstr ) pf->fmt.type = *pf->fstr++;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d007      	beq.n	800aa22 <mrbc_printf_main+0x1e2>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	1c59      	adds	r1, r3, #1
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	60d1      	str	r1, [r2, #12]
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	741a      	strb	r2, [r3, #16]

  return 1;
 800aa22:	2301      	movs	r3, #1
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <mrbc_printf_char>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_char( mrbc_printf_t *pf, int ch )
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  if( pf->fmt.flag_minus ) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	7c5b      	ldrb	r3, [r3, #17]
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d010      	beq.n	800aa6a <mrbc_printf_char+0x3a>
    if( pf->p == pf->buf_end ) return -1;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d102      	bne.n	800aa5a <mrbc_printf_char+0x2a>
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	e03b      	b.n	800aad2 <mrbc_printf_char+0xa2>
    *pf->p++ = ch;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	1c59      	adds	r1, r3, #1
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	6091      	str	r1, [r2, #8]
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	b2d2      	uxtb	r2, r2
 800aa68:	701a      	strb	r2, [r3, #0]
  }

  int width = pf->fmt.width;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800aa70:	60fb      	str	r3, [r7, #12]
  while( --width > 0 ) {
 800aa72:	e00f      	b.n	800aa94 <mrbc_printf_char+0x64>
    if( pf->p == pf->buf_end ) return -1;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d102      	bne.n	800aa86 <mrbc_printf_char+0x56>
 800aa80:	f04f 33ff 	mov.w	r3, #4294967295
 800aa84:	e025      	b.n	800aad2 <mrbc_printf_char+0xa2>
    *pf->p++ = ' ';
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	1c59      	adds	r1, r3, #1
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6091      	str	r1, [r2, #8]
 800aa90:	2220      	movs	r2, #32
 800aa92:	701a      	strb	r2, [r3, #0]
  while( --width > 0 ) {
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dce9      	bgt.n	800aa74 <mrbc_printf_char+0x44>
  }

  if( !pf->fmt.flag_minus ) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7c5b      	ldrb	r3, [r3, #17]
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d110      	bne.n	800aad0 <mrbc_printf_char+0xa0>
    if( pf->p == pf->buf_end ) return -1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	689a      	ldr	r2, [r3, #8]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d102      	bne.n	800aac0 <mrbc_printf_char+0x90>
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	e008      	b.n	800aad2 <mrbc_printf_char+0xa2>
    *pf->p++ = ch;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	1c59      	adds	r1, r3, #1
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	6091      	str	r1, [r2, #8]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	701a      	strb	r2, [r3, #0]
  }

  return 0;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
	...

0800aae0 <mrbc_printf_bstr>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_bstr( mrbc_printf_t *pf, const char *str, int len, int pad )
{
 800aae0:	b480      	push	{r7}
 800aae2:	b089      	sub	sp, #36	; 0x24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61fb      	str	r3, [r7, #28]

  if( str == NULL ) {
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d103      	bne.n	800ab00 <mrbc_printf_bstr+0x20>
    str = "(null)";
 800aaf8:	4b3b      	ldr	r3, [pc, #236]	; (800abe8 <mrbc_printf_bstr+0x108>)
 800aafa:	60bb      	str	r3, [r7, #8]
    len = 6;
 800aafc:	2306      	movs	r3, #6
 800aafe:	607b      	str	r3, [r7, #4]
  }
  if( pf->fmt.precision && len > pf->fmt.precision ) len = pf->fmt.precision;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <mrbc_printf_bstr+0x40>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	dd03      	ble.n	800ab20 <mrbc_printf_bstr+0x40>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ab1e:	607b      	str	r3, [r7, #4]

  int tw = len;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	61bb      	str	r3, [r7, #24]
  if( pf->fmt.width > len ) tw = pf->fmt.width;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	da03      	bge.n	800ab3a <mrbc_printf_bstr+0x5a>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ab38:	61bb      	str	r3, [r7, #24]

  int remain = pf->buf_end - pf->p;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	613b      	str	r3, [r7, #16]
  if( len > remain ) {
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	dd04      	ble.n	800ab58 <mrbc_printf_bstr+0x78>
    len = remain;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	607b      	str	r3, [r7, #4]
    ret = -1;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	61fb      	str	r3, [r7, #28]
  }
  if( tw > remain ) {
 800ab58:	69ba      	ldr	r2, [r7, #24]
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	dd04      	ble.n	800ab6a <mrbc_printf_bstr+0x8a>
    tw = remain;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	61bb      	str	r3, [r7, #24]
    ret = -1;
 800ab64:	f04f 33ff 	mov.w	r3, #4294967295
 800ab68:	61fb      	str	r3, [r7, #28]
  }

  int n_pad = tw - len;
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	617b      	str	r3, [r7, #20]

  if( !pf->fmt.flag_minus ) {
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	7c5b      	ldrb	r3, [r3, #17]
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d118      	bne.n	800abb2 <mrbc_printf_bstr+0xd2>
    while( n_pad-- > 0 ) {
 800ab80:	e007      	b.n	800ab92 <mrbc_printf_bstr+0xb2>
      *pf->p++ = pad;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	1c59      	adds	r1, r3, #1
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	6091      	str	r1, [r2, #8]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	701a      	strb	r2, [r3, #0]
    while( n_pad-- > 0 ) {
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	1e5a      	subs	r2, r3, #1
 800ab96:	617a      	str	r2, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dcf2      	bgt.n	800ab82 <mrbc_printf_bstr+0xa2>
    }
  }
  while( len-- > 0 ) {
 800ab9c:	e009      	b.n	800abb2 <mrbc_printf_bstr+0xd2>
    *pf->p++ = *str++;
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	1c53      	adds	r3, r2, #1
 800aba2:	60bb      	str	r3, [r7, #8]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	1c58      	adds	r0, r3, #1
 800abaa:	68f9      	ldr	r1, [r7, #12]
 800abac:	6088      	str	r0, [r1, #8]
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	701a      	strb	r2, [r3, #0]
  while( len-- > 0 ) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	1e5a      	subs	r2, r3, #1
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dcf0      	bgt.n	800ab9e <mrbc_printf_bstr+0xbe>
  }
  while( n_pad-- > 0 ) {
 800abbc:	e007      	b.n	800abce <mrbc_printf_bstr+0xee>
    *pf->p++ = pad;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	1c59      	adds	r1, r3, #1
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	6091      	str	r1, [r2, #8]
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	701a      	strb	r2, [r3, #0]
  while( n_pad-- > 0 ) {
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	617a      	str	r2, [r7, #20]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	dcf2      	bgt.n	800abbe <mrbc_printf_bstr+0xde>
  }

  return ret;
 800abd8:	69fb      	ldr	r3, [r7, #28]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3724      	adds	r7, #36	; 0x24
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	08019254 	.word	0x08019254

0800abec <mrbc_printf_int>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_int( mrbc_printf_t *pf, mrbc_int_t value, unsigned int base )
{
 800abec:	b480      	push	{r7}
 800abee:	b097      	sub	sp, #92	; 0x5c
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
  int sign = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	657b      	str	r3, [r7, #84]	; 0x54
  mrbc_uint_t v = value;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	653b      	str	r3, [r7, #80]	; 0x50
  char *pf_p_ini_val = pf->p;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	63bb      	str	r3, [r7, #56]	; 0x38

  if( value < 0 ) {
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da05      	bge.n	800ac18 <mrbc_printf_int+0x2c>
    sign = '-';
 800ac0c:	232d      	movs	r3, #45	; 0x2d
 800ac0e:	657b      	str	r3, [r7, #84]	; 0x54
    v = -value;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	425b      	negs	r3, r3
 800ac14:	653b      	str	r3, [r7, #80]	; 0x50
 800ac16:	e012      	b.n	800ac3e <mrbc_printf_int+0x52>
  } else if( pf->fmt.flag_plus ) {
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	7c5b      	ldrb	r3, [r3, #17]
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <mrbc_printf_int+0x40>
    sign = '+';
 800ac26:	232b      	movs	r3, #43	; 0x2b
 800ac28:	657b      	str	r3, [r7, #84]	; 0x54
 800ac2a:	e008      	b.n	800ac3e <mrbc_printf_int+0x52>
  } else if( pf->fmt.flag_space ) {
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	7c5b      	ldrb	r3, [r3, #17]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <mrbc_printf_int+0x52>
    sign = ' ';
 800ac3a:	2320      	movs	r3, #32
 800ac3c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // disable zero padding if conflict parameters exists.
  if( pf->fmt.flag_minus || pf->fmt.width == 0 || pf->fmt.precision != 0 ) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	7c5b      	ldrb	r3, [r3, #17]
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <mrbc_printf_int+0x74>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d004      	beq.n	800ac60 <mrbc_printf_int+0x74>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <mrbc_printf_int+0x7e>
    pf->fmt.flag_zero = 0;
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	7c53      	ldrb	r3, [r2, #17]
 800ac64:	f36f 03c3 	bfc	r3, #3, #1
 800ac68:	7453      	strb	r3, [r2, #17]
  }

  // create string to temporary buffer
  char buf[sizeof(mrbc_int_t) * 8];
  char *p = buf + sizeof(buf);
 800ac6a:	f107 0310 	add.w	r3, r7, #16
 800ac6e:	3320      	adds	r3, #32
 800ac70:	64fb      	str	r3, [r7, #76]	; 0x4c

  do {
    unsigned int ch = v % base;
 800ac72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	fb01 f202 	mul.w	r2, r1, r2
 800ac80:	1a9b      	subs	r3, r3, r2
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34
    *--p = ch + ((ch < 10)? '0' : 'a' - 10);
 800ac84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac86:	2b09      	cmp	r3, #9
 800ac88:	d801      	bhi.n	800ac8e <mrbc_printf_int+0xa2>
 800ac8a:	2230      	movs	r2, #48	; 0x30
 800ac8c:	e000      	b.n	800ac90 <mrbc_printf_int+0xa4>
 800ac8e:	2257      	movs	r2, #87	; 0x57
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac96:	3901      	subs	r1, #1
 800ac98:	64f9      	str	r1, [r7, #76]	; 0x4c
 800ac9a:	4413      	add	r3, r2
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca0:	701a      	strb	r2, [r3, #0]
    v /= base;
 800aca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acaa:	653b      	str	r3, [r7, #80]	; 0x50
  } while( v != 0 );
 800acac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1df      	bne.n	800ac72 <mrbc_printf_int+0x86>

  int dig_width = buf + sizeof(buf) - p;
 800acb2:	f107 0310 	add.w	r3, r7, #16
 800acb6:	3320      	adds	r3, #32
 800acb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acba:	1a9b      	subs	r3, r3, r2
 800acbc:	64bb      	str	r3, [r7, #72]	; 0x48

  // write padding character, if adjust right.
  if( !pf->fmt.flag_minus && pf->fmt.width ) {
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	7c5b      	ldrb	r3, [r3, #17]
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d13e      	bne.n	800ad4a <mrbc_printf_int+0x15e>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d039      	beq.n	800ad4a <mrbc_printf_int+0x15e>
    int pad = pf->fmt.flag_zero ? '0' : ' ';
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	7c5b      	ldrb	r3, [r3, #17]
 800acda:	f003 0308 	and.w	r3, r3, #8
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <mrbc_printf_int+0xfc>
 800ace4:	2330      	movs	r3, #48	; 0x30
 800ace6:	e000      	b.n	800acea <mrbc_printf_int+0xfe>
 800ace8:	2320      	movs	r3, #32
 800acea:	633b      	str	r3, [r7, #48]	; 0x30
    int pad_width = pf->fmt.width - !!sign;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800acf2:	461a      	mov	r2, r3
 800acf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	bf14      	ite	ne
 800acfa:	2301      	movne	r3, #1
 800acfc:	2300      	moveq	r3, #0
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	647b      	str	r3, [r7, #68]	; 0x44
    pad_width -= (pf->fmt.precision > dig_width)? pf->fmt.precision: dig_width;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	bfb8      	it	lt
 800ad12:	4613      	movlt	r3, r2
 800ad14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	647b      	str	r3, [r7, #68]	; 0x44

    for( ; pad_width > 0; pad_width-- ) {
 800ad1a:	e013      	b.n	800ad44 <mrbc_printf_int+0x158>
      *pf->p++ = pad;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	1c59      	adds	r1, r3, #1
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	6091      	str	r1, [r2, #8]
 800ad26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad28:	b2d2      	uxtb	r2, r2
 800ad2a:	701a      	strb	r2, [r3, #0]
      if( pf->p >= pf->buf_end ) return -1;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d302      	bcc.n	800ad3e <mrbc_printf_int+0x152>
 800ad38:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3c:	e07f      	b.n	800ae3e <mrbc_printf_int+0x252>
    for( ; pad_width > 0; pad_width-- ) {
 800ad3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad40:	3b01      	subs	r3, #1
 800ad42:	647b      	str	r3, [r7, #68]	; 0x44
 800ad44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dce8      	bgt.n	800ad1c <mrbc_printf_int+0x130>
    }
  }

  // sign
  if( sign ) {
 800ad4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d010      	beq.n	800ad72 <mrbc_printf_int+0x186>
    *pf->p++ = sign;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	1c59      	adds	r1, r3, #1
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	6091      	str	r1, [r2, #8]
 800ad5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad5c:	b2d2      	uxtb	r2, r2
 800ad5e:	701a      	strb	r2, [r3, #0]
    if( pf->p >= pf->buf_end ) return -1;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d302      	bcc.n	800ad72 <mrbc_printf_int+0x186>
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	e065      	b.n	800ae3e <mrbc_printf_int+0x252>
  }

  // precision
  int pre_width = pf->fmt.precision - dig_width;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	643b      	str	r3, [r7, #64]	; 0x40
  for( ; pre_width > 0; pre_width-- ) {
 800ad80:	e012      	b.n	800ada8 <mrbc_printf_int+0x1bc>
    *pf->p++ = '0';
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	1c59      	adds	r1, r3, #1
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	6091      	str	r1, [r2, #8]
 800ad8c:	2230      	movs	r2, #48	; 0x30
 800ad8e:	701a      	strb	r2, [r3, #0]
    if( pf->p >= pf->buf_end ) return -1;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d302      	bcc.n	800ada2 <mrbc_printf_int+0x1b6>
 800ad9c:	f04f 33ff 	mov.w	r3, #4294967295
 800ada0:	e04d      	b.n	800ae3e <mrbc_printf_int+0x252>
  for( ; pre_width > 0; pre_width-- ) {
 800ada2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ada4:	3b01      	subs	r3, #1
 800ada6:	643b      	str	r3, [r7, #64]	; 0x40
 800ada8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dce9      	bgt.n	800ad82 <mrbc_printf_int+0x196>
  }

  // digit
  for( ; dig_width > 0; dig_width-- ) {
 800adae:	e015      	b.n	800addc <mrbc_printf_int+0x1f0>
    *pf->p++ = *p++;
 800adb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800adb2:	1c53      	adds	r3, r2, #1
 800adb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	1c58      	adds	r0, r3, #1
 800adbc:	68f9      	ldr	r1, [r7, #12]
 800adbe:	6088      	str	r0, [r1, #8]
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	701a      	strb	r2, [r3, #0]
    if( pf->p >= pf->buf_end ) return -1;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	689a      	ldr	r2, [r3, #8]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d302      	bcc.n	800add6 <mrbc_printf_int+0x1ea>
 800add0:	f04f 33ff 	mov.w	r3, #4294967295
 800add4:	e033      	b.n	800ae3e <mrbc_printf_int+0x252>
  for( ; dig_width > 0; dig_width-- ) {
 800add6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add8:	3b01      	subs	r3, #1
 800adda:	64bb      	str	r3, [r7, #72]	; 0x48
 800addc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dce6      	bgt.n	800adb0 <mrbc_printf_int+0x1c4>
  }

  // write space, if adjust left.
  if( pf->fmt.flag_minus && pf->fmt.width ) {
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	7c5b      	ldrb	r3, [r3, #17]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d025      	beq.n	800ae3c <mrbc_printf_int+0x250>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d020      	beq.n	800ae3c <mrbc_printf_int+0x250>
    int pad_width = pf->fmt.width - (pf->p - pf_p_ini_val);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ae00:	4619      	mov	r1, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	689a      	ldr	r2, [r3, #8]
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	1acb      	subs	r3, r1, r3
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for( ; pad_width > 0; pad_width-- ) {
 800ae0e:	e012      	b.n	800ae36 <mrbc_printf_int+0x24a>
      *pf->p++ = ' ';
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	1c59      	adds	r1, r3, #1
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	6091      	str	r1, [r2, #8]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	701a      	strb	r2, [r3, #0]
      if( pf->p >= pf->buf_end ) return -1;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	689a      	ldr	r2, [r3, #8]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d302      	bcc.n	800ae30 <mrbc_printf_int+0x244>
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2e:	e006      	b.n	800ae3e <mrbc_printf_int+0x252>
    for( ; pad_width > 0; pad_width-- ) {
 800ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae32:	3b01      	subs	r3, #1
 800ae34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dce9      	bgt.n	800ae10 <mrbc_printf_int+0x224>
    }
  }

  return 0;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	375c      	adds	r7, #92	; 0x5c
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
	...

0800ae4c <mrbc_printf_bit>:
  @retval 0	done.
  @retval -1	buffer full.
  @note		not terminate ('\0') buffer tail.
*/
int mrbc_printf_bit( mrbc_printf_t *pf, mrbc_int_t value, int bit )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b096      	sub	sp, #88	; 0x58
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  if( pf->fmt.flag_plus || pf->fmt.flag_space ) {
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	7c5b      	ldrb	r3, [r3, #17]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <mrbc_printf_bit+0x28>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	7c5b      	ldrb	r3, [r3, #17]
 800ae6a:	f003 0304 	and.w	r3, r3, #4
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00a      	beq.n	800ae8a <mrbc_printf_bit+0x3e>
    return mrbc_printf_int( pf, value, 1 << bit );
 800ae74:	2201      	movs	r2, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	68b9      	ldr	r1, [r7, #8]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7ff feb3 	bl	800abec <mrbc_printf_int>
 800ae86:	4603      	mov	r3, r0
 800ae88:	e0a3      	b.n	800afd2 <mrbc_printf_bit+0x186>
  }

  if( pf->fmt.flag_minus || pf->fmt.width == 0 ) {
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	7c5b      	ldrb	r3, [r3, #17]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <mrbc_printf_bit+0x56>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <mrbc_printf_bit+0x60>
    pf->fmt.flag_zero = 0; // disable zero padding if left align or width zero.
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	7c53      	ldrb	r3, [r2, #17]
 800aea6:	f36f 03c3 	bfc	r3, #3, #1
 800aeaa:	7453      	strb	r3, [r2, #17]
  }
  pf->fmt.precision = 0;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	829a      	strh	r2, [r3, #20]

  mrbc_int_t v = value;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	657b      	str	r3, [r7, #84]	; 0x54
  int offset_a = (pf->fmt.type == 'X') ? 'A' - 10 : 'a' - 10;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	7c1b      	ldrb	r3, [r3, #16]
 800aeba:	2b58      	cmp	r3, #88	; 0x58
 800aebc:	d101      	bne.n	800aec2 <mrbc_printf_bit+0x76>
 800aebe:	2337      	movs	r3, #55	; 0x37
 800aec0:	e000      	b.n	800aec4 <mrbc_printf_bit+0x78>
 800aec2:	2357      	movs	r3, #87	; 0x57
 800aec4:	64bb      	str	r3, [r7, #72]	; 0x48
  int mask = (1 << bit) - 1;	// 0x0f, 0x07, 0x01
 800aec6:	2201      	movs	r2, #1
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	fa02 f303 	lsl.w	r3, r2, r3
 800aece:	3b01      	subs	r3, #1
 800aed0:	647b      	str	r3, [r7, #68]	; 0x44
  int mchar = mask + ((mask < 10)? '0' : offset_a);
 800aed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aed4:	2b09      	cmp	r3, #9
 800aed6:	dd01      	ble.n	800aedc <mrbc_printf_bit+0x90>
 800aed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeda:	e000      	b.n	800aede <mrbc_printf_bit+0x92>
 800aedc:	2330      	movs	r3, #48	; 0x30
 800aede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee0:	4413      	add	r3, r2
 800aee2:	643b      	str	r3, [r7, #64]	; 0x40

  // create string to local buffer
  char buf[sizeof(mrbc_int_t) * 8 + 5];
  assert( sizeof(buf) > (sizeof(mrbc_int_t) * 8 + 4) );
  char *p = buf + sizeof(buf) - 1;
 800aee4:	f107 0314 	add.w	r3, r7, #20
 800aee8:	3324      	adds	r3, #36	; 0x24
 800aeea:	653b      	str	r3, [r7, #80]	; 0x50
  *p = '\0';
 800aeec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeee:	2200      	movs	r2, #0
 800aef0:	701a      	strb	r2, [r3, #0]
  int n;
  do {
    assert( p >= buf );
 800aef2:	f107 0314 	add.w	r3, r7, #20
 800aef6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d206      	bcs.n	800af0a <mrbc_printf_bit+0xbe>
 800aefc:	4b37      	ldr	r3, [pc, #220]	; (800afdc <mrbc_printf_bit+0x190>)
 800aefe:	4a38      	ldr	r2, [pc, #224]	; (800afe0 <mrbc_printf_bit+0x194>)
 800af00:	f240 3121 	movw	r1, #801	; 0x321
 800af04:	4837      	ldr	r0, [pc, #220]	; (800afe4 <mrbc_printf_bit+0x198>)
 800af06:	f00a fb43 	bl	8015590 <__assert_func>
    n = v & mask;
 800af0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af0e:	4013      	ands	r3, r2
 800af10:	63fb      	str	r3, [r7, #60]	; 0x3c
    *--p = n + ((n < 10)? '0' : offset_a);
 800af12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af14:	2b09      	cmp	r3, #9
 800af16:	dd02      	ble.n	800af1e <mrbc_printf_bit+0xd2>
 800af18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	e000      	b.n	800af20 <mrbc_printf_bit+0xd4>
 800af1e:	2330      	movs	r3, #48	; 0x30
 800af20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af26:	3901      	subs	r1, #1
 800af28:	6539      	str	r1, [r7, #80]	; 0x50
 800af2a:	4413      	add	r3, r2
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af30:	701a      	strb	r2, [r3, #0]
    v >>= bit;
 800af32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	fa42 f303 	asr.w	r3, r2, r3
 800af3a:	657b      	str	r3, [r7, #84]	; 0x54
  } while( v != 0 && v != -1 );
 800af3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <mrbc_printf_bit+0xfe>
 800af42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d1d3      	bne.n	800aef2 <mrbc_printf_bit+0xa6>

  // add "..f" for negative value?
  // (note) '0' flag such as "%08x" is incompatible with ruby.
  if( value < 0 && !pf->fmt.flag_zero ) {
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	da29      	bge.n	800afa4 <mrbc_printf_bit+0x158>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	7c5b      	ldrb	r3, [r3, #17]
 800af54:	f003 0308 	and.w	r3, r3, #8
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d122      	bne.n	800afa4 <mrbc_printf_bit+0x158>
    if( n != mask ) *--p = mchar;
 800af5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af62:	429a      	cmp	r2, r3
 800af64:	d006      	beq.n	800af74 <mrbc_printf_bit+0x128>
 800af66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af68:	3b01      	subs	r3, #1
 800af6a:	653b      	str	r3, [r7, #80]	; 0x50
 800af6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af72:	701a      	strb	r2, [r3, #0]
    *--p = '.';
 800af74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af76:	3b01      	subs	r3, #1
 800af78:	653b      	str	r3, [r7, #80]	; 0x50
 800af7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af7c:	222e      	movs	r2, #46	; 0x2e
 800af7e:	701a      	strb	r2, [r3, #0]
    *--p = '.';
 800af80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af82:	3b01      	subs	r3, #1
 800af84:	653b      	str	r3, [r7, #80]	; 0x50
 800af86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af88:	222e      	movs	r2, #46	; 0x2e
 800af8a:	701a      	strb	r2, [r3, #0]
    assert( p >= buf );
 800af8c:	f107 0314 	add.w	r3, r7, #20
 800af90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af92:	429a      	cmp	r2, r3
 800af94:	d206      	bcs.n	800afa4 <mrbc_printf_bit+0x158>
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <mrbc_printf_bit+0x190>)
 800af98:	4a11      	ldr	r2, [pc, #68]	; (800afe0 <mrbc_printf_bit+0x194>)
 800af9a:	f240 312d 	movw	r1, #813	; 0x32d
 800af9e:	4811      	ldr	r0, [pc, #68]	; (800afe4 <mrbc_printf_bit+0x198>)
 800afa0:	f00a faf6 	bl	8015590 <__assert_func>
  }

  // decide pad character and output sign character
  int pad;
  if( pf->fmt.flag_zero ) {
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	7c5b      	ldrb	r3, [r3, #17]
 800afa8:	f003 0308 	and.w	r3, r3, #8
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d007      	beq.n	800afc2 <mrbc_printf_bit+0x176>
    pad = (value < 0) ? mchar : '0';
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da01      	bge.n	800afbc <mrbc_printf_bit+0x170>
 800afb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afba:	e000      	b.n	800afbe <mrbc_printf_bit+0x172>
 800afbc:	2330      	movs	r3, #48	; 0x30
 800afbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc0:	e001      	b.n	800afc6 <mrbc_printf_bit+0x17a>
  } else {
    pad = ' ';
 800afc2:	2320      	movs	r3, #32
 800afc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  return mrbc_printf_str( pf, p, pad );
 800afc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f7fe feaf 	bl	8009d2e <mrbc_printf_str>
 800afd0:	4603      	mov	r3, r0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3758      	adds	r7, #88	; 0x58
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	080192f8 	.word	0x080192f8
 800afe0:	0801ade0 	.word	0x0801ade0
 800afe4:	08019304 	.word	0x08019304

0800afe8 <mrbc_printf_float>:
  @param  value	output value.
  @retval 0	done.
  @retval -1	buffer full.
*/
int mrbc_printf_float( mrbc_printf_t *pf, double value )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08c      	sub	sp, #48	; 0x30
 800afec:	af02      	add	r7, sp, #8
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	ed87 0b00 	vstr	d0, [r7]
  char fstr[16];
  const char *p1 = pf->fstr;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
  char *p2 = fstr + sizeof(fstr) - 1;
 800affa:	f107 0310 	add.w	r3, r7, #16
 800affe:	330f      	adds	r3, #15
 800b000:	623b      	str	r3, [r7, #32]

  *p2 = '\0';
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
  while( (*--p2 = *--p1) != '%' )
 800b008:	bf00      	nop
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	3b01      	subs	r3, #1
 800b00e:	627b      	str	r3, [r7, #36]	; 0x24
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	3b01      	subs	r3, #1
 800b014:	623b      	str	r3, [r7, #32]
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	701a      	strb	r2, [r3, #0]
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	2b25      	cmp	r3, #37	; 0x25
 800b024:	d1f1      	bne.n	800b00a <mrbc_printf_float+0x22>
    ;

  snprintf( pf->p, (pf->buf_end - pf->p + 1), p2, value );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6898      	ldr	r0, [r3, #8]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	3301      	adds	r3, #1
 800b036:	4619      	mov	r1, r3
 800b038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b03c:	e9cd 2300 	strd	r2, r3, [sp]
 800b040:	6a3a      	ldr	r2, [r7, #32]
 800b042:	f00b fa45 	bl	80164d0 <sniprintf>

  while( *pf->p != '\0' )
 800b046:	e004      	b.n	800b052 <mrbc_printf_float+0x6a>
    pf->p++;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	609a      	str	r2, [r3, #8]
  while( *pf->p != '\0' )
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1f5      	bne.n	800b048 <mrbc_printf_float+0x60>

  return -(pf->p == pf->buf_end);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	429a      	cmp	r2, r3
 800b066:	bf0c      	ite	eq
 800b068:	2301      	moveq	r3, #1
 800b06a:	2300      	movne	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	425b      	negs	r3, r3
}
 800b070:	4618      	mov	r0, r3
 800b072:	3728      	adds	r7, #40	; 0x28
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <mrbc_printf_pointer>:
    display '$00000000' style only.
    up to 8 digits, even if 64bit machines.
    not support sign, width, precision and other parameters.
*/
int mrbc_printf_pointer( mrbc_printf_t *pf, void *ptr )
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
#if defined(UINTPTR_MAX)
  uintptr_t v = (uintptr_t)ptr;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	617b      	str	r3, [r7, #20]
#else
  int v = (int)ptr; // regal (void* to int), but implementation defined.
#endif
  int n = sizeof(ptr) * 2;
 800b086:	2308      	movs	r3, #8
 800b088:	613b      	str	r3, [r7, #16]
  if( n > 8 ) n = 8;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b08      	cmp	r3, #8
 800b08e:	dd01      	ble.n	800b094 <mrbc_printf_pointer+0x1c>
 800b090:	2308      	movs	r3, #8
 800b092:	613b      	str	r3, [r7, #16]

  // check buffer size.
  if( (pf->buf_end - pf->p) < n+1 ) return -1;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	db02      	blt.n	800b0aa <mrbc_printf_pointer+0x32>
 800b0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a8:	e033      	b.n	800b112 <mrbc_printf_pointer+0x9a>

  // write pointer value.
  *pf->p++ = '$';
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	1c59      	adds	r1, r3, #1
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	6091      	str	r1, [r2, #8]
 800b0b4:	2224      	movs	r2, #36	; 0x24
 800b0b6:	701a      	strb	r2, [r3, #0]
  pf->p += n;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689a      	ldr	r2, [r3, #8]
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	441a      	add	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	609a      	str	r2, [r3, #8]
  char *p = pf->p - 1;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	60fb      	str	r3, [r7, #12]

  for(; n > 0; n-- ) {
 800b0cc:	e01d      	b.n	800b10a <mrbc_printf_pointer+0x92>
    *p-- = (v & 0xf) < 10 ? (v & 0xf) + '0' : (v & 0xf) - 10 + 'a';
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 030f 	and.w	r3, r3, #15
 800b0d4:	2b09      	cmp	r3, #9
 800b0d6:	d807      	bhi.n	800b0e8 <mrbc_printf_pointer+0x70>
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	3330      	adds	r3, #48	; 0x30
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	e006      	b.n	800b0f6 <mrbc_printf_pointer+0x7e>
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	3357      	adds	r3, #87	; 0x57
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1e59      	subs	r1, r3, #1
 800b0fa:	60f9      	str	r1, [r7, #12]
 800b0fc:	701a      	strb	r2, [r3, #0]
    v >>= 4;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	091b      	lsrs	r3, r3, #4
 800b102:	617b      	str	r3, [r7, #20]
  for(; n > 0; n-- ) {
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	3b01      	subs	r3, #1
 800b108:	613b      	str	r3, [r7, #16]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dcde      	bgt.n	800b0ce <mrbc_printf_pointer+0x56>
  }

  return 0;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
	...

0800b120 <mrbc_decref>:
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f993 3000 	ldrsb.w	r3, [r3]
 800b12e:	2b07      	cmp	r3, #7
 800b130:	dd2c      	ble.n	800b18c <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	885b      	ldrh	r3, [r3, #2]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d106      	bne.n	800b14a <mrbc_decref+0x2a>
 800b13c:	4b16      	ldr	r3, [pc, #88]	; (800b198 <mrbc_decref+0x78>)
 800b13e:	4a17      	ldr	r2, [pc, #92]	; (800b19c <mrbc_decref+0x7c>)
 800b140:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800b144:	4816      	ldr	r0, [pc, #88]	; (800b1a0 <mrbc_decref+0x80>)
 800b146:	f00a fa23 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	885b      	ldrh	r3, [r3, #2]
 800b150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b154:	4293      	cmp	r3, r2
 800b156:	d106      	bne.n	800b166 <mrbc_decref+0x46>
 800b158:	4b12      	ldr	r3, [pc, #72]	; (800b1a4 <mrbc_decref+0x84>)
 800b15a:	4a10      	ldr	r2, [pc, #64]	; (800b19c <mrbc_decref+0x7c>)
 800b15c:	f240 11d3 	movw	r1, #467	; 0x1d3
 800b160:	480f      	ldr	r0, [pc, #60]	; (800b1a0 <mrbc_decref+0x80>)
 800b162:	f00a fa15 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	885a      	ldrh	r2, [r3, #2]
 800b16c:	3a01      	subs	r2, #1
 800b16e:	b292      	uxth	r2, r2
 800b170:	805a      	strh	r2, [r3, #2]
 800b172:	885b      	ldrh	r3, [r3, #2]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10b      	bne.n	800b190 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f993 3000 	ldrsb.w	r3, [r3]
 800b17e:	461a      	mov	r2, r3
 800b180:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <mrbc_decref+0x88>)
 800b182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
 800b18a:	e002      	b.n	800b192 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800b18c:	bf00      	nop
 800b18e:	e000      	b.n	800b192 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800b190:	bf00      	nop
}
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	08019324 	.word	0x08019324
 800b19c:	0801adfc 	.word	0x0801adfc
 800b1a0:	0801933c 	.word	0x0801933c
 800b1a4:	08019358 	.word	0x08019358
 800b1a8:	0801bde8 	.word	0x0801bde8

0800b1ac <mrbc_string_new_cstr>:
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d004      	beq.n	800b1c8 <mrbc_string_new_cstr+0x1c>
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7f5 f818 	bl	80001f4 <strlen>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	e000      	b.n	800b1ca <mrbc_string_new_cstr+0x1e>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	f7fb ffda 	bl	8007188 <mrbc_string_new>
}
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <mrbc_string_size>:
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  return str->string->size;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	889b      	ldrh	r3, [r3, #4]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <mrbc_string_cstr>:
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b083      	sub	sp, #12
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	689b      	ldr	r3, [r3, #8]
}
 800b204:	4618      	mov	r0, r3
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <sub_exception_new>:
/***** Function prototypes **************************************************/
/***** Local variables ******************************************************/
/***** Global variables *****************************************************/
/***** Local functions ******************************************************/
static mrbc_exception * sub_exception_new(struct VM *vm, struct RClass *exc_cls)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  // allocate memory for instance.
  mrbc_exception *ex = mrbc_alloc( vm, sizeof(mrbc_exception) );
 800b21a:	2020      	movs	r0, #32
 800b21c:	f7f6 fc42 	bl	8001aa4 <mrbc_raw_alloc>
 800b220:	60f8      	str	r0, [r7, #12]
  if( !ex ) return ex;		// ENOMEM
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <sub_exception_new+0x1c>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	e030      	b.n	800b28e <sub_exception_new+0x7e>

  MRBC_INIT_OBJECT_HEADER( ex, "EX" );
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2201      	movs	r2, #1
 800b230:	805a      	strh	r2, [r3, #2]
 800b232:	2245      	movs	r2, #69	; 0x45
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	2258      	movs	r2, #88	; 0x58
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	705a      	strb	r2, [r3, #1]
  ex->cls = exc_cls;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	605a      	str	r2, [r3, #4]
  ex->method_id = 0;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	811a      	strh	r2, [r3, #8]

  mrbc_callinfo *callinfo = vm->callinfo_tail;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	617b      	str	r3, [r7, #20]
  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b250:	2300      	movs	r3, #0
 800b252:	613b      	str	r3, [r7, #16]
 800b254:	e017      	b.n	800b286 <sub_exception_new+0x76>
    if( callinfo ) {
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <sub_exception_new+0x64>
      ex->call_nest[i] = callinfo->method_id;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	3208      	adds	r2, #8
 800b268:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      callinfo = callinfo->prev;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	e005      	b.n	800b280 <sub_exception_new+0x70>
    } else {
      ex->call_nest[i] = 0;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	3208      	adds	r2, #8
 800b27a:	2100      	movs	r1, #0
 800b27c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	3301      	adds	r3, #1
 800b284:	613b      	str	r3, [r7, #16]
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b07      	cmp	r3, #7
 800b28a:	dde4      	ble.n	800b256 <sub_exception_new+0x46>
    }
  }

  return ex;
 800b28c:	68fb      	ldr	r3, [r7, #12]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <mrbc_exception_new>:
  @param  message	message.
  @param  len		message length or zero.
  @return		exception object.
*/
mrbc_value mrbc_exception_new(struct VM *vm, struct RClass *exc_cls, const void *message, int len )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08e      	sub	sp, #56	; 0x38
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
  mrbc_exception *ex = sub_exception_new( vm, exc_cls );
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	68b8      	ldr	r0, [r7, #8]
 800b2aa:	f7ff ffb1 	bl	800b210 <sub_exception_new>
 800b2ae:	6378      	str	r0, [r7, #52]	; 0x34
  if( !ex ) return mrbc_nil_value();
 800b2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <mrbc_exception_new+0x34>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	6053      	str	r3, [r2, #4]
 800b2c0:	6093      	str	r3, [r2, #8]
 800b2c2:	60d3      	str	r3, [r2, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	701a      	strb	r2, [r3, #0]
  }
  ex->message = buf;

 RETURN:
  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
}
 800b2ca:	e04a      	b.n	800b362 <mrbc_exception_new+0xca>
  if( !message ) {
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <mrbc_exception_new+0x48>
    ex->message = 0;
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	60da      	str	r2, [r3, #12]
    ex->message_size = 0;
 800b2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2da:	2200      	movs	r2, #0
 800b2dc:	815a      	strh	r2, [r3, #10]
    goto RETURN;
 800b2de:	e033      	b.n	800b348 <mrbc_exception_new+0xb0>
  if( *(const char *)message == 0 ) {
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d106      	bne.n	800b2f6 <mrbc_exception_new+0x5e>
    ex->message = (const uint8_t *)"";
 800b2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ea:	4a20      	ldr	r2, [pc, #128]	; (800b36c <mrbc_exception_new+0xd4>)
 800b2ec:	60da      	str	r2, [r3, #12]
    ex->message_size = 0;
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	815a      	strh	r2, [r3, #10]
    goto RETURN;
 800b2f4:	e028      	b.n	800b348 <mrbc_exception_new+0xb0>
  if( len == 0 ) {
 800b2f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <mrbc_exception_new+0x72>
    ex->message = message;
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	60da      	str	r2, [r3, #12]
    ex->message_size = 0;
 800b302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b304:	2200      	movs	r2, #0
 800b306:	815a      	strh	r2, [r3, #10]
    goto RETURN;
 800b308:	e01e      	b.n	800b348 <mrbc_exception_new+0xb0>
  uint8_t *buf = mrbc_alloc( vm, len+1 );
 800b30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30c:	3301      	adds	r3, #1
 800b30e:	4618      	mov	r0, r3
 800b310:	f7f6 fbc8 	bl	8001aa4 <mrbc_raw_alloc>
 800b314:	6338      	str	r0, [r7, #48]	; 0x30
  if( buf ) {
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00f      	beq.n	800b33c <mrbc_exception_new+0xa4>
    memcpy( buf, message, len );
 800b31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31e:	461a      	mov	r2, r3
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b324:	f00b fa0f 	bl	8016746 <memcpy>
    buf[len] = 0;
 800b328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b32a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32c:	4413      	add	r3, r2
 800b32e:	2200      	movs	r2, #0
 800b330:	701a      	strb	r2, [r3, #0]
    ex->message_size = len;
 800b332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b334:	b29a      	uxth	r2, r3
 800b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b338:	815a      	strh	r2, [r3, #10]
 800b33a:	e002      	b.n	800b342 <mrbc_exception_new+0xaa>
    ex->message_size = 0;
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	2200      	movs	r2, #0
 800b340:	815a      	strh	r2, [r3, #10]
  ex->message = buf;
 800b342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b346:	60da      	str	r2, [r3, #12]
  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	461a      	mov	r2, r3
 800b34c:	2300      	movs	r3, #0
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	6053      	str	r3, [r2, #4]
 800b352:	6093      	str	r3, [r2, #8]
 800b354:	60d3      	str	r3, [r2, #12]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	220e      	movs	r2, #14
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b360:	609a      	str	r2, [r3, #8]
}
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	3738      	adds	r7, #56	; 0x38
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	08019374 	.word	0x08019374

0800b370 <mrbc_exception_new_alloc>:
  @param  message	message buffer.
  @param  len		message length.
  @return		exception object.
*/
mrbc_value mrbc_exception_new_alloc(struct VM *vm, struct RClass *exc_cls, const void *message, int len )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08e      	sub	sp, #56	; 0x38
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
  mrbc_exception *ex = sub_exception_new( vm, exc_cls );
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	68b8      	ldr	r0, [r7, #8]
 800b382:	f7ff ff45 	bl	800b210 <sub_exception_new>
 800b386:	6378      	str	r0, [r7, #52]	; 0x34
  if( !ex ) return mrbc_nil_value();
 800b388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <mrbc_exception_new_alloc+0x34>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	461a      	mov	r2, r3
 800b392:	2300      	movs	r3, #0
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	6053      	str	r3, [r2, #4]
 800b398:	6093      	str	r3, [r2, #8]
 800b39a:	60d3      	str	r3, [r2, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	701a      	strb	r2, [r3, #0]

  ex->message_size = len;
  ex->message = message;

  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
}
 800b3a2:	e013      	b.n	800b3cc <mrbc_exception_new_alloc+0x5c>
  ex->message_size = len;
 800b3a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3aa:	815a      	strh	r2, [r3, #10]
  ex->message = message;
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	60da      	str	r2, [r3, #12]
  return (mrbc_value){.tt = MRBC_TT_EXCEPTION, .exception = ex};
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	6053      	str	r3, [r2, #4]
 800b3bc:	6093      	str	r3, [r2, #8]
 800b3be:	60d3      	str	r3, [r2, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	220e      	movs	r2, #14
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ca:	609a      	str	r2, [r3, #8]
}
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	3738      	adds	r7, #56	; 0x38
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <mrbc_exception_delete>:
/*! destructor

  @param  value		target.
*/
void mrbc_exception_delete(mrbc_value *value)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  if( value->exception->message_size ) {
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	895b      	ldrh	r3, [r3, #10]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <mrbc_exception_delete+0x1e>
    mrbc_raw_free( (void *)value->exception->message );
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f6 fd35 	bl	8001e5c <mrbc_raw_free>
  }
  mrbc_raw_free( value->exception );
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f6 fd30 	bl	8001e5c <mrbc_raw_free>
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <mrbc_raise>:
  @param  exc_cls	pointer to Exception class or NULL.
  @param  msg		message or NULL.
  @note	(usage) mrbc_raise(vm, MRBC_CLASS(TypeError), "message here.");
*/
void mrbc_raise( struct VM *vm, struct RClass *exc_cls, const char *msg )
{
 800b404:	b590      	push	{r4, r7, lr}
 800b406:	b08d      	sub	sp, #52	; 0x34
 800b408:	af02      	add	r7, sp, #8
 800b40a:	61f8      	str	r0, [r7, #28]
 800b40c:	61b9      	str	r1, [r7, #24]
 800b40e:	617a      	str	r2, [r7, #20]
  if( vm ) {
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d02a      	beq.n	800b46c <mrbc_raise+0x68>
    struct RClass *cls = exc_cls ? exc_cls : MRBC_CLASS(RuntimeError);
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <mrbc_raise+0x1c>
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	e000      	b.n	800b422 <mrbc_raise+0x1e>
 800b420:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <mrbc_raise+0xa0>)
 800b422:	627b      	str	r3, [r7, #36]	; 0x24
    const char msg_len = msg ? strlen(msg) : 0;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <mrbc_raise+0x32>
 800b42a:	6978      	ldr	r0, [r7, #20]
 800b42c:	f7f4 fee2 	bl	80001f4 <strlen>
 800b430:	4603      	mov	r3, r0
 800b432:	b2db      	uxtb	r3, r3
 800b434:	e000      	b.n	800b438 <mrbc_raise+0x34>
 800b436:	2300      	movs	r3, #0
 800b438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    mrbc_decref(&vm->exception);
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	3328      	adds	r3, #40	; 0x28
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fe6d 	bl	800b120 <mrbc_decref>
    vm->exception = mrbc_exception_new( vm, cls, msg, msg_len );
 800b446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b44a:	69fc      	ldr	r4, [r7, #28]
 800b44c:	4638      	mov	r0, r7
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b454:	69f9      	ldr	r1, [r7, #28]
 800b456:	f7ff ff1f 	bl	800b298 <mrbc_exception_new>
 800b45a:	3428      	adds	r4, #40	; 0x28
 800b45c:	463b      	mov	r3, r7
 800b45e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->flag_preemption = 2;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	2202      	movs	r2, #2
 800b468:	70da      	strb	r2, [r3, #3]

  } else {
    mrbc_printf("Exception: %s (%s)\n", msg ? msg : mrbc_symid_to_str(exc_cls->sym_id), mrbc_symid_to_str(exc_cls->sym_id));
  }
}
 800b46a:	e017      	b.n	800b49c <mrbc_raise+0x98>
    mrbc_printf("Exception: %s (%s)\n", msg ? msg : mrbc_symid_to_str(exc_cls->sym_id), mrbc_symid_to_str(exc_cls->sym_id));
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d107      	bne.n	800b482 <mrbc_raise+0x7e>
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b478:	4618      	mov	r0, r3
 800b47a:	f002 fb5d 	bl	800db38 <mrbc_symid_to_str>
 800b47e:	4604      	mov	r4, r0
 800b480:	e000      	b.n	800b484 <mrbc_raise+0x80>
 800b482:	697c      	ldr	r4, [r7, #20]
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f002 fb54 	bl	800db38 <mrbc_symid_to_str>
 800b490:	4603      	mov	r3, r0
 800b492:	461a      	mov	r2, r3
 800b494:	4621      	mov	r1, r4
 800b496:	4804      	ldr	r0, [pc, #16]	; (800b4a8 <mrbc_raise+0xa4>)
 800b498:	f7fe fe44 	bl	800a124 <mrbc_printf>
}
 800b49c:	bf00      	nop
 800b49e:	372c      	adds	r7, #44	; 0x2c
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}
 800b4a4:	200001a4 	.word	0x200001a4
 800b4a8:	08019378 	.word	0x08019378

0800b4ac <mrbc_raisef>:
  @param  vm		pointer to VM.
  @param  exc_cls	pointer to Exception class.
  @param  fstr		format string.
*/
void mrbc_raisef( struct VM *vm, struct RClass *exc_cls, const char *fstr, ... )
{
 800b4ac:	b40c      	push	{r2, r3}
 800b4ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4b0:	b08b      	sub	sp, #44	; 0x2c
 800b4b2:	af02      	add	r7, sp, #8
 800b4b4:	6178      	str	r0, [r7, #20]
 800b4b6:	6139      	str	r1, [r7, #16]
  static const int MESSAGE_INI_LEN = 32;
  va_list ap;
  va_start( ap, fstr );
 800b4b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4bc:	61fb      	str	r3, [r7, #28]

  char *buf = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61bb      	str	r3, [r7, #24]
  if( vm ) buf = mrbc_alloc( vm, MESSAGE_INI_LEN );
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d006      	beq.n	800b4d6 <mrbc_raisef+0x2a>
 800b4c8:	4b29      	ldr	r3, [pc, #164]	; (800b570 <mrbc_raisef+0xc4>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f6 fae9 	bl	8001aa4 <mrbc_raw_alloc>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	61bb      	str	r3, [r7, #24]

  if( buf ) {
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d02a      	beq.n	800b532 <mrbc_raisef+0x86>
    mrbc_vasprintf( &buf, MESSAGE_INI_LEN, fstr, ap );
 800b4dc:	4b24      	ldr	r3, [pc, #144]	; (800b570 <mrbc_raisef+0xc4>)
 800b4de:	6819      	ldr	r1, [r3, #0]
 800b4e0:	f107 0018 	add.w	r0, r7, #24
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e8:	f7fe feb6 	bl	800a258 <mrbc_vasprintf>
    mrbc_decref(&vm->exception);
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	3328      	adds	r3, #40	; 0x28
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff fe15 	bl	800b120 <mrbc_decref>
    vm->exception = mrbc_exception_new_alloc( vm,
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d001      	beq.n	800b500 <mrbc_raisef+0x54>
 800b4fc:	693c      	ldr	r4, [r7, #16]
 800b4fe:	e000      	b.n	800b502 <mrbc_raisef+0x56>
 800b500:	4c1c      	ldr	r4, [pc, #112]	; (800b574 <mrbc_raisef+0xc8>)
 800b502:	69be      	ldr	r6, [r7, #24]
			exc_cls ? exc_cls : MRBC_CLASS(RuntimeError),
			buf, strlen(buf) );
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	4618      	mov	r0, r3
 800b508:	f7f4 fe74 	bl	80001f4 <strlen>
 800b50c:	4603      	mov	r3, r0
    vm->exception = mrbc_exception_new_alloc( vm,
 800b50e:	697d      	ldr	r5, [r7, #20]
 800b510:	4638      	mov	r0, r7
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	4633      	mov	r3, r6
 800b516:	4622      	mov	r2, r4
 800b518:	6979      	ldr	r1, [r7, #20]
 800b51a:	f7ff ff29 	bl	800b370 <mrbc_exception_new_alloc>
 800b51e:	f105 0428 	add.w	r4, r5, #40	; 0x28
 800b522:	463b      	mov	r3, r7
 800b524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->flag_preemption = 2;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2202      	movs	r2, #2
 800b52e:	70da      	strb	r2, [r3, #3]
    mrbc_vprintf( fstr, ap );
    mrbc_printf(" (%s)\n", exc_cls ? mrbc_symid_to_str(exc_cls->sym_id) : "RuntimeError");
  }

  va_end( ap );
}
 800b530:	e016      	b.n	800b560 <mrbc_raisef+0xb4>
    mrbc_printf("Exception: ");
 800b532:	4811      	ldr	r0, [pc, #68]	; (800b578 <mrbc_raisef+0xcc>)
 800b534:	f7fe fdf6 	bl	800a124 <mrbc_printf>
    mrbc_vprintf( fstr, ap );
 800b538:	69f9      	ldr	r1, [r7, #28]
 800b53a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b53c:	f7fe fe37 	bl	800a1ae <mrbc_vprintf>
    mrbc_printf(" (%s)\n", exc_cls ? mrbc_symid_to_str(exc_cls->sym_id) : "RuntimeError");
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <mrbc_raisef+0xaa>
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f002 faf3 	bl	800db38 <mrbc_symid_to_str>
 800b552:	4603      	mov	r3, r0
 800b554:	e000      	b.n	800b558 <mrbc_raisef+0xac>
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <mrbc_raisef+0xd0>)
 800b558:	4619      	mov	r1, r3
 800b55a:	4809      	ldr	r0, [pc, #36]	; (800b580 <mrbc_raisef+0xd4>)
 800b55c:	f7fe fde2 	bl	800a124 <mrbc_printf>
}
 800b560:	bf00      	nop
 800b562:	3724      	adds	r7, #36	; 0x24
 800b564:	46bd      	mov	sp, r7
 800b566:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b56a:	b002      	add	sp, #8
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	0801ae08 	.word	0x0801ae08
 800b574:	200001a4 	.word	0x200001a4
 800b578:	0801938c 	.word	0x0801938c
 800b57c:	08019398 	.word	0x08019398
 800b580:	080193a8 	.word	0x080193a8

0800b584 <mrbc_print_exception>:
/*! display exception

  @param  v	pointer to Exception object.
*/
void mrbc_print_exception( const mrbc_value *v )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  if( mrbc_type(*v) != MRBC_TT_EXCEPTION ) return;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f993 3000 	ldrsb.w	r3, [r3]
 800b592:	2b0e      	cmp	r3, #14
 800b594:	d118      	bne.n	800b5c8 <mrbc_print_exception+0x44>

  const mrbc_exception *exc = v->exception;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	60fb      	str	r3, [r7, #12]
  const char *clsname = mrbc_symid_to_str(exc->cls->sym_id);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f002 fac7 	bl	800db38 <mrbc_symid_to_str>
 800b5aa:	60b8      	str	r0, [r7, #8]

  mrbc_printf("Exception: %s (%s)\n",
	      exc->message ? (const char *)exc->message : clsname, clsname );
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	68db      	ldr	r3, [r3, #12]
  mrbc_printf("Exception: %s (%s)\n",
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <mrbc_print_exception+0x36>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	e000      	b.n	800b5bc <mrbc_print_exception+0x38>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4803      	ldr	r0, [pc, #12]	; (800b5d0 <mrbc_print_exception+0x4c>)
 800b5c2:	f7fe fdaf 	bl	800a124 <mrbc_printf>
 800b5c6:	e000      	b.n	800b5ca <mrbc_print_exception+0x46>
  if( mrbc_type(*v) != MRBC_TT_EXCEPTION ) return;
 800b5c8:	bf00      	nop
}
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	08019378 	.word	0x08019378

0800b5d4 <mrbc_print_vm_exception>:
/*! display exception in vm.

  @param  vm	pointer to VM
*/
void mrbc_print_vm_exception( const struct VM *vm )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  if( mrbc_type(vm->exception) != MRBC_TT_EXCEPTION ) return;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800b5e2:	2b0e      	cmp	r3, #14
 800b5e4:	d14e      	bne.n	800b684 <mrbc_print_vm_exception+0xb0>

  const mrbc_exception *exc = vm->exception.exception;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ea:	613b      	str	r3, [r7, #16]
  const char *clsname = mrbc_symid_to_str(exc->cls->sym_id);
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f002 fa9f 	bl	800db38 <mrbc_symid_to_str>
 800b5fa:	60f8      	str	r0, [r7, #12]

  mrbc_printf("Exception(vm_id=%d):", vm->vm_id );
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	789b      	ldrb	r3, [r3, #2]
 800b600:	4619      	mov	r1, r3
 800b602:	4823      	ldr	r0, [pc, #140]	; (800b690 <mrbc_print_vm_exception+0xbc>)
 800b604:	f7fe fd8e 	bl	800a124 <mrbc_printf>
  if( exc->method_id ) {
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <mrbc_print_vm_exception+0x54>
    mrbc_printf(" in `%s':", mrbc_symid_to_str(exc->method_id) );
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b618:	4618      	mov	r0, r3
 800b61a:	f002 fa8d 	bl	800db38 <mrbc_symid_to_str>
 800b61e:	4603      	mov	r3, r0
 800b620:	4619      	mov	r1, r3
 800b622:	481c      	ldr	r0, [pc, #112]	; (800b694 <mrbc_print_vm_exception+0xc0>)
 800b624:	f7fe fd7e 	bl	800a124 <mrbc_printf>
  }
  mrbc_printf(" %s (%s)\n",
	      exc->message ? (const char *)exc->message : clsname, clsname );
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	68db      	ldr	r3, [r3, #12]
  mrbc_printf(" %s (%s)\n",
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <mrbc_print_vm_exception+0x62>
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	e000      	b.n	800b638 <mrbc_print_vm_exception+0x64>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4619      	mov	r1, r3
 800b63c:	4816      	ldr	r0, [pc, #88]	; (800b698 <mrbc_print_vm_exception+0xc4>)
 800b63e:	f7fe fd71 	bl	800a124 <mrbc_printf>

  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b642:	2300      	movs	r3, #0
 800b644:	617b      	str	r3, [r7, #20]
 800b646:	e016      	b.n	800b676 <mrbc_print_vm_exception+0xa2>
    if( !exc->call_nest[i] ) return;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	3208      	adds	r2, #8
 800b64e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d018      	beq.n	800b688 <mrbc_print_vm_exception+0xb4>
    mrbc_printf("\tin `%s'\n", mrbc_symid_to_str(exc->call_nest[i]));
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	3208      	adds	r2, #8
 800b65c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b660:	4618      	mov	r0, r3
 800b662:	f002 fa69 	bl	800db38 <mrbc_symid_to_str>
 800b666:	4603      	mov	r3, r0
 800b668:	4619      	mov	r1, r3
 800b66a:	480c      	ldr	r0, [pc, #48]	; (800b69c <mrbc_print_vm_exception+0xc8>)
 800b66c:	f7fe fd5a 	bl	800a124 <mrbc_printf>
  for( int i = 0; i < MRBC_EXCEPTION_CALL_NEST_LEVEL; i++ ) {
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	3301      	adds	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b07      	cmp	r3, #7
 800b67a:	dde5      	ble.n	800b648 <mrbc_print_vm_exception+0x74>
  }
  mrbc_printf("\tin ...\n");
 800b67c:	4808      	ldr	r0, [pc, #32]	; (800b6a0 <mrbc_print_vm_exception+0xcc>)
 800b67e:	f7fe fd51 	bl	800a124 <mrbc_printf>
 800b682:	e002      	b.n	800b68a <mrbc_print_vm_exception+0xb6>
  if( mrbc_type(vm->exception) != MRBC_TT_EXCEPTION ) return;
 800b684:	bf00      	nop
 800b686:	e000      	b.n	800b68a <mrbc_print_vm_exception+0xb6>
    if( !exc->call_nest[i] ) return;
 800b688:	bf00      	nop
}
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	080193b0 	.word	0x080193b0
 800b694:	080193c8 	.word	0x080193c8
 800b698:	080193d4 	.word	0x080193d4
 800b69c:	080193e0 	.word	0x080193e0
 800b6a0:	080193ec 	.word	0x080193ec

0800b6a4 <c_exception_new>:
/***** Exception class ******************************************************/
//================================================================
/*! (method) new
 */
static void c_exception_new(struct VM *vm, mrbc_value v[], int argc)
{
 800b6a4:	b5b0      	push	{r4, r5, r7, lr}
 800b6a6:	b092      	sub	sp, #72	; 0x48
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	61f8      	str	r0, [r7, #28]
 800b6ac:	61b9      	str	r1, [r7, #24]
 800b6ae:	617a      	str	r2, [r7, #20]
  assert( mrbc_type(v[0]) == MRBC_TT_CLASS );
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	f993 3000 	ldrsb.w	r3, [r3]
 800b6b6:	2b07      	cmp	r3, #7
 800b6b8:	d006      	beq.n	800b6c8 <c_exception_new+0x24>
 800b6ba:	4b25      	ldr	r3, [pc, #148]	; (800b750 <c_exception_new+0xac>)
 800b6bc:	4a25      	ldr	r2, [pc, #148]	; (800b754 <c_exception_new+0xb0>)
 800b6be:	f240 1105 	movw	r1, #261	; 0x105
 800b6c2:	4825      	ldr	r0, [pc, #148]	; (800b758 <c_exception_new+0xb4>)
 800b6c4:	f009 ff64 	bl	8015590 <__assert_func>

  mrbc_value value;
  if( argc == 1 && mrbc_type(v[1]) == MRBC_TT_STRING ) {
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d11c      	bne.n	800b708 <c_exception_new+0x64>
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	3310      	adds	r3, #16
 800b6d2:	f993 3000 	ldrsb.w	r3, [r3]
 800b6d6:	2b0b      	cmp	r3, #11
 800b6d8:	d116      	bne.n	800b708 <c_exception_new+0x64>
    value = mrbc_exception_new(vm, v[0].cls, mrbc_string_cstr(&v[1]), mrbc_string_size(&v[1]));
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	689c      	ldr	r4, [r3, #8]
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	3310      	adds	r3, #16
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fd87 	bl	800b1f6 <mrbc_string_cstr>
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	3310      	adds	r3, #16
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff fd74 	bl	800b1dc <mrbc_string_size>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	4622      	mov	r2, r4
 800b700:	69f9      	ldr	r1, [r7, #28]
 800b702:	f7ff fdc9 	bl	800b298 <mrbc_exception_new>
 800b706:	e00e      	b.n	800b726 <c_exception_new+0x82>
  } else {
    value = mrbc_exception_new(vm, v[0].cls, NULL, 0);
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	689a      	ldr	r2, [r3, #8]
 800b70c:	4638      	mov	r0, r7
 800b70e:	2300      	movs	r3, #0
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	2300      	movs	r3, #0
 800b714:	69f9      	ldr	r1, [r7, #28]
 800b716:	f7ff fdbf 	bl	800b298 <mrbc_exception_new>
 800b71a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b71e:	463b      	mov	r3, r7
 800b720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  SET_RETURN(value);
 800b726:	f107 0420 	add.w	r4, r7, #32
 800b72a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b72e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b734:	69b8      	ldr	r0, [r7, #24]
 800b736:	f7ff fcf3 	bl	800b120 <mrbc_decref>
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	461c      	mov	r4, r3
 800b73e:	f107 0320 	add.w	r3, r7, #32
 800b742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800b748:	bf00      	nop
 800b74a:	3740      	adds	r7, #64	; 0x40
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bdb0      	pop	{r4, r5, r7, pc}
 800b750:	080193f8 	.word	0x080193f8
 800b754:	0801ae0c 	.word	0x0801ae0c
 800b758:	0801941c 	.word	0x0801941c

0800b75c <c_exception_message>:

//================================================================
/*! (method) message
 */
static void c_exception_message(struct VM *vm, mrbc_value v[], int argc)
{
 800b75c:	b590      	push	{r4, r7, lr}
 800b75e:	b08d      	sub	sp, #52	; 0x34
 800b760:	af00      	add	r7, sp, #0
 800b762:	61f8      	str	r0, [r7, #28]
 800b764:	61b9      	str	r1, [r7, #24]
 800b766:	617a      	str	r2, [r7, #20]
  mrbc_value value;

  if( v[0].exception->message ) {
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <c_exception_message+0x2e>
    value = mrbc_string_new( vm, v[0].exception->message, v[0].exception->message_size );
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	895b      	ldrh	r3, [r3, #10]
 800b77e:	f107 0020 	add.w	r0, r7, #32
 800b782:	69f9      	ldr	r1, [r7, #28]
 800b784:	f7fb fd00 	bl	8007188 <mrbc_string_new>
 800b788:	e013      	b.n	800b7b2 <c_exception_message+0x56>
  } else {
    value = mrbc_string_new_cstr(vm, mrbc_symid_to_str(v->exception->cls->sym_id));
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b794:	4618      	mov	r0, r3
 800b796:	f002 f9cf 	bl	800db38 <mrbc_symid_to_str>
 800b79a:	4602      	mov	r2, r0
 800b79c:	463b      	mov	r3, r7
 800b79e:	69f9      	ldr	r1, [r7, #28]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff fd03 	bl	800b1ac <mrbc_string_new_cstr>
 800b7a6:	f107 0420 	add.w	r4, r7, #32
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  mrbc_decref( &v[0] );
 800b7b2:	69b8      	ldr	r0, [r7, #24]
 800b7b4:	f7ff fcb4 	bl	800b120 <mrbc_decref>
  v[0] = value;
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	461c      	mov	r4, r3
 800b7bc:	f107 0320 	add.w	r3, r7, #32
 800b7c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800b7c6:	bf00      	nop
 800b7c8:	3734      	adds	r7, #52	; 0x34
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd90      	pop	{r4, r7, pc}
	...

0800b7d0 <mrbc_init_global>:

//================================================================
/*! initialize const and global table with default value.
*/
void mrbc_init_global(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  mrbc_kv_init_handle( 0, &handle_const, 30 );
 800b7d4:	221e      	movs	r2, #30
 800b7d6:	4905      	ldr	r1, [pc, #20]	; (800b7ec <mrbc_init_global+0x1c>)
 800b7d8:	2000      	movs	r0, #0
 800b7da:	f000 f9f3 	bl	800bbc4 <mrbc_kv_init_handle>
  mrbc_kv_init_handle( 0, &handle_global, 0 );
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4903      	ldr	r1, [pc, #12]	; (800b7f0 <mrbc_init_global+0x20>)
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	f000 f9ee 	bl	800bbc4 <mrbc_kv_init_handle>
}
 800b7e8:	bf00      	nop
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20008030 	.word	0x20008030
 800b7f0:	20008038 	.word	0x20008038

0800b7f4 <mrbc_set_const>:
  @param  sym_id	symbol ID.
  @param  v		pointer to mrbc_value.
  @return		mrbc_error_code.
*/
int mrbc_set_const( mrbc_sym sym_id, mrbc_value *v )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	6039      	str	r1, [r7, #0]
 800b7fe:	80fb      	strh	r3, [r7, #6]
  if( mrbc_kv_get( &handle_const, sym_id ) != NULL ) {
 800b800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b804:	4619      	mov	r1, r3
 800b806:	480a      	ldr	r0, [pc, #40]	; (800b830 <mrbc_set_const+0x3c>)
 800b808:	f000 fb16 	bl	800be38 <mrbc_kv_get>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <mrbc_set_const+0x24>
    mrbc_printf("warning: already initialized constant.\n");
 800b812:	4808      	ldr	r0, [pc, #32]	; (800b834 <mrbc_set_const+0x40>)
 800b814:	f7fe fc86 	bl	800a124 <mrbc_printf>
  }

  return mrbc_kv_set( &handle_const, sym_id, v );
 800b818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	4619      	mov	r1, r3
 800b820:	4803      	ldr	r0, [pc, #12]	; (800b830 <mrbc_set_const+0x3c>)
 800b822:	f000 fa3d 	bl	800bca0 <mrbc_kv_set>
 800b826:	4603      	mov	r3, r0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	20008030 	.word	0x20008030
 800b834:	080194dc 	.word	0x080194dc

0800b838 <mrbc_set_class_const>:
  @param  sym_id	symbol ID.
  @param  v		pointer to mrbc_value.
  @return		mrbc_error_code.
*/
int mrbc_set_class_const( const struct RClass *cls, mrbc_sym sym_id, mrbc_value *v )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08e      	sub	sp, #56	; 0x38
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	460b      	mov	r3, r1
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	817b      	strh	r3, [r7, #10]
  char buf[sizeof(mrbc_sym)*4+1];

  make_nested_symbol_s( buf, cls->sym_id, sym_id );
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b84c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b850:	f107 0314 	add.w	r3, r7, #20
 800b854:	4618      	mov	r0, r3
 800b856:	f002 f9cf 	bl	800dbf8 <make_nested_symbol_s>
  mrbc_sym id = mrbc_symbol( mrbc_symbol_new( 0, buf ));
 800b85a:	f107 0320 	add.w	r3, r7, #32
 800b85e:	f107 0214 	add.w	r2, r7, #20
 800b862:	2100      	movs	r1, #0
 800b864:	4618      	mov	r0, r3
 800b866:	f002 fa95 	bl	800dd94 <mrbc_symbol_new>
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	86fb      	strh	r3, [r7, #54]	; 0x36

  return mrbc_set_const( id, v );
 800b86e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	4618      	mov	r0, r3
 800b876:	f7ff ffbd 	bl	800b7f4 <mrbc_set_const>
 800b87a:	4603      	mov	r3, r0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3738      	adds	r7, #56	; 0x38
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <mrbc_get_const>:

  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_get_const( mrbc_sym sym_id )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	80fb      	strh	r3, [r7, #6]
  return mrbc_kv_get( &handle_const, sym_id );
 800b88e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b892:	4619      	mov	r1, r3
 800b894:	4803      	ldr	r0, [pc, #12]	; (800b8a4 <mrbc_get_const+0x20>)
 800b896:	f000 facf 	bl	800be38 <mrbc_kv_get>
 800b89a:	4603      	mov	r3, r0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20008030 	.word	0x20008030

0800b8a8 <mrbc_get_class_const>:
  @param  cls		class
  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_get_class_const( const struct RClass *cls, mrbc_sym sym_id )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	807b      	strh	r3, [r7, #2]
  if( cls->sym_id == MRBC_SYM(Object) ) {
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ba:	2b27      	cmp	r3, #39	; 0x27
 800b8bc:	d107      	bne.n	800b8ce <mrbc_get_class_const+0x26>
    return mrbc_kv_get( &handle_const, sym_id );  // ::CONST case.
 800b8be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4813      	ldr	r0, [pc, #76]	; (800b914 <mrbc_get_class_const+0x6c>)
 800b8c6:	f000 fab7 	bl	800be38 <mrbc_kv_get>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	e01d      	b.n	800b90a <mrbc_get_class_const+0x62>
  }

  char buf[sizeof(mrbc_sym)*4+1];

  make_nested_symbol_s( buf, cls->sym_id, sym_id );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800b8d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b8d8:	f107 030c 	add.w	r3, r7, #12
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f002 f98b 	bl	800dbf8 <make_nested_symbol_s>
  mrbc_sym id = mrbc_search_symid(buf);
 800b8e2:	f107 030c 	add.w	r3, r7, #12
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f002 f95a 	bl	800dba0 <mrbc_search_symid>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	82fb      	strh	r3, [r7, #22]
  if( id <= 0 ) return 0;
 800b8f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dc01      	bgt.n	800b8fc <mrbc_get_class_const+0x54>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e006      	b.n	800b90a <mrbc_get_class_const+0x62>

  return mrbc_kv_get( &handle_const, id );
 800b8fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b900:	4619      	mov	r1, r3
 800b902:	4804      	ldr	r0, [pc, #16]	; (800b914 <mrbc_get_class_const+0x6c>)
 800b904:	f000 fa98 	bl	800be38 <mrbc_kv_get>
 800b908:	4603      	mov	r3, r0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20008030 	.word	0x20008030

0800b918 <mrbc_set_global>:
  @param  sym_id	symbol ID.
  @param  v		pointer to mrbc_value.
  @return		mrbc_error_code.
*/
int mrbc_set_global( mrbc_sym sym_id, mrbc_value *v )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	6039      	str	r1, [r7, #0]
 800b922:	80fb      	strh	r3, [r7, #6]
  return mrbc_kv_set( &handle_global, sym_id, v );
 800b924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	4619      	mov	r1, r3
 800b92c:	4803      	ldr	r0, [pc, #12]	; (800b93c <mrbc_set_global+0x24>)
 800b92e:	f000 f9b7 	bl	800bca0 <mrbc_kv_set>
 800b932:	4603      	mov	r3, r0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	20008038 	.word	0x20008038

0800b940 <mrbc_get_global>:

  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_get_global( mrbc_sym sym_id )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	80fb      	strh	r3, [r7, #6]
  return mrbc_kv_get( &handle_global, sym_id );
 800b94a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b94e:	4619      	mov	r1, r3
 800b950:	4803      	ldr	r0, [pc, #12]	; (800b960 <mrbc_get_global+0x20>)
 800b952:	f000 fa71 	bl	800be38 <mrbc_kv_get>
 800b956:	4603      	mov	r3, r0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	20008038 	.word	0x20008038

0800b964 <hal_init>:
#include <stdio.h>
#include "rrt0.h"
#include "hal.h"
#include "main.h"

void hal_init(void){
 800b964:	b480      	push	{r7}
 800b966:	af00      	add	r7, sp, #0
}
 800b968:	bf00      	nop
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <hal_enable_irq>:

void hal_enable_irq(void){
 800b972:	b480      	push	{r7}
 800b974:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800b976:	b662      	cpsie	i
}
 800b978:	bf00      	nop
	__enable_irq();
}
 800b97a:	bf00      	nop
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <hal_disable_irq>:

void hal_disable_irq(void){
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b988:	b672      	cpsid	i
}
 800b98a:	bf00      	nop
	__disable_irq();
}
 800b98c:	bf00      	nop
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <hal_idle_cpu>:

void hal_idle_cpu(void){
 800b996:	b580      	push	{r7, lr}
 800b998:	af00      	add	r7, sp, #0
	/*HAL_Delay(MRBC_TICK_UNIT);
	mrbc_tick();*/
	HAL_SuspendTick();
 800b99a:	f007 fe21 	bl	80135e0 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800b99e:	2101      	movs	r1, #1
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	f008 f8dd 	bl	8013b60 <HAL_PWR_EnterSTOPMode>
}
 800b9a6:	bf00      	nop
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <hal_write>:

extern UART_HandleTypeDef huart2;

int hal_write(int fd, const void *buf, int nbytes){
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, buf, nbytes, -1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c0:	68b9      	ldr	r1, [r7, #8]
 800b9c2:	4804      	ldr	r0, [pc, #16]	; (800b9d4 <hal_write+0x28>)
 800b9c4:	f009 fa28 	bl	8014e18 <HAL_UART_Transmit>
	return nbytes;
 800b9c8:	687b      	ldr	r3, [r7, #4]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	200007e0 	.word	0x200007e0

0800b9d8 <mrbc_incref>:
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f993 3000 	ldrsb.w	r3, [r3]
 800b9e6:	2b07      	cmp	r3, #7
 800b9e8:	dd1e      	ble.n	800ba28 <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	885b      	ldrh	r3, [r3, #2]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d106      	bne.n	800ba02 <mrbc_incref+0x2a>
 800b9f4:	4b0e      	ldr	r3, [pc, #56]	; (800ba30 <mrbc_incref+0x58>)
 800b9f6:	4a0f      	ldr	r2, [pc, #60]	; (800ba34 <mrbc_incref+0x5c>)
 800b9f8:	f240 11c3 	movw	r1, #451	; 0x1c3
 800b9fc:	480e      	ldr	r0, [pc, #56]	; (800ba38 <mrbc_incref+0x60>)
 800b9fe:	f009 fdc7 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	885b      	ldrh	r3, [r3, #2]
 800ba08:	2bff      	cmp	r3, #255	; 0xff
 800ba0a:	d106      	bne.n	800ba1a <mrbc_incref+0x42>
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	; (800ba3c <mrbc_incref+0x64>)
 800ba0e:	4a09      	ldr	r2, [pc, #36]	; (800ba34 <mrbc_incref+0x5c>)
 800ba10:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800ba14:	4808      	ldr	r0, [pc, #32]	; (800ba38 <mrbc_incref+0x60>)
 800ba16:	f009 fdbb 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	885a      	ldrh	r2, [r3, #2]
 800ba20:	3201      	adds	r2, #1
 800ba22:	b292      	uxth	r2, r2
 800ba24:	805a      	strh	r2, [r3, #2]
 800ba26:	e000      	b.n	800ba2a <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800ba28:	bf00      	nop
}
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	080195e8 	.word	0x080195e8
 800ba34:	0801ae28 	.word	0x0801ae28
 800ba38:	08019600 	.word	0x08019600
 800ba3c:	0801961c 	.word	0x0801961c

0800ba40 <mrbc_decref>:
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f993 3000 	ldrsb.w	r3, [r3]
 800ba4e:	2b07      	cmp	r3, #7
 800ba50:	dd2c      	ble.n	800baac <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	885b      	ldrh	r3, [r3, #2]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d106      	bne.n	800ba6a <mrbc_decref+0x2a>
 800ba5c:	4b16      	ldr	r3, [pc, #88]	; (800bab8 <mrbc_decref+0x78>)
 800ba5e:	4a17      	ldr	r2, [pc, #92]	; (800babc <mrbc_decref+0x7c>)
 800ba60:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800ba64:	4816      	ldr	r0, [pc, #88]	; (800bac0 <mrbc_decref+0x80>)
 800ba66:	f009 fd93 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	885b      	ldrh	r3, [r3, #2]
 800ba70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d106      	bne.n	800ba86 <mrbc_decref+0x46>
 800ba78:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <mrbc_decref+0x84>)
 800ba7a:	4a10      	ldr	r2, [pc, #64]	; (800babc <mrbc_decref+0x7c>)
 800ba7c:	f240 11d3 	movw	r1, #467	; 0x1d3
 800ba80:	480f      	ldr	r0, [pc, #60]	; (800bac0 <mrbc_decref+0x80>)
 800ba82:	f009 fd85 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	885a      	ldrh	r2, [r3, #2]
 800ba8c:	3a01      	subs	r2, #1
 800ba8e:	b292      	uxth	r2, r2
 800ba90:	805a      	strh	r2, [r3, #2]
 800ba92:	885b      	ldrh	r3, [r3, #2]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10b      	bne.n	800bab0 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f993 3000 	ldrsb.w	r3, [r3]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <mrbc_decref+0x88>)
 800baa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	4798      	blx	r3
 800baaa:	e002      	b.n	800bab2 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800baac:	bf00      	nop
 800baae:	e000      	b.n	800bab2 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800bab0:	bf00      	nop
}
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	080195e8 	.word	0x080195e8
 800babc:	0801ae1c 	.word	0x0801ae1c
 800bac0:	08019600 	.word	0x08019600
 800bac4:	08019638 	.word	0x08019638
 800bac8:	0801bde8 	.word	0x0801bde8

0800bacc <mrbc_kv_iterator_new>:

//================================================================
/*! iterator constructor
*/
static inline mrbc_kv_iterator mrbc_kv_iterator_new( const mrbc_kv_handle *h )
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  mrbc_kv_iterator ite;

  ite.target = h;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	60bb      	str	r3, [r7, #8]
  ite.i = 0;
 800bada:	2300      	movs	r3, #0
 800badc:	81bb      	strh	r3, [r7, #12]

  return ite;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	461a      	mov	r2, r3
 800bae2:	f107 0308 	add.w	r3, r7, #8
 800bae6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800baea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <mrbc_kv_i_has_next>:

//================================================================
/*! iterator has_next?
*/
static inline int mrbc_kv_i_has_next( const mrbc_kv_iterator *ite )
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  return ite->i < ite->target->n_stored;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	889a      	ldrh	r2, [r3, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	bf34      	ite	cc
 800bb10:	2301      	movcc	r3, #1
 800bb12:	2300      	movcs	r3, #0
 800bb14:	b2db      	uxtb	r3, r3
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <mrbc_kv_i_next>:

//================================================================
/*! iterator getter
*/
static inline mrbc_kv *mrbc_kv_i_next( mrbc_kv_iterator *ite )
{
 800bb22:	b480      	push	{r7}
 800bb24:	b083      	sub	sp, #12
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
  return &ite->target->data[ ite->i++ ];
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	889b      	ldrh	r3, [r3, #4]
 800bb34:	1c59      	adds	r1, r3, #1
 800bb36:	b288      	uxth	r0, r1
 800bb38:	6879      	ldr	r1, [r7, #4]
 800bb3a:	8088      	strh	r0, [r1, #4]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	460b      	mov	r3, r1
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	440b      	add	r3, r1
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	4413      	add	r3, r2
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <binary_search>:
  @param  kvh		pointer to key-value handle.
  @param  sym_id	symbol ID.
  @return		result. It's not necessarily found.
*/
static int binary_search(mrbc_kv_handle *kvh, mrbc_sym sym_id)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	807b      	strh	r3, [r7, #2]
  int left = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]
  int right = kvh->n_stored - 1;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	885b      	ldrh	r3, [r3, #2]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	613b      	str	r3, [r7, #16]
  if( right < 0 ) return -1;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	da1d      	bge.n	800bbae <binary_search+0x5a>
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295
 800bb76:	e01f      	b.n	800bbb8 <binary_search+0x64>

  while( left < right ) {
    int mid = (left + right) / 2;
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	0fda      	lsrs	r2, r3, #31
 800bb80:	4413      	add	r3, r2
 800bb82:	105b      	asrs	r3, r3, #1
 800bb84:	60fb      	str	r3, [r7, #12]
    if( kvh->data[mid].sym_id < sym_id ) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6859      	ldr	r1, [r3, #4]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	4413      	add	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	440b      	add	r3, r1
 800bb96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	dd03      	ble.n	800bbaa <binary_search+0x56>
      left = mid + 1;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	617b      	str	r3, [r7, #20]
 800bba8:	e001      	b.n	800bbae <binary_search+0x5a>
    } else {
      right = mid;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	613b      	str	r3, [r7, #16]
  while( left < right ) {
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	dbe0      	blt.n	800bb78 <binary_search+0x24>
    }
  }

  return left;
 800bbb6:	697b      	ldr	r3, [r7, #20]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	371c      	adds	r7, #28
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <mrbc_kv_init_handle>:
  @param  kvh	Pointer to Key-Value handle.
  @param  size	Initial size of data.
  @return 	0 if no error.
*/
int mrbc_kv_init_handle(struct VM *vm, mrbc_kv_handle *kvh, int size)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  kvh->data_size = size;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	801a      	strh	r2, [r3, #0]
  kvh->n_stored = 0;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	805a      	strh	r2, [r3, #2]

  if( size == 0 ) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d103      	bne.n	800bbec <mrbc_kv_init_handle+0x28>
    // save VM address temporary.
    kvh->vm = vm;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	e018      	b.n	800bc1e <mrbc_kv_init_handle+0x5a>

  } else {
    // Allocate data buffer.
    kvh->data = mrbc_alloc(vm, sizeof(mrbc_kv) * size);
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	4413      	add	r3, r2
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f5 ff54 	bl	8001aa4 <mrbc_raw_alloc>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	605a      	str	r2, [r3, #4]
    if( !kvh->data ) return -1;		// ENOMEM
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <mrbc_kv_init_handle+0x4c>
 800bc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0e:	e007      	b.n	800bc20 <mrbc_kv_init_handle+0x5c>

#if defined(MRBC_DEBUG)
    memcpy( kvh->data->type, "KV", 2 );
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	2202      	movs	r2, #2
 800bc16:	4904      	ldr	r1, [pc, #16]	; (800bc28 <mrbc_kv_init_handle+0x64>)
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f00a fd94 	bl	8016746 <memcpy>
#endif
  }

  return 0;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	08019654 	.word	0x08019654

0800bc2c <mrbc_kv_delete_data>:
/*! delete all datas and free data memory.

  @param  kvh	pointer to key-value handle.
*/
void mrbc_kv_delete_data(mrbc_kv_handle *kvh)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  if( kvh->data_size == 0 ) return;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00b      	beq.n	800bc54 <mrbc_kv_delete_data+0x28>

  mrbc_kv_clear(kvh);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f92a 	bl	800be96 <mrbc_kv_clear>
  kvh->data_size = 0;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	801a      	strh	r2, [r3, #0]
  mrbc_raw_free(kvh->data);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7f6 f905 	bl	8001e5c <mrbc_raw_free>
 800bc52:	e000      	b.n	800bc56 <mrbc_kv_delete_data+0x2a>
  if( kvh->data_size == 0 ) return;
 800bc54:	bf00      	nop
}
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <mrbc_kv_resize>:
  @param  kvh	pointer to key-value handle.
  @param  size	size.
  @return	mrbc_error_code.
*/
int mrbc_kv_resize(mrbc_kv_handle *kvh, int size)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  mrbc_kv *data2 = mrbc_raw_realloc(kvh->data, sizeof(mrbc_kv) * size);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6858      	ldr	r0, [r3, #4]
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	005b      	lsls	r3, r3, #1
 800bc70:	4413      	add	r3, r2
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	4619      	mov	r1, r3
 800bc76:	f7f6 f98d 	bl	8001f94 <mrbc_raw_realloc>
 800bc7a:	60f8      	str	r0, [r7, #12]
  if( !data2 ) return E_NOMEMORY_ERROR;		// ENOMEM
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <mrbc_kv_resize+0x2a>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e007      	b.n	800bc96 <mrbc_kv_resize+0x3a>

  kvh->data = data2;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	605a      	str	r2, [r3, #4]
  kvh->data_size = size;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	801a      	strh	r2, [r3, #0]

  return 0;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
	...

0800bca0 <mrbc_kv_set>:
  @param  sym_id	symbol ID.
  @param  set_val	set value.
  @return		mrbc_error_code.
*/
int mrbc_kv_set(mrbc_kv_handle *kvh, mrbc_sym sym_id, mrbc_value *set_val)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	817b      	strh	r3, [r7, #10]
  int idx = binary_search(kvh, sym_id);
 800bcae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff ff4d 	bl	800bb54 <binary_search>
 800bcba:	6178      	str	r0, [r7, #20]
  if( idx < 0 ) {
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	da02      	bge.n	800bcc8 <mrbc_kv_set+0x28>
    idx = 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	617b      	str	r3, [r7, #20]
    goto INSERT_VALUE;
 800bcc6:	e03d      	b.n	800bd44 <mrbc_kv_set+0xa4>
  }

  // replace value ?
  if( kvh->data[idx].sym_id == sym_id ) {
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6859      	ldr	r1, [r3, #4]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	440b      	add	r3, r1
 800bcd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcdc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d11c      	bne.n	800bd1e <mrbc_kv_set+0x7e>
    mrbc_decref( &kvh->data[idx].value );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6859      	ldr	r1, [r3, #4]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	440b      	add	r3, r1
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fea2 	bl	800ba40 <mrbc_decref>
    kvh->data[idx].value = *set_val;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6859      	ldr	r1, [r3, #4]
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	4613      	mov	r3, r2
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	4413      	add	r3, r2
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	440b      	add	r3, r1
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	f103 0408 	add.w	r4, r3, #8
 800bd12:	4613      	mov	r3, r2
 800bd14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e085      	b.n	800be2a <mrbc_kv_set+0x18a>
  }

  if( kvh->data[idx].sym_id < sym_id ) {
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6859      	ldr	r1, [r3, #4]
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4613      	mov	r3, r2
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	4413      	add	r3, r2
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	440b      	add	r3, r1
 800bd2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	dd03      	ble.n	800bd42 <mrbc_kv_set+0xa2>
    idx++;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	e000      	b.n	800bd44 <mrbc_kv_set+0xa4>
  }

 INSERT_VALUE:
 800bd42:	bf00      	nop
  // need alloc?
  if( kvh->data_size == 0 ) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d116      	bne.n	800bd7a <mrbc_kv_set+0xda>
    kvh->data = mrbc_alloc(kvh->vm, sizeof(mrbc_kv) * MRBC_KV_SIZE_INIT);
 800bd4c:	2030      	movs	r0, #48	; 0x30
 800bd4e:	f7f5 fea9 	bl	8001aa4 <mrbc_raw_alloc>
 800bd52:	4602      	mov	r2, r0
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	605a      	str	r2, [r3, #4]
    if( kvh->data == NULL ) return E_NOMEMORY_ERROR;	// ENOMEM
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <mrbc_kv_set+0xc4>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e062      	b.n	800be2a <mrbc_kv_set+0x18a>
    kvh->data_size = MRBC_KV_SIZE_INIT;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2202      	movs	r2, #2
 800bd68:	801a      	strh	r2, [r3, #0]

#if defined(MRBC_DEBUG)
    memcpy( kvh->data->type, "KV", 2 );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	4930      	ldr	r1, [pc, #192]	; (800be34 <mrbc_kv_set+0x194>)
 800bd72:	4618      	mov	r0, r3
 800bd74:	f00a fce7 	bl	8016746 <memcpy>
 800bd78:	e011      	b.n	800bd9e <mrbc_kv_set+0xfe>
#endif

  // need resize?
  } else if( kvh->n_stored >= kvh->data_size ) {
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	885a      	ldrh	r2, [r3, #2]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d30b      	bcc.n	800bd9e <mrbc_kv_set+0xfe>
    if( mrbc_kv_resize(kvh, kvh->data_size + MRBC_KV_SIZE_INCREMENT) != 0 ) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	3305      	adds	r3, #5
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff ff64 	bl	800bc5c <mrbc_kv_resize>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <mrbc_kv_set+0xfe>
      return E_NOMEMORY_ERROR;		// ENOMEM
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e045      	b.n	800be2a <mrbc_kv_set+0x18a>
    }
  }

  // need move data?
  if( idx < kvh->n_stored ) {
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	885b      	ldrh	r3, [r3, #2]
 800bda2:	461a      	mov	r2, r3
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	4293      	cmp	r3, r2
 800bda8:	da1f      	bge.n	800bdea <mrbc_kv_set+0x14a>
    int size = sizeof(mrbc_kv) * (kvh->n_stored - idx);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	885b      	ldrh	r3, [r3, #2]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	005b      	lsls	r3, r3, #1
 800bdba:	4413      	add	r3, r2
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	613b      	str	r3, [r7, #16]
    memmove( &kvh->data[idx+1], &kvh->data[idx], size );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6859      	ldr	r1, [r3, #4]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	1c5a      	adds	r2, r3, #1
 800bdc8:	4613      	mov	r3, r2
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	4413      	add	r3, r2
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	18c8      	adds	r0, r1, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6859      	ldr	r1, [r3, #4]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	4413      	add	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	440b      	add	r3, r1
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4619      	mov	r1, r3
 800bde6:	f00a fbfa 	bl	80165de <memmove>
  }

  kvh->data[idx].sym_id = sym_id;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6859      	ldr	r1, [r3, #4]
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	4413      	add	r3, r2
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	440b      	add	r3, r1
 800bdfa:	897a      	ldrh	r2, [r7, #10]
 800bdfc:	805a      	strh	r2, [r3, #2]
  kvh->data[idx].value = *set_val;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6859      	ldr	r1, [r3, #4]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	4613      	mov	r3, r2
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	4413      	add	r3, r2
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	440b      	add	r3, r1
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	f103 0408 	add.w	r4, r3, #8
 800be14:	4613      	mov	r3, r2
 800be16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  kvh->n_stored++;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	885b      	ldrh	r3, [r3, #2]
 800be20:	3301      	adds	r3, #1
 800be22:	b29a      	uxth	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	805a      	strh	r2, [r3, #2]

  return 0;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	371c      	adds	r7, #28
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd90      	pop	{r4, r7, pc}
 800be32:	bf00      	nop
 800be34:	08019654 	.word	0x08019654

0800be38 <mrbc_kv_get>:
  @param  kvh		pointer to key-value handle.
  @param  sym_id	symbol ID.
  @return		pointer to mrbc_value or NULL.
*/
mrbc_value * mrbc_kv_get(mrbc_kv_handle *kvh, mrbc_sym sym_id)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	807b      	strh	r3, [r7, #2]
  int idx = binary_search(kvh, sym_id);
 800be44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff fe82 	bl	800bb54 <binary_search>
 800be50:	60f8      	str	r0, [r7, #12]
  if( idx < 0 ) return NULL;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	da01      	bge.n	800be5c <mrbc_kv_get+0x24>
 800be58:	2300      	movs	r3, #0
 800be5a:	e018      	b.n	800be8e <mrbc_kv_get+0x56>
  if( kvh->data[idx].sym_id != sym_id ) return NULL;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6859      	ldr	r1, [r3, #4]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	4613      	mov	r3, r2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	4413      	add	r3, r2
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	440b      	add	r3, r1
 800be6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800be74:	429a      	cmp	r2, r3
 800be76:	d001      	beq.n	800be7c <mrbc_kv_get+0x44>
 800be78:	2300      	movs	r3, #0
 800be7a:	e008      	b.n	800be8e <mrbc_kv_get+0x56>

  return &kvh->data[idx].value;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6859      	ldr	r1, [r3, #4]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4613      	mov	r3, r2
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	4413      	add	r3, r2
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	440b      	add	r3, r1
 800be8c:	3308      	adds	r3, #8
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <mrbc_kv_clear>:
/*! clear all

  @param  kvh		pointer to key-value handle.
*/
void mrbc_kv_clear(mrbc_kv_handle *kvh)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  mrbc_kv *p1 = kvh->data;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	60fb      	str	r3, [r7, #12]
  const mrbc_kv *p2 = p1 + kvh->n_stored;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	885b      	ldrh	r3, [r3, #2]
 800bea8:	461a      	mov	r2, r3
 800beaa:	4613      	mov	r3, r2
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	4413      	add	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	461a      	mov	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4413      	add	r3, r2
 800beb8:	60bb      	str	r3, [r7, #8]
  while( p1 < p2 ) {
 800beba:	e007      	b.n	800becc <mrbc_kv_clear+0x36>
    mrbc_decref(&p1->value);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3308      	adds	r3, #8
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff fdbd 	bl	800ba40 <mrbc_decref>
    p1++;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3318      	adds	r3, #24
 800beca:	60fb      	str	r3, [r7, #12]
  while( p1 < p2 ) {
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d3f3      	bcc.n	800bebc <mrbc_kv_clear+0x26>
  }

  kvh->n_stored = 0;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	805a      	strh	r2, [r3, #2]
}
 800beda:	bf00      	nop
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <mrbc_kv_dup>:

  @param  src		pointer to key-value handle source.
  @param  dst		pointer to key-value handle destination.
*/
void mrbc_kv_dup(const mrbc_kv_handle *src, mrbc_kv_handle *dst)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b086      	sub	sp, #24
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	6039      	str	r1, [r7, #0]
  mrbc_kv_iterator ite = mrbc_kv_iterator_new( src );
 800beec:	f107 030c 	add.w	r3, r7, #12
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fdea 	bl	800bacc <mrbc_kv_iterator_new>

  while( mrbc_kv_i_has_next( &ite ) ) {
 800bef8:	e013      	b.n	800bf22 <mrbc_kv_dup+0x40>
    mrbc_kv *kv = mrbc_kv_i_next( &ite );
 800befa:	f107 030c 	add.w	r3, r7, #12
 800befe:	4618      	mov	r0, r3
 800bf00:	f7ff fe0f 	bl	800bb22 <mrbc_kv_i_next>
 800bf04:	6178      	str	r0, [r7, #20]
    mrbc_incref( &kv->value );
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff fd64 	bl	800b9d8 <mrbc_incref>
    mrbc_kv_set( dst, kv->sym_id, &kv->value );
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	6838      	ldr	r0, [r7, #0]
 800bf1e:	f7ff febf 	bl	800bca0 <mrbc_kv_set>
  while( mrbc_kv_i_has_next( &ite ) ) {
 800bf22:	f107 030c 	add.w	r3, r7, #12
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff fde7 	bl	800bafa <mrbc_kv_i_has_next>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1e3      	bne.n	800befa <mrbc_kv_dup+0x18>
  }
}
 800bf32:	bf00      	nop
 800bf34:	bf00      	nop
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <bin_to_uint16>:

  @param  s	Pointer to memory.
  @return	16bit unsigned int value.
*/
static inline uint16_t bin_to_uint16( const void *s )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
#if defined(MRBC_LITTLE_ENDIAN) && !defined(MRBC_REQUIRE_32BIT_ALIGNMENT)
  // Little endian, no alignment.
  uint16_t x = *((uint16_t *)s);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	81fb      	strh	r3, [r7, #14]
  x = (x << 8) | (x >> 8);
 800bf4a:	89fb      	ldrh	r3, [r7, #14]
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	b21a      	sxth	r2, r3
 800bf50:	89fb      	ldrh	r3, [r7, #14]
 800bf52:	0a1b      	lsrs	r3, r3, #8
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	b21b      	sxth	r3, r3
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	b21b      	sxth	r3, r3
 800bf5c:	81fb      	strh	r3, [r7, #14]

#else
  #error "Specify MRBC_BIG_ENDIAN or MRBC_LITTLE_ENDIAN"
#endif

  return x;
 800bf5e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <bin_to_uint32>:

  @param  s	Pointer to memory.
  @return	32bit unsigned int value.
*/
static inline uint32_t bin_to_uint32( const void *s )
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
#if defined(MRBC_LITTLE_ENDIAN) && !defined(MRBC_REQUIRE_32BIT_ALIGNMENT)
  // Little endian, no alignment.
  uint32_t x = *((uint32_t *)s);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	60fb      	str	r3, [r7, #12]
  x = (x << 24) | ((x & 0xff00) << 8) | ((x >> 8) & 0xff00) | (x >> 24);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	061a      	lsls	r2, r3, #24
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	021b      	lsls	r3, r3, #8
 800bf82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf86:	431a      	orrs	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	0a1b      	lsrs	r3, r3, #8
 800bf8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bf90:	431a      	orrs	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	0e1b      	lsrs	r3, r3, #24
 800bf96:	4313      	orrs	r3, r2
 800bf98:	60fb      	str	r3, [r7, #12]
  x <<= 8;
  x |= *p;

#endif

  return x;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <bin_to_double64>:

  @param  s	Pointer to memory.
  @return	double value.
*/
static inline double bin_to_double64( const void *s )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b089      	sub	sp, #36	; 0x24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  return x;

#elif defined(MRBC_LITTLE_ENDIAN) && defined(MRBC_REQUIRE_64BIT_ALIGNMENT)
  // Little endian, 64bit alignment required.
  double x;
  uint8_t *p1 = (uint8_t*)s;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	61fb      	str	r3, [r7, #28]
  uint8_t *p2 = (uint8_t*)&x;
 800bfb4:	f107 0308 	add.w	r3, r7, #8
 800bfb8:	61bb      	str	r3, [r7, #24]
  int i;
  for( i = 7; i >= 0; i-- ) {
 800bfba:	2307      	movs	r3, #7
 800bfbc:	617b      	str	r3, [r7, #20]
 800bfbe:	e00a      	b.n	800bfd6 <bin_to_double64+0x2e>
    *p2++ = *p1++;
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	1c53      	adds	r3, r2, #1
 800bfc4:	61fb      	str	r3, [r7, #28]
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	1c59      	adds	r1, r3, #1
 800bfca:	61b9      	str	r1, [r7, #24]
 800bfcc:	7812      	ldrb	r2, [r2, #0]
 800bfce:	701a      	strb	r2, [r3, #0]
  for( i = 7; i >= 0; i-- ) {
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	617b      	str	r3, [r7, #20]
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	daf1      	bge.n	800bfc0 <bin_to_double64+0x18>
  }
  return x;
 800bfdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    *p2-- = *p1++;
  }
  return x;

#endif
}
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	3724      	adds	r7, #36	; 0x24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
	...

0800bff0 <load_header>:
   "MATZ"     compiler name
   "0000"     compiler version
  </pre>
*/
static int load_header(struct VM *vm, const uint8_t *bin)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  if( memcmp(bin, RITE, sizeof(RITE)) != 0 ) {
 800bffa:	2204      	movs	r2, #4
 800bffc:	4913      	ldr	r1, [pc, #76]	; (800c04c <load_header+0x5c>)
 800bffe:	6838      	ldr	r0, [r7, #0]
 800c000:	f00a fadd 	bl	80165be <memcmp>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d007      	beq.n	800c01a <load_header+0x2a>
    mrbc_raise( vm, MRBC_CLASS(Exception), "Illegal bytecode.");
 800c00a:	4a11      	ldr	r2, [pc, #68]	; (800c050 <load_header+0x60>)
 800c00c:	4911      	ldr	r1, [pc, #68]	; (800c054 <load_header+0x64>)
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff f9f8 	bl	800b404 <mrbc_raise>
    return -1;
 800c014:	f04f 33ff 	mov.w	r3, #4294967295
 800c018:	e013      	b.n	800c042 <load_header+0x52>
  }
  bin += sizeof(RITE);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	3304      	adds	r3, #4
 800c01e:	603b      	str	r3, [r7, #0]

  if( memcmp(bin, RITE_VERSION, sizeof(RITE_VERSION)) != 0 ) {
 800c020:	2204      	movs	r2, #4
 800c022:	490d      	ldr	r1, [pc, #52]	; (800c058 <load_header+0x68>)
 800c024:	6838      	ldr	r0, [r7, #0]
 800c026:	f00a faca 	bl	80165be <memcmp>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d007      	beq.n	800c040 <load_header+0x50>
    mrbc_raise( vm, MRBC_CLASS(Exception), "Bytecode version mismatch.");
 800c030:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <load_header+0x6c>)
 800c032:	4908      	ldr	r1, [pc, #32]	; (800c054 <load_header+0x64>)
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff f9e5 	bl	800b404 <mrbc_raise>
    return -1;
 800c03a:	f04f 33ff 	mov.w	r3, #4294967295
 800c03e:	e000      	b.n	800c042 <load_header+0x52>
  }

  /* Ignore others. */

  return 0;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	0801ae34 	.word	0x0801ae34
 800c050:	08019658 	.word	0x08019658
 800c054:	2000010c 	.word	0x2000010c
 800c058:	0801ae38 	.word	0x0801ae38
 800c05c:	0801966c 	.word	0x0801966c

0800c060 <load_irep_1>:
     0000	length
     ...	symbol data
  </pre>
*/
static mrbc_irep * load_irep_1(struct VM *vm, const uint8_t *bin, int *len, int flag_top)
{
 800c060:	b5b0      	push	{r4, r5, r7, lr}
 800c062:	b098      	sub	sp, #96	; 0x60
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
  mrbc_irep irep;
  const uint8_t *p = bin + 4;	// 4 = skip record size.
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	3304      	adds	r3, #4
 800c072:	65fb      	str	r3, [r7, #92]	; 0x5c
  int i;

#if defined(MRBC_DEBUG)
  irep.type[0] = 'R';	// set "RP"
 800c074:	2352      	movs	r3, #82	; 0x52
 800c076:	753b      	strb	r3, [r7, #20]
  irep.type[1] = 'P';
 800c078:	2350      	movs	r3, #80	; 0x50
 800c07a:	757b      	strb	r3, [r7, #21]
#endif

  irep.nlocals = bin_to_uint16(p);	p += 2;
 800c07c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c07e:	f7ff ff5d 	bl	800bf3c <bin_to_uint16>
 800c082:	4603      	mov	r3, r0
 800c084:	82fb      	strh	r3, [r7, #22]
 800c086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c088:	3302      	adds	r3, #2
 800c08a:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.nregs = bin_to_uint16(p);	p += 2;
 800c08c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c08e:	f7ff ff55 	bl	800bf3c <bin_to_uint16>
 800c092:	4603      	mov	r3, r0
 800c094:	833b      	strh	r3, [r7, #24]
 800c096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c098:	3302      	adds	r3, #2
 800c09a:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.rlen = bin_to_uint16(p);		p += 2;
 800c09c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c09e:	f7ff ff4d 	bl	800bf3c <bin_to_uint16>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	837b      	strh	r3, [r7, #26]
 800c0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.clen = bin_to_uint16(p);		p += 2;
 800c0ac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0ae:	f7ff ff45 	bl	800bf3c <bin_to_uint16>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	83bb      	strh	r3, [r7, #28]
 800c0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b8:	3302      	adds	r3, #2
 800c0ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.ilen = bin_to_uint32(p);		p += 4;
 800c0bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0be:	f7ff ff55 	bl	800bf6c <bin_to_uint32>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	623b      	str	r3, [r7, #32]
 800c0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.inst = p;
 800c0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  // POOL block
  p += irep.ilen + SIZE_RITE_CATCH_HANDLER * irep.clen;
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	8bba      	ldrh	r2, [r7, #28]
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	220d      	movs	r2, #13
 800c0d8:	fb01 f202 	mul.w	r2, r1, r2
 800c0dc:	4413      	add	r3, r2
 800c0de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0e0:	4413      	add	r3, r2
 800c0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  irep.pool = p;
 800c0e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e6:	633b      	str	r3, [r7, #48]	; 0x30
  irep.plen = bin_to_uint16(p);		p += 2;
 800c0e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c0ea:	f7ff ff27 	bl	800bf3c <bin_to_uint16>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0f4:	3302      	adds	r3, #2
 800c0f6:	65fb      	str	r3, [r7, #92]	; 0x5c

  // skip pool
  for( i = 0; i < irep.plen; i++ ) {
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0fc:	e036      	b.n	800c16c <load_irep_1+0x10c>
    int siz = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	657b      	str	r3, [r7, #84]	; 0x54
    switch( *p++ ) {
 800c102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b05      	cmp	r3, #5
 800c10c:	d820      	bhi.n	800c150 <load_irep_1+0xf0>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <load_irep_1+0xb4>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c12d 	.word	0x0800c12d
 800c118:	0800c13b 	.word	0x0800c13b
 800c11c:	0800c12d 	.word	0x0800c12d
 800c120:	0800c141 	.word	0x0800c141
 800c124:	0800c151 	.word	0x0800c151
 800c128:	0800c14b 	.word	0x0800c14b
    case IREP_TT_STR:
    case IREP_TT_SSTR:	siz = bin_to_uint16(p) + 3;	break;
 800c12c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c12e:	f7ff ff05 	bl	800bf3c <bin_to_uint16>
 800c132:	4603      	mov	r3, r0
 800c134:	3303      	adds	r3, #3
 800c136:	657b      	str	r3, [r7, #84]	; 0x54
 800c138:	e011      	b.n	800c15e <load_irep_1+0xfe>
    case IREP_TT_INT32:	siz = 4;	break;
 800c13a:	2304      	movs	r3, #4
 800c13c:	657b      	str	r3, [r7, #84]	; 0x54
 800c13e:	e00e      	b.n	800c15e <load_irep_1+0xfe>
    case IREP_TT_INT64:
#if !defined(MRBC_INT64)
      mrbc_raise(vm, MRBC_CLASS(NotImplementedError), "Unsupported int64 (set MRBC_INT64 in vm_config)");
 800c140:	4a82      	ldr	r2, [pc, #520]	; (800c34c <load_irep_1+0x2ec>)
 800c142:	4983      	ldr	r1, [pc, #524]	; (800c350 <load_irep_1+0x2f0>)
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff f95d 	bl	800b404 <mrbc_raise>
#endif
    case IREP_TT_FLOAT:	siz = 8;	break;
 800c14a:	2308      	movs	r3, #8
 800c14c:	657b      	str	r3, [r7, #84]	; 0x54
 800c14e:	e006      	b.n	800c15e <load_irep_1+0xfe>
    default:
      mrbc_raise(vm, MRBC_CLASS(Exception), "Loader unknown TT found.");
 800c150:	4a80      	ldr	r2, [pc, #512]	; (800c354 <load_irep_1+0x2f4>)
 800c152:	4981      	ldr	r1, [pc, #516]	; (800c358 <load_irep_1+0x2f8>)
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f7ff f955 	bl	800b404 <mrbc_raise>
      return NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e0f1      	b.n	800c342 <load_irep_1+0x2e2>
    }
    p += siz;
 800c15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c162:	4413      	add	r3, r2
 800c164:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.plen; i++ ) {
 800c166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c168:	3301      	adds	r3, #1
 800c16a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c16e:	461a      	mov	r2, r3
 800c170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c172:	4293      	cmp	r3, r2
 800c174:	dbc3      	blt.n	800c0fe <load_irep_1+0x9e>
  }

  // num of symbols, offset of tbl_ireps.
  irep.slen = bin_to_uint16(p);		p += 2;
 800c176:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c178:	f7ff fee0 	bl	800bf3c <bin_to_uint16>
 800c17c:	4603      	mov	r3, r0
 800c17e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c182:	3302      	adds	r3, #2
 800c184:	65fb      	str	r3, [r7, #92]	; 0x5c
  int siz = sizeof(mrbc_sym) * irep.slen + sizeof(uint16_t) * irep.plen;
 800c186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c188:	461a      	mov	r2, r3
 800c18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c18c:	4413      	add	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	63fb      	str	r3, [r7, #60]	; 0x3c
  siz += (-siz & 0x03);	// padding. 32bit align.
 800c192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c194:	425b      	negs	r3, r3
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c19c:	4413      	add	r3, r2
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
  irep.ofs_ireps = siz >> 2;
 800c1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a2:	109b      	asrs	r3, r3, #2
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	853b      	strh	r3, [r7, #40]	; 0x28

  // allocate new irep
  mrbc_irep *p_irep;
  siz = sizeof(mrbc_irep) + siz + sizeof(mrbc_irep*) * irep.rlen;
 800c1a8:	8b7b      	ldrh	r3, [r7, #26]
 800c1aa:	009a      	lsls	r2, r3, #2
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3320      	adds	r3, #32
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if( vm->vm_id == 0 && !flag_top ) {
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	789b      	ldrb	r3, [r3, #2]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d108      	bne.n	800c1ce <load_irep_1+0x16e>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <load_irep_1+0x16e>
    p_irep = mrbc_raw_alloc_no_free( siz );
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7f5 fdcd 	bl	8001d64 <mrbc_raw_alloc_no_free>
 800c1ca:	6538      	str	r0, [r7, #80]	; 0x50
 800c1cc:	e004      	b.n	800c1d8 <load_irep_1+0x178>
  } else {
    p_irep = mrbc_raw_alloc( siz );
 800c1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7f5 fc67 	bl	8001aa4 <mrbc_raw_alloc>
 800c1d6:	6538      	str	r0, [r7, #80]	; 0x50
  }
  if( !p_irep ) {	// ENOMEM
 800c1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <load_irep_1+0x18c>
    mrbc_raise(vm, MRBC_CLASS(NoMemoryError),0);
 800c1de:	2200      	movs	r2, #0
 800c1e0:	495e      	ldr	r1, [pc, #376]	; (800c35c <load_irep_1+0x2fc>)
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7ff f90e 	bl	800b404 <mrbc_raise>
    return NULL;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	e0aa      	b.n	800c342 <load_irep_1+0x2e2>
  }
  *p_irep = irep;
 800c1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ee:	461d      	mov	r5, r3
 800c1f0:	f107 0414 	add.w	r4, r7, #20
 800c1f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c1fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  // make a sym_id table.
  mrbc_sym *tbl_syms = mrbc_irep_tbl_syms(p_irep);
 800c200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c202:	3320      	adds	r3, #32
 800c204:	64fb      	str	r3, [r7, #76]	; 0x4c
  for( i = 0; i < irep.slen; i++ ) {
 800c206:	2300      	movs	r3, #0
 800c208:	65bb      	str	r3, [r7, #88]	; 0x58
 800c20a:	e039      	b.n	800c280 <load_irep_1+0x220>
    int siz = bin_to_uint16(p) + 1;	p += 2;
 800c20c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c20e:	f7ff fe95 	bl	800bf3c <bin_to_uint16>
 800c212:	4603      	mov	r3, r0
 800c214:	3301      	adds	r3, #1
 800c216:	63bb      	str	r3, [r7, #56]	; 0x38
 800c218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c21a:	3302      	adds	r3, #2
 800c21c:	65fb      	str	r3, [r7, #92]	; 0x5c
    char *sym_str;
    if (vm->flag_permanence == 1) {
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	791b      	ldrb	r3, [r3, #4]
 800c222:	f003 0304 	and.w	r3, r3, #4
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00b      	beq.n	800c244 <load_irep_1+0x1e4>
      sym_str = mrbc_raw_alloc_no_free(siz);
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	4618      	mov	r0, r3
 800c230:	f7f5 fd98 	bl	8001d64 <mrbc_raw_alloc_no_free>
 800c234:	64b8      	str	r0, [r7, #72]	; 0x48
      memcpy(sym_str, p, siz);
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	461a      	mov	r2, r3
 800c23a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c23c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c23e:	f00a fa82 	bl	8016746 <memcpy>
 800c242:	e001      	b.n	800c248 <load_irep_1+0x1e8>
    } else {
      sym_str = (char *)p;
 800c244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c246:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    mrbc_sym sym = mrbc_str_to_symid( (const char *)sym_str );
 800c248:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c24a:	f001 fc3d 	bl	800dac8 <mrbc_str_to_symid>
 800c24e:	4603      	mov	r3, r0
 800c250:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( sym < 0 ) {
 800c252:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800c256:	2b00      	cmp	r3, #0
 800c258:	da06      	bge.n	800c268 <load_irep_1+0x208>
      mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800c25a:	4a41      	ldr	r2, [pc, #260]	; (800c360 <load_irep_1+0x300>)
 800c25c:	493e      	ldr	r1, [pc, #248]	; (800c358 <load_irep_1+0x2f8>)
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff f8d0 	bl	800b404 <mrbc_raise>
      return NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	e06c      	b.n	800c342 <load_irep_1+0x2e2>
    }
    *tbl_syms++ = sym;
 800c268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c26a:	1c9a      	adds	r2, r3, #2
 800c26c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c26e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c270:	801a      	strh	r2, [r3, #0]
    p += (siz);
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c276:	4413      	add	r3, r2
 800c278:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.slen; i++ ) {
 800c27a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c27c:	3301      	adds	r3, #1
 800c27e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c282:	461a      	mov	r2, r3
 800c284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c286:	4293      	cmp	r3, r2
 800c288:	dbc0      	blt.n	800c20c <load_irep_1+0x1ac>
  }

  // make a pool data's offset table.
  uint16_t *ofs_pools = mrbc_irep_tbl_pools(p_irep);
 800c28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28c:	f103 0220 	add.w	r2, r3, #32
 800c290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c292:	8a5b      	ldrh	r3, [r3, #18]
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	4413      	add	r3, r2
 800c298:	647b      	str	r3, [r7, #68]	; 0x44
  p = p_irep->pool + 2;
 800c29a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c29c:	69db      	ldr	r3, [r3, #28]
 800c29e:	3302      	adds	r3, #2
 800c2a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.plen; i++ ) {
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2a6:	e03f      	b.n	800c328 <load_irep_1+0x2c8>
    int siz = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	643b      	str	r3, [r7, #64]	; 0x40
    if( (p - irep.pool) > UINT16_MAX ) {
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b6:	db06      	blt.n	800c2c6 <load_irep_1+0x266>
      mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow IREP data offset table.");
 800c2b8:	4a2a      	ldr	r2, [pc, #168]	; (800c364 <load_irep_1+0x304>)
 800c2ba:	4927      	ldr	r1, [pc, #156]	; (800c358 <load_irep_1+0x2f8>)
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7ff f8a1 	bl	800b404 <mrbc_raise>
      return NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e03d      	b.n	800c342 <load_irep_1+0x2e2>
    }
    *ofs_pools++ = (uint16_t)(p - irep.pool);
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2ca:	1ad1      	subs	r1, r2, r3
 800c2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ce:	1c9a      	adds	r2, r3, #2
 800c2d0:	647a      	str	r2, [r7, #68]	; 0x44
 800c2d2:	b28a      	uxth	r2, r1
 800c2d4:	801a      	strh	r2, [r3, #0]
    switch( *p++ ) {
 800c2d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b05      	cmp	r3, #5
 800c2e0:	d81b      	bhi.n	800c31a <load_irep_1+0x2ba>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <load_irep_1+0x288>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c301 	.word	0x0800c301
 800c2ec:	0800c30f 	.word	0x0800c30f
 800c2f0:	0800c301 	.word	0x0800c301
 800c2f4:	0800c315 	.word	0x0800c315
 800c2f8:	0800c31b 	.word	0x0800c31b
 800c2fc:	0800c315 	.word	0x0800c315
    case IREP_TT_STR:
    case IREP_TT_SSTR:	siz = bin_to_uint16(p) + 3;	break;
 800c300:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c302:	f7ff fe1b 	bl	800bf3c <bin_to_uint16>
 800c306:	4603      	mov	r3, r0
 800c308:	3303      	adds	r3, #3
 800c30a:	643b      	str	r3, [r7, #64]	; 0x40
 800c30c:	e005      	b.n	800c31a <load_irep_1+0x2ba>
    case IREP_TT_INT32:	siz = 4;	break;
 800c30e:	2304      	movs	r3, #4
 800c310:	643b      	str	r3, [r7, #64]	; 0x40
 800c312:	e002      	b.n	800c31a <load_irep_1+0x2ba>
    case IREP_TT_INT64:
    case IREP_TT_FLOAT:	siz = 8;	break;
 800c314:	2308      	movs	r3, #8
 800c316:	643b      	str	r3, [r7, #64]	; 0x40
 800c318:	bf00      	nop
    }
    p += siz;
 800c31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c31e:	4413      	add	r3, r2
 800c320:	65fb      	str	r3, [r7, #92]	; 0x5c
  for( i = 0; i < irep.plen; i++ ) {
 800c322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c324:	3301      	adds	r3, #1
 800c326:	65bb      	str	r3, [r7, #88]	; 0x58
 800c328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c32a:	461a      	mov	r2, r3
 800c32c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c32e:	4293      	cmp	r3, r2
 800c330:	dbba      	blt.n	800c2a8 <load_irep_1+0x248>
  }

  // return length
  *len = bin_to_uint32(bin);
 800c332:	68b8      	ldr	r0, [r7, #8]
 800c334:	f7ff fe1a 	bl	800bf6c <bin_to_uint32>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	601a      	str	r2, [r3, #0]
  return p_irep;
 800c340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c342:	4618      	mov	r0, r3
 800c344:	3760      	adds	r7, #96	; 0x60
 800c346:	46bd      	mov	sp, r7
 800c348:	bdb0      	pop	{r4, r5, r7, pc}
 800c34a:	bf00      	nop
 800c34c:	08019688 	.word	0x08019688
 800c350:	20000134 	.word	0x20000134
 800c354:	080196b8 	.word	0x080196b8
 800c358:	2000010c 	.word	0x2000010c
 800c35c:	20000124 	.word	0x20000124
 800c360:	080196d4 	.word	0x080196d4
 800c364:	080196f0 	.word	0x080196f0

0800c368 <load_irep>:
  @param  bin	A pointer to RITE ISEQ.
  @param  len	Returns the parsed length.
  @return	Pointer to allocated mrbc_irep or NULL
*/
static mrbc_irep *load_irep(struct VM *vm, const uint8_t *bin, int *len)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b08b      	sub	sp, #44	; 0x2c
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
  int len1;
  mrbc_irep *irep = load_irep_1(vm, bin, &len1, len == 0);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	bf0c      	ite	eq
 800c37a:	2301      	moveq	r3, #1
 800c37c:	2300      	movne	r3, #0
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	f107 0214 	add.w	r2, r7, #20
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff fe6a 	bl	800c060 <load_irep_1>
 800c38c:	61f8      	str	r0, [r7, #28]
  if( !irep ) return NULL;
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <load_irep+0x30>
 800c394:	2300      	movs	r3, #0
 800c396:	e037      	b.n	800c408 <load_irep+0xa0>
  int total_len = len1;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_irep **tbl_ireps = mrbc_irep_tbl_ireps(irep);
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	3320      	adds	r3, #32
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	8a92      	ldrh	r2, [r2, #20]
 800c3a4:	0092      	lsls	r2, r2, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	61bb      	str	r3, [r7, #24]
  int i;
  for( i = 0; i < irep->rlen; i++ ) {
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	623b      	str	r3, [r7, #32]
 800c3ae:	e01e      	b.n	800c3ee <load_irep+0x86>
    tbl_ireps[i] = load_irep(vm, bin + total_len, &len1);
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	18d1      	adds	r1, r2, r3
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	69ba      	ldr	r2, [r7, #24]
 800c3bc:	18d4      	adds	r4, r2, r3
 800c3be:	f107 0314 	add.w	r3, r7, #20
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff ffcf 	bl	800c368 <load_irep>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	6023      	str	r3, [r4, #0]
    if( ! tbl_ireps[i] ) return NULL;
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	69ba      	ldr	r2, [r7, #24]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d101      	bne.n	800c3e0 <load_irep+0x78>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	e013      	b.n	800c408 <load_irep+0xa0>
    total_len += len1;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3e4:	4413      	add	r3, r2
 800c3e6:	627b      	str	r3, [r7, #36]	; 0x24
  for( i = 0; i < irep->rlen; i++ ) {
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	623b      	str	r3, [r7, #32]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	88db      	ldrh	r3, [r3, #6]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	dbda      	blt.n	800c3b0 <load_irep+0x48>
  }

  if( len ) *len = total_len;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <load_irep+0x9e>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c404:	601a      	str	r2, [r3, #0]
  return irep;
 800c406:	69fb      	ldr	r3, [r7, #28]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	372c      	adds	r7, #44	; 0x2c
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd90      	pop	{r4, r7, pc}

0800c410 <mrbc_load_mrb>:
  @param  vm		Pointer to VM.
  @param  bytecode	Pointer to bytecode.
  @return int		zero if no error.
*/
int mrbc_load_mrb(struct VM *vm, const void *bytecode)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  const uint8_t *bin = bytecode;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	61fb      	str	r3, [r7, #28]

  vm->exception = mrbc_nil_value();
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3328      	adds	r3, #40	; 0x28
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]
 800c426:	605a      	str	r2, [r3, #4]
 800c428:	609a      	str	r2, [r3, #8]
 800c42a:	60da      	str	r2, [r3, #12]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  if( load_header(vm, bin) != 0 ) return -1;
 800c434:	69f9      	ldr	r1, [r7, #28]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff fdda 	bl	800bff0 <load_header>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <mrbc_load_mrb+0x38>
 800c442:	f04f 33ff 	mov.w	r3, #4294967295
 800c446:	e02f      	b.n	800c4a8 <mrbc_load_mrb+0x98>

  bin += SIZE_RITE_BINARY_HEADER;
 800c448:	2314      	movs	r3, #20
 800c44a:	461a      	mov	r2, r3
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	4413      	add	r3, r2
 800c450:	61fb      	str	r3, [r7, #28]

  while( 1 ) {
    if( memcmp(bin, IREP, sizeof(IREP)) == 0 ) {
 800c452:	2204      	movs	r2, #4
 800c454:	4916      	ldr	r1, [pc, #88]	; (800c4b0 <mrbc_load_mrb+0xa0>)
 800c456:	69f8      	ldr	r0, [r7, #28]
 800c458:	f00a f8b1 	bl	80165be <memcmp>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d107      	bne.n	800c472 <mrbc_load_mrb+0x62>
      if( mrbc_load_irep( vm, bin ) != 0 ) break;
 800c462:	69f9      	ldr	r1, [r7, #28]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f827 	bl	800c4b8 <mrbc_load_irep>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d008      	beq.n	800c482 <mrbc_load_mrb+0x72>
 800c470:	e012      	b.n	800c498 <mrbc_load_mrb+0x88>

    } else if( memcmp(bin, END, sizeof(END)) == 0 ) {
 800c472:	2204      	movs	r2, #4
 800c474:	490f      	ldr	r1, [pc, #60]	; (800c4b4 <mrbc_load_mrb+0xa4>)
 800c476:	69f8      	ldr	r0, [r7, #28]
 800c478:	f00a f8a1 	bl	80165be <memcmp>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d009      	beq.n	800c496 <mrbc_load_mrb+0x86>
      break;
    }
    // ignore other section.

    bin += bin_to_uint32(bin+4);	// add section size, to next section.
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	3304      	adds	r3, #4
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff fd70 	bl	800bf6c <bin_to_uint32>
 800c48c:	4602      	mov	r2, r0
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	4413      	add	r3, r2
 800c492:	61fb      	str	r3, [r7, #28]
    if( memcmp(bin, IREP, sizeof(IREP)) == 0 ) {
 800c494:	e7dd      	b.n	800c452 <mrbc_load_mrb+0x42>
      break;
 800c496:	bf00      	nop
  }

  return mrbc_israised(vm);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800c49e:	2b0e      	cmp	r3, #14
 800c4a0:	bf0c      	ite	eq
 800c4a2:	2301      	moveq	r3, #1
 800c4a4:	2300      	movne	r3, #0
 800c4a6:	b2db      	uxtb	r3, r3
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3720      	adds	r7, #32
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	0801ae3c 	.word	0x0801ae3c
 800c4b4:	0801ae40 	.word	0x0801ae40

0800c4b8 <mrbc_load_irep>:
  @param  vm		Pointer to VM.
  @param  bytecode	Pointer to IREP section.
  @return int		zero if no error.
*/
int mrbc_load_irep(struct VM *vm, const void *bytecode)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  const uint8_t *bin = bytecode;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	60fb      	str	r3, [r7, #12]

  vm->top_irep = load_irep( vm, bin + SIZE_RITE_SECTION_HEADER, 0 );
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff ff48 	bl	800c368 <load_irep>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	609a      	str	r2, [r3, #8]
  if( vm->top_irep == NULL ) return -1;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <mrbc_load_irep+0x34>
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	e007      	b.n	800c4fc <mrbc_load_irep+0x44>

  return mrbc_israised(vm);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800c4f2:	2b0e      	cmp	r3, #14
 800c4f4:	bf0c      	ite	eq
 800c4f6:	2301      	moveq	r3, #1
 800c4f8:	2300      	movne	r3, #0
 800c4fa:	b2db      	uxtb	r3, r3
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <mrbc_irep_free>:
/*! release mrbc_irep holds memory

  @param  irep	Pointer to allocated mrbc_irep.
*/
void mrbc_irep_free(struct IREP *irep)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  // release child ireps.
  mrbc_irep **tbl_ireps = mrbc_irep_tbl_ireps(irep);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3320      	adds	r3, #32
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	8a92      	ldrh	r2, [r2, #20]
 800c514:	0092      	lsls	r2, r2, #2
 800c516:	4413      	add	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  int i;
  for( i = 0; i < irep->rlen; i++ ) {
 800c51a:	2300      	movs	r3, #0
 800c51c:	60bb      	str	r3, [r7, #8]
 800c51e:	e009      	b.n	800c534 <mrbc_irep_free+0x30>
    mrbc_irep_free( *tbl_ireps++ );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	1d1a      	adds	r2, r3, #4
 800c524:	60fa      	str	r2, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7ff ffeb 	bl	800c504 <mrbc_irep_free>
  for( i = 0; i < irep->rlen; i++ ) {
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	3301      	adds	r3, #1
 800c532:	60bb      	str	r3, [r7, #8]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	88db      	ldrh	r3, [r3, #6]
 800c538:	461a      	mov	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	dbef      	blt.n	800c520 <mrbc_irep_free+0x1c>
  }

  mrbc_raw_free( irep );
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7f5 fc8b 	bl	8001e5c <mrbc_raw_free>
}
 800c546:	bf00      	nop
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <mrbc_irep_pool_value>:
  @param  vm		Pointer to VM.
  @param  n		n'th
  @return mrbc_value	value
*/
mrbc_value mrbc_irep_pool_value(struct VM *vm, int n)
{
 800c550:	b590      	push	{r4, r7, lr}
 800c552:	b091      	sub	sp, #68	; 0x44
 800c554:	af00      	add	r7, sp, #0
 800c556:	61f8      	str	r0, [r7, #28]
 800c558:	61b9      	str	r1, [r7, #24]
 800c55a:	617a      	str	r2, [r7, #20]
  assert( vm->cur_irep->plen > n );
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	8a1b      	ldrh	r3, [r3, #16]
 800c562:	461a      	mov	r2, r3
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	4293      	cmp	r3, r2
 800c568:	db06      	blt.n	800c578 <mrbc_irep_pool_value+0x28>
 800c56a:	4b36      	ldr	r3, [pc, #216]	; (800c644 <mrbc_irep_pool_value+0xf4>)
 800c56c:	4a36      	ldr	r2, [pc, #216]	; (800c648 <mrbc_irep_pool_value+0xf8>)
 800c56e:	f240 1161 	movw	r1, #353	; 0x161
 800c572:	4836      	ldr	r0, [pc, #216]	; (800c64c <mrbc_irep_pool_value+0xfc>)
 800c574:	f009 f80c 	bl	8015590 <__assert_func>
  const uint8_t *p = mrbc_irep_pool_ptr(vm->cur_irep, n);
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	68d2      	ldr	r2, [r2, #12]
 800c582:	f102 0120 	add.w	r1, r2, #32
 800c586:	69ba      	ldr	r2, [r7, #24]
 800c588:	68d2      	ldr	r2, [r2, #12]
 800c58a:	8a52      	ldrh	r2, [r2, #18]
 800c58c:	4610      	mov	r0, r2
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4402      	add	r2, r0
 800c592:	0052      	lsls	r2, r2, #1
 800c594:	440a      	add	r2, r1
 800c596:	8812      	ldrh	r2, [r2, #0]
 800c598:	4413      	add	r3, r2
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
  mrbc_value obj;

  int tt = *p++;
 800c59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	63bb      	str	r3, [r7, #56]	; 0x38
  switch( tt ) {
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	2b05      	cmp	r3, #5
 800c5aa:	d836      	bhi.n	800c61a <mrbc_irep_pool_value+0xca>
 800c5ac:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <mrbc_irep_pool_value+0x64>)
 800c5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b2:	bf00      	nop
 800c5b4:	0800c5cd 	.word	0x0800c5cd
 800c5b8:	0800c5f3 	.word	0x0800c5f3
 800c5bc:	0800c5cd 	.word	0x0800c5cd
 800c5c0:	0800c61b 	.word	0x0800c61b
 800c5c4:	0800c61b 	.word	0x0800c61b
 800c5c8:	0800c605 	.word	0x0800c605
#if MRBC_USE_STRING
  case IREP_TT_STR:
  case IREP_TT_SSTR: {
    int len = bin_to_uint16(p);
 800c5cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5ce:	f7ff fcb5 	bl	800bf3c <bin_to_uint16>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	637b      	str	r3, [r7, #52]	; 0x34
    obj = mrbc_string_new( vm, p+2, len );
 800c5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d8:	1c9a      	adds	r2, r3, #2
 800c5da:	4638      	mov	r0, r7
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5de:	69b9      	ldr	r1, [r7, #24]
 800c5e0:	f7fa fdd2 	bl	8007188 <mrbc_string_new>
 800c5e4:	f107 0420 	add.w	r4, r7, #32
 800c5e8:	463b      	mov	r3, r7
 800c5ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    break;
 800c5f0:	e01c      	b.n	800c62c <mrbc_irep_pool_value+0xdc>
  }
#endif

  case IREP_TT_INT32:
    mrbc_set_integer(&obj, bin_to_uint32(p));
 800c5f2:	2304      	movs	r3, #4
 800c5f4:	f887 3020 	strb.w	r3, [r7, #32]
 800c5f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5fa:	f7ff fcb7 	bl	800bf6c <bin_to_uint32>
 800c5fe:	4603      	mov	r3, r0
 800c600:	62bb      	str	r3, [r7, #40]	; 0x28
    break;
 800c602:	e013      	b.n	800c62c <mrbc_irep_pool_value+0xdc>

#if MRBC_USE_FLOAT
  case IREP_TT_FLOAT:
    mrbc_set_float(&obj, bin_to_double64(p));
 800c604:	2305      	movs	r3, #5
 800c606:	f887 3020 	strb.w	r3, [r7, #32]
 800c60a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c60c:	f7ff fccc 	bl	800bfa8 <bin_to_double64>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    break;
 800c618:	e008      	b.n	800c62c <mrbc_irep_pool_value+0xdc>
    mrbc_set_integer(&obj, bin_to_int64(p));
    break;
#endif

  default:
    mrbc_raisef(vm, MRBC_CLASS(Exception), "Not support such type (IREP_TT=%d)", tt);
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	4a0c      	ldr	r2, [pc, #48]	; (800c650 <mrbc_irep_pool_value+0x100>)
 800c61e:	490d      	ldr	r1, [pc, #52]	; (800c654 <mrbc_irep_pool_value+0x104>)
 800c620:	69b8      	ldr	r0, [r7, #24]
 800c622:	f7fe ff43 	bl	800b4ac <mrbc_raisef>
    mrbc_set_nil(&obj);
 800c626:	2301      	movs	r3, #1
 800c628:	f887 3020 	strb.w	r3, [r7, #32]
  }

  return obj;
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	461c      	mov	r4, r3
 800c630:	f107 0320 	add.w	r3, r7, #32
 800c634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c63a:	69f8      	ldr	r0, [r7, #28]
 800c63c:	3744      	adds	r7, #68	; 0x44
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd90      	pop	{r4, r7, pc}
 800c642:	bf00      	nop
 800c644:	08019714 	.word	0x08019714
 800c648:	0801ae44 	.word	0x0801ae44
 800c64c:	0801972c 	.word	0x0801972c
 800c650:	08019748 	.word	0x08019748
 800c654:	2000010c 	.word	0x2000010c

0800c658 <mrbc_decref>:
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f993 3000 	ldrsb.w	r3, [r3]
 800c666:	2b07      	cmp	r3, #7
 800c668:	dd2c      	ble.n	800c6c4 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	885b      	ldrh	r3, [r3, #2]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d106      	bne.n	800c682 <mrbc_decref+0x2a>
 800c674:	4b16      	ldr	r3, [pc, #88]	; (800c6d0 <mrbc_decref+0x78>)
 800c676:	4a17      	ldr	r2, [pc, #92]	; (800c6d4 <mrbc_decref+0x7c>)
 800c678:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800c67c:	4816      	ldr	r0, [pc, #88]	; (800c6d8 <mrbc_decref+0x80>)
 800c67e:	f008 ff87 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	885b      	ldrh	r3, [r3, #2]
 800c688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d106      	bne.n	800c69e <mrbc_decref+0x46>
 800c690:	4b12      	ldr	r3, [pc, #72]	; (800c6dc <mrbc_decref+0x84>)
 800c692:	4a10      	ldr	r2, [pc, #64]	; (800c6d4 <mrbc_decref+0x7c>)
 800c694:	f240 11d3 	movw	r1, #467	; 0x1d3
 800c698:	480f      	ldr	r0, [pc, #60]	; (800c6d8 <mrbc_decref+0x80>)
 800c69a:	f008 ff79 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	885a      	ldrh	r2, [r3, #2]
 800c6a4:	3a01      	subs	r2, #1
 800c6a6:	b292      	uxth	r2, r2
 800c6a8:	805a      	strh	r2, [r3, #2]
 800c6aa:	885b      	ldrh	r3, [r3, #2]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f993 3000 	ldrsb.w	r3, [r3]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <mrbc_decref+0x88>)
 800c6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	4798      	blx	r3
 800c6c2:	e002      	b.n	800c6ca <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800c6c4:	bf00      	nop
 800c6c6:	e000      	b.n	800c6ca <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800c6c8:	bf00      	nop
}
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	0801976c 	.word	0x0801976c
 800c6d4:	0801bd6c 	.word	0x0801bd6c
 800c6d8:	08019784 	.word	0x08019784
 800c6dc:	080197a0 	.word	0x080197a0
 800c6e0:	0801bde8 	.word	0x0801bde8

0800c6e4 <mrbc_string_new_cstr>:
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <mrbc_string_new_cstr+0x1c>
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7f3 fd7c 	bl	80001f4 <strlen>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	e000      	b.n	800c702 <mrbc_string_new_cstr+0x1e>
 800c700:	2300      	movs	r3, #0
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	f7fa fd3e 	bl	8007188 <mrbc_string_new>
}
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <mrbc_string_cstr>:
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  return (char*)v->string->data;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	689b      	ldr	r3, [r3, #8]
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <mrbc_string_append_cstr>:
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 800c738:	6838      	ldr	r0, [r7, #0]
 800c73a:	f7f3 fd5b 	bl	80001f4 <strlen>
 800c73e:	4603      	mov	r3, r0
 800c740:	461a      	mov	r2, r3
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7fa feb7 	bl	80074b8 <mrbc_string_append_cbuf>
 800c74a:	4603      	mov	r3, r0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <q_insert_task>:
  The queue is sorted in priority_preemption order.
  If the same priority_preemption value is in the TCB and queue,
  it will be inserted at the end of the same value in queue.
*/
static void q_insert_task(mrbc_tcb *p_tcb)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  // select target queue pointer.
  //                    state value = 0  1  2  3  4  5  6  7  8
  //                             /2   0, 0, 1, 1, 2, 2, 3, 3, 4
  static const uint8_t conv_tbl[] = { 0,    1,    2,    0,    3 };
  mrbc_tcb **pp_q = &task_queue_[ conv_tbl[ p_tcb->state / 2 ]];
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7adb      	ldrb	r3, [r3, #11]
 800c760:	085b      	lsrs	r3, r3, #1
 800c762:	b2db      	uxtb	r3, r3
 800c764:	461a      	mov	r2, r3
 800c766:	4b1c      	ldr	r3, [pc, #112]	; (800c7d8 <q_insert_task+0x84>)
 800c768:	5c9b      	ldrb	r3, [r3, r2]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4a1b      	ldr	r2, [pc, #108]	; (800c7dc <q_insert_task+0x88>)
 800c76e:	4413      	add	r3, r2
 800c770:	60bb      	str	r3, [r7, #8]

  // in case of insert on top.
  if((*pp_q == NULL) ||
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d006      	beq.n	800c788 <q_insert_task+0x34>
     (p_tcb->priority_preemption < (*pp_q)->priority_preemption)) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	7a5a      	ldrb	r2, [r3, #9]
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	7a5b      	ldrb	r3, [r3, #9]
  if((*pp_q == NULL) ||
 800c784:	429a      	cmp	r2, r3
 800c786:	d207      	bcs.n	800c798 <q_insert_task+0x44>
    p_tcb->next = *pp_q;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	605a      	str	r2, [r3, #4]
    *pp_q       = p_tcb;
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	601a      	str	r2, [r3, #0]
    return;
 800c796:	e01a      	b.n	800c7ce <q_insert_task+0x7a>
  }

  // find insert point in sorted linked list.
  mrbc_tcb *p = *pp_q;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	60fb      	str	r3, [r7, #12]
  while( p->next != NULL ) {
 800c79e:	e009      	b.n	800c7b4 <q_insert_task+0x60>
    if( p_tcb->priority_preemption < p->next->priority_preemption ) break;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7a5a      	ldrb	r2, [r3, #9]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	7a5b      	ldrb	r3, [r3, #9]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d307      	bcc.n	800c7be <q_insert_task+0x6a>
    p = p->next;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]
  while( p->next != NULL ) {
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1f1      	bne.n	800c7a0 <q_insert_task+0x4c>
 800c7bc:	e000      	b.n	800c7c0 <q_insert_task+0x6c>
    if( p_tcb->priority_preemption < p->next->priority_preemption ) break;
 800c7be:	bf00      	nop
  }

  // insert tcb to queue.
  p_tcb->next = p->next;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	605a      	str	r2, [r3, #4]
  p->next     = p_tcb;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	605a      	str	r2, [r3, #4]
}
 800c7ce:	3714      	adds	r7, #20
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	0801bd4c 	.word	0x0801bd4c
 800c7dc:	20008040 	.word	0x20008040

0800c7e0 <q_delete_task>:
/*! Delete task(TCB) from task queue

  @param  p_tcb	Pointer to target TCB
*/
static void q_delete_task(mrbc_tcb *p_tcb)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  // select target queue pointer. (same as q_insert_task)
  static const uint8_t conv_tbl[] = { 0,    1,    2,    0,    3 };
  mrbc_tcb **pp_q = &task_queue_[ conv_tbl[ p_tcb->state / 2 ]];
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7adb      	ldrb	r3, [r3, #11]
 800c7ec:	085b      	lsrs	r3, r3, #1
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	4b19      	ldr	r3, [pc, #100]	; (800c858 <q_delete_task+0x78>)
 800c7f4:	5c9b      	ldrb	r3, [r3, r2]
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4a18      	ldr	r2, [pc, #96]	; (800c85c <q_delete_task+0x7c>)
 800c7fa:	4413      	add	r3, r2
 800c7fc:	60bb      	str	r3, [r7, #8]

  if( *pp_q == p_tcb ) {
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d107      	bne.n	800c818 <q_delete_task+0x38>
    *pp_q       = p_tcb->next;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	601a      	str	r2, [r3, #0]
    p_tcb->next = NULL;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	605a      	str	r2, [r3, #4]
    return;
 800c816:	e01c      	b.n	800c852 <q_delete_task+0x72>
  }

  mrbc_tcb *p = *pp_q;
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
  while( p ) {
 800c81e:	e00f      	b.n	800c840 <q_delete_task+0x60>
    if( p->next == p_tcb ) {
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d107      	bne.n	800c83a <q_delete_task+0x5a>
      p->next     = p_tcb->next;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	605a      	str	r2, [r3, #4]
      p_tcb->next = NULL;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	605a      	str	r2, [r3, #4]
      return;
 800c838:	e00b      	b.n	800c852 <q_delete_task+0x72>
    }

    p = p->next;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	60fb      	str	r3, [r7, #12]
  while( p ) {
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1ec      	bne.n	800c820 <q_delete_task+0x40>
  }

  assert(!"Not found target task in queue.");
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <q_delete_task+0x80>)
 800c848:	4a06      	ldr	r2, [pc, #24]	; (800c864 <q_delete_task+0x84>)
 800c84a:	2183      	movs	r1, #131	; 0x83
 800c84c:	4806      	ldr	r0, [pc, #24]	; (800c868 <q_delete_task+0x88>)
 800c84e:	f008 fe9f 	bl	8015590 <__assert_func>
}
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	0801bd54 	.word	0x0801bd54
 800c85c:	20008040 	.word	0x20008040
 800c860:	080197bc 	.word	0x080197bc
 800c864:	0801bd5c 	.word	0x0801bd5c
 800c868:	080197e0 	.word	0x080197e0

0800c86c <preempt_running_task>:

//================================================================
/*! preempt running task
*/
inline static void preempt_running_task(void)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
  for( mrbc_tcb *t = q_ready_; t != NULL; t = t->next ) {
 800c872:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <preempt_running_task+0x38>)
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	607b      	str	r3, [r7, #4]
 800c878:	e00a      	b.n	800c890 <preempt_running_task+0x24>
    if( t->state == TASKSTATE_RUNNING ) t->vm.flag_preemption = 1;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	7adb      	ldrb	r3, [r3, #11]
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d103      	bne.n	800c88a <preempt_running_task+0x1e>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  for( mrbc_tcb *t = q_ready_; t != NULL; t = t->next ) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	607b      	str	r3, [r7, #4]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1f1      	bne.n	800c87a <preempt_running_task+0xe>
  }
}
 800c896:	bf00      	nop
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr
 800c8a4:	20008040 	.word	0x20008040

0800c8a8 <mrbc_tcb_new>:
  tcb = mrbc_tcb_new( MAX_REGS_SIZE, MRBC_TASK_DEFAULT_STATE, MRBC_TASK_DEFAULT_PRIORITY );
  mrbc_create_task( byte_code, tcb );
@endcode
*/
mrbc_tcb * mrbc_tcb_new( int regs_size, enum MrbcTaskState task_state, int priority )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	72fb      	strb	r3, [r7, #11]
  mrbc_tcb *tcb;

  tcb = mrbc_raw_alloc( sizeof(mrbc_tcb) + sizeof(mrbc_value) * regs_size );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3306      	adds	r3, #6
 800c8ba:	011b      	lsls	r3, r3, #4
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f5 f8f1 	bl	8001aa4 <mrbc_raw_alloc>
 800c8c2:	6178      	str	r0, [r7, #20]
  if( !tcb ) return NULL;	// ENOMEM
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <mrbc_tcb_new+0x26>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e016      	b.n	800c8fc <mrbc_tcb_new+0x54>

  memset(tcb, 0, sizeof(mrbc_tcb));
 800c8ce:	2260      	movs	r2, #96	; 0x60
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	6978      	ldr	r0, [r7, #20]
 800c8d4:	f009 fe9d 	bl	8016612 <memset>
#if defined(MRBC_DEBUG)
  memcpy( tcb->type, "TCB", 4 );
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2204      	movs	r2, #4
 800c8dc:	4909      	ldr	r1, [pc, #36]	; (800c904 <mrbc_tcb_new+0x5c>)
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f009 ff31 	bl	8016746 <memcpy>
#endif
  tcb->priority = priority;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	721a      	strb	r2, [r3, #8]
  tcb->state = task_state;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	7afa      	ldrb	r2, [r7, #11]
 800c8f0:	72da      	strb	r2, [r3, #11]
  tcb->vm.regs_size = regs_size;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  return tcb;
 800c8fa:	697b      	ldr	r3, [r7, #20]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	080197fc 	.word	0x080197fc

0800c908 <mrbc_create_task>:
  @param  byte_code	pointer to VM byte code.
  @param  tcb		Task control block with parameter, or NULL.
  @return Pointer to mrbc_tcb or NULL.
*/
mrbc_tcb * mrbc_create_task(const void *byte_code, mrbc_tcb *tcb)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  if( !tcb ) tcb = mrbc_tcb_new( MAX_REGS_SIZE, MRBC_TASK_DEFAULT_STATE, MRBC_TASK_DEFAULT_PRIORITY );
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d107      	bne.n	800c928 <mrbc_create_task+0x20>
 800c918:	2302      	movs	r3, #2
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2280      	movs	r2, #128	; 0x80
 800c91e:	4619      	mov	r1, r3
 800c920:	206e      	movs	r0, #110	; 0x6e
 800c922:	f7ff ffc1 	bl	800c8a8 <mrbc_tcb_new>
 800c926:	6038      	str	r0, [r7, #0]
  if( !tcb ) return NULL;	// ENOMEM
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d101      	bne.n	800c932 <mrbc_create_task+0x2a>
 800c92e:	2300      	movs	r3, #0
 800c930:	e03a      	b.n	800c9a8 <mrbc_create_task+0xa0>

  tcb->priority_preemption = tcb->priority;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	7a1a      	ldrb	r2, [r3, #8]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	725a      	strb	r2, [r3, #9]

  // assign VM ID
  if( mrbc_vm_open( &tcb->vm ) == NULL ) {
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	3328      	adds	r3, #40	; 0x28
 800c93e:	4618      	mov	r0, r3
 800c940:	f002 f968 	bl	800ec14 <mrbc_vm_open>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d104      	bne.n	800c954 <mrbc_create_task+0x4c>
    mrbc_printf("Error: Can't assign VM-ID.\n");
 800c94a:	4819      	ldr	r0, [pc, #100]	; (800c9b0 <mrbc_create_task+0xa8>)
 800c94c:	f7fd fbea 	bl	800a124 <mrbc_printf>
    return NULL;
 800c950:	2300      	movs	r3, #0
 800c952:	e029      	b.n	800c9a8 <mrbc_create_task+0xa0>
  }

  if( mrbc_load_mrb(&tcb->vm, byte_code) != 0 ) {
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	3328      	adds	r3, #40	; 0x28
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff fd58 	bl	800c410 <mrbc_load_mrb>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00b      	beq.n	800c97e <mrbc_create_task+0x76>
    mrbc_print_vm_exception( &tcb->vm );
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	3328      	adds	r3, #40	; 0x28
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fe32 	bl	800b5d4 <mrbc_print_vm_exception>
    mrbc_vm_close( &tcb->vm );
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	3328      	adds	r3, #40	; 0x28
 800c974:	4618      	mov	r0, r3
 800c976:	f002 f9a5 	bl	800ecc4 <mrbc_vm_close>
    return NULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e014      	b.n	800c9a8 <mrbc_create_task+0xa0>
  }
  mrbc_vm_begin( &tcb->vm );
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	3328      	adds	r3, #40	; 0x28
 800c982:	4618      	mov	r0, r3
 800c984:	f002 f9da 	bl	800ed3c <mrbc_vm_begin>

  hal_disable_irq();
 800c988:	f7fe fffc 	bl	800b984 <hal_disable_irq>
  q_insert_task(tcb);
 800c98c:	6838      	ldr	r0, [r7, #0]
 800c98e:	f7ff fee1 	bl	800c754 <q_insert_task>
  if( tcb->state & TASKSTATE_READY ) preempt_running_task();
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	7adb      	ldrb	r3, [r3, #11]
 800c996:	f003 0302 	and.w	r3, r3, #2
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <mrbc_create_task+0x9a>
 800c99e:	f7ff ff65 	bl	800c86c <preempt_running_task>
  hal_enable_irq();
 800c9a2:	f7fe ffe6 	bl	800b972 <hal_enable_irq>

  return tcb;
 800c9a6:	683b      	ldr	r3, [r7, #0]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	08019800 	.word	0x08019800

0800c9b4 <mrbc_set_task_name>:

  @param  tcb	target task.
  @param  name	task name
*/
void mrbc_set_task_name(mrbc_tcb *tcb, const char *name)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  /* (note)
   this is `strncpy( tcb->name, name, MRBC_TASK_NAME_LEN );`
   for to avoid link error when compiling for PIC32 with XC32 v4.21
  */
  for( int i = 0; i < MRBC_TASK_NAME_LEN; i++ ) {
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
 800c9c2:	e013      	b.n	800c9ec <mrbc_set_task_name+0x38>
    if( (tcb->name[i] = *name++) == 0 ) break;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	603a      	str	r2, [r7, #0]
 800c9ca:	7819      	ldrb	r1, [r3, #0]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	330d      	adds	r3, #13
 800c9d4:	460a      	mov	r2, r1
 800c9d6:	701a      	strb	r2, [r3, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	4413      	add	r3, r2
 800c9de:	330d      	adds	r3, #13
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d006      	beq.n	800c9f4 <mrbc_set_task_name+0x40>
  for( int i = 0; i < MRBC_TASK_NAME_LEN; i++ ) {
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b0e      	cmp	r3, #14
 800c9f0:	dde8      	ble.n	800c9c4 <mrbc_set_task_name+0x10>
  }
}
 800c9f2:	e000      	b.n	800c9f6 <mrbc_set_task_name+0x42>
    if( (tcb->name[i] = *name++) == 0 ) break;
 800c9f4:	bf00      	nop
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
	...

0800ca04 <mrbc_find_task>:

  @param  name		task name
  @return pointer to mrbc_tcb or NULL
*/
mrbc_tcb * mrbc_find_task(const char *name)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  mrbc_tcb *tcb = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]
  hal_disable_irq();
 800ca10:	f7fe ffb8 	bl	800b984 <hal_disable_irq>

  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800ca14:	2300      	movs	r3, #0
 800ca16:	60bb      	str	r3, [r7, #8]
 800ca18:	e017      	b.n	800ca4a <mrbc_find_task+0x46>
    for( tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800ca1a:	4a12      	ldr	r2, [pc, #72]	; (800ca64 <mrbc_find_task+0x60>)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e00b      	b.n	800ca3e <mrbc_find_task+0x3a>
      if( strcmp( tcb->name, name ) == 0 ) goto RETURN_TCB;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	330d      	adds	r3, #13
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7f3 fbd7 	bl	80001e0 <strcmp>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00c      	beq.n	800ca52 <mrbc_find_task+0x4e>
    for( tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1f0      	bne.n	800ca26 <mrbc_find_task+0x22>
  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	3301      	adds	r3, #1
 800ca48:	60bb      	str	r3, [r7, #8]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	dde4      	ble.n	800ca1a <mrbc_find_task+0x16>
    }
  }

 RETURN_TCB:
 800ca50:	e000      	b.n	800ca54 <mrbc_find_task+0x50>
      if( strcmp( tcb->name, name ) == 0 ) goto RETURN_TCB;
 800ca52:	bf00      	nop
  hal_enable_irq();
 800ca54:	f7fe ff8d 	bl	800b972 <hal_enable_irq>
  return tcb;
 800ca58:	68fb      	ldr	r3, [r7, #12]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20008040 	.word	0x20008040

0800ca68 <mrbc_run>:
//================================================================
/*! execute

*/
int mrbc_run(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
  int ret = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60bb      	str	r3, [r7, #8]
#if MRBC_SCHEDULER_EXIT
  if( !q_ready_ && !q_waiting_ && !q_suspended_ ) return ret;
#endif

  while( 1 ) {
    mrbc_tcb *tcb = q_ready_;
 800ca72:	4b39      	ldr	r3, [pc, #228]	; (800cb58 <mrbc_run+0xf0>)
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	607b      	str	r3, [r7, #4]
    if( tcb == NULL ) {		// no task to run.
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d102      	bne.n	800ca84 <mrbc_run+0x1c>
      hal_idle_cpu();
 800ca7e:	f7fe ff8a 	bl	800b996 <hal_idle_cpu>
      continue;
 800ca82:	e067      	b.n	800cb54 <mrbc_run+0xec>
    }

    /*
      run the task.
    */
    tcb->state = TASKSTATE_RUNNING;   // to execute.
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2203      	movs	r2, #3
 800ca88:	72da      	strb	r2, [r3, #11]
    tcb->timeslice = MRBC_TIMESLICE_TICK_COUNT;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	729a      	strb	r2, [r3, #10]

#if !defined(MRBC_NO_TIMER)
    // Using hardware timer.
    tcb->vm.flag_preemption = 0;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    int ret_vm_run = mrbc_vm_run(&tcb->vm);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3328      	adds	r3, #40	; 0x28
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f006 f9ad 	bl	8012dfc <mrbc_vm_run>
 800caa2:	6038      	str	r0, [r7, #0]
#endif

    /*
      did the task done?
    */
    if( ret_vm_run != 0 ) {
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d042      	beq.n	800cb30 <mrbc_run+0xc8>
      hal_disable_irq();
 800caaa:	f7fe ff6b 	bl	800b984 <hal_disable_irq>
      q_delete_task(tcb);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7ff fe96 	bl	800c7e0 <q_delete_task>
      tcb->state = TASKSTATE_DORMANT;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	72da      	strb	r2, [r3, #11]
      q_insert_task(tcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff fe4a 	bl	800c754 <q_insert_task>
      hal_enable_irq();
 800cac0:	f7fe ff57 	bl	800b972 <hal_enable_irq>

      if( ! tcb->vm.flag_permanence ) mrbc_vm_end(&tcb->vm);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800caca:	f003 0304 	and.w	r3, r3, #4
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d104      	bne.n	800cade <mrbc_run+0x76>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3328      	adds	r3, #40	; 0x28
 800cad8:	4618      	mov	r0, r3
 800cada:	f002 f993 	bl	800ee04 <mrbc_vm_end>
      if( ret_vm_run != 1 ) ret = ret_vm_run;   // for debug info.
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d001      	beq.n	800cae8 <mrbc_run+0x80>
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	60bb      	str	r3, [r7, #8]

      // find task that called join.
      for( mrbc_tcb *tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cae8:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <mrbc_run+0xf0>)
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	e01b      	b.n	800cb28 <mrbc_run+0xc0>
        if( tcb1->reason == TASKREASON_JOIN && tcb1->tcb_join == tcb ) {
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	7b1b      	ldrb	r3, [r3, #12]
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d114      	bne.n	800cb22 <mrbc_run+0xba>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d10f      	bne.n	800cb22 <mrbc_run+0xba>
          hal_disable_irq();
 800cb02:	f7fe ff3f 	bl	800b984 <hal_disable_irq>
          q_delete_task(tcb1);
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f7ff fe6a 	bl	800c7e0 <q_delete_task>
          tcb1->state = TASKSTATE_READY;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2202      	movs	r2, #2
 800cb10:	72da      	strb	r2, [r3, #11]
          tcb1->reason = 0;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	731a      	strb	r2, [r3, #12]
          q_insert_task(tcb1);
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f7ff fe1b 	bl	800c754 <q_insert_task>
          hal_enable_irq();
 800cb1e:	f7fe ff28 	bl	800b972 <hal_enable_irq>
      for( mrbc_tcb *tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1e0      	bne.n	800caf0 <mrbc_run+0x88>
        }
      }
#if MRBC_SCHEDULER_EXIT
      if( !q_ready_ && !q_waiting_ && !q_suspended_ ) return ret;
#endif
      continue;
 800cb2e:	e011      	b.n	800cb54 <mrbc_run+0xec>
    }

    /*
      Switch task.
    */
    if( tcb->state == TASKSTATE_RUNNING ) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	7adb      	ldrb	r3, [r3, #11]
 800cb34:	2b03      	cmp	r3, #3
 800cb36:	d10c      	bne.n	800cb52 <mrbc_run+0xea>
      tcb->state = TASKSTATE_READY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	72da      	strb	r2, [r3, #11]

      hal_disable_irq();
 800cb3e:	f7fe ff21 	bl	800b984 <hal_disable_irq>
      q_delete_task(tcb);       // insert task on queue last.
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff fe4c 	bl	800c7e0 <q_delete_task>
      q_insert_task(tcb);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff fe03 	bl	800c754 <q_insert_task>
      hal_enable_irq();
 800cb4e:	f7fe ff10 	bl	800b972 <hal_enable_irq>
    }
    continue;
 800cb52:	bf00      	nop
  while( 1 ) {
 800cb54:	e78d      	b.n	800ca72 <mrbc_run+0xa>
 800cb56:	bf00      	nop
 800cb58:	20008040 	.word	0x20008040

0800cb5c <mrbc_sleep_ms>:

  @param  tcb	target task.
  @param  ms	sleep milliseconds.
*/
void mrbc_sleep_ms(mrbc_tcb *tcb, uint32_t ms)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  hal_disable_irq();
 800cb66:	f7fe ff0d 	bl	800b984 <hal_disable_irq>
  q_delete_task(tcb);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f7ff fe38 	bl	800c7e0 <q_delete_task>
  tcb->state       = TASKSTATE_WAITING;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2204      	movs	r2, #4
 800cb74:	72da      	strb	r2, [r3, #11]
  tcb->reason      = TASKREASON_SLEEP;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	731a      	strb	r2, [r3, #12]
  tcb->wakeup_tick = tick_ + (ms / MRBC_TICK_UNIT) + !!(ms % MRBC_TICK_UNIT);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	4a18      	ldr	r2, [pc, #96]	; (800cbe0 <mrbc_sleep_ms+0x84>)
 800cb80:	fba2 2303 	umull	r2, r3, r2, r3
 800cb84:	08da      	lsrs	r2, r3, #3
 800cb86:	4b17      	ldr	r3, [pc, #92]	; (800cbe4 <mrbc_sleep_ms+0x88>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	18d0      	adds	r0, r2, r3
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <mrbc_sleep_ms+0x84>)
 800cb90:	fba3 2301 	umull	r2, r3, r3, r1
 800cb94:	08da      	lsrs	r2, r3, #3
 800cb96:	4613      	mov	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4413      	add	r3, r2
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	1aca      	subs	r2, r1, r3
 800cba0:	2a00      	cmp	r2, #0
 800cba2:	bf14      	ite	ne
 800cba4:	2301      	movne	r3, #1
 800cba6:	2300      	moveq	r3, #0
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	18c2      	adds	r2, r0, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	621a      	str	r2, [r3, #32]

  if( (int32_t)(tcb->wakeup_tick - wakeup_tick_) < 0 ) {
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a1a      	ldr	r2, [r3, #32]
 800cbb4:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <mrbc_sleep_ms+0x8c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	da03      	bge.n	800cbc6 <mrbc_sleep_ms+0x6a>
    wakeup_tick_ = tcb->wakeup_tick;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	4a09      	ldr	r2, [pc, #36]	; (800cbe8 <mrbc_sleep_ms+0x8c>)
 800cbc4:	6013      	str	r3, [r2, #0]
  }

  q_insert_task(tcb);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff fdc4 	bl	800c754 <q_insert_task>
  hal_enable_irq();
 800cbcc:	f7fe fed1 	bl	800b972 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	cccccccd 	.word	0xcccccccd
 800cbe4:	20008050 	.word	0x20008050
 800cbe8:	200001d4 	.word	0x200001d4

0800cbec <mrbc_relinquish>:
/*! Relinquish control to other tasks.

  @param  tcb	target task.
*/
void mrbc_relinquish(mrbc_tcb *tcb)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  tcb->timeslice          = 0;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	729a      	strb	r2, [r3, #10]
  tcb->vm.flag_preemption = 1;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <mrbc_change_priority>:

  @param  tcb		target task.
  @param  priority	priority value. between 1 and 255.
*/
void mrbc_change_priority(mrbc_tcb *tcb, int priority)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b082      	sub	sp, #8
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	6039      	str	r1, [r7, #0]
  tcb->priority            = priority;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	721a      	strb	r2, [r3, #8]
  tcb->priority_preemption = priority;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	725a      	strb	r2, [r3, #9]

  hal_disable_irq();
 800cc28:	f7fe feac 	bl	800b984 <hal_disable_irq>
  q_delete_task(tcb);       // reorder task queue according to priority.
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff fdd7 	bl	800c7e0 <q_delete_task>
  q_insert_task(tcb);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fd8e 	bl	800c754 <q_insert_task>

  if( tcb->state & TASKSTATE_READY ) preempt_running_task();
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7adb      	ldrb	r3, [r3, #11]
 800cc3c:	f003 0302 	and.w	r3, r3, #2
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <mrbc_change_priority+0x3a>
 800cc44:	f7ff fe12 	bl	800c86c <preempt_running_task>

  hal_enable_irq();
 800cc48:	f7fe fe93 	bl	800b972 <hal_enable_irq>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <mrbc_suspend_task>:
/*! Suspend the task.

  @param  tcb		target task.
*/
void mrbc_suspend_task(mrbc_tcb *tcb)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  if( tcb->state == TASKSTATE_SUSPENDED ) return;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7adb      	ldrb	r3, [r3, #11]
 800cc60:	2b08      	cmp	r3, #8
 800cc62:	d011      	beq.n	800cc88 <mrbc_suspend_task+0x34>

  hal_disable_irq();
 800cc64:	f7fe fe8e 	bl	800b984 <hal_disable_irq>
  q_delete_task(tcb);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff fdb9 	bl	800c7e0 <q_delete_task>
  tcb->state = TASKSTATE_SUSPENDED;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2208      	movs	r2, #8
 800cc72:	72da      	strb	r2, [r3, #11]
  q_insert_task(tcb);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff fd6d 	bl	800c754 <q_insert_task>
  hal_enable_irq();
 800cc7a:	f7fe fe7a 	bl	800b972 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2201      	movs	r2, #1
 800cc82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800cc86:	e000      	b.n	800cc8a <mrbc_suspend_task+0x36>
  if( tcb->state == TASKSTATE_SUSPENDED ) return;
 800cc88:	bf00      	nop
}
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <mrbc_resume_task>:
/*! resume the task

  @param  tcb		target task.
*/
void mrbc_resume_task(mrbc_tcb *tcb)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  if( tcb->state != TASKSTATE_SUSPENDED ) return;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	7adb      	ldrb	r3, [r3, #11]
 800cc9c:	2b08      	cmp	r3, #8
 800cc9e:	d11f      	bne.n	800cce0 <mrbc_resume_task+0x50>

  int flag_to_ready_state = (tcb->reason == 0);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7b1b      	ldrb	r3, [r3, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	bf0c      	ite	eq
 800cca8:	2301      	moveq	r3, #1
 800ccaa:	2300      	movne	r3, #0
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	60fb      	str	r3, [r7, #12]

  hal_disable_irq();
 800ccb0:	f7fe fe68 	bl	800b984 <hal_disable_irq>

  if( flag_to_ready_state ) preempt_running_task();
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <mrbc_resume_task+0x2e>
 800ccba:	f7ff fdd7 	bl	800c86c <preempt_running_task>

  q_delete_task(tcb);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fd8e 	bl	800c7e0 <q_delete_task>
  tcb->state = flag_to_ready_state ? TASKSTATE_READY : TASKSTATE_WAITING;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <mrbc_resume_task+0x3e>
 800ccca:	2202      	movs	r2, #2
 800cccc:	e000      	b.n	800ccd0 <mrbc_resume_task+0x40>
 800ccce:	2204      	movs	r2, #4
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	72da      	strb	r2, [r3, #11]
  q_insert_task(tcb);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff fd3d 	bl	800c754 <q_insert_task>

  hal_enable_irq();
 800ccda:	f7fe fe4a 	bl	800b972 <hal_enable_irq>
 800ccde:	e000      	b.n	800cce2 <mrbc_resume_task+0x52>
  if( tcb->state != TASKSTATE_SUSPENDED ) return;
 800cce0:	bf00      	nop
}
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <mrbc_terminate_task>:
  @note
    This API simply ends the task.
    note that this does not affect the lock status of mutex.
*/
void mrbc_terminate_task(mrbc_tcb *tcb)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	7adb      	ldrb	r3, [r3, #11]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d011      	beq.n	800cd1c <mrbc_terminate_task+0x34>

  hal_disable_irq();
 800ccf8:	f7fe fe44 	bl	800b984 <hal_disable_irq>
  q_delete_task(tcb);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff fd6f 	bl	800c7e0 <q_delete_task>
  tcb->state = TASKSTATE_DORMANT;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	72da      	strb	r2, [r3, #11]
  q_insert_task(tcb);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff fd23 	bl	800c754 <q_insert_task>
  hal_enable_irq();
 800cd0e:	f7fe fe30 	bl	800b972 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800cd1a:	e000      	b.n	800cd1e <mrbc_terminate_task+0x36>
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800cd1c:	bf00      	nop
}
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <mrbc_join_task>:

  @param  tcb		target task.
  @param  tcb_join	join task.
*/
void mrbc_join_task(mrbc_tcb *tcb, const mrbc_tcb *tcb_join)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	7adb      	ldrb	r3, [r3, #11]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d01b      	beq.n	800cd6e <mrbc_join_task+0x4a>
  if( tcb_join->state == TASKSTATE_DORMANT ) return;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	7adb      	ldrb	r3, [r3, #11]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d019      	beq.n	800cd72 <mrbc_join_task+0x4e>

  hal_disable_irq();
 800cd3e:	f7fe fe21 	bl	800b984 <hal_disable_irq>
  q_delete_task(tcb);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff fd4c 	bl	800c7e0 <q_delete_task>

  tcb->state    = TASKSTATE_WAITING;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2204      	movs	r2, #4
 800cd4c:	72da      	strb	r2, [r3, #11]
  tcb->reason   = TASKREASON_JOIN;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2204      	movs	r2, #4
 800cd52:	731a      	strb	r2, [r3, #12]
  tcb->tcb_join = tcb_join;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	625a      	str	r2, [r3, #36]	; 0x24

  q_insert_task(tcb);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff fcfa 	bl	800c754 <q_insert_task>
  hal_enable_irq();
 800cd60:	f7fe fe07 	bl	800b972 <hal_enable_irq>

  tcb->vm.flag_preemption = 1;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800cd6c:	e002      	b.n	800cd74 <mrbc_join_task+0x50>
  if( tcb->state == TASKSTATE_DORMANT ) return;
 800cd6e:	bf00      	nop
 800cd70:	e000      	b.n	800cd74 <mrbc_join_task+0x50>
  if( tcb_join->state == TASKSTATE_DORMANT ) return;
 800cd72:	bf00      	nop
}
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <mrbc_mutex_init>:
/*! mutex initialize

  @param  mutex		pointer to mrbc_mutex or NULL.
*/
mrbc_mutex * mrbc_mutex_init( mrbc_mutex *mutex )
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  if( mutex == NULL ) {
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d108      	bne.n	800cd9a <mrbc_mutex_init+0x20>
    mutex = mrbc_raw_alloc( sizeof(mrbc_mutex) );
 800cd88:	2008      	movs	r0, #8
 800cd8a:	f7f4 fe8b 	bl	8001aa4 <mrbc_raw_alloc>
 800cd8e:	6078      	str	r0, [r7, #4]
    if( mutex == NULL ) return NULL;	// ENOMEM
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <mrbc_mutex_init+0x20>
 800cd96:	2300      	movs	r3, #0
 800cd98:	e005      	b.n	800cda6 <mrbc_mutex_init+0x2c>
  }

  static const mrbc_mutex init_val = MRBC_MUTEX_INITIALIZER;
  *mutex = init_val;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	2300      	movs	r3, #0
 800cda0:	6013      	str	r3, [r2, #0]
 800cda2:	6053      	str	r3, [r2, #4]

  return mutex;
 800cda4:	687b      	ldr	r3, [r7, #4]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <mrbc_mutex_lock>:

  @param  mutex		pointer to mutex.
  @param  tcb		pointer to TCB.
*/
int mrbc_mutex_lock( mrbc_mutex *mutex, mrbc_tcb *tcb )
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  MRBC_MUTEX_TRACE("mutex lock / MUTEX: %p TCB: %p",  mutex, tcb );

  int ret = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]
  hal_disable_irq();
 800cdbc:	f7fe fde2 	bl	800b984 <hal_disable_irq>

  // Try lock mutex;
  if( mutex->lock == 0 ) {      // a future does use TAS?
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d106      	bne.n	800cdd6 <mrbc_mutex_lock+0x28>
    mutex->lock = 1;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
    mutex->tcb = tcb;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	605a      	str	r2, [r3, #4]
    MRBC_MUTEX_TRACE("  lock OK\n" );
    goto DONE;
 800cdd4:	e01a      	b.n	800ce0c <mrbc_mutex_lock+0x5e>
  }
  MRBC_MUTEX_TRACE("  lock FAIL\n" );

  // Can't lock mutex
  // check recursive lock.
  if( mutex->tcb == tcb ) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d102      	bne.n	800cde6 <mrbc_mutex_lock+0x38>
    ret = 1;
 800cde0:	2301      	movs	r3, #1
 800cde2:	60fb      	str	r3, [r7, #12]
    goto DONE;
 800cde4:	e012      	b.n	800ce0c <mrbc_mutex_lock+0x5e>
  }

  // To WAITING state.
  q_delete_task(tcb);
 800cde6:	6838      	ldr	r0, [r7, #0]
 800cde8:	f7ff fcfa 	bl	800c7e0 <q_delete_task>
  tcb->state  = TASKSTATE_WAITING;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2204      	movs	r2, #4
 800cdf0:	72da      	strb	r2, [r3, #11]
  tcb->reason = TASKREASON_MUTEX;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	731a      	strb	r2, [r3, #12]
  tcb->mutex = mutex;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	621a      	str	r2, [r3, #32]
  q_insert_task(tcb);
 800cdfe:	6838      	ldr	r0, [r7, #0]
 800ce00:	f7ff fca8 	bl	800c754 <q_insert_task>
  tcb->vm.flag_preemption = 1;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

 DONE:
  hal_enable_irq();
 800ce0c:	f7fe fdb1 	bl	800b972 <hal_enable_irq>

  return ret;
 800ce10:	68fb      	ldr	r3, [r7, #12]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <mrbc_mutex_unlock>:

  @param  mutex		pointer to mutex.
  @param  tcb		pointer to TCB.
*/
int mrbc_mutex_unlock( mrbc_mutex *mutex, mrbc_tcb *tcb )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  MRBC_MUTEX_TRACE("mutex unlock / MUTEX: %p TCB: %p\n",  mutex, tcb );

  // check some parameters.
  if( !mutex->lock ) return 1;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <mrbc_mutex_unlock+0x16>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e05a      	b.n	800cee8 <mrbc_mutex_unlock+0xcc>
  if( mutex->tcb != tcb ) return 2;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	683a      	ldr	r2, [r7, #0]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d001      	beq.n	800ce40 <mrbc_mutex_unlock+0x24>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e053      	b.n	800cee8 <mrbc_mutex_unlock+0xcc>

  hal_disable_irq();
 800ce40:	f7fe fda0 	bl	800b984 <hal_disable_irq>

  // wakeup ONE waiting task if exist.
  mrbc_tcb *tcb1;
  for( tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800ce44:	4b2a      	ldr	r3, [pc, #168]	; (800cef0 <mrbc_mutex_unlock+0xd4>)
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	e00b      	b.n	800ce64 <mrbc_mutex_unlock+0x48>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	7b1b      	ldrb	r3, [r3, #12]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d104      	bne.n	800ce5e <mrbc_mutex_unlock+0x42>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d006      	beq.n	800ce6c <mrbc_mutex_unlock+0x50>
  for( tcb1 = q_waiting_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	60fb      	str	r3, [r7, #12]
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1f0      	bne.n	800ce4c <mrbc_mutex_unlock+0x30>
 800ce6a:	e000      	b.n	800ce6e <mrbc_mutex_unlock+0x52>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800ce6c:	bf00      	nop
  }
  if( tcb1 ) {
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d011      	beq.n	800ce98 <mrbc_mutex_unlock+0x7c>
    MRBC_MUTEX_TRACE("SW1: TCB: %p\n", tcb1 );
    mutex->tcb = tcb1;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	605a      	str	r2, [r3, #4]

    q_delete_task(tcb1);
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f7ff fcb0 	bl	800c7e0 <q_delete_task>
    tcb1->state = TASKSTATE_READY;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2202      	movs	r2, #2
 800ce84:	72da      	strb	r2, [r3, #11]
    tcb1->reason = 0;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	731a      	strb	r2, [r3, #12]
    q_insert_task(tcb1);
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff fc61 	bl	800c754 <q_insert_task>

    preempt_running_task();
 800ce92:	f7ff fceb 	bl	800c86c <preempt_running_task>
    goto DONE;
 800ce96:	e024      	b.n	800cee2 <mrbc_mutex_unlock+0xc6>
  }

  // find ONE mutex locked task in suspended queue.
  for( tcb1 = q_suspended_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800ce98:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <mrbc_mutex_unlock+0xd4>)
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	e00b      	b.n	800ceb8 <mrbc_mutex_unlock+0x9c>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	7b1b      	ldrb	r3, [r3, #12]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d104      	bne.n	800ceb2 <mrbc_mutex_unlock+0x96>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d006      	beq.n	800cec0 <mrbc_mutex_unlock+0xa4>
  for( tcb1 = q_suspended_; tcb1 != NULL; tcb1 = tcb1->next ) {
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	60fb      	str	r3, [r7, #12]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f0      	bne.n	800cea0 <mrbc_mutex_unlock+0x84>
 800cebe:	e000      	b.n	800cec2 <mrbc_mutex_unlock+0xa6>
    if( tcb1->reason == TASKREASON_MUTEX && tcb1->mutex == mutex ) break;
 800cec0:	bf00      	nop
  }
  if( tcb1 ) {
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d006      	beq.n	800ced6 <mrbc_mutex_unlock+0xba>
    MRBC_MUTEX_TRACE("SW2: TCB: %p\n", tcb1 );
    mutex->tcb = tcb1;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	605a      	str	r2, [r3, #4]
    tcb1->reason = 0;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	731a      	strb	r2, [r3, #12]
    goto DONE;
 800ced4:	e005      	b.n	800cee2 <mrbc_mutex_unlock+0xc6>
  }

  // other case, unlock mutex
  MRBC_MUTEX_TRACE("mutex unlock all.\n" );
  mutex->lock = 0;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]
  mutex->tcb = 0;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	605a      	str	r2, [r3, #4]

 DONE:
  hal_enable_irq();
 800cee2:	f7fe fd46 	bl	800b972 <hal_enable_irq>

  return 0;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20008040 	.word	0x20008040

0800cef4 <mrbc_mutex_trylock>:

  @param  mutex		pointer to mutex.
  @param  tcb		pointer to TCB.
*/
int mrbc_mutex_trylock( mrbc_mutex *mutex, mrbc_tcb *tcb )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  MRBC_MUTEX_TRACE("mutex try lock / MUTEX: %p TCB: %p",  mutex, tcb );

  int ret;
  hal_disable_irq();
 800cefe:	f7fe fd41 	bl	800b984 <hal_disable_irq>

  if( mutex->lock == 0 ) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d108      	bne.n	800cf1c <mrbc_mutex_trylock+0x28>
    mutex->lock = 1;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	601a      	str	r2, [r3, #0]
    mutex->tcb = tcb;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	605a      	str	r2, [r3, #4]
    ret = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	e001      	b.n	800cf20 <mrbc_mutex_trylock+0x2c>
    MRBC_MUTEX_TRACE("  trylock OK\n" );
  }
  else {
    MRBC_MUTEX_TRACE("  trylock FAIL\n" );
    ret = 1;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	60fb      	str	r3, [r7, #12]
  }

  hal_enable_irq();
 800cf20:	f7fe fd27 	bl	800b972 <hal_enable_irq>
  return ret;
 800cf24:	68fb      	ldr	r3, [r7, #12]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
	...

0800cf30 <c_sleep>:
//================================================================
/*! (method) sleep for a specified number of seconds (CRuby compatible)

*/
static void c_sleep(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08c      	sub	sp, #48	; 0x30
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb = VM2TCB(vm);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3b28      	subs	r3, #40	; 0x28
 800cf40:	62fb      	str	r3, [r7, #44]	; 0x2c

  if( argc == 0 ) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <c_sleep+0x20>
    mrbc_suspend_task(tcb);
 800cf48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf4a:	f7ff fe83 	bl	800cc54 <mrbc_suspend_task>
    return;
 800cf4e:	e049      	b.n	800cfe4 <c_sleep+0xb4>
  }

  switch( mrbc_type(v[1]) ) {
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	3310      	adds	r3, #16
 800cf54:	f993 3000 	ldrsb.w	r3, [r3]
 800cf58:	2b04      	cmp	r3, #4
 800cf5a:	d002      	beq.n	800cf62 <c_sleep+0x32>
 800cf5c:	2b05      	cmp	r3, #5
 800cf5e:	d019      	beq.n	800cf94 <c_sleep+0x64>
    break;
  }
#endif

  default:
    break;
 800cf60:	e040      	b.n	800cfe4 <c_sleep+0xb4>
    sec = mrbc_integer(v[1]);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	3310      	adds	r3, #16
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	61bb      	str	r3, [r7, #24]
    SET_INT_RETURN(sec);
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	68b8      	ldr	r0, [r7, #8]
 800cf70:	f7ff fb72 	bl	800c658 <mrbc_decref>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2204      	movs	r2, #4
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	609a      	str	r2, [r3, #8]
    mrbc_sleep_ms(tcb, sec * 1000);
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf8e:	f7ff fde5 	bl	800cb5c <mrbc_sleep_ms>
    break;
 800cf92:	e027      	b.n	800cfe4 <c_sleep+0xb4>
    sec = mrbc_float(v[1]);
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	3310      	adds	r3, #16
 800cf98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800cf9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    SET_INT_RETURN(sec);
 800cfa0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cfa4:	f7f3 fdda 	bl	8000b5c <__aeabi_d2iz>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	68b8      	ldr	r0, [r7, #8]
 800cfae:	f7ff fb53 	bl	800c658 <mrbc_decref>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2204      	movs	r2, #4
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	69fa      	ldr	r2, [r7, #28]
 800cfbc:	609a      	str	r2, [r3, #8]
    mrbc_sleep_ms(tcb, (mrbc_int_t)(sec * 1000));
 800cfbe:	f04f 0200 	mov.w	r2, #0
 800cfc2:	4b0a      	ldr	r3, [pc, #40]	; (800cfec <c_sleep+0xbc>)
 800cfc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cfc8:	f7f3 fb2e 	bl	8000628 <__aeabi_dmul>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	f7f3 fdc2 	bl	8000b5c <__aeabi_d2iz>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfde:	f7ff fdbd 	bl	800cb5c <mrbc_sleep_ms>
    break;
 800cfe2:	bf00      	nop
  }
}
 800cfe4:	3730      	adds	r7, #48	; 0x30
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	408f4000 	.word	0x408f4000

0800cff0 <c_sleep_ms>:
//================================================================
/*! (method) sleep for a specified number of milliseconds.

*/
static void c_sleep_ms(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb = VM2TCB(vm);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3b28      	subs	r3, #40	; 0x28
 800d000:	61fb      	str	r3, [r7, #28]

  mrbc_int_t sec = mrbc_integer(v[1]);
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	3310      	adds	r3, #16
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	61bb      	str	r3, [r7, #24]
  SET_INT_RETURN(sec);
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	68b8      	ldr	r0, [r7, #8]
 800d010:	f7ff fb22 	bl	800c658 <mrbc_decref>
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2204      	movs	r2, #4
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	609a      	str	r2, [r3, #8]
  mrbc_sleep_ms(tcb, sec);
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	4619      	mov	r1, r3
 800d024:	69f8      	ldr	r0, [r7, #28]
 800d026:	f7ff fd99 	bl	800cb5c <mrbc_sleep_ms>
}
 800d02a:	bf00      	nop
 800d02c:	3720      	adds	r7, #32
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <c_task_get>:

  Task.get()           -> Task
  Task.get("TaskName") -> Task|nil
*/
static void c_task_get(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d032:	b590      	push	{r4, r7, lr}
 800d034:	b08f      	sub	sp, #60	; 0x3c
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb = NULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	637b      	str	r3, [r7, #52]	; 0x34

  if( v[0].tt != MRBC_TT_CLASS ) goto RETURN_NIL;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f993 3000 	ldrsb.w	r3, [r3]
 800d048:	2b07      	cmp	r3, #7
 800d04a:	d137      	bne.n	800d0bc <c_task_get+0x8a>

  // in case of Task.get()
  if( argc == 0 ) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d103      	bne.n	800d05a <c_task_get+0x28>
    tcb = VM2TCB(vm);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3b28      	subs	r3, #40	; 0x28
 800d056:	637b      	str	r3, [r7, #52]	; 0x34
 800d058:	e00f      	b.n	800d07a <c_task_get+0x48>
  }

  // in case of Task.get("TasName")
  else if( v[1].tt == MRBC_TT_STRING ) {
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	3310      	adds	r3, #16
 800d05e:	f993 3000 	ldrsb.w	r3, [r3]
 800d062:	2b0b      	cmp	r3, #11
 800d064:	d109      	bne.n	800d07a <c_task_get+0x48>
    tcb = mrbc_find_task( mrbc_string_cstr( &v[1] ) );
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	3310      	adds	r3, #16
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff fb52 	bl	800c714 <mrbc_string_cstr>
 800d070:	4603      	mov	r3, r0
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff fcc6 	bl	800ca04 <mrbc_find_task>
 800d078:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if( tcb ) {
 800d07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d01f      	beq.n	800d0c0 <c_task_get+0x8e>
    mrbc_value ret = mrbc_instance_new(vm, v->cls, sizeof(mrbc_tcb *));
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	f107 0020 	add.w	r0, r7, #32
 800d088:	2304      	movs	r3, #4
 800d08a:	68f9      	ldr	r1, [r7, #12]
 800d08c:	f7fc f9ec 	bl	8009468 <mrbc_instance_new>
    *(mrbc_tcb **)ret.instance->data = tcb;
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	3310      	adds	r3, #16
 800d094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d096:	601a      	str	r2, [r3, #0]
    SET_RETURN(ret);
 800d098:	f107 0410 	add.w	r4, r7, #16
 800d09c:	f107 0320 	add.w	r3, r7, #32
 800d0a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f7ff fad6 	bl	800c658 <mrbc_decref>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	461c      	mov	r4, r3
 800d0b0:	f107 0310 	add.w	r3, r7, #16
 800d0b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d0ba:	e008      	b.n	800d0ce <c_task_get+0x9c>
  if( v[0].tt != MRBC_TT_CLASS ) goto RETURN_NIL;
 800d0bc:	bf00      	nop
 800d0be:	e000      	b.n	800d0c2 <c_task_get+0x90>
    return;             // normal return.
  }

 RETURN_NIL:
 800d0c0:	bf00      	nop
  SET_NIL_RETURN();
 800d0c2:	68b8      	ldr	r0, [r7, #8]
 800d0c4:	f7ff fac8 	bl	800c658 <mrbc_decref>
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	701a      	strb	r2, [r3, #0]
}
 800d0ce:	373c      	adds	r7, #60	; 0x3c
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd90      	pop	{r4, r7, pc}

0800d0d4 <c_task_list>:
/*! (method) task list

  Task.list() -> Array[Task]
*/
static void c_task_list(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d0d4:	b590      	push	{r4, r7, lr}
 800d0d6:	b093      	sub	sp, #76	; 0x4c
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new(vm, 1);
 800d0e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	68f9      	ldr	r1, [r7, #12]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7f5 f922 	bl	8002332 <mrbc_array_new>

  hal_disable_irq();
 800d0ee:	f7fe fc49 	bl	800b984 <hal_disable_irq>

  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800d0f6:	e023      	b.n	800d140 <c_task_list+0x6c>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d0f8:	4a1e      	ldr	r2, [pc, #120]	; (800d174 <c_task_list+0xa0>)
 800d0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d100:	643b      	str	r3, [r7, #64]	; 0x40
 800d102:	e017      	b.n	800d134 <c_task_list+0x60>
      mrbc_value task = mrbc_instance_new(vm, v->cls, sizeof(mrbc_tcb *));
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	f107 0020 	add.w	r0, r7, #32
 800d10c:	2304      	movs	r3, #4
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	f7fc f9aa 	bl	8009468 <mrbc_instance_new>
      *(mrbc_tcb **)task.instance->data = VM2TCB(vm);
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	3310      	adds	r3, #16
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	3a28      	subs	r2, #40	; 0x28
 800d11c:	601a      	str	r2, [r3, #0]
      mrbc_array_push( &ret, &task );
 800d11e:	f107 0220 	add.w	r2, r7, #32
 800d122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d126:	4611      	mov	r1, r2
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f5 fa32 	bl	8002592 <mrbc_array_push>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	643b      	str	r3, [r7, #64]	; 0x40
 800d134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e4      	bne.n	800d104 <c_task_list+0x30>
  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d13c:	3301      	adds	r3, #1
 800d13e:	647b      	str	r3, [r7, #68]	; 0x44
 800d140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d142:	2b03      	cmp	r3, #3
 800d144:	ddd8      	ble.n	800d0f8 <c_task_list+0x24>
    }
  }

  hal_enable_irq();
 800d146:	f7fe fc14 	bl	800b972 <hal_enable_irq>

  SET_RETURN(ret);
 800d14a:	f107 0410 	add.w	r4, r7, #16
 800d14e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f7ff fa7d 	bl	800c658 <mrbc_decref>
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	461c      	mov	r4, r3
 800d162:	f107 0310 	add.w	r3, r7, #16
 800d166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d16c:	bf00      	nop
 800d16e:	374c      	adds	r7, #76	; 0x4c
 800d170:	46bd      	mov	sp, r7
 800d172:	bd90      	pop	{r4, r7, pc}
 800d174:	20008040 	.word	0x20008040

0800d178 <c_task_name_list>:
/*! (method) task name list

  Task.name_list() -> Array[String]
*/
static void c_task_name_list(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b093      	sub	sp, #76	; 0x4c
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new(vm, 1);
 800d184:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d188:	2201      	movs	r2, #1
 800d18a:	68f9      	ldr	r1, [r7, #12]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7f5 f8d0 	bl	8002332 <mrbc_array_new>

  hal_disable_irq();
 800d192:	f7fe fbf7 	bl	800b984 <hal_disable_irq>

  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d196:	2300      	movs	r3, #0
 800d198:	647b      	str	r3, [r7, #68]	; 0x44
 800d19a:	e01f      	b.n	800d1dc <c_task_name_list+0x64>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d19c:	4a1c      	ldr	r2, [pc, #112]	; (800d210 <c_task_name_list+0x98>)
 800d19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800d1a6:	e013      	b.n	800d1d0 <c_task_name_list+0x58>
      mrbc_value s = mrbc_string_new_cstr(vm, tcb->name);
 800d1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1aa:	f103 020d 	add.w	r2, r3, #13
 800d1ae:	f107 0320 	add.w	r3, r7, #32
 800d1b2:	68f9      	ldr	r1, [r7, #12]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7ff fa95 	bl	800c6e4 <mrbc_string_new_cstr>
      mrbc_array_push( &ret, &s );
 800d1ba:	f107 0220 	add.w	r2, r7, #32
 800d1be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f5 f9e4 	bl	8002592 <mrbc_array_push>
    for( mrbc_tcb *tcb = task_queue_[i]; tcb != NULL; tcb = tcb->next ) {
 800d1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800d1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1e8      	bne.n	800d1a8 <c_task_name_list+0x30>
  for( int i = 0; i < NUM_TASK_QUEUE; i++ ) {
 800d1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d8:	3301      	adds	r3, #1
 800d1da:	647b      	str	r3, [r7, #68]	; 0x44
 800d1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	dddc      	ble.n	800d19c <c_task_name_list+0x24>
    }
  }

  hal_enable_irq();
 800d1e2:	f7fe fbc6 	bl	800b972 <hal_enable_irq>

  SET_RETURN(ret);
 800d1e6:	f107 0410 	add.w	r4, r7, #16
 800d1ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d1ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d1f4:	68b8      	ldr	r0, [r7, #8]
 800d1f6:	f7ff fa2f 	bl	800c658 <mrbc_decref>
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	461c      	mov	r4, r3
 800d1fe:	f107 0310 	add.w	r3, r7, #16
 800d202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d208:	bf00      	nop
 800d20a:	374c      	adds	r7, #76	; 0x4c
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd90      	pop	{r4, r7, pc}
 800d210:	20008040 	.word	0x20008040

0800d214 <c_task_set_name>:
/*! (method) name setter.

  Task.name = "MyName"
*/
static void c_task_set_name(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
  if( v[1].tt != MRBC_TT_STRING ) {
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	3310      	adds	r3, #16
 800d224:	f993 3000 	ldrsb.w	r3, [r3]
 800d228:	2b0b      	cmp	r3, #11
 800d22a:	d005      	beq.n	800d238 <c_task_set_name+0x24>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800d22c:	2200      	movs	r2, #0
 800d22e:	4910      	ldr	r1, [pc, #64]	; (800d270 <c_task_set_name+0x5c>)
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f7fe f8e7 	bl	800b404 <mrbc_raise>
    return;
 800d236:	e017      	b.n	800d268 <c_task_set_name+0x54>
  }

  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	f993 3000 	ldrsb.w	r3, [r3]
 800d23e:	2b07      	cmp	r3, #7
 800d240:	d103      	bne.n	800d24a <c_task_set_name+0x36>
    tcb = VM2TCB(vm);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3b28      	subs	r3, #40	; 0x28
 800d246:	617b      	str	r3, [r7, #20]
 800d248:	e004      	b.n	800d254 <c_task_set_name+0x40>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	3310      	adds	r3, #16
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	617b      	str	r3, [r7, #20]
  }
  mrbc_set_task_name( tcb, mrbc_string_cstr(&v[1]) );
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	3310      	adds	r3, #16
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff fa5b 	bl	800c714 <mrbc_string_cstr>
 800d25e:	4603      	mov	r3, r0
 800d260:	4619      	mov	r1, r3
 800d262:	6978      	ldr	r0, [r7, #20]
 800d264:	f7ff fba6 	bl	800c9b4 <mrbc_set_task_name>
}
 800d268:	3718      	adds	r7, #24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20000154 	.word	0x20000154

0800d274 <c_task_name>:

  Task.name() -> String    # get current task name
  task.name() -> String
*/
static void c_task_name(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b093      	sub	sp, #76	; 0x4c
 800d278:	af00      	add	r7, sp, #0
 800d27a:	61f8      	str	r0, [r7, #28]
 800d27c:	61b9      	str	r1, [r7, #24]
 800d27e:	617a      	str	r2, [r7, #20]
  mrbc_value ret;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	f993 3000 	ldrsb.w	r3, [r3]
 800d286:	2b07      	cmp	r3, #7
 800d288:	d10a      	bne.n	800d2a0 <c_task_name+0x2c>
    ret = mrbc_string_new_cstr( vm, VM2TCB(vm)->name );
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	3b28      	subs	r3, #40	; 0x28
 800d28e:	f103 020d 	add.w	r2, r3, #13
 800d292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d296:	69f9      	ldr	r1, [r7, #28]
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff fa23 	bl	800c6e4 <mrbc_string_new_cstr>
 800d29e:	e012      	b.n	800d2c6 <c_task_name+0x52>
  } else {
    mrbc_tcb *tcb = *(mrbc_tcb **)v[0].instance->data;
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	3310      	adds	r3, #16
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	647b      	str	r3, [r7, #68]	; 0x44
    ret = mrbc_string_new_cstr(vm, tcb->name );
 800d2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2ac:	f103 020d 	add.w	r2, r3, #13
 800d2b0:	463b      	mov	r3, r7
 800d2b2:	69f9      	ldr	r1, [r7, #28]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fa15 	bl	800c6e4 <mrbc_string_new_cstr>
 800d2ba:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d2be:	463b      	mov	r3, r7
 800d2c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  SET_RETURN(ret);
 800d2c6:	f107 0420 	add.w	r4, r7, #32
 800d2ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2d4:	69b8      	ldr	r0, [r7, #24]
 800d2d6:	f7ff f9bf 	bl	800c658 <mrbc_decref>
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	461c      	mov	r4, r3
 800d2de:	f107 0320 	add.w	r3, r7, #32
 800d2e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d2e8:	bf00      	nop
 800d2ea:	374c      	adds	r7, #76	; 0x4c
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd90      	pop	{r4, r7, pc}

0800d2f0 <c_task_suspend>:

  Task.suspend()        # suspend current task.
  task.suspend()        # suspend other task.
*/
static void c_task_suspend(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f993 3000 	ldrsb.w	r3, [r3]
 800d302:	2b07      	cmp	r3, #7
 800d304:	d103      	bne.n	800d30e <c_task_suspend+0x1e>
    tcb = VM2TCB(vm);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b28      	subs	r3, #40	; 0x28
 800d30a:	617b      	str	r3, [r7, #20]
 800d30c:	e004      	b.n	800d318 <c_task_suspend+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	3310      	adds	r3, #16
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	617b      	str	r3, [r7, #20]
  }

  mrbc_suspend_task(tcb);
 800d318:	6978      	ldr	r0, [r7, #20]
 800d31a:	f7ff fc9b 	bl	800cc54 <mrbc_suspend_task>
}
 800d31e:	bf00      	nop
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <c_task_resume>:
/*! (method) resume task

  task.resume()
*/
static void c_task_resume(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b086      	sub	sp, #24
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	60f8      	str	r0, [r7, #12]
 800d32e:	60b9      	str	r1, [r7, #8]
 800d330:	607a      	str	r2, [r7, #4]
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f993 3000 	ldrsb.w	r3, [r3]
 800d338:	2b07      	cmp	r3, #7
 800d33a:	d008      	beq.n	800d34e <c_task_resume+0x28>

  mrbc_tcb *tcb = *(mrbc_tcb **)v[0].instance->data;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	3310      	adds	r3, #16
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	617b      	str	r3, [r7, #20]

  mrbc_resume_task(tcb);
 800d346:	6978      	ldr	r0, [r7, #20]
 800d348:	f7ff fca2 	bl	800cc90 <mrbc_resume_task>
 800d34c:	e000      	b.n	800d350 <c_task_resume+0x2a>
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d34e:	bf00      	nop
}
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <c_task_terminate>:
/*! (method) terminate task

  task.terminate()
*/
static void c_task_terminate(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	f993 3000 	ldrsb.w	r3, [r3]
 800d368:	2b07      	cmp	r3, #7
 800d36a:	d103      	bne.n	800d374 <c_task_terminate+0x1e>
    tcb = VM2TCB(vm);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3b28      	subs	r3, #40	; 0x28
 800d370:	617b      	str	r3, [r7, #20]
 800d372:	e004      	b.n	800d37e <c_task_terminate+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	3310      	adds	r3, #16
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	617b      	str	r3, [r7, #20]
  }

  mrbc_terminate_task(tcb);
 800d37e:	6978      	ldr	r0, [r7, #20]
 800d380:	f7ff fcb2 	bl	800cce8 <mrbc_terminate_task>
}
 800d384:	bf00      	nop
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <c_task_join>:
/*! (method) join task

  task.join()
*/
static void c_task_join(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f993 3000 	ldrsb.w	r3, [r3]
 800d39e:	2b07      	cmp	r3, #7
 800d3a0:	d00c      	beq.n	800d3bc <c_task_join+0x30>

  mrbc_tcb *tcb_me = VM2TCB(vm);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3b28      	subs	r3, #40	; 0x28
 800d3a6:	617b      	str	r3, [r7, #20]
  mrbc_tcb *tcb_join = *(mrbc_tcb **)v[0].instance->data;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	613b      	str	r3, [r7, #16]

  mrbc_join_task(tcb_me, tcb_join);
 800d3b2:	6939      	ldr	r1, [r7, #16]
 800d3b4:	6978      	ldr	r0, [r7, #20]
 800d3b6:	f7ff fcb5 	bl	800cd24 <mrbc_join_task>
 800d3ba:	e000      	b.n	800d3be <c_task_join+0x32>
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d3bc:	bf00      	nop
}
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <c_task_pass>:
/*! (method) task pass

  Task.pass()
*/
static void c_task_pass(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
  if( v[0].tt != MRBC_TT_CLASS ) return;
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	f993 3000 	ldrsb.w	r3, [r3]
 800d3d6:	2b07      	cmp	r3, #7
 800d3d8:	d106      	bne.n	800d3e8 <c_task_pass+0x24>

  mrbc_tcb *tcb = VM2TCB(vm);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3b28      	subs	r3, #40	; 0x28
 800d3de:	617b      	str	r3, [r7, #20]
  mrbc_relinquish(tcb);
 800d3e0:	6978      	ldr	r0, [r7, #20]
 800d3e2:	f7ff fc03 	bl	800cbec <mrbc_relinquish>
 800d3e6:	e000      	b.n	800d3ea <c_task_pass+0x26>
  if( v[0].tt != MRBC_TT_CLASS ) return;
 800d3e8:	bf00      	nop
}
 800d3ea:	3718      	adds	r7, #24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <c_task_set_priority>:

  Task.priority = n  # n = 0(high) .. 255(low)
  task.priority = n
*/
static void c_task_set_priority(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	f993 3000 	ldrsb.w	r3, [r3]
 800d402:	2b07      	cmp	r3, #7
 800d404:	d103      	bne.n	800d40e <c_task_set_priority+0x1e>
    tcb = VM2TCB(vm);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3b28      	subs	r3, #40	; 0x28
 800d40a:	617b      	str	r3, [r7, #20]
 800d40c:	e004      	b.n	800d418 <c_task_set_priority+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	3310      	adds	r3, #16
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	617b      	str	r3, [r7, #20]
  }

  if( v[1].tt != MRBC_TT_INTEGER ) {
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	3310      	adds	r3, #16
 800d41c:	f993 3000 	ldrsb.w	r3, [r3]
 800d420:	2b04      	cmp	r3, #4
 800d422:	d005      	beq.n	800d430 <c_task_set_priority+0x40>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800d424:	2200      	movs	r2, #0
 800d426:	490e      	ldr	r1, [pc, #56]	; (800d460 <c_task_set_priority+0x70>)
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f7fd ffeb 	bl	800b404 <mrbc_raise>
    return;
 800d42e:	e013      	b.n	800d458 <c_task_set_priority+0x68>
  }
  int n = mrbc_integer( v[1] );
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	3310      	adds	r3, #16
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	613b      	str	r3, [r7, #16]
  if( n < 0 || n > 255 ) {
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	db02      	blt.n	800d444 <c_task_set_priority+0x54>
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	2bff      	cmp	r3, #255	; 0xff
 800d442:	dd05      	ble.n	800d450 <c_task_set_priority+0x60>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), 0 );
 800d444:	2200      	movs	r2, #0
 800d446:	4906      	ldr	r1, [pc, #24]	; (800d460 <c_task_set_priority+0x70>)
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f7fd ffdb 	bl	800b404 <mrbc_raise>
    return;
 800d44e:	e003      	b.n	800d458 <c_task_set_priority+0x68>
  }

  mrbc_change_priority( tcb, n );
 800d450:	6939      	ldr	r1, [r7, #16]
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	f7ff fbdb 	bl	800cc0e <mrbc_change_priority>
}
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	20000154 	.word	0x20000154

0800d464 <c_task_priority>:
/*! (method) task priority getter

  task.priority() -> Integer
*/
static void c_task_priority(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
  mrbc_tcb *tcb;

  if( v[0].tt == MRBC_TT_CLASS ) {
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	f993 3000 	ldrsb.w	r3, [r3]
 800d476:	2b07      	cmp	r3, #7
 800d478:	d103      	bne.n	800d482 <c_task_priority+0x1e>
    tcb = VM2TCB(vm);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3b28      	subs	r3, #40	; 0x28
 800d47e:	617b      	str	r3, [r7, #20]
 800d480:	e004      	b.n	800d48c <c_task_priority+0x28>
  } else {
    tcb = *(mrbc_tcb **)v[0].instance->data;
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	3310      	adds	r3, #16
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	617b      	str	r3, [r7, #20]
  }

  SET_INT_RETURN( tcb->priority );
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	7a1b      	ldrb	r3, [r3, #8]
 800d490:	613b      	str	r3, [r7, #16]
 800d492:	68b8      	ldr	r0, [r7, #8]
 800d494:	f7ff f8e0 	bl	800c658 <mrbc_decref>
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2204      	movs	r2, #4
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	609a      	str	r2, [r3, #8]
}
 800d4a4:	bf00      	nop
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <c_task_status>:
/*! (method) status

  task.status() -> String
*/
static void c_task_status(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d4ac:	b590      	push	{r4, r7, lr}
 800d4ae:	b08f      	sub	sp, #60	; 0x3c
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  static const char *status_name[] =
    { "DORMANT", "READY", "WAITING ", "", "SUSPENDED" };
  static const char *reason_name[] =
    { "", "SLEEP", "MUTEX", "", "JOIN" };

  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f993 3000 	ldrsb.w	r3, [r3]
 800d4be:	2b07      	cmp	r3, #7
 800d4c0:	d034      	beq.n	800d52c <c_task_status+0x80>

  const mrbc_tcb *tcb = *(mrbc_tcb **)v[0].instance->data;
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	3310      	adds	r3, #16
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	637b      	str	r3, [r7, #52]	; 0x34
  mrbc_value ret = mrbc_string_new_cstr( vm, status_name[tcb->state / 2] );
 800d4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ce:	7adb      	ldrb	r3, [r3, #11]
 800d4d0:	085b      	lsrs	r3, r3, #1
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4b17      	ldr	r3, [pc, #92]	; (800d534 <c_task_status+0x88>)
 800d4d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4dc:	f107 0320 	add.w	r3, r7, #32
 800d4e0:	68f9      	ldr	r1, [r7, #12]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff f8fe 	bl	800c6e4 <mrbc_string_new_cstr>

  if( tcb->state == TASKSTATE_WAITING ) {
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	7adb      	ldrb	r3, [r3, #11]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d10b      	bne.n	800d508 <c_task_status+0x5c>
    mrbc_string_append_cstr( &ret, reason_name[tcb->reason] );
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	7b1b      	ldrb	r3, [r3, #12]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	4b10      	ldr	r3, [pc, #64]	; (800d538 <c_task_status+0x8c>)
 800d4f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4fc:	f107 0320 	add.w	r3, r7, #32
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff f913 	bl	800c72e <mrbc_string_append_cstr>
  }

  SET_RETURN(ret);
 800d508:	f107 0410 	add.w	r4, r7, #16
 800d50c:	f107 0320 	add.w	r3, r7, #32
 800d510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d516:	68b8      	ldr	r0, [r7, #8]
 800d518:	f7ff f89e 	bl	800c658 <mrbc_decref>
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	461c      	mov	r4, r3
 800d520:	f107 0310 	add.w	r3, r7, #16
 800d524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d52a:	e000      	b.n	800d52e <c_task_status+0x82>
  if( v[0].tt == MRBC_TT_CLASS ) return;
 800d52c:	bf00      	nop
}
 800d52e:	373c      	adds	r7, #60	; 0x3c
 800d530:	46bd      	mov	sp, r7
 800d532:	bd90      	pop	{r4, r7, pc}
 800d534:	20000220 	.word	0x20000220
 800d538:	20000234 	.word	0x20000234

0800d53c <c_mutex_new>:
//================================================================
/*! (method) mutex constructor

*/
static void c_mutex_new(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b089      	sub	sp, #36	; 0x24
 800d540:	af00      	add	r7, sp, #0
 800d542:	61f8      	str	r0, [r7, #28]
 800d544:	61b9      	str	r1, [r7, #24]
 800d546:	617a      	str	r2, [r7, #20]
  *v = mrbc_instance_new(vm, v->cls, sizeof(mrbc_mutex));
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	69bc      	ldr	r4, [r7, #24]
 800d54e:	4638      	mov	r0, r7
 800d550:	2308      	movs	r3, #8
 800d552:	69f9      	ldr	r1, [r7, #28]
 800d554:	f7fb ff88 	bl	8009468 <mrbc_instance_new>
 800d558:	463b      	mov	r3, r7
 800d55a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d55c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( !v->instance ) return;
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d006      	beq.n	800d576 <c_mutex_new+0x3a>

  mrbc_mutex_init( (mrbc_mutex *)(v->instance->data) );
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	3310      	adds	r3, #16
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff fc03 	bl	800cd7a <mrbc_mutex_init>
 800d574:	e000      	b.n	800d578 <c_mutex_new+0x3c>
  if( !v->instance ) return;
 800d576:	bf00      	nop
}
 800d578:	3724      	adds	r7, #36	; 0x24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd90      	pop	{r4, r7, pc}
	...

0800d580 <c_mutex_lock>:
//================================================================
/*! (method) mutex lock

*/
static void c_mutex_lock(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
  int r = mrbc_mutex_lock( (mrbc_mutex *)v->instance->data, VM2TCB(vm) );
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	f103 0210 	add.w	r2, r3, #16
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3b28      	subs	r3, #40	; 0x28
 800d598:	4619      	mov	r1, r3
 800d59a:	4610      	mov	r0, r2
 800d59c:	f7ff fc07 	bl	800cdae <mrbc_mutex_lock>
 800d5a0:	6178      	str	r0, [r7, #20]
  if( r == 0 ) return;  // return self
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d006      	beq.n	800d5b6 <c_mutex_lock+0x36>

  // raise ThreadError
  assert(!"Mutex recursive lock.");
 800d5a8:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <c_mutex_lock+0x40>)
 800d5aa:	4a06      	ldr	r2, [pc, #24]	; (800d5c4 <c_mutex_lock+0x44>)
 800d5ac:	f240 4163 	movw	r1, #1123	; 0x463
 800d5b0:	4805      	ldr	r0, [pc, #20]	; (800d5c8 <c_mutex_lock+0x48>)
 800d5b2:	f007 ffed 	bl	8015590 <__assert_func>
  if( r == 0 ) return;  // return self
 800d5b6:	bf00      	nop
}
 800d5b8:	3718      	adds	r7, #24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0801981c 	.word	0x0801981c
 800d5c4:	0801bd78 	.word	0x0801bd78
 800d5c8:	080197e0 	.word	0x080197e0

0800d5cc <c_mutex_unlock>:
//================================================================
/*! (method) mutex unlock

*/
static void c_mutex_unlock(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
  int r = mrbc_mutex_unlock( (mrbc_mutex *)v->instance->data, VM2TCB(vm) );
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	689b      	ldr	r3, [r3, #8]
 800d5dc:	f103 0210 	add.w	r2, r3, #16
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3b28      	subs	r3, #40	; 0x28
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	f7ff fc18 	bl	800ce1c <mrbc_mutex_unlock>
 800d5ec:	6178      	str	r0, [r7, #20]
  if( r == 0 ) return;  // return self
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d006      	beq.n	800d602 <c_mutex_unlock+0x36>

  // raise ThreadError
  assert(!"Mutex unlock error. not owner or not locked.");
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <c_mutex_unlock+0x40>)
 800d5f6:	4a06      	ldr	r2, [pc, #24]	; (800d610 <c_mutex_unlock+0x44>)
 800d5f8:	f240 4171 	movw	r1, #1137	; 0x471
 800d5fc:	4805      	ldr	r0, [pc, #20]	; (800d614 <c_mutex_unlock+0x48>)
 800d5fe:	f007 ffc7 	bl	8015590 <__assert_func>
  if( r == 0 ) return;  // return self
 800d602:	bf00      	nop
}
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	08019838 	.word	0x08019838
 800d610:	0801bd88 	.word	0x0801bd88
 800d614:	080197e0 	.word	0x080197e0

0800d618 <c_mutex_trylock>:
//================================================================
/*! (method) mutex trylock

*/
static void c_mutex_trylock(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
  int r = mrbc_mutex_trylock( (mrbc_mutex *)v->instance->data, VM2TCB(vm) );
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	f103 0210 	add.w	r2, r3, #16
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	3b28      	subs	r3, #40	; 0x28
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f7ff fc5e 	bl	800cef4 <mrbc_mutex_trylock>
 800d638:	6178      	str	r0, [r7, #20]
  SET_BOOL_RETURN( r == 0 );
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <c_mutex_trylock+0x2c>
 800d640:	2303      	movs	r3, #3
 800d642:	e000      	b.n	800d646 <c_mutex_trylock+0x2e>
 800d644:	2302      	movs	r3, #2
 800d646:	613b      	str	r3, [r7, #16]
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	f7ff f805 	bl	800c658 <mrbc_decref>
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	b25a      	sxtb	r2, r3
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	701a      	strb	r2, [r3, #0]
}
 800d656:	bf00      	nop
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <c_mutex_locked>:
//================================================================
/*! (method) mutex locked?

*/
static void c_mutex_locked(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b086      	sub	sp, #24
 800d662:	af00      	add	r7, sp, #0
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	60b9      	str	r1, [r7, #8]
 800d668:	607a      	str	r2, [r7, #4]
  mrbc_mutex *mutex = (mrbc_mutex *)v->instance->data;
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	3310      	adds	r3, #16
 800d670:	617b      	str	r3, [r7, #20]
  SET_BOOL_RETURN( mutex->lock != 0 );
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <c_mutex_locked+0x20>
 800d67a:	2303      	movs	r3, #3
 800d67c:	e000      	b.n	800d680 <c_mutex_locked+0x22>
 800d67e:	2302      	movs	r3, #2
 800d680:	613b      	str	r3, [r7, #16]
 800d682:	68b8      	ldr	r0, [r7, #8]
 800d684:	f7fe ffe8 	bl	800c658 <mrbc_decref>
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	b25a      	sxtb	r2, r3
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	701a      	strb	r2, [r3, #0]
}
 800d690:	bf00      	nop
 800d692:	3718      	adds	r7, #24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <c_mutex_owned>:
//================================================================
/*! (method) mutex owned?

*/
static void c_mutex_owned(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
  mrbc_mutex *mutex = (mrbc_mutex *)v->instance->data;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	3310      	adds	r3, #16
 800d6aa:	617b      	str	r3, [r7, #20]
  SET_BOOL_RETURN( mutex->lock != 0 && mutex->tcb == VM2TCB(vm) );
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d007      	beq.n	800d6c4 <c_mutex_owned+0x2c>
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3b28      	subs	r3, #40	; 0x28
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d101      	bne.n	800d6c4 <c_mutex_owned+0x2c>
 800d6c0:	2303      	movs	r3, #3
 800d6c2:	e000      	b.n	800d6c6 <c_mutex_owned+0x2e>
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	613b      	str	r3, [r7, #16]
 800d6c8:	68b8      	ldr	r0, [r7, #8]
 800d6ca:	f7fe ffc5 	bl	800c658 <mrbc_decref>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	b25a      	sxtb	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	701a      	strb	r2, [r3, #0]
}
 800d6d6:	bf00      	nop
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
	...

0800d6e0 <c_vm_tick>:

//================================================================
/*! (method) get tick counter
*/
static void c_vm_tick(mrbc_vm *vm, mrbc_value v[], int argc)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	60f8      	str	r0, [r7, #12]
 800d6e8:	60b9      	str	r1, [r7, #8]
 800d6ea:	607a      	str	r2, [r7, #4]
  SET_INT_RETURN(tick_);
 800d6ec:	4b07      	ldr	r3, [pc, #28]	; (800d70c <c_vm_tick+0x2c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	68b8      	ldr	r0, [r7, #8]
 800d6f4:	f7fe ffb0 	bl	800c658 <mrbc_decref>
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2204      	movs	r2, #4
 800d6fc:	701a      	strb	r2, [r3, #0]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	697a      	ldr	r2, [r7, #20]
 800d702:	609a      	str	r2, [r3, #8]
}
 800d704:	bf00      	nop
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20008050 	.word	0x20008050

0800d710 <mrbc_init>:

  @param  heap_ptr	heap memory buffer.
  @param  size		its size.
*/
void mrbc_init(void *heap_ptr, unsigned int size)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  hal_init();
 800d71a:	f7fe f923 	bl	800b964 <hal_init>
  mrbc_init_alloc(heap_ptr, size);
 800d71e:	6839      	ldr	r1, [r7, #0]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7f4 f963 	bl	80019ec <mrbc_init_alloc>
  mrbc_init_global();
 800d726:	f7fe f853 	bl	800b7d0 <mrbc_init_global>
  mrbc_init_class();
 800d72a:	f7fc f93f 	bl	80099ac <mrbc_init_class>

  mrbc_value cls = {.tt = MRBC_TT_CLASS, .cls = MRBC_CLASS(Task)};
 800d72e:	f107 0308 	add.w	r3, r7, #8
 800d732:	2200      	movs	r2, #0
 800d734:	601a      	str	r2, [r3, #0]
 800d736:	605a      	str	r2, [r3, #4]
 800d738:	609a      	str	r2, [r3, #8]
 800d73a:	60da      	str	r2, [r3, #12]
 800d73c:	2307      	movs	r3, #7
 800d73e:	723b      	strb	r3, [r7, #8]
 800d740:	4b13      	ldr	r3, [pc, #76]	; (800d790 <mrbc_init+0x80>)
 800d742:	613b      	str	r3, [r7, #16]
  mrbc_set_const( MRBC_SYM(Task), &cls );
 800d744:	f107 0308 	add.w	r3, r7, #8
 800d748:	4619      	mov	r1, r3
 800d74a:	2032      	movs	r0, #50	; 0x32
 800d74c:	f7fe f852 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(Mutex);
 800d750:	4b10      	ldr	r3, [pc, #64]	; (800d794 <mrbc_init+0x84>)
 800d752:	613b      	str	r3, [r7, #16]
  mrbc_set_const( MRBC_SYM(Mutex), &cls );
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	2021      	movs	r0, #33	; 0x21
 800d75c:	f7fe f84a 	bl	800b7f4 <mrbc_set_const>

  cls.cls = MRBC_CLASS(VM);
 800d760:	4b0d      	ldr	r3, [pc, #52]	; (800d798 <mrbc_init+0x88>)
 800d762:	613b      	str	r3, [r7, #16]
  mrbc_set_const( MRBC_SYM(VM), &cls );
 800d764:	f107 0308 	add.w	r3, r7, #8
 800d768:	4619      	mov	r1, r3
 800d76a:	2035      	movs	r0, #53	; 0x35
 800d76c:	f7fe f842 	bl	800b7f4 <mrbc_set_const>

  mrbc_define_method(0, mrbc_class_object, "sleep", c_sleep);
 800d770:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <mrbc_init+0x8c>)
 800d772:	4a0b      	ldr	r2, [pc, #44]	; (800d7a0 <mrbc_init+0x90>)
 800d774:	490b      	ldr	r1, [pc, #44]	; (800d7a4 <mrbc_init+0x94>)
 800d776:	2000      	movs	r0, #0
 800d778:	f7fb fe36 	bl	80093e8 <mrbc_define_method>
  mrbc_define_method(0, mrbc_class_object, "sleep_ms", c_sleep_ms);
 800d77c:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <mrbc_init+0x98>)
 800d77e:	4a0b      	ldr	r2, [pc, #44]	; (800d7ac <mrbc_init+0x9c>)
 800d780:	4908      	ldr	r1, [pc, #32]	; (800d7a4 <mrbc_init+0x94>)
 800d782:	2000      	movs	r0, #0
 800d784:	f7fb fe30 	bl	80093e8 <mrbc_define_method>
}
 800d788:	bf00      	nop
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	200001d8 	.word	0x200001d8
 800d794:	200001f0 	.word	0x200001f0
 800d798:	20000208 	.word	0x20000208
 800d79c:	0800cf31 	.word	0x0800cf31
 800d7a0:	0801987c 	.word	0x0801987c
 800d7a4:	20000064 	.word	0x20000064
 800d7a8:	0800cff1 	.word	0x0800cff1
 800d7ac:	08019884 	.word	0x08019884

0800d7b0 <mrbc_decref>:
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f993 3000 	ldrsb.w	r3, [r3]
 800d7be:	2b07      	cmp	r3, #7
 800d7c0:	dd2c      	ble.n	800d81c <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	885b      	ldrh	r3, [r3, #2]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d106      	bne.n	800d7da <mrbc_decref+0x2a>
 800d7cc:	4b16      	ldr	r3, [pc, #88]	; (800d828 <mrbc_decref+0x78>)
 800d7ce:	4a17      	ldr	r2, [pc, #92]	; (800d82c <mrbc_decref+0x7c>)
 800d7d0:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d7d4:	4816      	ldr	r0, [pc, #88]	; (800d830 <mrbc_decref+0x80>)
 800d7d6:	f007 fedb 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	885b      	ldrh	r3, [r3, #2]
 800d7e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d106      	bne.n	800d7f6 <mrbc_decref+0x46>
 800d7e8:	4b12      	ldr	r3, [pc, #72]	; (800d834 <mrbc_decref+0x84>)
 800d7ea:	4a10      	ldr	r2, [pc, #64]	; (800d82c <mrbc_decref+0x7c>)
 800d7ec:	f240 11d3 	movw	r1, #467	; 0x1d3
 800d7f0:	480f      	ldr	r0, [pc, #60]	; (800d830 <mrbc_decref+0x80>)
 800d7f2:	f007 fecd 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	885a      	ldrh	r2, [r3, #2]
 800d7fc:	3a01      	subs	r2, #1
 800d7fe:	b292      	uxth	r2, r2
 800d800:	805a      	strh	r2, [r3, #2]
 800d802:	885b      	ldrh	r3, [r3, #2]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10b      	bne.n	800d820 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f993 3000 	ldrsb.w	r3, [r3]
 800d80e:	461a      	mov	r2, r3
 800d810:	4b09      	ldr	r3, [pc, #36]	; (800d838 <mrbc_decref+0x88>)
 800d812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	4798      	blx	r3
 800d81a:	e002      	b.n	800d822 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800d81c:	bf00      	nop
 800d81e:	e000      	b.n	800d822 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800d820:	bf00      	nop
}
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	0801a094 	.word	0x0801a094
 800d82c:	0801bddc 	.word	0x0801bddc
 800d830:	0801a0ac 	.word	0x0801a0ac
 800d834:	0801a0c8 	.word	0x0801a0c8
 800d838:	0801bde8 	.word	0x0801bde8

0800d83c <mrbc_is_nested_symid>:
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	4603      	mov	r3, r0
 800d844:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 800d846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f974 	bl	800db38 <mrbc_symid_to_str>
 800d850:	60f8      	str	r0, [r7, #12]
  return ('0' <= s[0] && s[0] <= ('9'+6));
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b2f      	cmp	r3, #47	; 0x2f
 800d858:	d905      	bls.n	800d866 <mrbc_is_nested_symid+0x2a>
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b3f      	cmp	r3, #63	; 0x3f
 800d860:	d801      	bhi.n	800d866 <mrbc_is_nested_symid+0x2a>
 800d862:	2301      	movs	r3, #1
 800d864:	e000      	b.n	800d868 <mrbc_is_nested_symid+0x2c>
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <mrbc_string_new_cstr>:
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
  return mrbc_string_new(vm, src, (src ? strlen(src) : 0));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d004      	beq.n	800d88c <mrbc_string_new_cstr+0x1c>
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7f2 fcb6 	bl	80001f4 <strlen>
 800d888:	4603      	mov	r3, r0
 800d88a:	e000      	b.n	800d88e <mrbc_string_new_cstr+0x1e>
 800d88c:	2300      	movs	r3, #0
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	f7f9 fc78 	bl	8007188 <mrbc_string_new>
}
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	3710      	adds	r7, #16
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <mrbc_string_append_cstr>:
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  return mrbc_string_append_cbuf( s1, s2, strlen(s2) );
 800d8aa:	6838      	ldr	r0, [r7, #0]
 800d8ac:	f7f2 fca2 	bl	80001f4 <strlen>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7f9 fdfe 	bl	80074b8 <mrbc_string_append_cbuf>
 800d8bc:	4603      	mov	r3, r0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <calc_hash>:

  @param  str		Target string.
  @return uint16_t	Hash value.
*/
static inline uint16_t calc_hash(const char *str)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b085      	sub	sp, #20
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
  uint16_t h = 0;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	81fb      	strh	r3, [r7, #14]

  while( *str != '\0' ) {
 800d8d2:	e00b      	b.n	800d8ec <calc_hash+0x26>
    h = h * 17 + *str++;
 800d8d4:	89fb      	ldrh	r3, [r7, #14]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	0112      	lsls	r2, r2, #4
 800d8da:	4413      	add	r3, r2
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	1c59      	adds	r1, r3, #1
 800d8e2:	6079      	str	r1, [r7, #4]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	4413      	add	r3, r2
 800d8ea:	81fb      	strh	r3, [r7, #14]
  while( *str != '\0' ) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1ef      	bne.n	800d8d4 <calc_hash+0xe>
  }
  return h;
 800d8f4:	89fb      	ldrh	r3, [r7, #14]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3714      	adds	r7, #20
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
	...

0800d904 <search_builtin_symbol>:

  @param  str	string ptr.
  @return	symbol id. or -1 if not found.
*/
static int search_builtin_symbol( const char *str )
{
 800d904:	b480      	push	{r7}
 800d906:	b089      	sub	sp, #36	; 0x24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  int left = 0;
 800d90c:	2300      	movs	r3, #0
 800d90e:	61fb      	str	r3, [r7, #28]
  int right = sizeof(builtin_symbols) / sizeof(builtin_symbols[0]);
 800d910:	23d3      	movs	r3, #211	; 0xd3
 800d912:	61bb      	str	r3, [r7, #24]

  while( left < right ) {
 800d914:	e02d      	b.n	800d972 <search_builtin_symbol+0x6e>
    int mid = (left + right) / 2;
 800d916:	69fa      	ldr	r2, [r7, #28]
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	4413      	add	r3, r2
 800d91c:	0fda      	lsrs	r2, r3, #31
 800d91e:	4413      	add	r3, r2
 800d920:	105b      	asrs	r3, r3, #1
 800d922:	60fb      	str	r3, [r7, #12]
    const unsigned char *p1 = (const unsigned char *)builtin_symbols[mid];
 800d924:	4a19      	ldr	r2, [pc, #100]	; (800d98c <search_builtin_symbol+0x88>)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d92c:	617b      	str	r3, [r7, #20]
    const unsigned char *p2 = (const unsigned char *)str;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	613b      	str	r3, [r7, #16]

    while( 1 ) {	// string compare, same order as cruby.
      if( *p1 < *p2 ) {
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	781a      	ldrb	r2, [r3, #0]
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d203      	bcs.n	800d946 <search_builtin_symbol+0x42>
	left = mid + 1;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3301      	adds	r3, #1
 800d942:	61fb      	str	r3, [r7, #28]
	break;
 800d944:	e015      	b.n	800d972 <search_builtin_symbol+0x6e>
      }
      if( *p1 > *p2 ) {
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	781a      	ldrb	r2, [r3, #0]
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d902      	bls.n	800d958 <search_builtin_symbol+0x54>
	right = mid;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	61bb      	str	r3, [r7, #24]
	break;
 800d956:	e00c      	b.n	800d972 <search_builtin_symbol+0x6e>
      }
      if( *p1 == 0 ) {
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d101      	bne.n	800d964 <search_builtin_symbol+0x60>
	return mid;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	e00c      	b.n	800d97e <search_builtin_symbol+0x7a>
      }

      p1++;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	3301      	adds	r3, #1
 800d968:	617b      	str	r3, [r7, #20]
      p2++;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	3301      	adds	r3, #1
 800d96e:	613b      	str	r3, [r7, #16]
      if( *p1 < *p2 ) {
 800d970:	e7df      	b.n	800d932 <search_builtin_symbol+0x2e>
  while( left < right ) {
 800d972:	69fa      	ldr	r2, [r7, #28]
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	429a      	cmp	r2, r3
 800d978:	dbcd      	blt.n	800d916 <search_builtin_symbol+0x12>
    }
  }

  return -1;
 800d97a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3724      	adds	r7, #36	; 0x24
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	20000248 	.word	0x20000248

0800d990 <search_index>:
  @param  hash	hash value.
  @param  str	string ptr.
  @return	index. or -1 if not found.
*/
static int search_index( uint16_t hash, const char *str )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	6039      	str	r1, [r7, #0]
 800d99a:	80fb      	strh	r3, [r7, #6]
  }
  return -1;
#endif

#ifdef MRBC_SYMBOL_SEARCH_BTREE
  int i = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	60fb      	str	r3, [r7, #12]
  do {
    if( sym_index[i].hash == hash && strcmp(str, sym_index[i].cstr) == 0 ) {
 800d9a0:	4a18      	ldr	r2, [pc, #96]	; (800da04 <search_index+0x74>)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800d9a8:	88fa      	ldrh	r2, [r7, #6]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d10d      	bne.n	800d9ca <search_index+0x3a>
 800d9ae:	4a15      	ldr	r2, [pc, #84]	; (800da04 <search_index+0x74>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	4413      	add	r3, r2
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6838      	ldr	r0, [r7, #0]
 800d9bc:	f7f2 fc10 	bl	80001e0 <strcmp>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <search_index+0x3a>
      return i;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	e018      	b.n	800d9fc <search_index+0x6c>
    }
    if( hash < sym_index[i].hash ) {
 800d9ca:	4a0e      	ldr	r2, [pc, #56]	; (800da04 <search_index+0x74>)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800d9d2:	88fa      	ldrh	r2, [r7, #6]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d206      	bcs.n	800d9e6 <search_index+0x56>
      i = sym_index[i].left;
 800d9d8:	4a0a      	ldr	r2, [pc, #40]	; (800da04 <search_index+0x74>)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	00db      	lsls	r3, r3, #3
 800d9de:	4413      	add	r3, r2
 800d9e0:	789b      	ldrb	r3, [r3, #2]
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e005      	b.n	800d9f2 <search_index+0x62>
    } else {
      i = sym_index[i].right;
 800d9e6:	4a07      	ldr	r2, [pc, #28]	; (800da04 <search_index+0x74>)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	4413      	add	r3, r2
 800d9ee:	78db      	ldrb	r3, [r3, #3]
 800d9f0:	60fb      	str	r3, [r7, #12]
    }
  } while( i != 0 );
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1d3      	bne.n	800d9a0 <search_index+0x10>
  return -1;
 800d9f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	20008054 	.word	0x20008054

0800da08 <add_index>:
  @param  hash	return value.
  @param  str	string ptr.
  @return	index. or -1 if error.
*/
static int add_index( uint16_t hash, const char *str )
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	6039      	str	r1, [r7, #0]
 800da12:	80fb      	strh	r3, [r7, #6]
  if( sym_index_pos >= MAX_SYMBOLS_COUNT ) return -1;	// check overflow.
 800da14:	4b2a      	ldr	r3, [pc, #168]	; (800dac0 <add_index+0xb8>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2bfe      	cmp	r3, #254	; 0xfe
 800da1a:	dd02      	ble.n	800da22 <add_index+0x1a>
 800da1c:	f04f 33ff 	mov.w	r3, #4294967295
 800da20:	e048      	b.n	800dab4 <add_index+0xac>

  int idx = sym_index_pos++;
 800da22:	4b27      	ldr	r3, [pc, #156]	; (800dac0 <add_index+0xb8>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	4925      	ldr	r1, [pc, #148]	; (800dac0 <add_index+0xb8>)
 800da2a:	600a      	str	r2, [r1, #0]
 800da2c:	60bb      	str	r3, [r7, #8]

  // append table.
  sym_index[idx].hash = hash;
 800da2e:	4925      	ldr	r1, [pc, #148]	; (800dac4 <add_index+0xbc>)
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	88fa      	ldrh	r2, [r7, #6]
 800da34:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
  sym_index[idx].cstr = str;
 800da38:	4a22      	ldr	r2, [pc, #136]	; (800dac4 <add_index+0xbc>)
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	4413      	add	r3, r2
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	605a      	str	r2, [r3, #4]

#ifdef MRBC_SYMBOL_SEARCH_BTREE
  int i = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	60fb      	str	r3, [r7, #12]

  while( 1 ) {
    if( hash < sym_index[i].hash ) {
 800da48:	4a1e      	ldr	r2, [pc, #120]	; (800dac4 <add_index+0xbc>)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800da50:	88fa      	ldrh	r2, [r7, #6]
 800da52:	429a      	cmp	r2, r3
 800da54:	d216      	bcs.n	800da84 <add_index+0x7c>
      // left side
      if( sym_index[i].left == 0 ) {	// left is empty?
 800da56:	4a1b      	ldr	r2, [pc, #108]	; (800dac4 <add_index+0xbc>)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	00db      	lsls	r3, r3, #3
 800da5c:	4413      	add	r3, r2
 800da5e:	789b      	ldrb	r3, [r3, #2]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d108      	bne.n	800da76 <add_index+0x6e>
        sym_index[i].left = idx;
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	b2d9      	uxtb	r1, r3
 800da68:	4a16      	ldr	r2, [pc, #88]	; (800dac4 <add_index+0xbc>)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	00db      	lsls	r3, r3, #3
 800da6e:	4413      	add	r3, r2
 800da70:	460a      	mov	r2, r1
 800da72:	709a      	strb	r2, [r3, #2]
        break;
 800da74:	e01d      	b.n	800dab2 <add_index+0xaa>
      }
      i = sym_index[i].left;
 800da76:	4a13      	ldr	r2, [pc, #76]	; (800dac4 <add_index+0xbc>)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	00db      	lsls	r3, r3, #3
 800da7c:	4413      	add	r3, r2
 800da7e:	789b      	ldrb	r3, [r3, #2]
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	e7e1      	b.n	800da48 <add_index+0x40>
    } else {
      // right side
      if( sym_index[i].right == 0 ) {	// right is empty?
 800da84:	4a0f      	ldr	r2, [pc, #60]	; (800dac4 <add_index+0xbc>)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	4413      	add	r3, r2
 800da8c:	78db      	ldrb	r3, [r3, #3]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d108      	bne.n	800daa4 <add_index+0x9c>
        sym_index[i].right = idx;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	b2d9      	uxtb	r1, r3
 800da96:	4a0b      	ldr	r2, [pc, #44]	; (800dac4 <add_index+0xbc>)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	00db      	lsls	r3, r3, #3
 800da9c:	4413      	add	r3, r2
 800da9e:	460a      	mov	r2, r1
 800daa0:	70da      	strb	r2, [r3, #3]
        break;
 800daa2:	e006      	b.n	800dab2 <add_index+0xaa>
      }
      i = sym_index[i].right;
 800daa4:	4a07      	ldr	r2, [pc, #28]	; (800dac4 <add_index+0xbc>)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	4413      	add	r3, r2
 800daac:	78db      	ldrb	r3, [r3, #3]
 800daae:	60fb      	str	r3, [r7, #12]
    if( hash < sym_index[i].hash ) {
 800dab0:	e7ca      	b.n	800da48 <add_index+0x40>
    }
  }
#endif

  return idx;
 800dab2:	68bb      	ldr	r3, [r7, #8]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3714      	adds	r7, #20
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	2000884c 	.word	0x2000884c
 800dac4:	20008054 	.word	0x20008054

0800dac8 <mrbc_str_to_symid>:

  @param  str		Target string.
  @return mrbc_sym	Symbol value. -1 if error.
*/
mrbc_sym mrbc_str_to_symid(const char *str)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  mrbc_sym sym_id = search_builtin_symbol(str);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff ff17 	bl	800d904 <search_builtin_symbol>
 800dad6:	4603      	mov	r3, r0
 800dad8:	81fb      	strh	r3, [r7, #14]
  if( sym_id >= 0 ) return sym_id;
 800dada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	db02      	blt.n	800dae8 <mrbc_str_to_symid+0x20>
 800dae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dae6:	e022      	b.n	800db2e <mrbc_str_to_symid+0x66>

  uint16_t h = calc_hash(str);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7ff feec 	bl	800d8c6 <calc_hash>
 800daee:	4603      	mov	r3, r0
 800daf0:	81bb      	strh	r3, [r7, #12]
  sym_id = search_index(h, str);
 800daf2:	89bb      	ldrh	r3, [r7, #12]
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff ff4a 	bl	800d990 <search_index>
 800dafc:	4603      	mov	r3, r0
 800dafe:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) sym_id = add_index( h, str );
 800db00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db04:	2b00      	cmp	r3, #0
 800db06:	da06      	bge.n	800db16 <mrbc_str_to_symid+0x4e>
 800db08:	89bb      	ldrh	r3, [r7, #12]
 800db0a:	6879      	ldr	r1, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7ff ff7b 	bl	800da08 <add_index>
 800db12:	4603      	mov	r3, r0
 800db14:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) return sym_id;
 800db16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	da02      	bge.n	800db24 <mrbc_str_to_symid+0x5c>
 800db1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db22:	e004      	b.n	800db2e <mrbc_str_to_symid+0x66>

  return sym_id + OFFSET_BUILTIN_SYMBOL;
 800db24:	89fb      	ldrh	r3, [r7, #14]
 800db26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	b21b      	sxth	r3, r3
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
	...

0800db38 <mrbc_symid_to_str>:
  @param  sym_id	Symbol value.
  @return const char*	String.
  @retval NULL		Invalid sym_id was given.
*/
const char * mrbc_symid_to_str(mrbc_sym sym_id)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	80fb      	strh	r3, [r7, #6]
  if( sym_id < OFFSET_BUILTIN_SYMBOL ) {
 800db42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db46:	2bff      	cmp	r3, #255	; 0xff
 800db48:	dc05      	bgt.n	800db56 <mrbc_symid_to_str+0x1e>
    return builtin_symbols[sym_id];
 800db4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db4e:	4a11      	ldr	r2, [pc, #68]	; (800db94 <mrbc_symid_to_str+0x5c>)
 800db50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db54:	e018      	b.n	800db88 <mrbc_symid_to_str+0x50>
  }

  sym_id -= OFFSET_BUILTIN_SYMBOL;
 800db56:	88fb      	ldrh	r3, [r7, #6]
 800db58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	80fb      	strh	r3, [r7, #6]
  if( sym_id < 0 ) return NULL;
 800db60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db64:	2b00      	cmp	r3, #0
 800db66:	da01      	bge.n	800db6c <mrbc_symid_to_str+0x34>
 800db68:	2300      	movs	r3, #0
 800db6a:	e00d      	b.n	800db88 <mrbc_symid_to_str+0x50>
  if( sym_id >= sym_index_pos ) return NULL;
 800db6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800db70:	4b09      	ldr	r3, [pc, #36]	; (800db98 <mrbc_symid_to_str+0x60>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	429a      	cmp	r2, r3
 800db76:	db01      	blt.n	800db7c <mrbc_symid_to_str+0x44>
 800db78:	2300      	movs	r3, #0
 800db7a:	e005      	b.n	800db88 <mrbc_symid_to_str+0x50>

  return sym_index[sym_id].cstr;
 800db7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db80:	4a06      	ldr	r2, [pc, #24]	; (800db9c <mrbc_symid_to_str+0x64>)
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	4413      	add	r3, r2
 800db86:	685b      	ldr	r3, [r3, #4]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	20000248 	.word	0x20000248
 800db98:	2000884c 	.word	0x2000884c
 800db9c:	20008054 	.word	0x20008054

0800dba0 <mrbc_search_symid>:

  @param  str	C string.
  @return	symbol id. or -1 if not registered.
*/
mrbc_sym mrbc_search_symid( const char *str )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  mrbc_sym sym_id = search_builtin_symbol(str);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff feab 	bl	800d904 <search_builtin_symbol>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	81fb      	strh	r3, [r7, #14]
  if( sym_id >= 0 ) return sym_id;
 800dbb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	db02      	blt.n	800dbc0 <mrbc_search_symid+0x20>
 800dbba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbbe:	e017      	b.n	800dbf0 <mrbc_search_symid+0x50>

  uint16_t h = calc_hash(str);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7ff fe80 	bl	800d8c6 <calc_hash>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	81bb      	strh	r3, [r7, #12]
  sym_id = search_index(h, str);
 800dbca:	89bb      	ldrh	r3, [r7, #12]
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff fede 	bl	800d990 <search_index>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	81fb      	strh	r3, [r7, #14]
  if( sym_id < 0 ) return sym_id;
 800dbd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	da02      	bge.n	800dbe6 <mrbc_search_symid+0x46>
 800dbe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbe4:	e004      	b.n	800dbf0 <mrbc_search_symid+0x50>

  return sym_id + OFFSET_BUILTIN_SYMBOL;
 800dbe6:	89fb      	ldrh	r3, [r7, #14]
 800dbe8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	b21b      	sxth	r3, r3
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <make_nested_symbol_s>:
  @param  buf		output buffer.
  @param  id1		parent class symbol id
  @param  id2		target symbol id
*/
void make_nested_symbol_s( char *buf, mrbc_sym id1, mrbc_sym id2 )
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	807b      	strh	r3, [r7, #2]
 800dc04:	4613      	mov	r3, r2
 800dc06:	803b      	strh	r3, [r7, #0]
  static const int w = sizeof(mrbc_sym) * 2;
  char *p = buf + w * 2;
 800dc08:	4b22      	ldr	r3, [pc, #136]	; (800dc94 <make_nested_symbol_s+0x9c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	461a      	mov	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4413      	add	r3, r2
 800dc14:	60fb      	str	r3, [r7, #12]
  *p = 0;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	701a      	strb	r2, [r3, #0]

  int i;
  for( i = w; i > 0; i-- ) {
 800dc1c:	4b1d      	ldr	r3, [pc, #116]	; (800dc94 <make_nested_symbol_s+0x9c>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	60bb      	str	r3, [r7, #8]
 800dc22:	e012      	b.n	800dc4a <make_nested_symbol_s+0x52>
    *--p = '0' + (id2 & 0x0f);
 800dc24:	883b      	ldrh	r3, [r7, #0]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	f003 030f 	and.w	r3, r3, #15
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	3a01      	subs	r2, #1
 800dc32:	60fa      	str	r2, [r7, #12]
 800dc34:	3330      	adds	r3, #48	; 0x30
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	701a      	strb	r2, [r3, #0]
    id2 >>= 4;
 800dc3c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dc40:	111b      	asrs	r3, r3, #4
 800dc42:	803b      	strh	r3, [r7, #0]
  for( i = w; i > 0; i-- ) {
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	60bb      	str	r3, [r7, #8]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dce9      	bgt.n	800dc24 <make_nested_symbol_s+0x2c>
  }

  for( i = w; i > 0; i-- ) {
 800dc50:	4b10      	ldr	r3, [pc, #64]	; (800dc94 <make_nested_symbol_s+0x9c>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	60bb      	str	r3, [r7, #8]
 800dc56:	e012      	b.n	800dc7e <make_nested_symbol_s+0x86>
    *--p = '0' + (id1 & 0x0f);
 800dc58:	887b      	ldrh	r3, [r7, #2]
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f003 030f 	and.w	r3, r3, #15
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	3a01      	subs	r2, #1
 800dc66:	60fa      	str	r2, [r7, #12]
 800dc68:	3330      	adds	r3, #48	; 0x30
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	701a      	strb	r2, [r3, #0]
    id1 >>= 4;
 800dc70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc74:	111b      	asrs	r3, r3, #4
 800dc76:	807b      	strh	r3, [r7, #2]
  for( i = w; i > 0; i-- ) {
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	60bb      	str	r3, [r7, #8]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	dce9      	bgt.n	800dc58 <make_nested_symbol_s+0x60>
  }
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	0801bdb8 	.word	0x0801bdb8

0800dc98 <mrbc_separate_nested_symid>:
  @param [out]	id1	result 1
  @param [out]	id2	result 2
  @see	make_nested_symbol_s
*/
void mrbc_separate_nested_symid(mrbc_sym sym_id, mrbc_sym *id1, mrbc_sym *id2)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	81fb      	strh	r3, [r7, #14]
  static const int w = sizeof(mrbc_sym) * 2;
  const char *s = mrbc_symid_to_str(sym_id);
 800dca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff ff44 	bl	800db38 <mrbc_symid_to_str>
 800dcb0:	6138      	str	r0, [r7, #16]

  assert( mrbc_is_nested_symid( sym_id ));
 800dcb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7ff fdc0 	bl	800d83c <mrbc_is_nested_symid>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d106      	bne.n	800dcd0 <mrbc_separate_nested_symid+0x38>
 800dcc2:	4b2f      	ldr	r3, [pc, #188]	; (800dd80 <mrbc_separate_nested_symid+0xe8>)
 800dcc4:	4a2f      	ldr	r2, [pc, #188]	; (800dd84 <mrbc_separate_nested_symid+0xec>)
 800dcc6:	f240 113d 	movw	r1, #317	; 0x13d
 800dcca:	482f      	ldr	r0, [pc, #188]	; (800dd88 <mrbc_separate_nested_symid+0xf0>)
 800dccc:	f007 fc60 	bl	8015590 <__assert_func>
  assert( strlen(s) == w*2 );
 800dcd0:	6938      	ldr	r0, [r7, #16]
 800dcd2:	f7f2 fa8f 	bl	80001f4 <strlen>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	4b2c      	ldr	r3, [pc, #176]	; (800dd8c <mrbc_separate_nested_symid+0xf4>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d006      	beq.n	800dcf0 <mrbc_separate_nested_symid+0x58>
 800dce2:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <mrbc_separate_nested_symid+0xf8>)
 800dce4:	4a27      	ldr	r2, [pc, #156]	; (800dd84 <mrbc_separate_nested_symid+0xec>)
 800dce6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800dcea:	4827      	ldr	r0, [pc, #156]	; (800dd88 <mrbc_separate_nested_symid+0xf0>)
 800dcec:	f007 fc50 	bl	8015590 <__assert_func>

  *id1 = 0;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	801a      	strh	r2, [r3, #0]
  int i = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]
  while( i < w ) {
 800dcfa:	e014      	b.n	800dd26 <mrbc_separate_nested_symid+0x8e>
    *id1 = (*id1 << 4) + (s[i++] - '0');
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	011b      	lsls	r3, r3, #4
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	1c59      	adds	r1, r3, #1
 800dd0c:	6179      	str	r1, [r7, #20]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	440b      	add	r3, r1
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	4413      	add	r3, r2
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	3b30      	subs	r3, #48	; 0x30
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	b21a      	sxth	r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	801a      	strh	r2, [r3, #0]
  while( i < w ) {
 800dd26:	4b19      	ldr	r3, [pc, #100]	; (800dd8c <mrbc_separate_nested_symid+0xf4>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	697a      	ldr	r2, [r7, #20]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	dbe5      	blt.n	800dcfc <mrbc_separate_nested_symid+0x64>
  }

  if( id2 == NULL ) return;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d01f      	beq.n	800dd76 <mrbc_separate_nested_symid+0xde>
  *id2 = 0;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	801a      	strh	r2, [r3, #0]
  while( i < w*2 ) {
 800dd3c:	e014      	b.n	800dd68 <mrbc_separate_nested_symid+0xd0>
    *id2 = (*id2 << 4) + (s[i++] - '0');
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	011b      	lsls	r3, r3, #4
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	1c59      	adds	r1, r3, #1
 800dd4e:	6179      	str	r1, [r7, #20]
 800dd50:	4619      	mov	r1, r3
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	440b      	add	r3, r1
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	4413      	add	r3, r2
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	3b30      	subs	r3, #48	; 0x30
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	b21a      	sxth	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	801a      	strh	r2, [r3, #0]
  while( i < w*2 ) {
 800dd68:	4b08      	ldr	r3, [pc, #32]	; (800dd8c <mrbc_separate_nested_symid+0xf4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	dbe4      	blt.n	800dd3e <mrbc_separate_nested_symid+0xa6>
 800dd74:	e000      	b.n	800dd78 <mrbc_separate_nested_symid+0xe0>
  if( id2 == NULL ) return;
 800dd76:	bf00      	nop
  }
}
 800dd78:	3718      	adds	r7, #24
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	0801a0e4 	.word	0x0801a0e4
 800dd84:	0801bdbc 	.word	0x0801bdbc
 800dd88:	0801a104 	.word	0x0801a104
 800dd8c:	0801bdd8 	.word	0x0801bdd8
 800dd90:	0801a120 	.word	0x0801a120

0800dd94 <mrbc_symbol_new>:
  @param  vm	pointer to VM.
  @param  str	String
  @return 	symbol object
*/
mrbc_value mrbc_symbol_new(struct VM *vm, const char *str)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b094      	sub	sp, #80	; 0x50
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
  mrbc_sym sym_id = mrbc_search_symid( str );
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff fefd 	bl	800dba0 <mrbc_search_symid>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  if( sym_id >= 0 ) goto DONE;
 800ddac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	da46      	bge.n	800de42 <mrbc_symbol_new+0xae>

  // create symbol object dynamically.
  int size = strlen(str) + 1;
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7f2 fa1d 	bl	80001f4 <strlen>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	64bb      	str	r3, [r7, #72]	; 0x48
  char *buf = mrbc_raw_alloc_no_free(size);
 800ddc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f3 ffce 	bl	8001d64 <mrbc_raw_alloc_no_free>
 800ddc8:	6478      	str	r0, [r7, #68]	; 0x44
  if( buf == NULL ) return mrbc_nil_value();	// ENOMEM raise?
 800ddca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <mrbc_symbol_new+0x52>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	6053      	str	r3, [r2, #4]
 800ddda:	6093      	str	r3, [r2, #8]
 800dddc:	60d3      	str	r3, [r2, #12]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2201      	movs	r2, #1
 800dde2:	701a      	strb	r2, [r3, #0]

  sym_id += OFFSET_BUILTIN_SYMBOL;

 DONE:
  return mrbc_symbol_value( sym_id );
}
 800dde4:	e03c      	b.n	800de60 <mrbc_symbol_new+0xcc>
  memcpy(buf, str, size);
 800dde6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde8:	461a      	mov	r2, r3
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ddee:	f008 fcaa 	bl	8016746 <memcpy>
  sym_id = add_index( calc_hash(buf), buf );
 800ddf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ddf4:	f7ff fd67 	bl	800d8c6 <calc_hash>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff fe03 	bl	800da08 <add_index>
 800de02:	4603      	mov	r3, r0
 800de04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  if( sym_id < 0 ) {
 800de08:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	da10      	bge.n	800de32 <mrbc_symbol_new+0x9e>
    mrbc_raisef(vm, MRBC_CLASS(Exception),
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a15      	ldr	r2, [pc, #84]	; (800de68 <mrbc_symbol_new+0xd4>)
 800de14:	4915      	ldr	r1, [pc, #84]	; (800de6c <mrbc_symbol_new+0xd8>)
 800de16:	68b8      	ldr	r0, [r7, #8]
 800de18:	f7fd fb48 	bl	800b4ac <mrbc_raisef>
    return mrbc_nil_value();
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	461a      	mov	r2, r3
 800de20:	2300      	movs	r3, #0
 800de22:	6013      	str	r3, [r2, #0]
 800de24:	6053      	str	r3, [r2, #4]
 800de26:	6093      	str	r3, [r2, #8]
 800de28:	60d3      	str	r3, [r2, #12]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2201      	movs	r2, #1
 800de2e:	701a      	strb	r2, [r3, #0]
}
 800de30:	e016      	b.n	800de60 <mrbc_symbol_new+0xcc>
  sym_id += OFFSET_BUILTIN_SYMBOL;
 800de32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800de36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800de40:	e000      	b.n	800de44 <mrbc_symbol_new+0xb0>
  if( sym_id >= 0 ) goto DONE;
 800de42:	bf00      	nop
  return mrbc_symbol_value( sym_id );
 800de44:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	461a      	mov	r2, r3
 800de4c:	2300      	movs	r3, #0
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	6053      	str	r3, [r2, #4]
 800de52:	6093      	str	r3, [r2, #8]
 800de54:	60d3      	str	r3, [r2, #12]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2206      	movs	r2, #6
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6099      	str	r1, [r3, #8]
}
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	3750      	adds	r7, #80	; 0x50
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	0801a134 	.word	0x0801a134
 800de6c:	2000010c 	.word	0x2000010c

0800de70 <c_symbol_all_symbols>:

//================================================================
/*! (method) all_symbols
*/
static void c_symbol_all_symbols(struct VM *vm, mrbc_value v[], int argc)
{
 800de70:	b590      	push	{r4, r7, lr}
 800de72:	b097      	sub	sp, #92	; 0x5c
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
  mrbc_value ret = mrbc_array_new(vm, sym_index_pos);
 800de7c:	4b2d      	ldr	r3, [pc, #180]	; (800df34 <c_symbol_all_symbols+0xc4>)
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800de84:	68f9      	ldr	r1, [r7, #12]
 800de86:	4618      	mov	r0, r3
 800de88:	f7f4 fa53 	bl	8002332 <mrbc_array_new>

  int i;
  for( i = 0; i < sizeof(builtin_symbols) / sizeof(builtin_symbols[0]); i++ ) {
 800de8c:	2300      	movs	r3, #0
 800de8e:	657b      	str	r3, [r7, #84]	; 0x54
 800de90:	e016      	b.n	800dec0 <c_symbol_all_symbols+0x50>
    mrbc_array_push(&ret, &mrbc_symbol_value(i));
 800de92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de96:	2200      	movs	r2, #0
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	605a      	str	r2, [r3, #4]
 800de9c:	609a      	str	r2, [r3, #8]
 800de9e:	60da      	str	r2, [r3, #12]
 800dea0:	2306      	movs	r3, #6
 800dea2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800dea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea8:	63bb      	str	r3, [r7, #56]	; 0x38
 800deaa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800deae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800deb2:	4611      	mov	r1, r2
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f4 fb6c 	bl	8002592 <mrbc_array_push>
  for( i = 0; i < sizeof(builtin_symbols) / sizeof(builtin_symbols[0]); i++ ) {
 800deba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800debc:	3301      	adds	r3, #1
 800debe:	657b      	str	r3, [r7, #84]	; 0x54
 800dec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dec2:	2bd2      	cmp	r3, #210	; 0xd2
 800dec4:	d9e5      	bls.n	800de92 <c_symbol_all_symbols+0x22>
  }

  for( i = 0; i < sym_index_pos; i++ ) {
 800dec6:	2300      	movs	r3, #0
 800dec8:	657b      	str	r3, [r7, #84]	; 0x54
 800deca:	e018      	b.n	800defe <c_symbol_all_symbols+0x8e>
    mrbc_array_push(&ret, &mrbc_symbol_value(i + OFFSET_BUILTIN_SYMBOL));
 800decc:	f107 0320 	add.w	r3, r7, #32
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	605a      	str	r2, [r3, #4]
 800ded6:	609a      	str	r2, [r3, #8]
 800ded8:	60da      	str	r2, [r3, #12]
 800deda:	2306      	movs	r3, #6
 800dedc:	f887 3020 	strb.w	r3, [r7, #32]
 800dee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dee2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dee6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dee8:	f107 0220 	add.w	r2, r7, #32
 800deec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800def0:	4611      	mov	r1, r2
 800def2:	4618      	mov	r0, r3
 800def4:	f7f4 fb4d 	bl	8002592 <mrbc_array_push>
  for( i = 0; i < sym_index_pos; i++ ) {
 800def8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800defa:	3301      	adds	r3, #1
 800defc:	657b      	str	r3, [r7, #84]	; 0x54
 800defe:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <c_symbol_all_symbols+0xc4>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df04:	429a      	cmp	r2, r3
 800df06:	dbe1      	blt.n	800decc <c_symbol_all_symbols+0x5c>
  }
  SET_RETURN(ret);
 800df08:	f107 0410 	add.w	r4, r7, #16
 800df0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df16:	68b8      	ldr	r0, [r7, #8]
 800df18:	f7ff fc4a 	bl	800d7b0 <mrbc_decref>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	461c      	mov	r4, r3
 800df20:	f107 0310 	add.w	r3, r7, #16
 800df24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800df2a:	bf00      	nop
 800df2c:	375c      	adds	r7, #92	; 0x5c
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd90      	pop	{r4, r7, pc}
 800df32:	bf00      	nop
 800df34:	2000884c 	.word	0x2000884c

0800df38 <c_symbol_inspect>:
#if MRBC_USE_STRING
//================================================================
/*! (method) inspect
*/
static void c_symbol_inspect(struct VM *vm, mrbc_value v[], int argc)
{
 800df38:	b590      	push	{r4, r7, lr}
 800df3a:	b08b      	sub	sp, #44	; 0x2c
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	61f8      	str	r0, [r7, #28]
 800df40:	61b9      	str	r1, [r7, #24]
 800df42:	617a      	str	r2, [r7, #20]
  const char *s = mrbc_symid_to_str( mrbc_symbol(v[0]) );
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	b21b      	sxth	r3, r3
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7ff fdf4 	bl	800db38 <mrbc_symid_to_str>
 800df50:	6278      	str	r0, [r7, #36]	; 0x24
  v[0] = mrbc_string_new_cstr(vm, ":");
 800df52:	69bc      	ldr	r4, [r7, #24]
 800df54:	463b      	mov	r3, r7
 800df56:	4a08      	ldr	r2, [pc, #32]	; (800df78 <c_symbol_inspect+0x40>)
 800df58:	69f9      	ldr	r1, [r7, #28]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff fc88 	bl	800d870 <mrbc_string_new_cstr>
 800df60:	463b      	mov	r3, r7
 800df62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_string_append_cstr(&v[0], s);
 800df68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df6a:	69b8      	ldr	r0, [r7, #24]
 800df6c:	f7ff fc98 	bl	800d8a0 <mrbc_string_append_cstr>
}
 800df70:	bf00      	nop
 800df72:	372c      	adds	r7, #44	; 0x2c
 800df74:	46bd      	mov	sp, r7
 800df76:	bd90      	pop	{r4, r7, pc}
 800df78:	0801a158 	.word	0x0801a158

0800df7c <c_symbol_to_s>:

//================================================================
/*! (method) to_s
*/
static void c_symbol_to_s(struct VM *vm, mrbc_value v[], int argc)
{
 800df7c:	b590      	push	{r4, r7, lr}
 800df7e:	b089      	sub	sp, #36	; 0x24
 800df80:	af00      	add	r7, sp, #0
 800df82:	61f8      	str	r0, [r7, #28]
 800df84:	61b9      	str	r1, [r7, #24]
 800df86:	617a      	str	r2, [r7, #20]
  if( v[0].tt == MRBC_TT_CLASS ) {
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	f993 3000 	ldrsb.w	r3, [r3]
 800df8e:	2b07      	cmp	r3, #7
 800df90:	d112      	bne.n	800dfb8 <c_symbol_to_s+0x3c>
    v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( v[0].cls->sym_id ));
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff fdcc 	bl	800db38 <mrbc_symid_to_str>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	69bc      	ldr	r4, [r7, #24]
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	69f9      	ldr	r1, [r7, #28]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff fc61 	bl	800d870 <mrbc_string_new_cstr>
 800dfae:	463b      	mov	r3, r7
 800dfb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return;
 800dfb6:	e010      	b.n	800dfda <c_symbol_to_s+0x5e>
  }

  v[0] = mrbc_string_new_cstr(vm, mrbc_symid_to_str( mrbc_symbol(v[0]) ));
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	b21b      	sxth	r3, r3
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff fdba 	bl	800db38 <mrbc_symid_to_str>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	69bc      	ldr	r4, [r7, #24]
 800dfc8:	463b      	mov	r3, r7
 800dfca:	69f9      	ldr	r1, [r7, #28]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff fc4f 	bl	800d870 <mrbc_string_new_cstr>
 800dfd2:	463b      	mov	r3, r7
 800dfd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dfd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800dfda:	3724      	adds	r7, #36	; 0x24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd90      	pop	{r4, r7, pc}

0800dfe0 <mrbc_string_compare>:
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  int len = (v1->string->size < v2->string->size) ?
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	889a      	ldrh	r2, [r3, #4]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	889b      	ldrh	r3, [r3, #4]
    v1->string->size : v2->string->size;
 800dff6:	4293      	cmp	r3, r2
 800dff8:	bf28      	it	cs
 800dffa:	4613      	movcs	r3, r2
 800dffc:	b29b      	uxth	r3, r3
  int len = (v1->string->size < v2->string->size) ?
 800dffe:	60fb      	str	r3, [r7, #12]
  int res = memcmp(v1->string->data, v2->string->data, len);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	6898      	ldr	r0, [r3, #8]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	4619      	mov	r1, r3
 800e010:	f008 fad5 	bl	80165be <memcmp>
 800e014:	60b8      	str	r0, [r7, #8]
  if( res != 0 ) return res;
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <mrbc_string_compare+0x40>
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	e007      	b.n	800e030 <mrbc_string_compare+0x50>
  return v1->string->size - v2->string->size;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	889b      	ldrh	r3, [r3, #4]
 800e026:	461a      	mov	r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	889b      	ldrh	r3, [r3, #4]
 800e02e:	1ad3      	subs	r3, r2, r3
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <mrbc_compare>:
  @retval 0	v1 == v2
  @retval plus	v1 >  v2
  @retval minus	v1 <  v2
*/
int mrbc_compare(const mrbc_value *v1, const mrbc_value *v2)
{
 800e038:	b590      	push	{r4, r7, lr}
 800e03a:	b08d      	sub	sp, #52	; 0x34
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
#if MRBC_USE_FLOAT
  mrbc_float_t d1, d2;
#endif

  // if TT_XXX is different
  if( mrbc_type(*v1) != mrbc_type(*v2) ) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f993 2000 	ldrsb.w	r2, [r3]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f993 3000 	ldrsb.w	r3, [r3]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d050      	beq.n	800e0f4 <mrbc_compare+0xbc>
#if MRBC_USE_FLOAT
    // but Numeric?
    if( mrbc_type(*v1) == MRBC_TT_INTEGER && mrbc_type(*v2) == MRBC_TT_FLOAT ) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f993 3000 	ldrsb.w	r3, [r3]
 800e058:	2b04      	cmp	r3, #4
 800e05a:	d113      	bne.n	800e084 <mrbc_compare+0x4c>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	f993 3000 	ldrsb.w	r3, [r3]
 800e062:	2b05      	cmp	r3, #5
 800e064:	d10e      	bne.n	800e084 <mrbc_compare+0x4c>
      d1 = v1->i;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7f2 fa72 	bl	8000554 <__aeabi_i2d>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      d2 = v2->d;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e07e:	e9c7 2308 	strd	r2, r3, [r7, #32]
      goto CMP_FLOAT;
 800e082:	e0cf      	b.n	800e224 <mrbc_compare+0x1ec>
    }
    if( mrbc_type(*v1) == MRBC_TT_FLOAT && mrbc_type(*v2) == MRBC_TT_INTEGER ) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f993 3000 	ldrsb.w	r3, [r3]
 800e08a:	2b05      	cmp	r3, #5
 800e08c:	d113      	bne.n	800e0b6 <mrbc_compare+0x7e>
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	f993 3000 	ldrsb.w	r3, [r3]
 800e094:	2b04      	cmp	r3, #4
 800e096:	d10e      	bne.n	800e0b6 <mrbc_compare+0x7e>
      d1 = v1->d;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e09e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      d2 = v2->i;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	689b      	ldr	r3, [r3, #8]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7f2 fa54 	bl	8000554 <__aeabi_i2d>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
      goto CMP_FLOAT;
 800e0b4:	e0b6      	b.n	800e224 <mrbc_compare+0x1ec>
    }
#endif

    // leak Empty?
    if((mrbc_type(*v1) == MRBC_TT_EMPTY && mrbc_type(*v2) == MRBC_TT_NIL) ||
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f993 3000 	ldrsb.w	r3, [r3]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d104      	bne.n	800e0ca <mrbc_compare+0x92>
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	f993 3000 	ldrsb.w	r3, [r3]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d009      	beq.n	800e0de <mrbc_compare+0xa6>
       (mrbc_type(*v1) == MRBC_TT_NIL   && mrbc_type(*v2) == MRBC_TT_EMPTY)) return 0;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f993 3000 	ldrsb.w	r3, [r3]
    if((mrbc_type(*v1) == MRBC_TT_EMPTY && mrbc_type(*v2) == MRBC_TT_NIL) ||
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d106      	bne.n	800e0e2 <mrbc_compare+0xaa>
       (mrbc_type(*v1) == MRBC_TT_NIL   && mrbc_type(*v2) == MRBC_TT_EMPTY)) return 0;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	f993 3000 	ldrsb.w	r3, [r3]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <mrbc_compare+0xaa>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e0ba      	b.n	800e258 <mrbc_compare+0x220>

    // other case
    return mrbc_type(*v1) - mrbc_type(*v2);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f993 3000 	ldrsb.w	r3, [r3]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	f993 3000 	ldrsb.w	r3, [r3]
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	e0b1      	b.n	800e258 <mrbc_compare+0x220>
  }

  // check value
  switch( mrbc_type(*v1) ) {
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f993 3000 	ldrsb.w	r3, [r3]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	2b0c      	cmp	r3, #12
 800e0fe:	f200 808f 	bhi.w	800e220 <mrbc_compare+0x1e8>
 800e102:	a201      	add	r2, pc, #4	; (adr r2, 800e108 <mrbc_compare+0xd0>)
 800e104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e108:	0800e13d 	.word	0x0800e13d
 800e10c:	0800e13d 	.word	0x0800e13d
 800e110:	0800e13d 	.word	0x0800e13d
 800e114:	0800e141 	.word	0x0800e141
 800e118:	0800e1b3 	.word	0x0800e1b3
 800e11c:	0800e14d 	.word	0x0800e14d
 800e120:	0800e1c9 	.word	0x0800e1c9
 800e124:	0800e1c9 	.word	0x0800e1c9
 800e128:	0800e1c9 	.word	0x0800e1c9
 800e12c:	0800e1f1 	.word	0x0800e1f1
 800e130:	0800e1fd 	.word	0x0800e1fd
 800e134:	0800e209 	.word	0x0800e209
 800e138:	0800e215 	.word	0x0800e215
  case MRBC_TT_NIL:
  case MRBC_TT_FALSE:
  case MRBC_TT_TRUE:
    return 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	e08b      	b.n	800e258 <mrbc_compare+0x220>

  case MRBC_TT_INTEGER:
    return mrbc_integer(*v1) - mrbc_integer(*v2);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	689a      	ldr	r2, [r3, #8]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	e085      	b.n	800e258 <mrbc_compare+0x220>

  case MRBC_TT_SYMBOL: {
    const char *str1 = mrbc_symid_to_str(mrbc_symbol(*v1));
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	b21b      	sxth	r3, r3
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff fcf0 	bl	800db38 <mrbc_symid_to_str>
 800e158:	61f8      	str	r0, [r7, #28]
    const char *str2 = mrbc_symid_to_str(mrbc_symbol(*v2));
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	b21b      	sxth	r3, r3
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff fce9 	bl	800db38 <mrbc_symid_to_str>
 800e166:	61b8      	str	r0, [r7, #24]
    int diff = strlen(str1) - strlen(str2);
 800e168:	69f8      	ldr	r0, [r7, #28]
 800e16a:	f7f2 f843 	bl	80001f4 <strlen>
 800e16e:	4604      	mov	r4, r0
 800e170:	69b8      	ldr	r0, [r7, #24]
 800e172:	f7f2 f83f 	bl	80001f4 <strlen>
 800e176:	4603      	mov	r3, r0
 800e178:	1ae3      	subs	r3, r4, r3
 800e17a:	617b      	str	r3, [r7, #20]
    int len = diff < 0 ? strlen(str1) : strlen(str2);
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	da04      	bge.n	800e18c <mrbc_compare+0x154>
 800e182:	69f8      	ldr	r0, [r7, #28]
 800e184:	f7f2 f836 	bl	80001f4 <strlen>
 800e188:	4603      	mov	r3, r0
 800e18a:	e003      	b.n	800e194 <mrbc_compare+0x15c>
 800e18c:	69b8      	ldr	r0, [r7, #24]
 800e18e:	f7f2 f831 	bl	80001f4 <strlen>
 800e192:	4603      	mov	r3, r0
 800e194:	613b      	str	r3, [r7, #16]
    int res = memcmp(str1, str2, len);
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	461a      	mov	r2, r3
 800e19a:	69b9      	ldr	r1, [r7, #24]
 800e19c:	69f8      	ldr	r0, [r7, #28]
 800e19e:	f008 fa0e 	bl	80165be <memcmp>
 800e1a2:	60f8      	str	r0, [r7, #12]
    return (res != 0) ? res : diff;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <mrbc_compare+0x176>
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	e054      	b.n	800e258 <mrbc_compare+0x220>
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	e052      	b.n	800e258 <mrbc_compare+0x220>
  }

#if MRBC_USE_FLOAT
  case MRBC_TT_FLOAT:
    d1 = mrbc_float(*v1);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e1b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    d2 = mrbc_float(*v2);
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e1c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    goto CMP_FLOAT;
 800e1c6:	e02d      	b.n	800e224 <mrbc_compare+0x1ec>
#endif

  case MRBC_TT_CLASS:
  case MRBC_TT_OBJECT:
  case MRBC_TT_PROC:
    return (v1->cls > v2->cls) * 2 - (v1->cls != v2->cls);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	689a      	ldr	r2, [r3, #8]
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d901      	bls.n	800e1d8 <mrbc_compare+0x1a0>
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	e000      	b.n	800e1da <mrbc_compare+0x1a2>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	6891      	ldr	r1, [r2, #8]
 800e1de:	683a      	ldr	r2, [r7, #0]
 800e1e0:	6892      	ldr	r2, [r2, #8]
 800e1e2:	4291      	cmp	r1, r2
 800e1e4:	bf14      	ite	ne
 800e1e6:	2201      	movne	r2, #1
 800e1e8:	2200      	moveq	r2, #0
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	1a9b      	subs	r3, r3, r2
 800e1ee:	e033      	b.n	800e258 <mrbc_compare+0x220>

  case MRBC_TT_ARRAY:
    return mrbc_array_compare( v1, v2 );
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7f4 fbbb 	bl	800296e <mrbc_array_compare>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	e02d      	b.n	800e258 <mrbc_compare+0x220>

#if MRBC_USE_STRING
  case MRBC_TT_STRING:
    return mrbc_string_compare( v1, v2 );
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff feee 	bl	800dfe0 <mrbc_string_compare>
 800e204:	4603      	mov	r3, r0
 800e206:	e027      	b.n	800e258 <mrbc_compare+0x220>
#endif

  case MRBC_TT_RANGE:
    return mrbc_range_compare( v1, v2 );
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7f8 fd46 	bl	8006c9c <mrbc_range_compare>
 800e210:	4603      	mov	r3, r0
 800e212:	e021      	b.n	800e258 <mrbc_compare+0x220>

  case MRBC_TT_HASH:
    return mrbc_hash_compare( v1, v2 );
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7f5 ffa5 	bl	8004166 <mrbc_hash_compare>
 800e21c:	4603      	mov	r3, r0
 800e21e:	e01b      	b.n	800e258 <mrbc_compare+0x220>

  default:
    return 1;
 800e220:	2301      	movs	r3, #1
 800e222:	e019      	b.n	800e258 <mrbc_compare+0x220>
  }

#if MRBC_USE_FLOAT
 CMP_FLOAT:
  return -1 + (d1 == d2) + (d1 > d2)*2;	// caution: NaN == NaN is false
 800e224:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e228:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e22c:	f7f2 fc64 	bl	8000af8 <__aeabi_dcmpeq>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <mrbc_compare+0x202>
 800e236:	2400      	movs	r4, #0
 800e238:	e001      	b.n	800e23e <mrbc_compare+0x206>
 800e23a:	f04f 34ff 	mov.w	r4, #4294967295
 800e23e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e242:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e246:	f7f2 fc7f 	bl	8000b48 <__aeabi_dcmpgt>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d001      	beq.n	800e254 <mrbc_compare+0x21c>
 800e250:	2302      	movs	r3, #2
 800e252:	e000      	b.n	800e256 <mrbc_compare+0x21e>
 800e254:	2300      	movs	r3, #0
 800e256:	4423      	add	r3, r4
#endif
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3734      	adds	r7, #52	; 0x34
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd90      	pop	{r4, r7, pc}

0800e260 <mrbc_atoi>:
  @param  s	source string.
  @param  base	n base.
  @return	result.
*/
mrbc_int_t mrbc_atoi( const char *s, int base )
{
 800e260:	b480      	push	{r7}
 800e262:	b087      	sub	sp, #28
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  int ret = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]
  int sign = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	613b      	str	r3, [r7, #16]

 REDO:
  switch( *s ) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b2d      	cmp	r3, #45	; 0x2d
 800e278:	d006      	beq.n	800e288 <mrbc_atoi+0x28>
 800e27a:	2b2d      	cmp	r3, #45	; 0x2d
 800e27c:	dc31      	bgt.n	800e2e2 <mrbc_atoi+0x82>
 800e27e:	2b20      	cmp	r3, #32
 800e280:	d008      	beq.n	800e294 <mrbc_atoi+0x34>
 800e282:	2b2b      	cmp	r3, #43	; 0x2b
 800e284:	d002      	beq.n	800e28c <mrbc_atoi+0x2c>
 800e286:	e009      	b.n	800e29c <mrbc_atoi+0x3c>
  case '-':
    sign = 1;
 800e288:	2301      	movs	r3, #1
 800e28a:	613b      	str	r3, [r7, #16]
    // fall through.
  case '+':
    s++;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3301      	adds	r3, #1
 800e290:	607b      	str	r3, [r7, #4]
    break;
 800e292:	e003      	b.n	800e29c <mrbc_atoi+0x3c>

  case ' ':
    s++;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	3301      	adds	r3, #1
 800e298:	607b      	str	r3, [r7, #4]
    goto REDO;
 800e29a:	e7ea      	b.n	800e272 <mrbc_atoi+0x12>
  }

  int ch;
  while( (ch = *s++) != '\0' ) {
 800e29c:	e021      	b.n	800e2e2 <mrbc_atoi+0x82>
    int n;

    if( 'a' <= ch ) {
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b60      	cmp	r3, #96	; 0x60
 800e2a2:	dd03      	ble.n	800e2ac <mrbc_atoi+0x4c>
      n = ch - 'a' + 10;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	3b57      	subs	r3, #87	; 0x57
 800e2a8:	60fb      	str	r3, [r7, #12]
 800e2aa:	e00f      	b.n	800e2cc <mrbc_atoi+0x6c>
    } else
    if( 'A' <= ch ) {
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	2b40      	cmp	r3, #64	; 0x40
 800e2b0:	dd03      	ble.n	800e2ba <mrbc_atoi+0x5a>
      n = ch - 'A' + 10;
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	3b37      	subs	r3, #55	; 0x37
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	e008      	b.n	800e2cc <mrbc_atoi+0x6c>
    } else
    if( '0' <= ch && ch <= '9' ) {
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2be:	dd1a      	ble.n	800e2f6 <mrbc_atoi+0x96>
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2b39      	cmp	r3, #57	; 0x39
 800e2c4:	dc17      	bgt.n	800e2f6 <mrbc_atoi+0x96>
      n = ch - '0';
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	3b30      	subs	r3, #48	; 0x30
 800e2ca:	60fb      	str	r3, [r7, #12]
    } else {
      break;
    }
    if( n >= base ) break;
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	da0f      	bge.n	800e2f4 <mrbc_atoi+0x94>

    ret = ret * base + n;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	4413      	add	r3, r2
 800e2e0:	617b      	str	r3, [r7, #20]
  while( (ch = *s++) != '\0' ) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	1c5a      	adds	r2, r3, #1
 800e2e6:	607a      	str	r2, [r7, #4]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	60bb      	str	r3, [r7, #8]
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1d5      	bne.n	800e29e <mrbc_atoi+0x3e>
 800e2f2:	e000      	b.n	800e2f6 <mrbc_atoi+0x96>
    if( n >= base ) break;
 800e2f4:	bf00      	nop
  }

  if( sign ) ret = -ret;
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <mrbc_atoi+0xa2>
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	425b      	negs	r3, r3
 800e300:	617b      	str	r3, [r7, #20]

  return ret;
 800e302:	697b      	ldr	r3, [r7, #20]
}
 800e304:	4618      	mov	r0, r3
 800e306:	371c      	adds	r7, #28
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <mrbc_strcpy>:
  @param  destsize	buffer size.
  @param  src		source.
  @return int		number of bytes copied.
*/
int mrbc_strcpy( char *dest, int destsize, const char *src )
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  int n = destsize;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	617b      	str	r3, [r7, #20]
  if( n <= 0 ) return 0;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	2b00      	cmp	r3, #0
 800e324:	dc0c      	bgt.n	800e340 <mrbc_strcpy+0x30>
 800e326:	2300      	movs	r3, #0
 800e328:	e019      	b.n	800e35e <mrbc_strcpy+0x4e>

  while( --n != 0 ) {
    if( (*dest++ = *src++) == 0 ) goto RETURN;
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	1c53      	adds	r3, r2, #1
 800e32e:	607b      	str	r3, [r7, #4]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	1c59      	adds	r1, r3, #1
 800e334:	60f9      	str	r1, [r7, #12]
 800e336:	7812      	ldrb	r2, [r2, #0]
 800e338:	701a      	strb	r2, [r3, #0]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d009      	beq.n	800e354 <mrbc_strcpy+0x44>
  while( --n != 0 ) {
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	3b01      	subs	r3, #1
 800e344:	617b      	str	r3, [r7, #20]
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1ee      	bne.n	800e32a <mrbc_strcpy+0x1a>
  }
  *dest = 0;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	701a      	strb	r2, [r3, #0]
 800e352:	e000      	b.n	800e356 <mrbc_strcpy+0x46>
    if( (*dest++ = *src++) == 0 ) goto RETURN;
 800e354:	bf00      	nop

 RETURN:
  return destsize - n - 1;
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	3b01      	subs	r3, #1
}
 800e35e:	4618      	mov	r0, r3
 800e360:	371c      	adds	r7, #28
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
	...

0800e36c <mrbc_incref>:
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f993 3000 	ldrsb.w	r3, [r3]
 800e37a:	2b07      	cmp	r3, #7
 800e37c:	dd1e      	ble.n	800e3bc <mrbc_incref+0x50>
  assert( v->obj->ref_count != 0 );
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	885b      	ldrh	r3, [r3, #2]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d106      	bne.n	800e396 <mrbc_incref+0x2a>
 800e388:	4b0e      	ldr	r3, [pc, #56]	; (800e3c4 <mrbc_incref+0x58>)
 800e38a:	4a0f      	ldr	r2, [pc, #60]	; (800e3c8 <mrbc_incref+0x5c>)
 800e38c:	f240 11c3 	movw	r1, #451	; 0x1c3
 800e390:	480e      	ldr	r0, [pc, #56]	; (800e3cc <mrbc_incref+0x60>)
 800e392:	f007 f8fd 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xff );	// check max value.
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	885b      	ldrh	r3, [r3, #2]
 800e39c:	2bff      	cmp	r3, #255	; 0xff
 800e39e:	d106      	bne.n	800e3ae <mrbc_incref+0x42>
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <mrbc_incref+0x64>)
 800e3a2:	4a09      	ldr	r2, [pc, #36]	; (800e3c8 <mrbc_incref+0x5c>)
 800e3a4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800e3a8:	4808      	ldr	r0, [pc, #32]	; (800e3cc <mrbc_incref+0x60>)
 800e3aa:	f007 f8f1 	bl	8015590 <__assert_func>
  v->obj->ref_count++;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	885a      	ldrh	r2, [r3, #2]
 800e3b4:	3201      	adds	r2, #1
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	805a      	strh	r2, [r3, #2]
 800e3ba:	e000      	b.n	800e3be <mrbc_incref+0x52>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e3bc:	bf00      	nop
}
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	0801a190 	.word	0x0801a190
 800e3c8:	0801be24 	.word	0x0801be24
 800e3cc:	0801a1a8 	.word	0x0801a1a8
 800e3d0:	0801a1c4 	.word	0x0801a1c4

0800e3d4 <mrbc_decref>:
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f993 3000 	ldrsb.w	r3, [r3]
 800e3e2:	2b07      	cmp	r3, #7
 800e3e4:	dd2c      	ble.n	800e440 <mrbc_decref+0x6c>
  assert( v->obj->ref_count != 0 );
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	885b      	ldrh	r3, [r3, #2]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d106      	bne.n	800e3fe <mrbc_decref+0x2a>
 800e3f0:	4b16      	ldr	r3, [pc, #88]	; (800e44c <mrbc_decref+0x78>)
 800e3f2:	4a17      	ldr	r2, [pc, #92]	; (800e450 <mrbc_decref+0x7c>)
 800e3f4:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800e3f8:	4816      	ldr	r0, [pc, #88]	; (800e454 <mrbc_decref+0x80>)
 800e3fa:	f007 f8c9 	bl	8015590 <__assert_func>
  assert( v->obj->ref_count != 0xffff );	// check broken data.
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	885b      	ldrh	r3, [r3, #2]
 800e404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e408:	4293      	cmp	r3, r2
 800e40a:	d106      	bne.n	800e41a <mrbc_decref+0x46>
 800e40c:	4b12      	ldr	r3, [pc, #72]	; (800e458 <mrbc_decref+0x84>)
 800e40e:	4a10      	ldr	r2, [pc, #64]	; (800e450 <mrbc_decref+0x7c>)
 800e410:	f240 11d3 	movw	r1, #467	; 0x1d3
 800e414:	480f      	ldr	r0, [pc, #60]	; (800e454 <mrbc_decref+0x80>)
 800e416:	f007 f8bb 	bl	8015590 <__assert_func>
  if( --v->obj->ref_count != 0 ) return;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	885a      	ldrh	r2, [r3, #2]
 800e420:	3a01      	subs	r2, #1
 800e422:	b292      	uxth	r2, r2
 800e424:	805a      	strh	r2, [r3, #2]
 800e426:	885b      	ldrh	r3, [r3, #2]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10b      	bne.n	800e444 <mrbc_decref+0x70>
  (*mrbc_delfunc[v->tt])(v);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f993 3000 	ldrsb.w	r3, [r3]
 800e432:	461a      	mov	r2, r3
 800e434:	4b09      	ldr	r3, [pc, #36]	; (800e45c <mrbc_decref+0x88>)
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	4798      	blx	r3
 800e43e:	e002      	b.n	800e446 <mrbc_decref+0x72>
  if( v->tt <= MRBC_TT_INC_DEC_THRESHOLD ) return;
 800e440:	bf00      	nop
 800e442:	e000      	b.n	800e446 <mrbc_decref+0x72>
  if( --v->obj->ref_count != 0 ) return;
 800e444:	bf00      	nop
}
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	0801a190 	.word	0x0801a190
 800e450:	0801be30 	.word	0x0801be30
 800e454:	0801a1a8 	.word	0x0801a1a8
 800e458:	0801a1e0 	.word	0x0801a1e0
 800e45c:	0801bde8 	.word	0x0801bde8

0800e460 <mrbc_decref_empty>:
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  mrbc_decref(v);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff ffb3 	bl	800e3d4 <mrbc_decref>
  v->tt = MRBC_TT_EMPTY;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	701a      	strb	r2, [r3, #0]
}
 800e474:	bf00      	nop
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <mrbc_is_nested_symid>:
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	4603      	mov	r3, r0
 800e484:	80fb      	strh	r3, [r7, #6]
  const char *s = mrbc_symid_to_str(sym_id);
 800e486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff fb54 	bl	800db38 <mrbc_symid_to_str>
 800e490:	60f8      	str	r0, [r7, #12]
  return ('0' <= s[0] && s[0] <= ('9'+6));
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	2b2f      	cmp	r3, #47	; 0x2f
 800e498:	d905      	bls.n	800e4a6 <mrbc_is_nested_symid+0x2a>
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b3f      	cmp	r3, #63	; 0x3f
 800e4a0:	d801      	bhi.n	800e4a6 <mrbc_is_nested_symid+0x2a>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <mrbc_is_nested_symid+0x2c>
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <find_class_by_object>:
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  assert( mrbc_type(*obj) >= 0 );
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f993 3000 	ldrsb.w	r3, [r3]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	da05      	bge.n	800e4ce <find_class_by_object+0x1e>
 800e4c2:	4b20      	ldr	r3, [pc, #128]	; (800e544 <find_class_by_object+0x94>)
 800e4c4:	4a20      	ldr	r2, [pc, #128]	; (800e548 <find_class_by_object+0x98>)
 800e4c6:	21bf      	movs	r1, #191	; 0xbf
 800e4c8:	4820      	ldr	r0, [pc, #128]	; (800e54c <find_class_by_object+0x9c>)
 800e4ca:	f007 f861 	bl	8015590 <__assert_func>
  assert( mrbc_type(*obj) <= MRBC_TT_MAXVAL );
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f993 3000 	ldrsb.w	r3, [r3]
 800e4d4:	2b0e      	cmp	r3, #14
 800e4d6:	dd05      	ble.n	800e4e4 <find_class_by_object+0x34>
 800e4d8:	4b1d      	ldr	r3, [pc, #116]	; (800e550 <find_class_by_object+0xa0>)
 800e4da:	4a1b      	ldr	r2, [pc, #108]	; (800e548 <find_class_by_object+0x98>)
 800e4dc:	21c0      	movs	r1, #192	; 0xc0
 800e4de:	481b      	ldr	r0, [pc, #108]	; (800e54c <find_class_by_object+0x9c>)
 800e4e0:	f007 f856 	bl	8015590 <__assert_func>
  mrbc_class *cls = mrbc_class_tbl[ mrbc_type(*obj) ];
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f993 3000 	ldrsb.w	r3, [r3]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	4b19      	ldr	r3, [pc, #100]	; (800e554 <find_class_by_object+0xa4>)
 800e4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f2:	60fb      	str	r3, [r7, #12]
  if( !cls ) {
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d11f      	bne.n	800e53a <find_class_by_object+0x8a>
    switch( mrbc_type(*obj) ) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f993 3000 	ldrsb.w	r3, [r3]
 800e500:	2b0e      	cmp	r3, #14
 800e502:	d00f      	beq.n	800e524 <find_class_by_object+0x74>
 800e504:	2b0e      	cmp	r3, #14
 800e506:	dc12      	bgt.n	800e52e <find_class_by_object+0x7e>
 800e508:	2b07      	cmp	r3, #7
 800e50a:	d002      	beq.n	800e512 <find_class_by_object+0x62>
 800e50c:	2b08      	cmp	r3, #8
 800e50e:	d004      	beq.n	800e51a <find_class_by_object+0x6a>
 800e510:	e00d      	b.n	800e52e <find_class_by_object+0x7e>
    case MRBC_TT_CLASS:		cls = obj->cls;			break;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	689b      	ldr	r3, [r3, #8]
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	e00f      	b.n	800e53a <find_class_by_object+0x8a>
    case MRBC_TT_OBJECT:	cls = obj->instance->cls;	break;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	e00a      	b.n	800e53a <find_class_by_object+0x8a>
    case MRBC_TT_EXCEPTION:	cls = obj->exception->cls;	break;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	689b      	ldr	r3, [r3, #8]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	e005      	b.n	800e53a <find_class_by_object+0x8a>
      assert(!"Invalid value type.");
 800e52e:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <find_class_by_object+0xa8>)
 800e530:	4a05      	ldr	r2, [pc, #20]	; (800e548 <find_class_by_object+0x98>)
 800e532:	21c9      	movs	r1, #201	; 0xc9
 800e534:	4805      	ldr	r0, [pc, #20]	; (800e54c <find_class_by_object+0x9c>)
 800e536:	f007 f82b 	bl	8015590 <__assert_func>
  return cls;
 800e53a:	68fb      	ldr	r3, [r7, #12]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	0801a1fc 	.word	0x0801a1fc
 800e548:	0801be3c 	.word	0x0801be3c
 800e54c:	0801a214 	.word	0x0801a214
 800e550:	0801a230 	.word	0x0801a230
 800e554:	0801ad44 	.word	0x0801ad44
 800e558:	0801a254 	.word	0x0801a254

0800e55c <mrbc_array_size>:
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  return ary->array->n_stored;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	88db      	ldrh	r3, [r3, #6]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	370c      	adds	r7, #12
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <mrbc_array_delete_handle>:
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
  mrbc_array *h = ary->array;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	60fb      	str	r3, [r7, #12]
  mrbc_raw_free(h->data);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f3 fc67 	bl	8001e5c <mrbc_raw_free>
  mrbc_raw_free(h);
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f7f3 fc64 	bl	8001e5c <mrbc_raw_free>
}
 800e594:	bf00      	nop
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <mrbc_hash_size>:
static inline int mrbc_hash_size(const mrbc_value *hash) {
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  return hash->hash->n_stored / 2;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	88db      	ldrh	r3, [r3, #6]
 800e5aa:	085b      	lsrs	r3, r3, #1
 800e5ac:	b29b      	uxth	r3, r3
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <mrbc_hash_iterator_new>:
{
 800e5ba:	b490      	push	{r4, r7}
 800e5bc:	b086      	sub	sp, #24
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
  ite.target = v->hash;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	60fb      	str	r3, [r7, #12]
  ite.point = v->hash->data;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	613b      	str	r3, [r7, #16]
  ite.p_end = ite.point + v->hash->n_stored;
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	88db      	ldrh	r3, [r3, #6]
 800e5da:	011b      	lsls	r3, r3, #4
 800e5dc:	4413      	add	r3, r2
 800e5de:	617b      	str	r3, [r7, #20]
  return ite;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	461c      	mov	r4, r3
 800e5e4:	f107 030c 	add.w	r3, r7, #12
 800e5e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e5ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	3718      	adds	r7, #24
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bc90      	pop	{r4, r7}
 800e5f8:	4770      	bx	lr

0800e5fa <mrbc_hash_i_has_next>:
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b083      	sub	sp, #12
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  return ite->point < ite->p_end;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	bf34      	ite	cc
 800e60e:	2301      	movcc	r3, #1
 800e610:	2300      	movcs	r3, #0
 800e612:	b2db      	uxtb	r3, r3
}
 800e614:	4618      	mov	r0, r3
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <mrbc_hash_i_next>:
{
 800e620:	b480      	push	{r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  mrbc_value *ret = ite->point;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	60fb      	str	r3, [r7, #12]
  ite->point += 2;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	f103 0220 	add.w	r2, r3, #32
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	605a      	str	r2, [r3, #4]
  return ret;
 800e63a:	68fb      	ldr	r3, [r7, #12]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3714      	adds	r7, #20
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <bin_to_uint32>:
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  uint32_t x = *((uint32_t *)s);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	60fb      	str	r3, [r7, #12]
  x = (x << 24) | ((x & 0xff00) << 8) | ((x >> 8) & 0xff00) | (x >> 24);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	061a      	lsls	r2, r3, #24
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	021b      	lsls	r3, r3, #8
 800e65e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e662:	431a      	orrs	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	0a1b      	lsrs	r3, r3, #8
 800e668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e66c:	431a      	orrs	r2, r3
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	0e1b      	lsrs	r3, r3, #24
 800e672:	4313      	orrs	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]
  return x;
 800e676:	68fb      	ldr	r3, [r7, #12]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3714      	adds	r7, #20
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <send_by_name>:
  @param  a		operand a
  @param  c		bit: 0-3=narg, 4-7=karg, 8=have block param flag.
  @retval 0  No error.
*/
static void send_by_name( struct VM *vm, mrbc_sym sym_id, int a, int c )
{
 800e684:	b590      	push	{r4, r7, lr}
 800e686:	b09f      	sub	sp, #124	; 0x7c
 800e688:	af02      	add	r7, sp, #8
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	607a      	str	r2, [r7, #4]
 800e68e:	603b      	str	r3, [r7, #0]
 800e690:	460b      	mov	r3, r1
 800e692:	817b      	strh	r3, [r7, #10]
  int narg = c & 0x0f;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	f003 030f 	and.w	r3, r3, #15
 800e69a:	66fb      	str	r3, [r7, #108]	; 0x6c
  int karg = (c >> 4) & 0x0f;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	111b      	asrs	r3, r3, #4
 800e6a0:	f003 030f 	and.w	r3, r3, #15
 800e6a4:	663b      	str	r3, [r7, #96]	; 0x60
  mrbc_value *regs = vm->cur_regs;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	695b      	ldr	r3, [r3, #20]
 800e6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  mrbc_value *recv = regs + a;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	011b      	lsls	r3, r3, #4
 800e6b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6b2:	4413      	add	r3, r2
 800e6b4:	65bb      	str	r3, [r7, #88]	; 0x58

  // If it's packed in an array, expand it.
  if( narg == CALL_MAXARGS ) {
 800e6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6b8:	2b0f      	cmp	r3, #15
 800e6ba:	d13c      	bne.n	800e736 <send_by_name+0xb2>
    mrbc_value argv = recv[1];
 800e6bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6be:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e6c2:	3310      	adds	r3, #16
 800e6c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    narg = mrbc_array_size(&argv);
 800e6ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff ff44 	bl	800e55c <mrbc_array_size>
 800e6d4:	66f8      	str	r0, [r7, #108]	; 0x6c
    for( int i = 0; i < narg; i++ ) {
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6da:	e00a      	b.n	800e6f2 <send_by_name+0x6e>
      mrbc_incref( &argv.array->data[i] );
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	689a      	ldr	r2, [r3, #8]
 800e6e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6e2:	011b      	lsls	r3, r3, #4
 800e6e4:	4413      	add	r3, r2
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fe40 	bl	800e36c <mrbc_incref>
    for( int i = 0; i < narg; i++ ) {
 800e6ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	dbf0      	blt.n	800e6dc <send_by_name+0x58>
    }

    memmove( recv + narg + 1, recv + 2, sizeof(mrbc_value) * (karg * 2 + 1) );
 800e6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	011b      	lsls	r3, r3, #4
 800e700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e702:	18d0      	adds	r0, r2, r3
 800e704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e706:	f103 0120 	add.w	r1, r3, #32
 800e70a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e70c:	005b      	lsls	r3, r3, #1
 800e70e:	3301      	adds	r3, #1
 800e710:	011b      	lsls	r3, r3, #4
 800e712:	461a      	mov	r2, r3
 800e714:	f007 ff63 	bl	80165de <memmove>
    memcpy( recv + 1, argv.array->data, sizeof(mrbc_value) * narg );
 800e718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e71a:	f103 0010 	add.w	r0, r3, #16
 800e71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e720:	6899      	ldr	r1, [r3, #8]
 800e722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e724:	011b      	lsls	r3, r3, #4
 800e726:	461a      	mov	r2, r3
 800e728:	f008 f80d 	bl	8016746 <memcpy>

    mrbc_decref(&argv);
 800e72c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e730:	4618      	mov	r0, r3
 800e732:	f7ff fe4f 	bl	800e3d4 <mrbc_decref>
  }

  // Convert keyword argument to hash.
  if( karg ) {
 800e736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d048      	beq.n	800e7ce <send_by_name+0x14a>
    narg++;
 800e73c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e73e:	3301      	adds	r3, #1
 800e740:	66fb      	str	r3, [r7, #108]	; 0x6c
    if( karg != CALL_MAXARGS ) {
 800e742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e744:	2b0f      	cmp	r3, #15
 800e746:	d042      	beq.n	800e7ce <send_by_name+0x14a>
      mrbc_value h = mrbc_hash_new( vm, karg );
 800e748:	f107 0320 	add.w	r3, r7, #32
 800e74c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e74e:	68f9      	ldr	r1, [r7, #12]
 800e750:	4618      	mov	r0, r3
 800e752:	f7f5 fb62 	bl	8003e1a <mrbc_hash_new>
      if( !h.hash ) return;	// ENOMEM
 800e756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 80c4 	beq.w	800e8e6 <send_by_name+0x262>

      mrbc_value *r1 = recv + narg;
 800e75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e760:	011b      	lsls	r3, r3, #4
 800e762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e764:	4413      	add	r3, r2
 800e766:	657b      	str	r3, [r7, #84]	; 0x54
      memcpy( h.hash->data, r1, sizeof(mrbc_value) * karg * 2 );
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	6898      	ldr	r0, [r3, #8]
 800e76c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e76e:	015b      	lsls	r3, r3, #5
 800e770:	461a      	mov	r2, r3
 800e772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e774:	f007 ffe7 	bl	8016746 <memcpy>
      h.hash->n_stored = karg * 2;
 800e778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77e:	0052      	lsls	r2, r2, #1
 800e780:	b292      	uxth	r2, r2
 800e782:	80da      	strh	r2, [r3, #6]

      mrbc_value block = r1[karg * 2];
 800e784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e786:	015b      	lsls	r3, r3, #5
 800e788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e78a:	4413      	add	r3, r2
 800e78c:	f107 0410 	add.w	r4, r7, #16
 800e790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      memset( r1 + 2, 0, sizeof(mrbc_value) * (karg * 2 - 1) );
 800e796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e798:	f103 0020 	add.w	r0, r3, #32
 800e79c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	011b      	lsls	r3, r3, #4
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	f007 ff33 	bl	8016612 <memset>
      *r1++ = h;
 800e7ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7ae:	f103 0210 	add.w	r2, r3, #16
 800e7b2:	657a      	str	r2, [r7, #84]	; 0x54
 800e7b4:	461c      	mov	r4, r3
 800e7b6:	f107 0320 	add.w	r3, r7, #32
 800e7ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      *r1 = block;
 800e7c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7c2:	461c      	mov	r4, r3
 800e7c4:	f107 0310 	add.w	r3, r7, #16
 800e7c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
  }

  // is not have block
  if( (c >> 8) == 0 ) {
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	121b      	asrs	r3, r3, #8
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10e      	bne.n	800e7f4 <send_by_name+0x170>
    mrbc_decref( recv + narg + 1 );
 800e7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d8:	3301      	adds	r3, #1
 800e7da:	011b      	lsls	r3, r3, #4
 800e7dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7de:	4413      	add	r3, r2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff fdf7 	bl	800e3d4 <mrbc_decref>
    mrbc_set_nil( recv + narg + 1 );
 800e7e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	011b      	lsls	r3, r3, #4
 800e7ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7ee:	4413      	add	r3, r2
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	701a      	strb	r2, [r3, #0]
  }

  mrbc_class *cls = find_class_by_object(recv);
 800e7f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e7f6:	f7ff fe5b 	bl	800e4b0 <find_class_by_object>
 800e7fa:	6538      	str	r0, [r7, #80]	; 0x50
  mrbc_method method;
  if( mrbc_find_method( &method, cls, sym_id ) == 0 ) {
 800e7fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e800:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e804:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e806:	4618      	mov	r0, r3
 800e808:	f7fa ff48 	bl	800969c <mrbc_find_method>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d11f      	bne.n	800e852 <send_by_name+0x1ce>
    mrbc_raisef(vm, MRBC_CLASS(NoMethodError),
 800e812:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff f98e 	bl	800db38 <mrbc_symid_to_str>
 800e81c:	4604      	mov	r4, r0
 800e81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e820:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e824:	4618      	mov	r0, r3
 800e826:	f7ff f987 	bl	800db38 <mrbc_symid_to_str>
 800e82a:	4603      	mov	r3, r0
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	4623      	mov	r3, r4
 800e830:	4a32      	ldr	r2, [pc, #200]	; (800e8fc <send_by_name+0x278>)
 800e832:	4933      	ldr	r1, [pc, #204]	; (800e900 <send_by_name+0x27c>)
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f7fc fe39 	bl	800b4ac <mrbc_raisef>
		"undefined local variable or method '%s' for %s",
		mrbc_symid_to_str(sym_id), mrbc_symid_to_str( cls->sym_id ));
    if( vm->callinfo_tail != 0 ) {
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	69db      	ldr	r3, [r3, #28]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d053      	beq.n	800e8ea <send_by_name+0x266>
      vm->exception.exception->method_id = vm->callinfo_tail->method_id;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	69da      	ldr	r2, [r3, #28]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 800e84e:	811a      	strh	r2, [r3, #8]
    }
    return;
 800e850:	e04b      	b.n	800e8ea <send_by_name+0x266>
  }

  // call C function and return.
  if( method.c_func ) {
 800e852:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800e856:	2b00      	cmp	r3, #0
 800e858:	d02e      	beq.n	800e8b8 <send_by_name+0x234>
    method.func(vm, recv, narg);
 800e85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e85c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e85e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	4798      	blx	r3

    if( mrbc_israised(vm) && vm->exception.exception->method_id == 0 ) {
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800e86a:	2b0e      	cmp	r3, #14
 800e86c:	d109      	bne.n	800e882 <send_by_name+0x1fe>
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e872:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <send_by_name+0x1fe>
      vm->exception.exception->method_id = sym_id;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87e:	897a      	ldrh	r2, [r7, #10]
 800e880:	811a      	strh	r2, [r3, #8]
    }
    if( sym_id == MRBC_SYM(call) ) return;
 800e882:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e886:	2b4c      	cmp	r3, #76	; 0x4c
 800e888:	d031      	beq.n	800e8ee <send_by_name+0x26a>
    if( sym_id == MRBC_SYM(new) ) return;
 800e88a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e88e:	2b99      	cmp	r3, #153	; 0x99
 800e890:	d02f      	beq.n	800e8f2 <send_by_name+0x26e>

    for( int i = 1; i <= narg+1; i++ ) {
 800e892:	2301      	movs	r3, #1
 800e894:	667b      	str	r3, [r7, #100]	; 0x64
 800e896:	e009      	b.n	800e8ac <send_by_name+0x228>
      mrbc_decref_empty( recv + i );
 800e898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e89a:	011b      	lsls	r3, r3, #4
 800e89c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e89e:	4413      	add	r3, r2
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff fddd 	bl	800e460 <mrbc_decref_empty>
    for( int i = 1; i <= narg+1; i++ ) {
 800e8a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	667b      	str	r3, [r7, #100]	; 0x64
 800e8ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	ddf0      	ble.n	800e898 <send_by_name+0x214>
    }
    return;
 800e8b6:	e01d      	b.n	800e8f4 <send_by_name+0x270>
  }

  // call Ruby method.
  mrbc_callinfo *callinfo = mrbc_push_callinfo(vm, sym_id, a, narg);
 800e8b8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 f8d1 	bl	800ea68 <mrbc_push_callinfo>
 800e8c6:	64f8      	str	r0, [r7, #76]	; 0x4c
  callinfo->own_class = method.cls;
 800e8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8cc:	615a      	str	r2, [r3, #20]

  vm->cur_irep = method.irep;
 800e8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	699a      	ldr	r2, [r3, #24]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	611a      	str	r2, [r3, #16]
  vm->cur_regs = recv;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8e2:	615a      	str	r2, [r3, #20]
 800e8e4:	e006      	b.n	800e8f4 <send_by_name+0x270>
      if( !h.hash ) return;	// ENOMEM
 800e8e6:	bf00      	nop
 800e8e8:	e004      	b.n	800e8f4 <send_by_name+0x270>
    return;
 800e8ea:	bf00      	nop
 800e8ec:	e002      	b.n	800e8f4 <send_by_name+0x270>
    if( sym_id == MRBC_SYM(call) ) return;
 800e8ee:	bf00      	nop
 800e8f0:	e000      	b.n	800e8f4 <send_by_name+0x270>
    if( sym_id == MRBC_SYM(new) ) return;
 800e8f2:	bf00      	nop
}
 800e8f4:	3774      	adds	r7, #116	; 0x74
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd90      	pop	{r4, r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	0801a26c 	.word	0x0801a26c
 800e900:	20000184 	.word	0x20000184

0800e904 <find_catch_handler_ensure>:

//================================================================
/*! Find ensure catch handler
*/
static const mrbc_irep_catch_handler *find_catch_handler_ensure( const struct VM *vm )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  const mrbc_irep *irep = vm->cur_irep;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	61bb      	str	r3, [r7, #24]
  int cnt = irep->clen;
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	891b      	ldrh	r3, [r3, #8]
 800e916:	61fb      	str	r3, [r7, #28]
  if( cnt == 0 ) return NULL;
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d101      	bne.n	800e922 <find_catch_handler_ensure+0x1e>
 800e91e:	2300      	movs	r3, #0
 800e920:	e037      	b.n	800e992 <find_catch_handler_ensure+0x8e>

  const mrbc_irep_catch_handler *catch_table =
    (const mrbc_irep_catch_handler *)(irep->inst + irep->ilen);
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	699a      	ldr	r2, [r3, #24]
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	68db      	ldr	r3, [r3, #12]
  const mrbc_irep_catch_handler *catch_table =
 800e92a:	4413      	add	r3, r2
 800e92c:	617b      	str	r3, [r7, #20]
  uint32_t inst = vm->inst - irep->inst;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	691a      	ldr	r2, [r3, #16]
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	699b      	ldr	r3, [r3, #24]
 800e936:	1ad3      	subs	r3, r2, r3
 800e938:	613b      	str	r3, [r7, #16]

  for( cnt--; cnt >= 0 ; cnt-- ) {
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	3b01      	subs	r3, #1
 800e93e:	61fb      	str	r3, [r7, #28]
 800e940:	e023      	b.n	800e98a <find_catch_handler_ensure+0x86>
    const mrbc_irep_catch_handler *handler = catch_table + cnt;
 800e942:	69fa      	ldr	r2, [r7, #28]
 800e944:	4613      	mov	r3, r2
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	4413      	add	r3, r2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	4413      	add	r3, r2
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	4413      	add	r3, r2
 800e952:	60fb      	str	r3, [r7, #12]
    // Catch type and range check
    if( (handler->type == 1) &&		// 1=CATCH_FILTER_ENSURE
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d113      	bne.n	800e984 <find_catch_handler_ensure+0x80>
	(bin_to_uint32(handler->begin) < inst) &&
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3301      	adds	r3, #1
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff fe71 	bl	800e648 <bin_to_uint32>
 800e966:	4602      	mov	r2, r0
    if( (handler->type == 1) &&		// 1=CATCH_FILTER_ENSURE
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d90a      	bls.n	800e984 <find_catch_handler_ensure+0x80>
	(inst <= bin_to_uint32(handler->end)) ) {
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	3305      	adds	r3, #5
 800e972:	4618      	mov	r0, r3
 800e974:	f7ff fe68 	bl	800e648 <bin_to_uint32>
 800e978:	4602      	mov	r2, r0
	(bin_to_uint32(handler->begin) < inst) &&
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d801      	bhi.n	800e984 <find_catch_handler_ensure+0x80>
      return handler;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	e006      	b.n	800e992 <find_catch_handler_ensure+0x8e>
  for( cnt--; cnt >= 0 ; cnt-- ) {
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	3b01      	subs	r3, #1
 800e988:	61fb      	str	r3, [r7, #28]
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dad8      	bge.n	800e942 <find_catch_handler_ensure+0x3e>
    }
  }

  return NULL;
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	3720      	adds	r7, #32
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
	...

0800e99c <mrbc_get_self>:

//================================================================
/*! get the self object
*/
static mrbc_value * mrbc_get_self( struct VM *vm, mrbc_value *regs )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  mrbc_value *self = &regs[0];
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]
  if( mrbc_type(*self) == MRBC_TT_PROC ) {
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f993 3000 	ldrsb.w	r3, [r3]
 800e9b0:	2b09      	cmp	r3, #9
 800e9b2:	d11c      	bne.n	800e9ee <mrbc_get_self+0x52>
    mrbc_callinfo *callinfo = regs[0].proc->callinfo_self;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	60bb      	str	r3, [r7, #8]
    if( callinfo ) {
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <mrbc_get_self+0x36>
      self = callinfo->cur_regs + callinfo->reg_offset;
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	7f9b      	ldrb	r3, [r3, #30]
 800e9ca:	011b      	lsls	r3, r3, #4
 800e9cc:	4413      	add	r3, r2
 800e9ce:	60fb      	str	r3, [r7, #12]
 800e9d0:	e002      	b.n	800e9d8 <mrbc_get_self+0x3c>
    } else {
      self = &vm->regs[0];
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3338      	adds	r3, #56	; 0x38
 800e9d6:	60fb      	str	r3, [r7, #12]
    }
    assert( self->tt != MRBC_TT_PROC );
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f993 3000 	ldrsb.w	r3, [r3]
 800e9de:	2b09      	cmp	r3, #9
 800e9e0:	d105      	bne.n	800e9ee <mrbc_get_self+0x52>
 800e9e2:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <mrbc_get_self+0x5c>)
 800e9e4:	4a05      	ldr	r2, [pc, #20]	; (800e9fc <mrbc_get_self+0x60>)
 800e9e6:	21bd      	movs	r1, #189	; 0xbd
 800e9e8:	4805      	ldr	r0, [pc, #20]	; (800ea00 <mrbc_get_self+0x64>)
 800e9ea:	f006 fdd1 	bl	8015590 <__assert_func>
  }

  return self;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	0801a29c 	.word	0x0801a29c
 800e9fc:	0801be54 	.word	0x0801be54
 800ea00:	0801a2b8 	.word	0x0801a2b8

0800ea04 <mrbc_get_callee_symid>:

  @param  vm	Pointer to VM
  @return	string
*/
mrbc_sym mrbc_get_callee_symid( struct VM *vm )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  uint8_t rb = vm->inst[-2];
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	3b02      	subs	r3, #2
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	73fb      	strb	r3, [r7, #15]
  /* NOTE
     -2 is not always better value.
     This value is OP_SEND operator's B register.
  */
  return mrbc_irep_symbol_id(vm->cur_irep, rb);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	f103 0220 	add.w	r2, r3, #32
 800ea1e:	7bfb      	ldrb	r3, [r7, #15]
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	4413      	add	r3, r2
 800ea24:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr

0800ea34 <mrbc_get_callee_name>:

  @param  vm	Pointer to VM
  @return	string
*/
const char *mrbc_get_callee_name( struct VM *vm )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint8_t rb = vm->inst[-2];
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	3b02      	subs	r3, #2
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	73fb      	strb	r3, [r7, #15]
  return mrbc_irep_symbol_cstr(vm->cur_irep, rb);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	f103 0220 	add.w	r2, r3, #32
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
 800ea50:	005b      	lsls	r3, r3, #1
 800ea52:	4413      	add	r3, r2
 800ea54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff f86d 	bl	800db38 <mrbc_symid_to_str>
 800ea5e:	4603      	mov	r3, r0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <mrbc_push_callinfo>:

//================================================================
/*! Push current status to callinfo stack
*/
mrbc_callinfo * mrbc_push_callinfo( struct VM *vm, mrbc_sym method_id, int reg_offset, int n_args )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	607a      	str	r2, [r7, #4]
 800ea72:	603b      	str	r3, [r7, #0]
 800ea74:	460b      	mov	r3, r1
 800ea76:	817b      	strh	r3, [r7, #10]
  mrbc_callinfo *callinfo = mrbc_alloc(vm, sizeof(mrbc_callinfo));
 800ea78:	2024      	movs	r0, #36	; 0x24
 800ea7a:	f7f3 f813 	bl	8001aa4 <mrbc_raw_alloc>
 800ea7e:	6178      	str	r0, [r7, #20]
  if( !callinfo ) return callinfo;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <mrbc_push_callinfo+0x22>
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	e02c      	b.n	800eae4 <mrbc_push_callinfo+0x7c>

  callinfo->cur_irep = vm->cur_irep;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	68da      	ldr	r2, [r3, #12]
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	605a      	str	r2, [r3, #4]
  callinfo->inst = vm->inst;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	691a      	ldr	r2, [r3, #16]
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	609a      	str	r2, [r3, #8]
  callinfo->cur_regs = vm->cur_regs;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	695a      	ldr	r2, [r3, #20]
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	60da      	str	r2, [r3, #12]
  callinfo->target_class = vm->target_class;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	699a      	ldr	r2, [r3, #24]
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	611a      	str	r2, [r3, #16]

  callinfo->own_class = 0;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	2200      	movs	r2, #0
 800eaae:	615a      	str	r2, [r3, #20]
  callinfo->karg_keep = 0;
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2200      	movs	r2, #0
 800eab4:	619a      	str	r2, [r3, #24]
  callinfo->method_id = method_id;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	897a      	ldrh	r2, [r7, #10]
 800eaba:	839a      	strh	r2, [r3, #28]
  callinfo->reg_offset = reg_offset;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	779a      	strb	r2, [r3, #30]
  callinfo->n_args = n_args;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	b2da      	uxtb	r2, r3
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	77da      	strb	r2, [r3, #31]
  callinfo->is_called_super = 0;
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	2200      	movs	r2, #0
 800ead0:	f883 2020 	strb.w	r2, [r3, #32]

  callinfo->prev = vm->callinfo_tail;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	69da      	ldr	r2, [r3, #28]
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	601a      	str	r2, [r3, #0]
  vm->callinfo_tail = callinfo;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	697a      	ldr	r2, [r7, #20]
 800eae0:	61da      	str	r2, [r3, #28]

  return callinfo;
 800eae2:	697b      	ldr	r3, [r7, #20]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <mrbc_pop_callinfo>:

//================================================================
/*! Pop current status from callinfo stack
*/
void mrbc_pop_callinfo( struct VM *vm )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08a      	sub	sp, #40	; 0x28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  assert( vm->callinfo_tail );
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	69db      	ldr	r3, [r3, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d106      	bne.n	800eb0a <mrbc_pop_callinfo+0x1e>
 800eafc:	4b2c      	ldr	r3, [pc, #176]	; (800ebb0 <mrbc_pop_callinfo+0xc4>)
 800eafe:	4a2d      	ldr	r2, [pc, #180]	; (800ebb4 <mrbc_pop_callinfo+0xc8>)
 800eb00:	f240 110d 	movw	r1, #269	; 0x10d
 800eb04:	482c      	ldr	r0, [pc, #176]	; (800ebb8 <mrbc_pop_callinfo+0xcc>)
 800eb06:	f006 fd43 	bl	8015590 <__assert_func>

  // clear used register.
  mrbc_callinfo *callinfo = vm->callinfo_tail;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	69db      	ldr	r3, [r3, #28]
 800eb0e:	623b      	str	r3, [r7, #32]
  mrbc_value *reg1 = vm->cur_regs + callinfo->cur_irep->nregs - callinfo->reg_offset;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	695a      	ldr	r2, [r3, #20]
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	889b      	ldrh	r3, [r3, #4]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	6a3b      	ldr	r3, [r7, #32]
 800eb1e:	7f9b      	ldrb	r3, [r3, #30]
 800eb20:	1acb      	subs	r3, r1, r3
 800eb22:	011b      	lsls	r3, r3, #4
 800eb24:	4413      	add	r3, r2
 800eb26:	627b      	str	r3, [r7, #36]	; 0x24
  mrbc_value *reg2 = vm->cur_regs + vm->cur_irep->nregs;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	695a      	ldr	r2, [r3, #20]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	889b      	ldrh	r3, [r3, #4]
 800eb32:	011b      	lsls	r3, r3, #4
 800eb34:	4413      	add	r3, r2
 800eb36:	61fb      	str	r3, [r7, #28]
  while( reg1 < reg2 ) {
 800eb38:	e006      	b.n	800eb48 <mrbc_pop_callinfo+0x5c>
    mrbc_decref_empty( reg1++ );
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	f103 0210 	add.w	r2, r3, #16
 800eb40:	627a      	str	r2, [r7, #36]	; 0x24
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fc8c 	bl	800e460 <mrbc_decref_empty>
  while( reg1 < reg2 ) {
 800eb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d3f4      	bcc.n	800eb3a <mrbc_pop_callinfo+0x4e>
  }
  if( callinfo->karg_keep ) {
 800eb50:	6a3b      	ldr	r3, [r7, #32]
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d010      	beq.n	800eb7a <mrbc_pop_callinfo+0x8e>
    mrbc_hash_delete( &(mrbc_value){.tt = MRBC_TT_HASH, .hash = callinfo->karg_keep} );
 800eb58:	f107 0308 	add.w	r3, r7, #8
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	601a      	str	r2, [r3, #0]
 800eb60:	605a      	str	r2, [r3, #4]
 800eb62:	609a      	str	r2, [r3, #8]
 800eb64:	60da      	str	r2, [r3, #12]
 800eb66:	230d      	movs	r3, #13
 800eb68:	723b      	strb	r3, [r7, #8]
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	699b      	ldr	r3, [r3, #24]
 800eb6e:	613b      	str	r3, [r7, #16]
 800eb70:	f107 0308 	add.w	r3, r7, #8
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7f5 f9a4 	bl	8003ec2 <mrbc_hash_delete>
  }

  // copy callinfo to vm
  vm->cur_irep = callinfo->cur_irep;
 800eb7a:	6a3b      	ldr	r3, [r7, #32]
 800eb7c:	685a      	ldr	r2, [r3, #4]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60da      	str	r2, [r3, #12]
  vm->inst = callinfo->inst;
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	689a      	ldr	r2, [r3, #8]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	611a      	str	r2, [r3, #16]
  vm->cur_regs = callinfo->cur_regs;
 800eb8a:	6a3b      	ldr	r3, [r7, #32]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	615a      	str	r2, [r3, #20]
  vm->target_class = callinfo->target_class;
 800eb92:	6a3b      	ldr	r3, [r7, #32]
 800eb94:	691a      	ldr	r2, [r3, #16]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	619a      	str	r2, [r3, #24]
  vm->callinfo_tail = callinfo->prev;
 800eb9a:	6a3b      	ldr	r3, [r7, #32]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	61da      	str	r2, [r3, #28]

  mrbc_free(vm, callinfo);
 800eba2:	6a38      	ldr	r0, [r7, #32]
 800eba4:	f7f3 f95a 	bl	8001e5c <mrbc_raw_free>
}
 800eba8:	bf00      	nop
 800ebaa:	3728      	adds	r7, #40	; 0x28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	0801a2d0 	.word	0x0801a2d0
 800ebb4:	0801be64 	.word	0x0801be64
 800ebb8:	0801a2b8 	.word	0x0801a2b8

0800ebbc <mrbc_vm_new>:
  mrbc_vm_end( vm );
  mrbc_vm_close( vm );
@endcode
*/
mrbc_vm * mrbc_vm_new( int regs_size )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  mrbc_vm *vm = mrbc_raw_alloc(sizeof(mrbc_vm) + sizeof(mrbc_value) * regs_size);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	3338      	adds	r3, #56	; 0x38
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7f2 ff6a 	bl	8001aa4 <mrbc_raw_alloc>
 800ebd0:	60f8      	str	r0, [r7, #12]
  if( !vm ) return NULL;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d101      	bne.n	800ebdc <mrbc_vm_new+0x20>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e014      	b.n	800ec06 <mrbc_vm_new+0x4a>

  memset(vm, 0, sizeof(mrbc_vm));	// caution: assume NULL is zero.
 800ebdc:	2238      	movs	r2, #56	; 0x38
 800ebde:	2100      	movs	r1, #0
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f007 fd16 	bl	8016612 <memset>
#if defined(MRBC_DEBUG)
  memcpy(vm->type, "VM", 2);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2202      	movs	r2, #2
 800ebea:	4909      	ldr	r1, [pc, #36]	; (800ec10 <mrbc_vm_new+0x54>)
 800ebec:	4618      	mov	r0, r3
 800ebee:	f007 fdaa 	bl	8016746 <memcpy>
#endif
  vm->flag_need_memfree = 1;
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	7913      	ldrb	r3, [r2, #4]
 800ebf6:	f043 0301 	orr.w	r3, r3, #1
 800ebfa:	7113      	strb	r3, [r2, #4]
  vm->regs_size = regs_size;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	80da      	strh	r2, [r3, #6]

  return vm;
 800ec04:	68fb      	ldr	r3, [r7, #12]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	0801a2e4 	.word	0x0801a2e4

0800ec14 <mrbc_vm_open>:

  @param vm	Pointer to VM or NULL.
  @return	Pointer to VM, or NULL is error.
*/
mrbc_vm * mrbc_vm_open( struct VM *vm )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  if( !vm ) vm = mrbc_vm_new( MAX_REGS_SIZE );
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d103      	bne.n	800ec2a <mrbc_vm_open+0x16>
 800ec22:	206e      	movs	r0, #110	; 0x6e
 800ec24:	f7ff ffca 	bl	800ebbc <mrbc_vm_new>
 800ec28:	6078      	str	r0, [r7, #4]
  if( !vm ) return NULL;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d101      	bne.n	800ec34 <mrbc_vm_open+0x20>
 800ec30:	2300      	movs	r3, #0
 800ec32:	e041      	b.n	800ecb8 <mrbc_vm_open+0xa4>

  // allocate vm id.
  int vm_id;
  for( vm_id = 0; vm_id < MAX_VM_COUNT; vm_id++ ) {
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]
 800ec38:	e024      	b.n	800ec84 <mrbc_vm_open+0x70>
    int idx = vm_id >> 4;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	111b      	asrs	r3, r3, #4
 800ec3e:	613b      	str	r3, [r7, #16]
    int bit = 1 << (vm_id & 0x0f);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f003 030f 	and.w	r3, r3, #15
 800ec46:	2201      	movs	r2, #1
 800ec48:	fa02 f303 	lsl.w	r3, r2, r3
 800ec4c:	60fb      	str	r3, [r7, #12]
    if( (free_vm_bitmap[idx] & bit) == 0 ) {
 800ec4e:	4a1c      	ldr	r2, [pc, #112]	; (800ecc0 <mrbc_vm_open+0xac>)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec56:	461a      	mov	r2, r3
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10e      	bne.n	800ec7e <mrbc_vm_open+0x6a>
      free_vm_bitmap[idx] |= bit;		// found
 800ec60:	4a17      	ldr	r2, [pc, #92]	; (800ecc0 <mrbc_vm_open+0xac>)
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec68:	b21a      	sxth	r2, r3
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	b21b      	sxth	r3, r3
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	b21b      	sxth	r3, r3
 800ec72:	b299      	uxth	r1, r3
 800ec74:	4a12      	ldr	r2, [pc, #72]	; (800ecc0 <mrbc_vm_open+0xac>)
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      break;
 800ec7c:	e005      	b.n	800ec8a <mrbc_vm_open+0x76>
  for( vm_id = 0; vm_id < MAX_VM_COUNT; vm_id++ ) {
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	3301      	adds	r3, #1
 800ec82:	617b      	str	r3, [r7, #20]
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	ddd7      	ble.n	800ec3a <mrbc_vm_open+0x26>
    }
  }

  if( vm_id == MAX_VM_COUNT ) {
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	2b05      	cmp	r3, #5
 800ec8e:	d10b      	bne.n	800eca8 <mrbc_vm_open+0x94>
    if( vm->flag_need_memfree ) mrbc_raw_free(vm);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	791b      	ldrb	r3, [r3, #4]
 800ec94:	f003 0301 	and.w	r3, r3, #1
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d002      	beq.n	800eca4 <mrbc_vm_open+0x90>
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7f3 f8dc 	bl	8001e5c <mrbc_raw_free>
    return NULL;
 800eca4:	2300      	movs	r3, #0
 800eca6:	e007      	b.n	800ecb8 <mrbc_vm_open+0xa4>
  }

  vm->vm_id = ++vm_id;
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	617b      	str	r3, [r7, #20]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	709a      	strb	r2, [r3, #2]

  return vm;
 800ecb6:	687b      	ldr	r3, [r7, #4]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	20008850 	.word	0x20008850

0800ecc4 <mrbc_vm_close>:
/*! Close the VM.

  @param  vm  Pointer to VM
*/
void mrbc_vm_close( struct VM *vm )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  // free vm id.
  int idx = (vm->vm_id-1) >> 4;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	789b      	ldrb	r3, [r3, #2]
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	111b      	asrs	r3, r3, #4
 800ecd4:	60fb      	str	r3, [r7, #12]
  int bit = 1 << ((vm->vm_id-1) & 0x0f);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	789b      	ldrb	r3, [r3, #2]
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	f003 030f 	and.w	r3, r3, #15
 800ece0:	2201      	movs	r2, #1
 800ece2:	fa02 f303 	lsl.w	r3, r2, r3
 800ece6:	60bb      	str	r3, [r7, #8]
  free_vm_bitmap[idx] &= ~bit;
 800ece8:	4a13      	ldr	r2, [pc, #76]	; (800ed38 <mrbc_vm_close+0x74>)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecf0:	b21a      	sxth	r2, r3
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	b21b      	sxth	r3, r3
 800ecf6:	43db      	mvns	r3, r3
 800ecf8:	b21b      	sxth	r3, r3
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	b21b      	sxth	r3, r3
 800ecfe:	b299      	uxth	r1, r3
 800ed00:	4a0d      	ldr	r2, [pc, #52]	; (800ed38 <mrbc_vm_close+0x74>)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  // free irep and vm
  if( vm->top_irep ) mrbc_irep_free( vm->top_irep );
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d004      	beq.n	800ed1a <mrbc_vm_close+0x56>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fd fbf5 	bl	800c504 <mrbc_irep_free>
  if( vm->flag_need_memfree ) mrbc_raw_free(vm);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	791b      	ldrb	r3, [r3, #4]
 800ed1e:	f003 0301 	and.w	r3, r3, #1
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <mrbc_vm_close+0x6a>
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7f3 f897 	bl	8001e5c <mrbc_raw_free>
}
 800ed2e:	bf00      	nop
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	20008850 	.word	0x20008850

0800ed3c <mrbc_vm_begin>:
/*! VM initializer.

  @param  vm  Pointer to VM
*/
void mrbc_vm_begin( struct VM *vm )
{
 800ed3c:	b590      	push	{r4, r7, lr}
 800ed3e:	b091      	sub	sp, #68	; 0x44
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6178      	str	r0, [r7, #20]
  vm->cur_irep = vm->top_irep;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	689a      	ldr	r2, [r3, #8]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	699a      	ldr	r2, [r3, #24]
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	611a      	str	r2, [r3, #16]
  vm->cur_regs = vm->regs;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	615a      	str	r2, [r3, #20]
  vm->target_class = mrbc_class_object;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	4a27      	ldr	r2, [pc, #156]	; (800ee00 <mrbc_vm_begin+0xc4>)
 800ed64:	619a      	str	r2, [r3, #24]
  vm->callinfo_tail = NULL;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	61da      	str	r2, [r3, #28]
  vm->ret_blk = NULL;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	621a      	str	r2, [r3, #32]
  vm->exception = mrbc_nil_value();
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	3328      	adds	r3, #40	; 0x28
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	605a      	str	r2, [r3, #4]
 800ed7c:	609a      	str	r2, [r3, #8]
 800ed7e:	60da      	str	r2, [r3, #12]
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  vm->flag_preemption = 0;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	70da      	strb	r2, [r3, #3]
  vm->flag_stop = 0;
 800ed8e:	697a      	ldr	r2, [r7, #20]
 800ed90:	7913      	ldrb	r3, [r2, #4]
 800ed92:	f36f 0341 	bfc	r3, #1, #1
 800ed96:	7113      	strb	r3, [r2, #4]

  // set self to reg[0], others nil
  vm->regs[0] = mrbc_instance_new(vm, mrbc_class_object, 0);
 800ed98:	697c      	ldr	r4, [r7, #20]
 800ed9a:	4638      	mov	r0, r7
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4a18      	ldr	r2, [pc, #96]	; (800ee00 <mrbc_vm_begin+0xc4>)
 800eda0:	6979      	ldr	r1, [r7, #20]
 800eda2:	f7fa fb61 	bl	8009468 <mrbc_instance_new>
 800eda6:	3438      	adds	r4, #56	; 0x38
 800eda8:	463b      	mov	r3, r7
 800edaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800edac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( vm->regs[0].instance == NULL ) return;	// ENOMEM
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d01e      	beq.n	800edf6 <mrbc_vm_begin+0xba>
  for( int i = 1; i < vm->regs_size; i++ ) {
 800edb8:	2301      	movs	r3, #1
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edbc:	e014      	b.n	800ede8 <mrbc_vm_begin+0xac>
    vm->regs[i] = mrbc_nil_value();
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc2:	011b      	lsls	r3, r3, #4
 800edc4:	4413      	add	r3, r2
 800edc6:	3338      	adds	r3, #56	; 0x38
 800edc8:	461a      	mov	r2, r3
 800edca:	2300      	movs	r3, #0
 800edcc:	6013      	str	r3, [r2, #0]
 800edce:	6053      	str	r3, [r2, #4]
 800edd0:	6093      	str	r3, [r2, #8]
 800edd2:	60d3      	str	r3, [r2, #12]
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd8:	011b      	lsls	r3, r3, #4
 800edda:	4413      	add	r3, r2
 800eddc:	3338      	adds	r3, #56	; 0x38
 800edde:	2201      	movs	r2, #1
 800ede0:	701a      	strb	r2, [r3, #0]
  for( int i = 1; i < vm->regs_size; i++ ) {
 800ede2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede4:	3301      	adds	r3, #1
 800ede6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	88db      	ldrh	r3, [r3, #6]
 800edec:	461a      	mov	r2, r3
 800edee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf0:	4293      	cmp	r3, r2
 800edf2:	dbe4      	blt.n	800edbe <mrbc_vm_begin+0x82>
 800edf4:	e000      	b.n	800edf8 <mrbc_vm_begin+0xbc>
  if( vm->regs[0].instance == NULL ) return;	// ENOMEM
 800edf6:	bf00      	nop
  }
}
 800edf8:	3744      	adds	r7, #68	; 0x44
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd90      	pop	{r4, r7, pc}
 800edfe:	bf00      	nop
 800ee00:	20000064 	.word	0x20000064

0800ee04 <mrbc_vm_end>:
/*! VM finalizer.

  @param  vm  Pointer to VM
*/
void mrbc_vm_end( struct VM *vm )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  if( mrbc_israised(vm) ) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800ee12:	2b0e      	cmp	r3, #14
 800ee14:	d107      	bne.n	800ee26 <mrbc_vm_end+0x22>
#if defined(MRBC_ABORT_BY_EXCEPTION)
    MRBC_ABORT_BY_EXCEPTION(vm);
#else
    mrbc_print_vm_exception( vm );
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7fc fbdc 	bl	800b5d4 <mrbc_print_vm_exception>
    mrbc_decref(&vm->exception);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3328      	adds	r3, #40	; 0x28
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7ff fad7 	bl	800e3d4 <mrbc_decref>
#endif
  }
  assert( vm->ret_blk == 0 );
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d006      	beq.n	800ee3c <mrbc_vm_end+0x38>
 800ee2e:	4b16      	ldr	r3, [pc, #88]	; (800ee88 <mrbc_vm_end+0x84>)
 800ee30:	4a16      	ldr	r2, [pc, #88]	; (800ee8c <mrbc_vm_end+0x88>)
 800ee32:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ee36:	4816      	ldr	r0, [pc, #88]	; (800ee90 <mrbc_vm_end+0x8c>)
 800ee38:	f006 fbaa 	bl	8015590 <__assert_func>

  int n_used = 0;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60bb      	str	r3, [r7, #8]
  for( int i = 0; i < vm->regs_size; i++ ) {
 800ee40:	2300      	movs	r3, #0
 800ee42:	60fb      	str	r3, [r7, #12]
 800ee44:	e015      	b.n	800ee72 <mrbc_vm_end+0x6e>
    //mrbc_printf("vm->regs[%d].tt = %d\n", i, mrbc_type(vm->regs[i]));
    if( mrbc_type(vm->regs[i]) != MRBC_TT_NIL ) n_used = i;
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	3338      	adds	r3, #56	; 0x38
 800ee50:	f993 3000 	ldrsb.w	r3, [r3]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d001      	beq.n	800ee5c <mrbc_vm_end+0x58>
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	60bb      	str	r3, [r7, #8]
    mrbc_decref_empty(&vm->regs[i]);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	011b      	lsls	r3, r3, #4
 800ee60:	3338      	adds	r3, #56	; 0x38
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff fafa 	bl	800e460 <mrbc_decref_empty>
  for( int i = 0; i < vm->regs_size; i++ ) {
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	88db      	ldrh	r3, [r3, #6]
 800ee76:	461a      	mov	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	dbe3      	blt.n	800ee46 <mrbc_vm_end+0x42>

#if defined(MRBC_ALLOC_VMID)
  mrbc_global_clear_vm_id();
  mrbc_free_all(vm);
#endif
}
 800ee7e:	bf00      	nop
 800ee80:	bf00      	nop
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801a2e8 	.word	0x0801a2e8
 800ee8c:	0801be78 	.word	0x0801be78
 800ee90:	0801a2b8 	.word	0x0801a2b8

0800ee94 <op_nop>:
/*! OP_NOP

  No operation
*/
static inline void op_nop( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  FETCH_Z();
}
 800ee9e:	bf00      	nop
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <op_move>:
/*! OP_MOVE

  R[a] = R[b]
*/
static inline void op_move( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800eeaa:	b590      	push	{r4, r7, lr}
 800eeac:	b085      	sub	sp, #20
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	691b      	ldr	r3, [r3, #16]
 800eeb8:	1c59      	adds	r1, r3, #1
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	6111      	str	r1, [r2, #16]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	60fb      	str	r3, [r7, #12]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	1c59      	adds	r1, r3, #1
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	6111      	str	r1, [r2, #16]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	60bb      	str	r3, [r7, #8]

  mrbc_incref(&regs[b]);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	011b      	lsls	r3, r3, #4
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	4413      	add	r3, r2
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff fa47 	bl	800e36c <mrbc_incref>
  mrbc_decref(&regs[a]);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	011b      	lsls	r3, r3, #4
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	4413      	add	r3, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff fa74 	bl	800e3d4 <mrbc_decref>
  regs[a] = regs[b];
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	011b      	lsls	r3, r3, #4
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	18d1      	adds	r1, r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	683a      	ldr	r2, [r7, #0]
 800eefa:	4413      	add	r3, r2
 800eefc:	461c      	mov	r4, r3
 800eefe:	460b      	mov	r3, r1
 800ef00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ef06:	bf00      	nop
 800ef08:	3714      	adds	r7, #20
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd90      	pop	{r4, r7, pc}

0800ef0e <op_loadl>:
/*! OP_LOADL

  R[a] = Pool[b]
*/
static inline void op_loadl( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800ef0e:	b590      	push	{r4, r7, lr}
 800ef10:	b089      	sub	sp, #36	; 0x24
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6178      	str	r0, [r7, #20]
 800ef16:	6139      	str	r1, [r7, #16]
  FETCH_BB();
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	691b      	ldr	r3, [r3, #16]
 800ef1c:	1c59      	adds	r1, r3, #1
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	6111      	str	r1, [r2, #16]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	1c59      	adds	r1, r3, #1
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	6111      	str	r1, [r2, #16]
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	61bb      	str	r3, [r7, #24]

  mrbc_decref(&regs[a]);
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	011b      	lsls	r3, r3, #4
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fa49 	bl	800e3d4 <mrbc_decref>
  regs[a] = mrbc_irep_pool_value(vm, b);
 800ef42:	69b9      	ldr	r1, [r7, #24]
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	011b      	lsls	r3, r3, #4
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	18d4      	adds	r4, r2, r3
 800ef4c:	463b      	mov	r3, r7
 800ef4e:	460a      	mov	r2, r1
 800ef50:	6979      	ldr	r1, [r7, #20]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fd fafc 	bl	800c550 <mrbc_irep_pool_value>
 800ef58:	463b      	mov	r3, r7
 800ef5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800ef60:	bf00      	nop
 800ef62:	3724      	adds	r7, #36	; 0x24
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd90      	pop	{r4, r7, pc}

0800ef68 <op_loadi>:
/*! OP_LOADI

  R[a] = mrb_int(b)
*/
static inline void op_loadi( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	1c59      	adds	r1, r3, #1
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	6111      	str	r1, [r2, #16]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	1c59      	adds	r1, r3, #1
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	6111      	str	r1, [r2, #16]
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	60bb      	str	r3, [r7, #8]

  mrbc_decref(&regs[a]);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	011b      	lsls	r3, r3, #4
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	4413      	add	r3, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fa1c 	bl	800e3d4 <mrbc_decref>
  mrbc_set_integer(&regs[a], b);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	011b      	lsls	r3, r3, #4
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	4413      	add	r3, r2
 800efa4:	2204      	movs	r2, #4
 800efa6:	701a      	strb	r2, [r3, #0]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	011b      	lsls	r3, r3, #4
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	4413      	add	r3, r2
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	609a      	str	r2, [r3, #8]
}
 800efb4:	bf00      	nop
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <op_loadineg>:
/*! OP_LOADINEG

  R[a] = mrb_int(-b)
*/
static inline void op_loadineg( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	6111      	str	r1, [r2, #16]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	1c59      	adds	r1, r3, #1
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	6111      	str	r1, [r2, #16]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	60bb      	str	r3, [r7, #8]

  mrbc_decref(&regs[a]);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	011b      	lsls	r3, r3, #4
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	4413      	add	r3, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff f9f2 	bl	800e3d4 <mrbc_decref>
  mrbc_set_integer(&regs[a], -(mrbc_int_t)b);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	011b      	lsls	r3, r3, #4
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	4413      	add	r3, r2
 800eff8:	2204      	movs	r2, #4
 800effa:	701a      	strb	r2, [r3, #0]
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	011b      	lsls	r3, r3, #4
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	440b      	add	r3, r1
 800f006:	4252      	negs	r2, r2
 800f008:	609a      	str	r2, [r3, #8]
}
 800f00a:	bf00      	nop
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <op_loadi_n>:
/*! OP_LOADI_n (n=-1,0,1..7)

  R[a] = mrb_int(n)
*/
static inline void op_loadi_n( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b086      	sub	sp, #24
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
 800f01a:	6039      	str	r1, [r7, #0]
  // get n
  int opcode = vm->inst[-1];
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	3b01      	subs	r3, #1
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	617b      	str	r3, [r7, #20]
  int n = opcode - OP_LOADI_0;
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	3b06      	subs	r3, #6
 800f02a:	613b      	str	r3, [r7, #16]

  FETCH_B();
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	1c59      	adds	r1, r3, #1
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	6111      	str	r1, [r2, #16]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	011b      	lsls	r3, r3, #4
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	4413      	add	r3, r2
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff f9c6 	bl	800e3d4 <mrbc_decref>
  mrbc_set_integer(&regs[a], n);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	011b      	lsls	r3, r3, #4
 800f04c:	683a      	ldr	r2, [r7, #0]
 800f04e:	4413      	add	r3, r2
 800f050:	2204      	movs	r2, #4
 800f052:	701a      	strb	r2, [r3, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	011b      	lsls	r3, r3, #4
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	4413      	add	r3, r2
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	609a      	str	r2, [r3, #8]
}
 800f060:	bf00      	nop
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <op_loadi16>:
/*! OP_LOADI16

  R[a] = mrb_int(b)
*/
static inline void op_loadi16( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	1c59      	adds	r1, r3, #1
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	6111      	str	r1, [r2, #16]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	617b      	str	r3, [r7, #20]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	1c59      	adds	r1, r3, #1
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	6111      	str	r1, [r2, #16]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	613b      	str	r3, [r7, #16]
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	021a      	lsls	r2, r3, #8
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	1c58      	adds	r0, r3, #1
 800f098:	6879      	ldr	r1, [r7, #4]
 800f09a:	6108      	str	r0, [r1, #16]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	613b      	str	r3, [r7, #16]

  mrbc_decref(&regs[a]);
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	011b      	lsls	r3, r3, #4
 800f0a6:	683a      	ldr	r2, [r7, #0]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff f992 	bl	800e3d4 <mrbc_decref>
  int16_t signed_b = (int16_t)b;
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	81fb      	strh	r3, [r7, #14]
  mrbc_set_integer(&regs[a], signed_b);
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	011b      	lsls	r3, r3, #4
 800f0b8:	683a      	ldr	r2, [r7, #0]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	2204      	movs	r2, #4
 800f0be:	701a      	strb	r2, [r3, #0]
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f0cc:	609a      	str	r2, [r3, #8]
}
 800f0ce:	bf00      	nop
 800f0d0:	3718      	adds	r7, #24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <op_loadi32>:
/*! OP_LOADI32

  R[a] = mrb_int((b<<16)+c)
*/
static inline void op_loadi32( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b086      	sub	sp, #24
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	6039      	str	r1, [r7, #0]
  FETCH_BSS();
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	1c59      	adds	r1, r3, #1
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	6111      	str	r1, [r2, #16]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	617b      	str	r3, [r7, #20]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	1c59      	adds	r1, r3, #1
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	6111      	str	r1, [r2, #16]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	613b      	str	r3, [r7, #16]
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	021a      	lsls	r2, r3, #8
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	691b      	ldr	r3, [r3, #16]
 800f104:	1c58      	adds	r0, r3, #1
 800f106:	6879      	ldr	r1, [r7, #4]
 800f108:	6108      	str	r0, [r1, #16]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	613b      	str	r3, [r7, #16]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	1c59      	adds	r1, r3, #1
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	6111      	str	r1, [r2, #16]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	021a      	lsls	r2, r3, #8
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	1c58      	adds	r0, r3, #1
 800f128:	6879      	ldr	r1, [r7, #4]
 800f12a:	6108      	str	r0, [r1, #16]
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	4313      	orrs	r3, r2
 800f130:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	011b      	lsls	r3, r3, #4
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	4413      	add	r3, r2
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff f94a 	bl	800e3d4 <mrbc_decref>
  mrbc_set_integer(&regs[a], (((int32_t)b<<16)+(int32_t)c));
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	4413      	add	r3, r2
 800f148:	2204      	movs	r2, #4
 800f14a:	701a      	strb	r2, [r3, #0]
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	0419      	lsls	r1, r3, #16
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	011b      	lsls	r3, r3, #4
 800f156:	6838      	ldr	r0, [r7, #0]
 800f158:	4403      	add	r3, r0
 800f15a:	440a      	add	r2, r1
 800f15c:	609a      	str	r2, [r3, #8]
}
 800f15e:	bf00      	nop
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <op_loadsym>:
/*! OP_LOADSYM

  R[a] = Syms[b]
*/
static inline void op_loadsym( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b084      	sub	sp, #16
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
 800f16e:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	1c59      	adds	r1, r3, #1
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	6111      	str	r1, [r2, #16]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	60fb      	str	r3, [r7, #12]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	1c59      	adds	r1, r3, #1
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	6111      	str	r1, [r2, #16]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	60bb      	str	r3, [r7, #8]

  mrbc_decref(&regs[a]);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	011b      	lsls	r3, r3, #4
 800f190:	683a      	ldr	r2, [r7, #0]
 800f192:	4413      	add	r3, r2
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff f91d 	bl	800e3d4 <mrbc_decref>
  mrbc_set_symbol(&regs[a], mrbc_irep_symbol_id(vm->cur_irep, b));
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	011b      	lsls	r3, r3, #4
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	2206      	movs	r2, #6
 800f1a4:	701a      	strb	r2, [r3, #0]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	f103 0220 	add.w	r2, r3, #32
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	4413      	add	r3, r2
 800f1c0:	460a      	mov	r2, r1
 800f1c2:	609a      	str	r2, [r3, #8]
}
 800f1c4:	bf00      	nop
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <op_loadnil>:
/*! OP_LOADNIL

  R[a] = nil
*/
static inline void op_loadnil( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	1c59      	adds	r1, r3, #1
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	6111      	str	r1, [r2, #16]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	011b      	lsls	r3, r3, #4
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff f8f1 	bl	800e3d4 <mrbc_decref>
  mrbc_set_nil(&regs[a]);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	011b      	lsls	r3, r3, #4
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	701a      	strb	r2, [r3, #0]
}
 800f1fe:	bf00      	nop
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <op_loadself>:
/*! OP_LOADSELF

  R[a] = self
*/
static inline void op_loadself( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f206:	b590      	push	{r4, r7, lr}
 800f208:	b085      	sub	sp, #20
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	691b      	ldr	r3, [r3, #16]
 800f214:	1c59      	adds	r1, r3, #1
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	6111      	str	r1, [r2, #16]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	011b      	lsls	r3, r3, #4
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	4413      	add	r3, r2
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff f8d4 	bl	800e3d4 <mrbc_decref>
  regs[a] = *mrbc_get_self( vm, regs );
 800f22c:	6839      	ldr	r1, [r7, #0]
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f7ff fbb4 	bl	800e99c <mrbc_get_self>
 800f234:	4601      	mov	r1, r0
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	011b      	lsls	r3, r3, #4
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	4413      	add	r3, r2
 800f23e:	461c      	mov	r4, r3
 800f240:	460b      	mov	r3, r1
 800f242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a] );
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	011b      	lsls	r3, r3, #4
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	4413      	add	r3, r2
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff f88b 	bl	800e36c <mrbc_incref>
}
 800f256:	bf00      	nop
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd90      	pop	{r4, r7, pc}

0800f25e <op_loadt>:
/*! OP_LOADT

  R[a] = true
*/
static inline void op_loadt( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b084      	sub	sp, #16
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	1c59      	adds	r1, r3, #1
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	6111      	str	r1, [r2, #16]
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	011b      	lsls	r3, r3, #4
 800f27a:	683a      	ldr	r2, [r7, #0]
 800f27c:	4413      	add	r3, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff f8a8 	bl	800e3d4 <mrbc_decref>
  mrbc_set_true(&regs[a]);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	011b      	lsls	r3, r3, #4
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	4413      	add	r3, r2
 800f28c:	2203      	movs	r2, #3
 800f28e:	701a      	strb	r2, [r3, #0]
}
 800f290:	bf00      	nop
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <op_loadf>:
/*! OP_LOADF

  R[a] = false
*/
static inline void op_loadf( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	1c59      	adds	r1, r3, #1
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	6111      	str	r1, [r2, #16]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	011b      	lsls	r3, r3, #4
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff f88b 	bl	800e3d4 <mrbc_decref>
  mrbc_set_false(&regs[a]);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	701a      	strb	r2, [r3, #0]
}
 800f2ca:	bf00      	nop
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <op_getgv>:
/*! OP_GETGV

  R[a] = getglobal(Syms[b])
*/
static inline void op_getgv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f2d2:	b590      	push	{r4, r7, lr}
 800f2d4:	b087      	sub	sp, #28
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
 800f2da:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	1c59      	adds	r1, r3, #1
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	6111      	str	r1, [r2, #16]
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	617b      	str	r3, [r7, #20]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	1c59      	adds	r1, r3, #1
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	6111      	str	r1, [r2, #16]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	613b      	str	r3, [r7, #16]

  mrbc_decref(&regs[a]);
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	011b      	lsls	r3, r3, #4
 800f2fc:	683a      	ldr	r2, [r7, #0]
 800f2fe:	4413      	add	r3, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f7ff f867 	bl	800e3d4 <mrbc_decref>
  mrbc_value *v = mrbc_get_global( mrbc_irep_symbol_id(vm->cur_irep, b) );
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	f103 0220 	add.w	r2, r3, #32
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	4413      	add	r3, r2
 800f314:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fc fb11 	bl	800b940 <mrbc_get_global>
 800f31e:	60f8      	str	r0, [r7, #12]
  if( v == NULL ) {
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d106      	bne.n	800f334 <op_getgv+0x62>
    mrbc_set_nil(&regs[a]);
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	011b      	lsls	r3, r3, #4
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	4413      	add	r3, r2
 800f32e:	2201      	movs	r2, #1
 800f330:	701a      	strb	r2, [r3, #0]
  } else {
    mrbc_incref(v);
    regs[a] = *v;
  }
}
 800f332:	e00b      	b.n	800f34c <op_getgv+0x7a>
    mrbc_incref(v);
 800f334:	68f8      	ldr	r0, [r7, #12]
 800f336:	f7ff f819 	bl	800e36c <mrbc_incref>
    regs[a] = *v;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	011b      	lsls	r3, r3, #4
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	441a      	add	r2, r3
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4614      	mov	r4, r2
 800f346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f34c:	bf00      	nop
 800f34e:	371c      	adds	r7, #28
 800f350:	46bd      	mov	sp, r7
 800f352:	bd90      	pop	{r4, r7, pc}

0800f354 <op_setgv>:
/*! OP_SETGV

  setglobal(Syms[b], R[a])
*/
static inline void op_setgv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	1c59      	adds	r1, r3, #1
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	6111      	str	r1, [r2, #16]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	60fb      	str	r3, [r7, #12]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	691b      	ldr	r3, [r3, #16]
 800f370:	1c59      	adds	r1, r3, #1
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	6111      	str	r1, [r2, #16]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	60bb      	str	r3, [r7, #8]

  mrbc_incref(&regs[a]);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	011b      	lsls	r3, r3, #4
 800f37e:	683a      	ldr	r2, [r7, #0]
 800f380:	4413      	add	r3, r2
 800f382:	4618      	mov	r0, r3
 800f384:	f7fe fff2 	bl	800e36c <mrbc_incref>
  mrbc_set_global( mrbc_irep_symbol_id(vm->cur_irep, b), &regs[a] );
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	f103 0220 	add.w	r2, r3, #32
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	4413      	add	r3, r2
 800f396:	f9b3 0000 	ldrsh.w	r0, [r3]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	011b      	lsls	r3, r3, #4
 800f39e:	683a      	ldr	r2, [r7, #0]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	f7fc fab8 	bl	800b918 <mrbc_set_global>
}
 800f3a8:	bf00      	nop
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <op_getiv>:
/*! OP_GETIV

  R[a] = ivget(Syms[b])
*/
static inline void op_getiv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f3b0:	b590      	push	{r4, r7, lr}
 800f3b2:	b08d      	sub	sp, #52	; 0x34
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6178      	str	r0, [r7, #20]
 800f3b8:	6139      	str	r1, [r7, #16]
  FETCH_BB();
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	1c59      	adds	r1, r3, #1
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	6111      	str	r1, [r2, #16]
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	1c59      	adds	r1, r3, #1
 800f3ce:	697a      	ldr	r2, [r7, #20]
 800f3d0:	6111      	str	r1, [r2, #16]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	62bb      	str	r3, [r7, #40]	; 0x28

  const char *sym_name = mrbc_irep_symbol_cstr(vm->cur_irep, b);
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	f103 0220 	add.w	r2, r3, #32
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	005b      	lsls	r3, r3, #1
 800f3e2:	4413      	add	r3, r2
 800f3e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fe fba5 	bl	800db38 <mrbc_symid_to_str>
 800f3ee:	6278      	str	r0, [r7, #36]	; 0x24
  mrbc_sym sym_id = mrbc_str_to_symid(sym_name+1);   // skip '@'
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fe fb67 	bl	800dac8 <mrbc_str_to_symid>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	847b      	strh	r3, [r7, #34]	; 0x22
  if( sym_id < 0 ) {
 800f3fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f402:	2b00      	cmp	r3, #0
 800f404:	da05      	bge.n	800f412 <op_getiv+0x62>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800f406:	4a12      	ldr	r2, [pc, #72]	; (800f450 <op_getiv+0xa0>)
 800f408:	4912      	ldr	r1, [pc, #72]	; (800f454 <op_getiv+0xa4>)
 800f40a:	6978      	ldr	r0, [r7, #20]
 800f40c:	f7fb fffa 	bl	800b404 <mrbc_raise>
    return;
 800f410:	e01a      	b.n	800f448 <op_getiv+0x98>
  }
  mrbc_value *self = mrbc_get_self( vm, regs );
 800f412:	6939      	ldr	r1, [r7, #16]
 800f414:	6978      	ldr	r0, [r7, #20]
 800f416:	f7ff fac1 	bl	800e99c <mrbc_get_self>
 800f41a:	61f8      	str	r0, [r7, #28]

  mrbc_decref(&regs[a]);
 800f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41e:	011b      	lsls	r3, r3, #4
 800f420:	693a      	ldr	r2, [r7, #16]
 800f422:	4413      	add	r3, r2
 800f424:	4618      	mov	r0, r3
 800f426:	f7fe ffd5 	bl	800e3d4 <mrbc_decref>
  regs[a] = mrbc_instance_getiv(self, sym_id);
 800f42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	693a      	ldr	r2, [r7, #16]
 800f430:	18d4      	adds	r4, r2, r3
 800f432:	463b      	mov	r3, r7
 800f434:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800f438:	69f9      	ldr	r1, [r7, #28]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fa f88f 	bl	800955e <mrbc_instance_getiv>
 800f440:	463b      	mov	r3, r7
 800f442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f448:	3734      	adds	r7, #52	; 0x34
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd90      	pop	{r4, r7, pc}
 800f44e:	bf00      	nop
 800f450:	0801a2fc 	.word	0x0801a2fc
 800f454:	2000010c 	.word	0x2000010c

0800f458 <op_setiv>:
/*! OP_SETIV

  ivset(Syms[b],R[a])
*/
static inline void op_setiv( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b088      	sub	sp, #32
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	1c59      	adds	r1, r3, #1
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	6111      	str	r1, [r2, #16]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	61fb      	str	r3, [r7, #28]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	1c59      	adds	r1, r3, #1
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	6111      	str	r1, [r2, #16]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	61bb      	str	r3, [r7, #24]

  const char *sym_name = mrbc_irep_symbol_cstr(vm->cur_irep, b);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	f103 0220 	add.w	r2, r3, #32
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	005b      	lsls	r3, r3, #1
 800f48a:	4413      	add	r3, r2
 800f48c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f490:	4618      	mov	r0, r3
 800f492:	f7fe fb51 	bl	800db38 <mrbc_symid_to_str>
 800f496:	6178      	str	r0, [r7, #20]
  mrbc_sym sym_id = mrbc_str_to_symid(sym_name+1);   // skip '@'
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	3301      	adds	r3, #1
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fe fb13 	bl	800dac8 <mrbc_str_to_symid>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	827b      	strh	r3, [r7, #18]
  if( sym_id < 0 ) {
 800f4a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	da05      	bge.n	800f4ba <op_setiv+0x62>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 800f4ae:	4a0c      	ldr	r2, [pc, #48]	; (800f4e0 <op_setiv+0x88>)
 800f4b0:	490c      	ldr	r1, [pc, #48]	; (800f4e4 <op_setiv+0x8c>)
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7fb ffa6 	bl	800b404 <mrbc_raise>
    return;
 800f4b8:	e00e      	b.n	800f4d8 <op_setiv+0x80>
  }
  mrbc_value *self = mrbc_get_self( vm, regs );
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff fa6d 	bl	800e99c <mrbc_get_self>
 800f4c2:	60f8      	str	r0, [r7, #12]

  mrbc_instance_setiv(self, sym_id, &regs[a]);
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	011b      	lsls	r3, r3, #4
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	441a      	add	r2, r3
 800f4cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f7fa f82c 	bl	8009530 <mrbc_instance_setiv>
}
 800f4d8:	3720      	adds	r7, #32
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	0801a2fc 	.word	0x0801a2fc
 800f4e4:	2000010c 	.word	0x2000010c

0800f4e8 <op_getconst>:
/*! OP_GETCONST

  R[a] = constget(Syms[b])
*/
static inline void op_getconst( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f4e8:	b590      	push	{r4, r7, lr}
 800f4ea:	b089      	sub	sp, #36	; 0x24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	691b      	ldr	r3, [r3, #16]
 800f4f6:	1c59      	adds	r1, r3, #1
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	6111      	str	r1, [r2, #16]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	613b      	str	r3, [r7, #16]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	1c59      	adds	r1, r3, #1
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	6111      	str	r1, [r2, #16]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	60fb      	str	r3, [r7, #12]

  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	f103 0220 	add.w	r2, r3, #32
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	4413      	add	r3, r2
 800f51c:	881b      	ldrh	r3, [r3, #0]
 800f51e:	817b      	strh	r3, [r7, #10]
  mrbc_class *cls = NULL;
 800f520:	2300      	movs	r3, #0
 800f522:	61fb      	str	r3, [r7, #28]
  mrbc_value *v;

  if( vm->target_class->sym_id != MRBC_SYM(Object) ) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	699b      	ldr	r3, [r3, #24]
 800f528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f52c:	2b27      	cmp	r3, #39	; 0x27
 800f52e:	d003      	beq.n	800f538 <op_getconst+0x50>
    cls = vm->target_class;		// References in class definitions.
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	699b      	ldr	r3, [r3, #24]
 800f534:	61fb      	str	r3, [r7, #28]
 800f536:	e007      	b.n	800f548 <op_getconst+0x60>
  } else if( vm->callinfo_tail ) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <op_getconst+0x60>
    cls = vm->callinfo_tail->own_class;	// References in methods.
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	69db      	ldr	r3, [r3, #28]
 800f544:	695b      	ldr	r3, [r3, #20]
 800f546:	61fb      	str	r3, [r7, #28]
  }
  if( !cls ) goto TOP_LEVEL;
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d03b      	beq.n	800f5c6 <op_getconst+0xde>

  // search in my class, then search nested outer class.
  mrbc_class *cls1 = cls;
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	617b      	str	r3, [r7, #20]
  while( 1 ) {
    v = mrbc_get_class_const(cls1, sym_id);
 800f552:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f556:	4619      	mov	r1, r3
 800f558:	6978      	ldr	r0, [r7, #20]
 800f55a:	f7fc f9a5 	bl	800b8a8 <mrbc_get_class_const>
 800f55e:	61b8      	str	r0, [r7, #24]
    if( v != NULL ) goto DONE;
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d145      	bne.n	800f5f2 <op_getconst+0x10a>
    if( !mrbc_is_nested_symid(cls1->sym_id) ) break;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe ff85 	bl	800e47c <mrbc_is_nested_symid>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d103      	bne.n	800f580 <op_getconst+0x98>
    mrbc_separate_nested_symid( cls1->sym_id, &outer_id, 0 );
    cls1 = mrbc_get_const( outer_id )->cls;
  }

  // search in super class.
  cls1 = cls->super;
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	617b      	str	r3, [r7, #20]
  while( cls1 ) {
 800f57e:	e01e      	b.n	800f5be <op_getconst+0xd6>
    mrbc_separate_nested_symid( cls1->sym_id, &outer_id, 0 );
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f586:	f107 0108 	add.w	r1, r7, #8
 800f58a:	2200      	movs	r2, #0
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7fe fb83 	bl	800dc98 <mrbc_separate_nested_symid>
    cls1 = mrbc_get_const( outer_id )->cls;
 800f592:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f596:	4618      	mov	r0, r3
 800f598:	f7fc f974 	bl	800b884 <mrbc_get_const>
 800f59c:	4603      	mov	r3, r0
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	617b      	str	r3, [r7, #20]
  while( 1 ) {
 800f5a2:	e7d6      	b.n	800f552 <op_getconst+0x6a>
    v = mrbc_get_class_const(cls1, sym_id);
 800f5a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	6978      	ldr	r0, [r7, #20]
 800f5ac:	f7fc f97c 	bl	800b8a8 <mrbc_get_class_const>
 800f5b0:	61b8      	str	r0, [r7, #24]
    if( v != NULL ) goto DONE;
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d11e      	bne.n	800f5f6 <op_getconst+0x10e>
    cls1 = cls1->super;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	617b      	str	r3, [r7, #20]
  while( cls1 ) {
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1ef      	bne.n	800f5a4 <op_getconst+0xbc>
  }

 TOP_LEVEL:
 800f5c4:	e000      	b.n	800f5c8 <op_getconst+0xe0>
  if( !cls ) goto TOP_LEVEL;
 800f5c6:	bf00      	nop
  // is top level constant definition?
  v = mrbc_get_const(sym_id);
 800f5c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fc f959 	bl	800b884 <mrbc_get_const>
 800f5d2:	61b8      	str	r0, [r7, #24]
  if( v == NULL ) {
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10f      	bne.n	800f5fa <op_getconst+0x112>
    mrbc_raisef( vm, MRBC_CLASS(NameError),
 800f5da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fe faaa 	bl	800db38 <mrbc_symid_to_str>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	4a10      	ldr	r2, [pc, #64]	; (800f628 <op_getconst+0x140>)
 800f5e8:	4910      	ldr	r1, [pc, #64]	; (800f62c <op_getconst+0x144>)
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7fb ff5e 	bl	800b4ac <mrbc_raisef>
		 "uninitialized constant %s", mrbc_symid_to_str(sym_id));
    return;
 800f5f0:	e017      	b.n	800f622 <op_getconst+0x13a>
    if( v != NULL ) goto DONE;
 800f5f2:	bf00      	nop
 800f5f4:	e002      	b.n	800f5fc <op_getconst+0x114>
    if( v != NULL ) goto DONE;
 800f5f6:	bf00      	nop
 800f5f8:	e000      	b.n	800f5fc <op_getconst+0x114>
  }

 DONE:
 800f5fa:	bf00      	nop
  mrbc_incref(v);
 800f5fc:	69b8      	ldr	r0, [r7, #24]
 800f5fe:	f7fe feb5 	bl	800e36c <mrbc_incref>
  mrbc_decref(&regs[a]);
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	4413      	add	r3, r2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fe fee2 	bl	800e3d4 <mrbc_decref>
  regs[a] = *v;
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	011b      	lsls	r3, r3, #4
 800f614:	683a      	ldr	r2, [r7, #0]
 800f616:	441a      	add	r2, r3
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	4614      	mov	r4, r2
 800f61c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f61e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f622:	3724      	adds	r7, #36	; 0x24
 800f624:	46bd      	mov	sp, r7
 800f626:	bd90      	pop	{r4, r7, pc}
 800f628:	0801a318 	.word	0x0801a318
 800f62c:	20000174 	.word	0x20000174

0800f630 <op_setconst>:
/*! OP_SETCONST

  constset(Syms[b],R[a])
*/
static inline void op_setconst( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	691b      	ldr	r3, [r3, #16]
 800f63e:	1c59      	adds	r1, r3, #1
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	6111      	str	r1, [r2, #16]
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	617b      	str	r3, [r7, #20]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	1c59      	adds	r1, r3, #1
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	6111      	str	r1, [r2, #16]
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	613b      	str	r3, [r7, #16]

  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	f103 0220 	add.w	r2, r3, #32
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	4413      	add	r3, r2
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	81fb      	strh	r3, [r7, #14]

  mrbc_incref(&regs[a]);
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	011b      	lsls	r3, r3, #4
 800f66c:	683a      	ldr	r2, [r7, #0]
 800f66e:	4413      	add	r3, r2
 800f670:	4618      	mov	r0, r3
 800f672:	f7fe fe7b 	bl	800e36c <mrbc_incref>
  if( mrbc_type(regs[0]) == MRBC_TT_CLASS ) {
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	f993 3000 	ldrsb.w	r3, [r3]
 800f67c:	2b07      	cmp	r3, #7
 800f67e:	d10b      	bne.n	800f698 <op_setconst+0x68>
    mrbc_set_class_const(regs[0].cls, sym_id, &regs[a]);
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	6898      	ldr	r0, [r3, #8]
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	011b      	lsls	r3, r3, #4
 800f688:	683a      	ldr	r2, [r7, #0]
 800f68a:	441a      	add	r2, r3
 800f68c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f690:	4619      	mov	r1, r3
 800f692:	f7fc f8d1 	bl	800b838 <mrbc_set_class_const>
  } else {
    mrbc_set_const(sym_id, &regs[a]);
  }
}
 800f696:	e009      	b.n	800f6ac <op_setconst+0x7c>
    mrbc_set_const(sym_id, &regs[a]);
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	441a      	add	r2, r3
 800f6a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fc f8a4 	bl	800b7f4 <mrbc_set_const>
}
 800f6ac:	bf00      	nop
 800f6ae:	3718      	adds	r7, #24
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <op_getmcnst>:
/*! OP_GETMCNST

  R[a] = R[a]::Syms[b]
*/
static inline void op_getmcnst( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b08b      	sub	sp, #44	; 0x2c
 800f6b8:	af02      	add	r7, sp, #8
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	1c59      	adds	r1, r3, #1
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	6111      	str	r1, [r2, #16]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	61bb      	str	r3, [r7, #24]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	1c59      	adds	r1, r3, #1
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	6111      	str	r1, [r2, #16]
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	617b      	str	r3, [r7, #20]

  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	f103 0220 	add.w	r2, r3, #32
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4413      	add	r3, r2
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	827b      	strh	r3, [r7, #18]
  mrbc_class *cls = regs[a].cls;
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	011b      	lsls	r3, r3, #4
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	61fb      	str	r3, [r7, #28]
  mrbc_value *v;

  while( !(v = mrbc_get_class_const(cls, sym_id)) ) {
 800f6f8:	e020      	b.n	800f73c <op_getmcnst+0x88>
    cls = cls->super;
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	61fb      	str	r3, [r7, #28]
    if( cls->sym_id == MRBC_SYM(Object) ) {
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f706:	2b27      	cmp	r3, #39	; 0x27
 800f708:	d118      	bne.n	800f73c <op_getmcnst+0x88>
      mrbc_raisef( vm, MRBC_CLASS(NameError), "uninitialized constant %s::%s",
	mrbc_symid_to_str( regs[a].cls->sym_id ), mrbc_symid_to_str( sym_id ));
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	011b      	lsls	r3, r3, #4
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	4413      	add	r3, r2
 800f712:	689b      	ldr	r3, [r3, #8]
      mrbc_raisef( vm, MRBC_CLASS(NameError), "uninitialized constant %s::%s",
 800f714:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fe fa0d 	bl	800db38 <mrbc_symid_to_str>
 800f71e:	4604      	mov	r4, r0
 800f720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f724:	4618      	mov	r0, r3
 800f726:	f7fe fa07 	bl	800db38 <mrbc_symid_to_str>
 800f72a:	4603      	mov	r3, r0
 800f72c:	9300      	str	r3, [sp, #0]
 800f72e:	4623      	mov	r3, r4
 800f730:	4a12      	ldr	r2, [pc, #72]	; (800f77c <op_getmcnst+0xc8>)
 800f732:	4913      	ldr	r1, [pc, #76]	; (800f780 <op_getmcnst+0xcc>)
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fb feb9 	bl	800b4ac <mrbc_raisef>
      return;
 800f73a:	e01c      	b.n	800f776 <op_getmcnst+0xc2>
  while( !(v = mrbc_get_class_const(cls, sym_id)) ) {
 800f73c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f740:	4619      	mov	r1, r3
 800f742:	69f8      	ldr	r0, [r7, #28]
 800f744:	f7fc f8b0 	bl	800b8a8 <mrbc_get_class_const>
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d0d4      	beq.n	800f6fa <op_getmcnst+0x46>
    }
  }

  mrbc_incref(v);
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7fe fe0b 	bl	800e36c <mrbc_incref>
  mrbc_decref(&regs[a]);
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	011b      	lsls	r3, r3, #4
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	4413      	add	r3, r2
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fe fe38 	bl	800e3d4 <mrbc_decref>
  regs[a] = *v;
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	011b      	lsls	r3, r3, #4
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	441a      	add	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	4614      	mov	r4, r2
 800f770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f776:	3724      	adds	r7, #36	; 0x24
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd90      	pop	{r4, r7, pc}
 800f77c:	0801a334 	.word	0x0801a334
 800f780:	20000174 	.word	0x20000174

0800f784 <op_getupvar>:

  b: target offset of regs.
  c: nested block level.
*/
static inline void op_getupvar( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f784:	b590      	push	{r4, r7, lr}
 800f786:	b08b      	sub	sp, #44	; 0x2c
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	1c59      	adds	r1, r3, #1
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	6111      	str	r1, [r2, #16]
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	61bb      	str	r3, [r7, #24]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	691b      	ldr	r3, [r3, #16]
 800f7a0:	1c59      	adds	r1, r3, #1
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	6111      	str	r1, [r2, #16]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	617b      	str	r3, [r7, #20]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	1c59      	adds	r1, r3, #1
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	6111      	str	r1, [r2, #16]
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	613b      	str	r3, [r7, #16]

  assert( mrbc_type(regs[0]) == MRBC_TT_PROC );
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	f993 3000 	ldrsb.w	r3, [r3]
 800f7be:	2b09      	cmp	r3, #9
 800f7c0:	d006      	beq.n	800f7d0 <op_getupvar+0x4c>
 800f7c2:	4b2e      	ldr	r3, [pc, #184]	; (800f87c <op_getupvar+0xf8>)
 800f7c4:	4a2e      	ldr	r2, [pc, #184]	; (800f880 <op_getupvar+0xfc>)
 800f7c6:	f240 313a 	movw	r1, #826	; 0x33a
 800f7ca:	482e      	ldr	r0, [pc, #184]	; (800f884 <op_getupvar+0x100>)
 800f7cc:	f005 fee0 	bl	8015590 <__assert_func>
  mrbc_callinfo *callinfo = regs[0].proc->callinfo;
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	627b      	str	r3, [r7, #36]	; 0x24

  for( int i = 0; i < c; i++ ) {
 800f7d8:	2300      	movs	r3, #0
 800f7da:	623b      	str	r3, [r7, #32]
 800f7dc:	e01c      	b.n	800f818 <op_getupvar+0x94>
    assert( callinfo );
 800f7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d106      	bne.n	800f7f2 <op_getupvar+0x6e>
 800f7e4:	4b28      	ldr	r3, [pc, #160]	; (800f888 <op_getupvar+0x104>)
 800f7e6:	4a26      	ldr	r2, [pc, #152]	; (800f880 <op_getupvar+0xfc>)
 800f7e8:	f240 313e 	movw	r1, #830	; 0x33e
 800f7ec:	4825      	ldr	r0, [pc, #148]	; (800f884 <op_getupvar+0x100>)
 800f7ee:	f005 fecf 	bl	8015590 <__assert_func>
    mrbc_value *reg0 = callinfo->cur_regs + callinfo->reg_offset;
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	68da      	ldr	r2, [r3, #12]
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f8:	7f9b      	ldrb	r3, [r3, #30]
 800f7fa:	011b      	lsls	r3, r3, #4
 800f7fc:	4413      	add	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]

    if( mrbc_type(*reg0) != MRBC_TT_PROC ) break;	// What to do?
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f993 3000 	ldrsb.w	r3, [r3]
 800f806:	2b09      	cmp	r3, #9
 800f808:	d10b      	bne.n	800f822 <op_getupvar+0x9e>
    callinfo = reg0->proc->callinfo;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	627b      	str	r3, [r7, #36]	; 0x24
  for( int i = 0; i < c; i++ ) {
 800f812:	6a3b      	ldr	r3, [r7, #32]
 800f814:	3301      	adds	r3, #1
 800f816:	623b      	str	r3, [r7, #32]
 800f818:	6a3b      	ldr	r3, [r7, #32]
 800f81a:	693a      	ldr	r2, [r7, #16]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d8de      	bhi.n	800f7de <op_getupvar+0x5a>
 800f820:	e000      	b.n	800f824 <op_getupvar+0xa0>
    if( mrbc_type(*reg0) != MRBC_TT_PROC ) break;	// What to do?
 800f822:	bf00      	nop
  }

  mrbc_value *p_val;
  if( callinfo == 0 ) {
 800f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f826:	2b00      	cmp	r3, #0
 800f828:	d107      	bne.n	800f83a <op_getupvar+0xb6>
    p_val = vm->regs + b;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	011b      	lsls	r3, r3, #4
 800f834:	4413      	add	r3, r2
 800f836:	61fb      	str	r3, [r7, #28]
 800f838:	e009      	b.n	800f84e <op_getupvar+0xca>
  } else {
    p_val = callinfo->cur_regs + callinfo->reg_offset + b;
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	68da      	ldr	r2, [r3, #12]
 800f83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f840:	7f9b      	ldrb	r3, [r3, #30]
 800f842:	4619      	mov	r1, r3
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	440b      	add	r3, r1
 800f848:	011b      	lsls	r3, r3, #4
 800f84a:	4413      	add	r3, r2
 800f84c:	61fb      	str	r3, [r7, #28]
  }
  mrbc_incref( p_val );
 800f84e:	69f8      	ldr	r0, [r7, #28]
 800f850:	f7fe fd8c 	bl	800e36c <mrbc_incref>

  mrbc_decref( &regs[a] );
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	011b      	lsls	r3, r3, #4
 800f858:	683a      	ldr	r2, [r7, #0]
 800f85a:	4413      	add	r3, r2
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe fdb9 	bl	800e3d4 <mrbc_decref>
  regs[a] = *p_val;
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	011b      	lsls	r3, r3, #4
 800f866:	683a      	ldr	r2, [r7, #0]
 800f868:	441a      	add	r2, r3
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	4614      	mov	r4, r2
 800f86e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f874:	bf00      	nop
 800f876:	372c      	adds	r7, #44	; 0x2c
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd90      	pop	{r4, r7, pc}
 800f87c:	0801a354 	.word	0x0801a354
 800f880:	0801be84 	.word	0x0801be84
 800f884:	0801a2b8 	.word	0x0801a2b8
 800f888:	0801a378 	.word	0x0801a378

0800f88c <op_setupvar>:
/*! OP_SETUPVAR

  uvset(b,c,R[a])
*/
static inline void op_setupvar( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f88c:	b590      	push	{r4, r7, lr}
 800f88e:	b08b      	sub	sp, #44	; 0x2c
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	691b      	ldr	r3, [r3, #16]
 800f89a:	1c59      	adds	r1, r3, #1
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	6111      	str	r1, [r2, #16]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	61bb      	str	r3, [r7, #24]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	1c59      	adds	r1, r3, #1
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	6111      	str	r1, [r2, #16]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	1c59      	adds	r1, r3, #1
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	6111      	str	r1, [r2, #16]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	613b      	str	r3, [r7, #16]

  assert( regs[0].tt == MRBC_TT_PROC );
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	f993 3000 	ldrsb.w	r3, [r3]
 800f8c6:	2b09      	cmp	r3, #9
 800f8c8:	d006      	beq.n	800f8d8 <op_setupvar+0x4c>
 800f8ca:	4b31      	ldr	r3, [pc, #196]	; (800f990 <op_setupvar+0x104>)
 800f8cc:	4a31      	ldr	r2, [pc, #196]	; (800f994 <op_setupvar+0x108>)
 800f8ce:	f240 315b 	movw	r1, #859	; 0x35b
 800f8d2:	4831      	ldr	r0, [pc, #196]	; (800f998 <op_setupvar+0x10c>)
 800f8d4:	f005 fe5c 	bl	8015590 <__assert_func>
  mrbc_callinfo *callinfo = regs[0].proc->callinfo;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	627b      	str	r3, [r7, #36]	; 0x24

  for( int i = 0; i < c; i++ ) {
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	623b      	str	r3, [r7, #32]
 800f8e4:	e023      	b.n	800f92e <op_setupvar+0xa2>
    assert( callinfo );
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d106      	bne.n	800f8fa <op_setupvar+0x6e>
 800f8ec:	4b2b      	ldr	r3, [pc, #172]	; (800f99c <op_setupvar+0x110>)
 800f8ee:	4a29      	ldr	r2, [pc, #164]	; (800f994 <op_setupvar+0x108>)
 800f8f0:	f240 315f 	movw	r1, #863	; 0x35f
 800f8f4:	4828      	ldr	r0, [pc, #160]	; (800f998 <op_setupvar+0x10c>)
 800f8f6:	f005 fe4b 	bl	8015590 <__assert_func>
    mrbc_value *reg0 = callinfo->cur_regs + callinfo->reg_offset;
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fc:	68da      	ldr	r2, [r3, #12]
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	7f9b      	ldrb	r3, [r3, #30]
 800f902:	011b      	lsls	r3, r3, #4
 800f904:	4413      	add	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]
    assert( reg0->tt == MRBC_TT_PROC );
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f993 3000 	ldrsb.w	r3, [r3]
 800f90e:	2b09      	cmp	r3, #9
 800f910:	d006      	beq.n	800f920 <op_setupvar+0x94>
 800f912:	4b23      	ldr	r3, [pc, #140]	; (800f9a0 <op_setupvar+0x114>)
 800f914:	4a1f      	ldr	r2, [pc, #124]	; (800f994 <op_setupvar+0x108>)
 800f916:	f240 3161 	movw	r1, #865	; 0x361
 800f91a:	481f      	ldr	r0, [pc, #124]	; (800f998 <op_setupvar+0x10c>)
 800f91c:	f005 fe38 	bl	8015590 <__assert_func>
    callinfo = reg0->proc->callinfo;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	627b      	str	r3, [r7, #36]	; 0x24
  for( int i = 0; i < c; i++ ) {
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	3301      	adds	r3, #1
 800f92c:	623b      	str	r3, [r7, #32]
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	429a      	cmp	r2, r3
 800f934:	d8d7      	bhi.n	800f8e6 <op_setupvar+0x5a>
  }

  mrbc_value *p_val;
  if( callinfo == 0 ) {
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d107      	bne.n	800f94c <op_setupvar+0xc0>
    p_val = vm->regs + b;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	011b      	lsls	r3, r3, #4
 800f946:	4413      	add	r3, r2
 800f948:	61fb      	str	r3, [r7, #28]
 800f94a:	e009      	b.n	800f960 <op_setupvar+0xd4>
  } else {
    p_val = callinfo->cur_regs + callinfo->reg_offset + b;
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	68da      	ldr	r2, [r3, #12]
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	7f9b      	ldrb	r3, [r3, #30]
 800f954:	4619      	mov	r1, r3
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	440b      	add	r3, r1
 800f95a:	011b      	lsls	r3, r3, #4
 800f95c:	4413      	add	r3, r2
 800f95e:	61fb      	str	r3, [r7, #28]
  }
  mrbc_decref( p_val );
 800f960:	69f8      	ldr	r0, [r7, #28]
 800f962:	f7fe fd37 	bl	800e3d4 <mrbc_decref>

  mrbc_incref( &regs[a] );
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	011b      	lsls	r3, r3, #4
 800f96a:	683a      	ldr	r2, [r7, #0]
 800f96c:	4413      	add	r3, r2
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fe fcfc 	bl	800e36c <mrbc_incref>
  *p_val = regs[a];
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	011b      	lsls	r3, r3, #4
 800f978:	683a      	ldr	r2, [r7, #0]
 800f97a:	4413      	add	r3, r2
 800f97c:	69fa      	ldr	r2, [r7, #28]
 800f97e:	4614      	mov	r4, r2
 800f980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f986:	bf00      	nop
 800f988:	372c      	adds	r7, #44	; 0x2c
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd90      	pop	{r4, r7, pc}
 800f98e:	bf00      	nop
 800f990:	0801a384 	.word	0x0801a384
 800f994:	0801be90 	.word	0x0801be90
 800f998:	0801a2b8 	.word	0x0801a2b8
 800f99c:	0801a378 	.word	0x0801a378
 800f9a0:	0801a3a0 	.word	0x0801a3a0

0800f9a4 <op_getidx>:
/*! OP_GETIDX

  R[a] = R[a][R[a+1]]
*/
static inline void op_getidx( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	1c59      	adds	r1, r3, #1
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6111      	str	r1, [r2, #16]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, MRBC_SYMID_BL_BR, a, 1 );
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	2301      	movs	r3, #1
 800f9c0:	2137      	movs	r1, #55	; 0x37
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fe fe5e 	bl	800e684 <send_by_name>
}
 800f9c8:	bf00      	nop
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <op_setidx>:
/*! OP_SETIDX

  R[a][R[a+1]] = R[a+2]
*/
static inline void op_setidx( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	691b      	ldr	r3, [r3, #16]
 800f9de:	1c59      	adds	r1, r3, #1
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	6111      	str	r1, [r2, #16]
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, MRBC_SYMID_BL_BR_EQ, a, 2 );
 800f9e8:	68fa      	ldr	r2, [r7, #12]
 800f9ea:	2302      	movs	r3, #2
 800f9ec:	2138      	movs	r1, #56	; 0x38
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7fe fe48 	bl	800e684 <send_by_name>
}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <op_jmp>:
/*! OP_JMP

  pc+=a
*/
static inline void op_jmp( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  FETCH_S();
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	1c59      	adds	r1, r3, #1
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	6111      	str	r1, [r2, #16]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	021a      	lsls	r2, r3, #8
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	691b      	ldr	r3, [r3, #16]
 800fa1c:	1c58      	adds	r0, r3, #1
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	6108      	str	r0, [r1, #16]
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	4313      	orrs	r3, r2
 800fa26:	60fb      	str	r3, [r7, #12]

  vm->inst += (int16_t)a;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	b212      	sxth	r2, r2
 800fa30:	441a      	add	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	611a      	str	r2, [r3, #16]
}
 800fa36:	bf00      	nop
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr

0800fa42 <op_jmpif>:
/*! OP_JMPIF

  if R[a] pc+=b
*/
static inline void op_jmpif( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fa42:	b480      	push	{r7}
 800fa44:	b085      	sub	sp, #20
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
 800fa4a:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	1c59      	adds	r1, r3, #1
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	6111      	str	r1, [r2, #16]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	60fb      	str	r3, [r7, #12]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	691b      	ldr	r3, [r3, #16]
 800fa5e:	1c59      	adds	r1, r3, #1
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	6111      	str	r1, [r2, #16]
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	60bb      	str	r3, [r7, #8]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	021a      	lsls	r2, r3, #8
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	1c58      	adds	r0, r3, #1
 800fa72:	6879      	ldr	r1, [r7, #4]
 800fa74:	6108      	str	r0, [r1, #16]
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt > MRBC_TT_FALSE ) {
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	011b      	lsls	r3, r3, #4
 800fa80:	683a      	ldr	r2, [r7, #0]
 800fa82:	4413      	add	r3, r2
 800fa84:	f993 3000 	ldrsb.w	r3, [r3]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	dd06      	ble.n	800fa9a <op_jmpif+0x58>
    vm->inst += (int16_t)b;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	691b      	ldr	r3, [r3, #16]
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	b212      	sxth	r2, r2
 800fa94:	441a      	add	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	611a      	str	r2, [r3, #16]
  }
}
 800fa9a:	bf00      	nop
 800fa9c:	3714      	adds	r7, #20
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <op_jmpnot>:
/*! OP_JMPNOT

  if !R[a] pc+=b
*/
static inline void op_jmpnot( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800faa6:	b480      	push	{r7}
 800faa8:	b085      	sub	sp, #20
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	691b      	ldr	r3, [r3, #16]
 800fab4:	1c59      	adds	r1, r3, #1
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	6111      	str	r1, [r2, #16]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	60fb      	str	r3, [r7, #12]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	1c59      	adds	r1, r3, #1
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	6111      	str	r1, [r2, #16]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	60bb      	str	r3, [r7, #8]
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	021a      	lsls	r2, r3, #8
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	691b      	ldr	r3, [r3, #16]
 800fad4:	1c58      	adds	r0, r3, #1
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	6108      	str	r0, [r1, #16]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	4313      	orrs	r3, r2
 800fade:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt <= MRBC_TT_FALSE ) {
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	011b      	lsls	r3, r3, #4
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	4413      	add	r3, r2
 800fae8:	f993 3000 	ldrsb.w	r3, [r3]
 800faec:	2b02      	cmp	r3, #2
 800faee:	dc06      	bgt.n	800fafe <op_jmpnot+0x58>
    vm->inst += (int16_t)b;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	68ba      	ldr	r2, [r7, #8]
 800faf6:	b212      	sxth	r2, r2
 800faf8:	441a      	add	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	611a      	str	r2, [r3, #16]
  }
}
 800fafe:	bf00      	nop
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <op_jmpnil>:
/*! OP_JMPNIL

  if R[a]==nil pc+=b
*/
static inline void op_jmpnil( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fb0a:	b480      	push	{r7}
 800fb0c:	b085      	sub	sp, #20
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	1c59      	adds	r1, r3, #1
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	6111      	str	r1, [r2, #16]
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	60fb      	str	r3, [r7, #12]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	1c59      	adds	r1, r3, #1
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	6111      	str	r1, [r2, #16]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	60bb      	str	r3, [r7, #8]
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	021a      	lsls	r2, r3, #8
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	1c58      	adds	r0, r3, #1
 800fb3a:	6879      	ldr	r1, [r7, #4]
 800fb3c:	6108      	str	r0, [r1, #16]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt == MRBC_TT_NIL ) {
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	683a      	ldr	r2, [r7, #0]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	f993 3000 	ldrsb.w	r3, [r3]
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d106      	bne.n	800fb62 <op_jmpnil+0x58>
    vm->inst += (int16_t)b;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	b212      	sxth	r2, r2
 800fb5c:	441a      	add	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	611a      	str	r2, [r3, #16]
  }
}
 800fb62:	bf00      	nop
 800fb64:	3714      	adds	r7, #20
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
	...

0800fb70 <op_jmpuw>:
/*! OP_JMPUW

  unwind_and_jump_to(a)
*/
static inline void op_jmpuw( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fb70:	b590      	push	{r4, r7, lr}
 800fb72:	b087      	sub	sp, #28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  FETCH_S();
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	1c59      	adds	r1, r3, #1
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	6111      	str	r1, [r2, #16]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	617b      	str	r3, [r7, #20]
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	021a      	lsls	r2, r3, #8
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	1c58      	adds	r0, r3, #1
 800fb92:	6879      	ldr	r1, [r7, #4]
 800fb94:	6108      	str	r0, [r1, #16]
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]

  const uint8_t *jump_inst = vm->inst + (int16_t)a;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	691b      	ldr	r3, [r3, #16]
 800fba0:	697a      	ldr	r2, [r7, #20]
 800fba2:	b212      	sxth	r2, r2
 800fba4:	4413      	add	r3, r2
 800fba6:	613b      	str	r3, [r7, #16]

  // check catch handler (ensure)
  const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7fe feab 	bl	800e904 <find_catch_handler_ensure>
 800fbae:	60f8      	str	r0, [r7, #12]
  if( !handler ) {
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d103      	bne.n	800fbbe <op_jmpuw+0x4e>
    vm->inst = jump_inst;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	693a      	ldr	r2, [r7, #16]
 800fbba:	611a      	str	r2, [r3, #16]
    return;
 800fbbc:	e03a      	b.n	800fc34 <op_jmpuw+0xc4>
  }

  // check whether the jump point is inside or outside the catch handler.
  uint32_t jump_point = jump_inst - vm->cur_irep->inst;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	699b      	ldr	r3, [r3, #24]
 800fbc4:	693a      	ldr	r2, [r7, #16]
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	60bb      	str	r3, [r7, #8]
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fd3a 	bl	800e648 <bin_to_uint32>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d90c      	bls.n	800fbf6 <op_jmpuw+0x86>
      (jump_point <= bin_to_uint32(handler->end)) ) {
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	3305      	adds	r3, #5
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fe fd31 	bl	800e648 <bin_to_uint32>
 800fbe6:	4602      	mov	r2, r0
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d803      	bhi.n	800fbf6 <op_jmpuw+0x86>
    vm->inst = jump_inst;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	693a      	ldr	r2, [r7, #16]
 800fbf2:	611a      	str	r2, [r3, #16]
    return;
 800fbf4:	e01e      	b.n	800fc34 <op_jmpuw+0xc4>
  }

  // jump point is outside, thus jump to ensure.
  assert( vm->exception.tt == MRBC_TT_NIL );
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d006      	beq.n	800fc0e <op_jmpuw+0x9e>
 800fc00:	4b0e      	ldr	r3, [pc, #56]	; (800fc3c <op_jmpuw+0xcc>)
 800fc02:	4a0f      	ldr	r2, [pc, #60]	; (800fc40 <op_jmpuw+0xd0>)
 800fc04:	f240 31e1 	movw	r1, #993	; 0x3e1
 800fc08:	480e      	ldr	r0, [pc, #56]	; (800fc44 <op_jmpuw+0xd4>)
 800fc0a:	f005 fcc1 	bl	8015590 <__assert_func>
  vm->exception.tt = MRBC_TT_JMPUW;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	22fb      	movs	r2, #251	; 0xfb
 800fc12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  vm->exception.handle = (void*)jump_inst;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	631a      	str	r2, [r3, #48]	; 0x30
  vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	699c      	ldr	r4, [r3, #24]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	3309      	adds	r3, #9
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe fd0e 	bl	800e648 <bin_to_uint32>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	18e2      	adds	r2, r4, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	611a      	str	r2, [r3, #16]
}
 800fc34:	371c      	adds	r7, #28
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd90      	pop	{r4, r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	0801a3bc 	.word	0x0801a3bc
 800fc40:	0801be9c 	.word	0x0801be9c
 800fc44:	0801a2b8 	.word	0x0801a2b8

0800fc48 <op_except>:
/*! OP_EXCEPT

  R[a] = exc
*/
static inline void op_except( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fc48:	b590      	push	{r4, r7, lr}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	1c59      	adds	r1, r3, #1
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	6111      	str	r1, [r2, #16]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	60fb      	str	r3, [r7, #12]

  mrbc_decref( &regs[a] );
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	011b      	lsls	r3, r3, #4
 800fc64:	683a      	ldr	r2, [r7, #0]
 800fc66:	4413      	add	r3, r2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7fe fbb3 	bl	800e3d4 <mrbc_decref>
  regs[a] = vm->exception;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	011b      	lsls	r3, r3, #4
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	441a      	add	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4614      	mov	r4, r2
 800fc7a:	3328      	adds	r3, #40	; 0x28
 800fc7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_set_nil( &vm->exception );
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2201      	movs	r2, #1
 800fc86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800fc8a:	bf00      	nop
 800fc8c:	3714      	adds	r7, #20
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd90      	pop	{r4, r7, pc}
	...

0800fc94 <op_rescue>:
/*! OP_RESCUE

  R[b] = R[a].isa?(R[b])
*/
static inline void op_rescue( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	1c59      	adds	r1, r3, #1
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	6111      	str	r1, [r2, #16]
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	617b      	str	r3, [r7, #20]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	691b      	ldr	r3, [r3, #16]
 800fcb0:	1c59      	adds	r1, r3, #1
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	6111      	str	r1, [r2, #16]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	613b      	str	r3, [r7, #16]

  assert( regs[a].tt == MRBC_TT_EXCEPTION );
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	011b      	lsls	r3, r3, #4
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	4413      	add	r3, r2
 800fcc2:	f993 3000 	ldrsb.w	r3, [r3]
 800fcc6:	2b0e      	cmp	r3, #14
 800fcc8:	d006      	beq.n	800fcd8 <op_rescue+0x44>
 800fcca:	4b19      	ldr	r3, [pc, #100]	; (800fd30 <op_rescue+0x9c>)
 800fccc:	4a19      	ldr	r2, [pc, #100]	; (800fd34 <op_rescue+0xa0>)
 800fcce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fcd2:	4819      	ldr	r0, [pc, #100]	; (800fd38 <op_rescue+0xa4>)
 800fcd4:	f005 fc5c 	bl	8015590 <__assert_func>
  assert( regs[b].tt == MRBC_TT_CLASS );
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	011b      	lsls	r3, r3, #4
 800fcdc:	683a      	ldr	r2, [r7, #0]
 800fcde:	4413      	add	r3, r2
 800fce0:	f993 3000 	ldrsb.w	r3, [r3]
 800fce4:	2b07      	cmp	r3, #7
 800fce6:	d006      	beq.n	800fcf6 <op_rescue+0x62>
 800fce8:	4b14      	ldr	r3, [pc, #80]	; (800fd3c <op_rescue+0xa8>)
 800fcea:	4a12      	ldr	r2, [pc, #72]	; (800fd34 <op_rescue+0xa0>)
 800fcec:	f240 4101 	movw	r1, #1025	; 0x401
 800fcf0:	4811      	ldr	r0, [pc, #68]	; (800fd38 <op_rescue+0xa4>)
 800fcf2:	f005 fc4d 	bl	8015590 <__assert_func>

  int res = mrbc_obj_is_kind_of( &regs[a], regs[b].cls );
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	011b      	lsls	r3, r3, #4
 800fcfa:	683a      	ldr	r2, [r7, #0]
 800fcfc:	18d0      	adds	r0, r2, r3
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	011b      	lsls	r3, r3, #4
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	4413      	add	r3, r2
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	4619      	mov	r1, r3
 800fd0a:	f7f9 fcac 	bl	8009666 <mrbc_obj_is_kind_of>
 800fd0e:	60f8      	str	r0, [r7, #12]
  mrbc_set_bool( &regs[b], res );
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <op_rescue+0x86>
 800fd16:	2103      	movs	r1, #3
 800fd18:	e000      	b.n	800fd1c <op_rescue+0x88>
 800fd1a:	2102      	movs	r1, #2
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	011b      	lsls	r3, r3, #4
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	4413      	add	r3, r2
 800fd24:	460a      	mov	r2, r1
 800fd26:	701a      	strb	r2, [r3, #0]
}
 800fd28:	bf00      	nop
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	0801a3dc 	.word	0x0801a3dc
 800fd34:	0801bea8 	.word	0x0801bea8
 800fd38:	0801a2b8 	.word	0x0801a2b8
 800fd3c:	0801a3fc 	.word	0x0801a3fc

0800fd40 <op_raiseif>:
/*! OP_RAISEIF

  raise(R[a]) if R[a]
*/
static inline void op_raiseif( mrbc_vm *vm, mrbc_value *regs EXT )
{
 800fd40:	b590      	push	{r4, r7, lr}
 800fd42:	b09d      	sub	sp, #116	; 0x74
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
  FETCH_B();
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	691b      	ldr	r3, [r3, #16]
 800fd4e:	1c59      	adds	r1, r3, #1
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	6111      	str	r1, [r2, #16]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	66bb      	str	r3, [r7, #104]	; 0x68

  // save the parameter.
  mrbc_value ra = regs[a];
 800fd58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd5a:	011b      	lsls	r3, r3, #4
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	4413      	add	r3, r2
 800fd60:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800fd64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 800fd6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd6c:	011b      	lsls	r3, r3, #4
 800fd6e:	683a      	ldr	r2, [r7, #0]
 800fd70:	4413      	add	r3, r2
 800fd72:	2200      	movs	r2, #0
 800fd74:	701a      	strb	r2, [r3, #0]

  switch( mrbc_type(ra) ) {
 800fd76:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 800fd7a:	3305      	adds	r3, #5
 800fd7c:	2b13      	cmp	r3, #19
 800fd7e:	d82b      	bhi.n	800fdd8 <op_raiseif+0x98>
 800fd80:	a201      	add	r2, pc, #4	; (adr r2, 800fd88 <op_raiseif+0x48>)
 800fd82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd86:	bf00      	nop
 800fd88:	0801003b 	.word	0x0801003b
 800fd8c:	0800ff7d 	.word	0x0800ff7d
 800fd90:	0800fe79 	.word	0x0800fe79
 800fd94:	0800fe0b 	.word	0x0800fe0b
 800fd98:	0800fdd9 	.word	0x0800fdd9
 800fd9c:	0800fdd9 	.word	0x0800fdd9
 800fda0:	0800fdd9 	.word	0x0800fdd9
 800fda4:	0800fdd9 	.word	0x0800fdd9
 800fda8:	0800fdd9 	.word	0x0800fdd9
 800fdac:	0800fdd9 	.word	0x0800fdd9
 800fdb0:	0800fdd9 	.word	0x0800fdd9
 800fdb4:	0800fdd9 	.word	0x0800fdd9
 800fdb8:	0800fdd9 	.word	0x0800fdd9
 800fdbc:	0800fdd9 	.word	0x0800fdd9
 800fdc0:	0800fdd9 	.word	0x0800fdd9
 800fdc4:	0800fdd9 	.word	0x0800fdd9
 800fdc8:	0800fdd9 	.word	0x0800fdd9
 800fdcc:	0800fdd9 	.word	0x0800fdd9
 800fdd0:	0800fdd9 	.word	0x0800fdd9
 800fdd4:	080100e3 	.word	0x080100e3
  case MRBC_TT_RETURN:		goto CASE_OP_RETURN;
  case MRBC_TT_RETURN_BLK:	goto CASE_OP_RETURN_BLK;
  case MRBC_TT_BREAK:		goto CASE_OP_BREAK;
  case MRBC_TT_JMPUW:		goto CASE_OP_JMPUW;
  case MRBC_TT_EXCEPTION:	goto CASE_OP_EXCEPTION;
  default: break;
 800fdd8:	bf00      	nop
  }

  assert( mrbc_type(ra) == MRBC_TT_NIL );
 800fdda:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d006      	beq.n	800fdf0 <op_raiseif+0xb0>
 800fde2:	4b9c      	ldr	r3, [pc, #624]	; (8010054 <op_raiseif+0x314>)
 800fde4:	4a9c      	ldr	r2, [pc, #624]	; (8010058 <op_raiseif+0x318>)
 800fde6:	f240 411e 	movw	r1, #1054	; 0x41e
 800fdea:	489c      	ldr	r0, [pc, #624]	; (801005c <op_raiseif+0x31c>)
 800fdec:	f005 fbd0 	bl	8015590 <__assert_func>
  assert( mrbc_type(vm->exception) == MRBC_TT_NIL );
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	f000 8180 	beq.w	80100fc <op_raiseif+0x3bc>
 800fdfc:	4b98      	ldr	r3, [pc, #608]	; (8010060 <op_raiseif+0x320>)
 800fdfe:	4a96      	ldr	r2, [pc, #600]	; (8010058 <op_raiseif+0x318>)
 800fe00:	f240 411f 	movw	r1, #1055	; 0x41f
 800fe04:	4895      	ldr	r0, [pc, #596]	; (801005c <op_raiseif+0x31c>)
 800fe06:	f005 fbc3 	bl	8015590 <__assert_func>
  case MRBC_TT_RETURN:		goto CASE_OP_RETURN;
 800fe0a:	bf00      	nop


CASE_OP_RETURN:
{
  // find ensure that still needs to be executed.
  const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7fe fd79 	bl	800e904 <find_catch_handler_ensure>
 800fe12:	6678      	str	r0, [r7, #100]	; 0x64
  if( handler ) {
 800fe14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d014      	beq.n	800fe44 <op_raiseif+0x104>
    vm->exception = ra;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800fe20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fe24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	699c      	ldr	r4, [r3, #24]
 800fe30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe32:	3309      	adds	r3, #9
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fe fc07 	bl	800e648 <bin_to_uint32>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	18e2      	adds	r2, r4, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	611a      	str	r2, [r3, #16]
    return;
 800fe42:	e15c      	b.n	80100fe <op_raiseif+0x3be>
  }

  // set the return value and return to caller.
  mrbc_decref(&regs[0]);
 800fe44:	6838      	ldr	r0, [r7, #0]
 800fe46:	f7fe fac5 	bl	800e3d4 <mrbc_decref>
  regs[0] = regs[ vm->cur_irep->nregs ];
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	889b      	ldrh	r3, [r3, #4]
 800fe50:	011b      	lsls	r3, r3, #4
 800fe52:	683a      	ldr	r2, [r7, #0]
 800fe54:	4413      	add	r3, r2
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	4614      	mov	r4, r2
 800fe5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[ vm->cur_irep->nregs ].tt = MRBC_TT_EMPTY;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	889b      	ldrh	r3, [r3, #4]
 800fe66:	011b      	lsls	r3, r3, #4
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	701a      	strb	r2, [r3, #0]

  mrbc_pop_callinfo(vm);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7fe fe3b 	bl	800eaec <mrbc_pop_callinfo>
  return;
 800fe76:	e142      	b.n	80100fe <op_raiseif+0x3be>
  case MRBC_TT_RETURN_BLK:	goto CASE_OP_RETURN_BLK;
 800fe78:	bf00      	nop
}


CASE_OP_RETURN_BLK:
{
  assert( vm->ret_blk );
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <op_raiseif+0x150>
 800fe82:	4b78      	ldr	r3, [pc, #480]	; (8010064 <op_raiseif+0x324>)
 800fe84:	4a74      	ldr	r2, [pc, #464]	; (8010058 <op_raiseif+0x318>)
 800fe86:	f240 4139 	movw	r1, #1081	; 0x439
 800fe8a:	4874      	ldr	r0, [pc, #464]	; (801005c <op_raiseif+0x31c>)
 800fe8c:	f005 fb80 	bl	8015590 <__assert_func>

  // return to the proc generated level.
  while( 1 ) {
    // find ensure that still needs to be executed.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7fe fd37 	bl	800e904 <find_catch_handler_ensure>
 800fe96:	6638      	str	r0, [r7, #96]	; 0x60
    if( handler ) {
 800fe98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d014      	beq.n	800fec8 <op_raiseif+0x188>
      vm->exception = ra;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800fea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800feaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	699c      	ldr	r4, [r3, #24]
 800feb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800feb6:	3309      	adds	r3, #9
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fbc5 	bl	800e648 <bin_to_uint32>
 800febe:	4603      	mov	r3, r0
 800fec0:	18e2      	adds	r2, r4, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	611a      	str	r2, [r3, #16]
      return;
 800fec6:	e11a      	b.n	80100fe <op_raiseif+0x3be>
    }

    // Is it the origin (generator) of proc?
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	69da      	ldr	r2, [r3, #28]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d003      	beq.n	800fede <op_raiseif+0x19e>

    mrbc_pop_callinfo(vm);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7fe fe08 	bl	800eaec <mrbc_pop_callinfo>
  while( 1 ) {
 800fedc:	e7d8      	b.n	800fe90 <op_raiseif+0x150>
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 800fede:	bf00      	nop
  }

  // top level return ?
  if( vm->callinfo_tail == NULL ) {
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	69db      	ldr	r3, [r3, #28]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d11c      	bne.n	800ff22 <op_raiseif+0x1e2>
    mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 800fee8:	f107 0318 	add.w	r3, r7, #24
 800feec:	2200      	movs	r2, #0
 800feee:	601a      	str	r2, [r3, #0]
 800fef0:	605a      	str	r2, [r3, #4]
 800fef2:	609a      	str	r2, [r3, #8]
 800fef4:	60da      	str	r2, [r3, #12]
 800fef6:	2309      	movs	r3, #9
 800fef8:	763b      	strb	r3, [r7, #24]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	623b      	str	r3, [r7, #32]
 800ff00:	f107 0318 	add.w	r3, r7, #24
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fe fa65 	bl	800e3d4 <mrbc_decref>
    vm->ret_blk = 0;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	621a      	str	r2, [r3, #32]

    vm->flag_preemption = 1;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	70da      	strb	r2, [r3, #3]
    vm->flag_stop = 1;
 800ff16:	687a      	ldr	r2, [r7, #4]
 800ff18:	7913      	ldrb	r3, [r2, #4]
 800ff1a:	f043 0302 	orr.w	r3, r3, #2
 800ff1e:	7113      	strb	r3, [r2, #4]
 800ff20:	e0ed      	b.n	80100fe <op_raiseif+0x3be>
    return;
  }

  // set the return value and return to caller.
  mrbc_value *reg0 = vm->callinfo_tail->cur_regs + vm->callinfo_tail->reg_offset;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	69db      	ldr	r3, [r3, #28]
 800ff26:	68da      	ldr	r2, [r3, #12]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	69db      	ldr	r3, [r3, #28]
 800ff2c:	7f9b      	ldrb	r3, [r3, #30]
 800ff2e:	011b      	lsls	r3, r3, #4
 800ff30:	4413      	add	r3, r2
 800ff32:	65fb      	str	r3, [r7, #92]	; 0x5c
  mrbc_decref(reg0);
 800ff34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ff36:	f7fe fa4d 	bl	800e3d4 <mrbc_decref>
  *reg0 = vm->ret_blk->ret_val;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a1b      	ldr	r3, [r3, #32]
 800ff3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ff40:	4614      	mov	r4, r2
 800ff42:	3310      	adds	r3, #16
 800ff44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 800ff4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff4e:	2200      	movs	r2, #0
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	605a      	str	r2, [r3, #4]
 800ff54:	609a      	str	r2, [r3, #8]
 800ff56:	60da      	str	r2, [r3, #12]
 800ff58:	2309      	movs	r3, #9
 800ff5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	633b      	str	r3, [r7, #48]	; 0x30
 800ff64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fe fa33 	bl	800e3d4 <mrbc_decref>
  vm->ret_blk = 0;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	621a      	str	r2, [r3, #32]

  mrbc_pop_callinfo(vm);
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7fe fdb9 	bl	800eaec <mrbc_pop_callinfo>
  return;
 800ff7a:	e0c0      	b.n	80100fe <op_raiseif+0x3be>
  case MRBC_TT_BREAK:		goto CASE_OP_BREAK;
 800ff7c:	bf00      	nop
}


CASE_OP_BREAK: {
  assert( vm->ret_blk );
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a1b      	ldr	r3, [r3, #32]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <op_raiseif+0x254>
 800ff86:	4b37      	ldr	r3, [pc, #220]	; (8010064 <op_raiseif+0x324>)
 800ff88:	4a33      	ldr	r2, [pc, #204]	; (8010058 <op_raiseif+0x318>)
 800ff8a:	f240 4163 	movw	r1, #1123	; 0x463
 800ff8e:	4833      	ldr	r0, [pc, #204]	; (801005c <op_raiseif+0x31c>)
 800ff90:	f005 fafe 	bl	8015590 <__assert_func>

  // return to the proc generated level.
  int reg_offset = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	66fb      	str	r3, [r7, #108]	; 0x6c
  while( vm->callinfo_tail != vm->ret_blk->callinfo_self ) {
 800ff98:	e022      	b.n	800ffe0 <op_raiseif+0x2a0>
    // find ensure that still needs to be executed.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7fe fcb2 	bl	800e904 <find_catch_handler_ensure>
 800ffa0:	6578      	str	r0, [r7, #84]	; 0x54
    if( handler ) {
 800ffa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d014      	beq.n	800ffd2 <op_raiseif+0x292>
      vm->exception = ra;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ffae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	699c      	ldr	r4, [r3, #24]
 800ffbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffc0:	3309      	adds	r3, #9
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fe fb40 	bl	800e648 <bin_to_uint32>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	18e2      	adds	r2, r4, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	611a      	str	r2, [r3, #16]
      return;
 800ffd0:	e095      	b.n	80100fe <op_raiseif+0x3be>
    }

    reg_offset = vm->callinfo_tail->reg_offset;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	69db      	ldr	r3, [r3, #28]
 800ffd6:	7f9b      	ldrb	r3, [r3, #30]
 800ffd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    mrbc_pop_callinfo(vm);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7fe fd86 	bl	800eaec <mrbc_pop_callinfo>
  while( vm->callinfo_tail != vm->ret_blk->callinfo_self ) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69da      	ldr	r2, [r3, #28]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a1b      	ldr	r3, [r3, #32]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d1d5      	bne.n	800ff9a <op_raiseif+0x25a>
  }

  // set the return value.
  mrbc_value *reg0 = vm->cur_regs + reg_offset;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	695a      	ldr	r2, [r3, #20]
 800fff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff4:	011b      	lsls	r3, r3, #4
 800fff6:	4413      	add	r3, r2
 800fff8:	65bb      	str	r3, [r7, #88]	; 0x58
  mrbc_decref(reg0);
 800fffa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fffc:	f7fe f9ea 	bl	800e3d4 <mrbc_decref>
  *reg0 = vm->ret_blk->ret_val;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6a1b      	ldr	r3, [r3, #32]
 8010004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010006:	4614      	mov	r4, r2
 8010008:	3310      	adds	r3, #16
 801000a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801000c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 8010010:	f107 0308 	add.w	r3, r7, #8
 8010014:	2200      	movs	r2, #0
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	605a      	str	r2, [r3, #4]
 801001a:	609a      	str	r2, [r3, #8]
 801001c:	60da      	str	r2, [r3, #12]
 801001e:	2309      	movs	r3, #9
 8010020:	723b      	strb	r3, [r7, #8]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6a1b      	ldr	r3, [r3, #32]
 8010026:	613b      	str	r3, [r7, #16]
 8010028:	f107 0308 	add.w	r3, r7, #8
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe f9d1 	bl	800e3d4 <mrbc_decref>
  vm->ret_blk = 0;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	621a      	str	r2, [r3, #32]
  return;
 8010038:	e061      	b.n	80100fe <op_raiseif+0x3be>
  case MRBC_TT_JMPUW:		goto CASE_OP_JMPUW;
 801003a:	bf00      	nop


CASE_OP_JMPUW:
{
  // find ensure that still needs to be executed.
  const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7fe fc61 	bl	800e904 <find_catch_handler_ensure>
 8010042:	6538      	str	r0, [r7, #80]	; 0x50
  if( !handler ) {
 8010044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010046:	2b00      	cmp	r3, #0
 8010048:	d10e      	bne.n	8010068 <op_raiseif+0x328>
    vm->inst = ra.handle;
 801004a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	611a      	str	r2, [r3, #16]
    return;
 8010050:	e055      	b.n	80100fe <op_raiseif+0x3be>
 8010052:	bf00      	nop
 8010054:	0801a418 	.word	0x0801a418
 8010058:	0801beb4 	.word	0x0801beb4
 801005c:	0801a2b8 	.word	0x0801a2b8
 8010060:	0801a438 	.word	0x0801a438
 8010064:	0801a460 	.word	0x0801a460
  }

  // check whether the jump point is inside or outside the catch handler.
  uint32_t jump_point = (uint8_t *)ra.handle - vm->cur_irep->inst;
 8010068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	699b      	ldr	r3, [r3, #24]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 8010074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010076:	3301      	adds	r3, #1
 8010078:	4618      	mov	r0, r3
 801007a:	f7fe fae5 	bl	800e648 <bin_to_uint32>
 801007e:	4602      	mov	r2, r0
 8010080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010082:	4293      	cmp	r3, r2
 8010084:	d90c      	bls.n	80100a0 <op_raiseif+0x360>
      (jump_point <= bin_to_uint32(handler->end)) ) {
 8010086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010088:	3305      	adds	r3, #5
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fadc 	bl	800e648 <bin_to_uint32>
 8010090:	4602      	mov	r2, r0
  if( (bin_to_uint32(handler->begin) < jump_point) &&
 8010092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010094:	4293      	cmp	r3, r2
 8010096:	d803      	bhi.n	80100a0 <op_raiseif+0x360>
    vm->inst = ra.handle;
 8010098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	611a      	str	r2, [r3, #16]
    return;
 801009e:	e02e      	b.n	80100fe <op_raiseif+0x3be>
  }

  // jump point is outside, thus jump to ensure.
  assert( vm->exception.tt == MRBC_TT_NIL );
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d006      	beq.n	80100b8 <op_raiseif+0x378>
 80100aa:	4b16      	ldr	r3, [pc, #88]	; (8010104 <op_raiseif+0x3c4>)
 80100ac:	4a16      	ldr	r2, [pc, #88]	; (8010108 <op_raiseif+0x3c8>)
 80100ae:	f240 4191 	movw	r1, #1169	; 0x491
 80100b2:	4816      	ldr	r0, [pc, #88]	; (801010c <op_raiseif+0x3cc>)
 80100b4:	f005 fa6c 	bl	8015590 <__assert_func>
  vm->exception = ra;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80100be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80100c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	699c      	ldr	r4, [r3, #24]
 80100ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d0:	3309      	adds	r3, #9
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fe fab8 	bl	800e648 <bin_to_uint32>
 80100d8:	4603      	mov	r3, r0
 80100da:	18e2      	adds	r2, r4, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	611a      	str	r2, [r3, #16]
  return;
 80100e0:	e00d      	b.n	80100fe <op_raiseif+0x3be>
  case MRBC_TT_EXCEPTION:	goto CASE_OP_EXCEPTION;
 80100e2:	bf00      	nop
}


CASE_OP_EXCEPTION:
{
  vm->exception = ra;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80100ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80100ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vm->flag_preemption = 2;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2202      	movs	r2, #2
 80100f8:	70da      	strb	r2, [r3, #3]
  return;
 80100fa:	e000      	b.n	80100fe <op_raiseif+0x3be>
  return;
 80100fc:	bf00      	nop
}
}
 80100fe:	3774      	adds	r7, #116	; 0x74
 8010100:	46bd      	mov	sp, r7
 8010102:	bd90      	pop	{r4, r7, pc}
 8010104:	0801a3bc 	.word	0x0801a3bc
 8010108:	0801beb4 	.word	0x0801beb4
 801010c:	0801a2b8 	.word	0x0801a2b8

08010110 <op_ssend>:
/*! OP_SSEND

  R[a] = self.send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..) (c=n|k<<4)
*/
static inline void op_ssend( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010110:	b590      	push	{r4, r7, lr}
 8010112:	b087      	sub	sp, #28
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	1c59      	adds	r1, r3, #1
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	6111      	str	r1, [r2, #16]
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	617b      	str	r3, [r7, #20]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	691b      	ldr	r3, [r3, #16]
 801012c:	1c59      	adds	r1, r3, #1
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	6111      	str	r1, [r2, #16]
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	613b      	str	r3, [r7, #16]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	1c59      	adds	r1, r3, #1
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	6111      	str	r1, [r2, #16]
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	60fb      	str	r3, [r7, #12]

  mrbc_decref( &regs[a] );
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	011b      	lsls	r3, r3, #4
 8010148:	683a      	ldr	r2, [r7, #0]
 801014a:	4413      	add	r3, r2
 801014c:	4618      	mov	r0, r3
 801014e:	f7fe f941 	bl	800e3d4 <mrbc_decref>
  regs[a] = *mrbc_get_self( vm, regs );
 8010152:	6839      	ldr	r1, [r7, #0]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7fe fc21 	bl	800e99c <mrbc_get_self>
 801015a:	4601      	mov	r1, r0
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	011b      	lsls	r3, r3, #4
 8010160:	683a      	ldr	r2, [r7, #0]
 8010162:	4413      	add	r3, r2
 8010164:	461c      	mov	r4, r3
 8010166:	460b      	mov	r3, r1
 8010168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801016a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a] );
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	011b      	lsls	r3, r3, #4
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	4413      	add	r3, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7fe f8f8 	bl	800e36c <mrbc_incref>

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c );
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	f103 0220 	add.w	r2, r3, #32
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	4413      	add	r3, r2
 801018a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7fe fa76 	bl	800e684 <send_by_name>
}
 8010198:	bf00      	nop
 801019a:	371c      	adds	r7, #28
 801019c:	46bd      	mov	sp, r7
 801019e:	bd90      	pop	{r4, r7, pc}

080101a0 <op_ssendb>:
/*! OP_SSENDB

  R[a] = self.send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..,&R[a+n+2k+1])
*/
static inline void op_ssendb( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80101a0:	b590      	push	{r4, r7, lr}
 80101a2:	b087      	sub	sp, #28
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	1c59      	adds	r1, r3, #1
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	6111      	str	r1, [r2, #16]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	617b      	str	r3, [r7, #20]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	1c59      	adds	r1, r3, #1
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	6111      	str	r1, [r2, #16]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	613b      	str	r3, [r7, #16]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	691b      	ldr	r3, [r3, #16]
 80101ca:	1c59      	adds	r1, r3, #1
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	6111      	str	r1, [r2, #16]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	60fb      	str	r3, [r7, #12]

  mrbc_decref( &regs[a] );
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	011b      	lsls	r3, r3, #4
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	4413      	add	r3, r2
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fe f8f9 	bl	800e3d4 <mrbc_decref>
  regs[a] = *mrbc_get_self( vm, regs );
 80101e2:	6839      	ldr	r1, [r7, #0]
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f7fe fbd9 	bl	800e99c <mrbc_get_self>
 80101ea:	4601      	mov	r1, r0
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	011b      	lsls	r3, r3, #4
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	4413      	add	r3, r2
 80101f4:	461c      	mov	r4, r3
 80101f6:	460b      	mov	r3, r1
 80101f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a] );
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	011b      	lsls	r3, r3, #4
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	4413      	add	r3, r2
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe f8b0 	bl	800e36c <mrbc_incref>

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c | 0x100 );
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	f103 0220 	add.w	r2, r3, #32
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	005b      	lsls	r3, r3, #1
 8010218:	4413      	add	r3, r2
 801021a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801021e:	697a      	ldr	r2, [r7, #20]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7fe fa2c 	bl	800e684 <send_by_name>
}
 801022c:	bf00      	nop
 801022e:	371c      	adds	r7, #28
 8010230:	46bd      	mov	sp, r7
 8010232:	bd90      	pop	{r4, r7, pc}

08010234 <op_send>:
/*! OP_SEND

  R[a] = R[a].send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..) (c=n|k<<4)
*/
static inline void op_send( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b086      	sub	sp, #24
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	691b      	ldr	r3, [r3, #16]
 8010242:	1c59      	adds	r1, r3, #1
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	6111      	str	r1, [r2, #16]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	617b      	str	r3, [r7, #20]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	1c59      	adds	r1, r3, #1
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	6111      	str	r1, [r2, #16]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	613b      	str	r3, [r7, #16]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	1c59      	adds	r1, r3, #1
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	6111      	str	r1, [r2, #16]
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c );
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68db      	ldr	r3, [r3, #12]
 801026c:	f103 0220 	add.w	r2, r3, #32
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	4413      	add	r3, r2
 8010276:	f9b3 1000 	ldrsh.w	r1, [r3]
 801027a:	697a      	ldr	r2, [r7, #20]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7fe fa00 	bl	800e684 <send_by_name>
}
 8010284:	bf00      	nop
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <op_sendb>:
/*! OP_SENDB

  R[a] = R[a].send(Syms[b],R[a+1]..,R[a+n+1]:R[a+n+2]..,&R[a+n+2k+1])
*/
static inline void op_sendb( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	1c59      	adds	r1, r3, #1
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	6111      	str	r1, [r2, #16]
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	617b      	str	r3, [r7, #20]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	691b      	ldr	r3, [r3, #16]
 80102a8:	1c59      	adds	r1, r3, #1
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	6111      	str	r1, [r2, #16]
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	613b      	str	r3, [r7, #16]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	691b      	ldr	r3, [r3, #16]
 80102b6:	1c59      	adds	r1, r3, #1
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	6111      	str	r1, [r2, #16]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	60fb      	str	r3, [r7, #12]

  send_by_name( vm, mrbc_irep_symbol_id(vm->cur_irep, b), a, c | 0x100 );
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	f103 0220 	add.w	r2, r3, #32
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	005b      	lsls	r3, r3, #1
 80102cc:	4413      	add	r3, r2
 80102ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80102d2:	697a      	ldr	r2, [r7, #20]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7fe f9d2 	bl	800e684 <send_by_name>
}
 80102e0:	bf00      	nop
 80102e2:	3718      	adds	r7, #24
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <op_super>:
/*! OP_SUPER

  R[a] = super(R[a+1],... ,R[a+b+1])
*/
static inline void op_super( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80102e8:	b590      	push	{r4, r7, lr}
 80102ea:	b0a5      	sub	sp, #148	; 0x94
 80102ec:	af02      	add	r7, sp, #8
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	691b      	ldr	r3, [r3, #16]
 80102f6:	1c59      	adds	r1, r3, #1
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	6111      	str	r1, [r2, #16]
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	691b      	ldr	r3, [r3, #16]
 8010304:	1c59      	adds	r1, r3, #1
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	6111      	str	r1, [r2, #16]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	677b      	str	r3, [r7, #116]	; 0x74

  int narg = b & 0x0f;
 801030e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010310:	f003 030f 	and.w	r3, r3, #15
 8010314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int karg = (b >> 4) & 0x0f;
 8010318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801031a:	091b      	lsrs	r3, r3, #4
 801031c:	f003 030f 	and.w	r3, r3, #15
 8010320:	673b      	str	r3, [r7, #112]	; 0x70
  mrbc_value *recv = regs + a;	// new regs[0]
 8010322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010324:	011b      	lsls	r3, r3, #4
 8010326:	683a      	ldr	r2, [r7, #0]
 8010328:	4413      	add	r3, r2
 801032a:	66fb      	str	r3, [r7, #108]	; 0x6c

  // set self to new regs[0]
  mrbc_value *self = mrbc_get_self(vm, regs);
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7fe fb34 	bl	800e99c <mrbc_get_self>
 8010334:	66b8      	str	r0, [r7, #104]	; 0x68
  assert( self->tt != MRBC_TT_PROC );
 8010336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010338:	f993 3000 	ldrsb.w	r3, [r3]
 801033c:	2b09      	cmp	r3, #9
 801033e:	d106      	bne.n	801034e <op_super+0x66>
 8010340:	4ba8      	ldr	r3, [pc, #672]	; (80105e4 <op_super+0x2fc>)
 8010342:	4aa9      	ldr	r2, [pc, #676]	; (80105e8 <op_super+0x300>)
 8010344:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8010348:	48a8      	ldr	r0, [pc, #672]	; (80105ec <op_super+0x304>)
 801034a:	f005 f921 	bl	8015590 <__assert_func>

  mrbc_incref( self );
 801034e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8010350:	f7fe f80c 	bl	800e36c <mrbc_incref>
  mrbc_decref( recv );
 8010354:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010356:	f7fe f83d 	bl	800e3d4 <mrbc_decref>
  *recv = *self;
 801035a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801035c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801035e:	4614      	mov	r4, r2
 8010360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // If it's packed in an array, expand it.
  if( narg == CALL_MAXARGS ) {
 8010366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801036a:	2b0f      	cmp	r3, #15
 801036c:	d16b      	bne.n	8010446 <op_super+0x15e>
       on mrbc ver 3.1
         b = 15  in initialize method.
	 b = 255 in other method.
    */

    assert( recv[1].tt == MRBC_TT_ARRAY );
 801036e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010370:	3310      	adds	r3, #16
 8010372:	f993 3000 	ldrsb.w	r3, [r3]
 8010376:	2b0a      	cmp	r3, #10
 8010378:	d006      	beq.n	8010388 <op_super+0xa0>
 801037a:	4b9d      	ldr	r3, [pc, #628]	; (80105f0 <op_super+0x308>)
 801037c:	4a9a      	ldr	r2, [pc, #616]	; (80105e8 <op_super+0x300>)
 801037e:	f240 41fc 	movw	r1, #1276	; 0x4fc
 8010382:	489a      	ldr	r0, [pc, #616]	; (80105ec <op_super+0x304>)
 8010384:	f005 f904 	bl	8015590 <__assert_func>

    mrbc_value argary = recv[1];
 8010388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801038a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801038e:	3310      	adds	r3, #16
 8010390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_value proc = recv[2];
 8010396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010398:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801039c:	3320      	adds	r3, #32
 801039e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    recv[1].tt = MRBC_TT_EMPTY;
 80103a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103a6:	3310      	adds	r3, #16
 80103a8:	2200      	movs	r2, #0
 80103aa:	701a      	strb	r2, [r3, #0]
    recv[2].tt = MRBC_TT_EMPTY;
 80103ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103ae:	3320      	adds	r3, #32
 80103b0:	2200      	movs	r2, #0
 80103b2:	701a      	strb	r2, [r3, #0]

    int argc = mrbc_array_size(&argary);
 80103b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fe f8cf 	bl	800e55c <mrbc_array_size>
 80103be:	6678      	str	r0, [r7, #100]	; 0x64
    for( int i = 0; i < argc; i++ ) {
 80103c0:	2300      	movs	r3, #0
 80103c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80103c6:	e01e      	b.n	8010406 <op_super+0x11e>
      mrbc_decref( &recv[i+1] );
 80103c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80103cc:	3301      	adds	r3, #1
 80103ce:	011b      	lsls	r3, r3, #4
 80103d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80103d2:	4413      	add	r3, r2
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fd fffd 	bl	800e3d4 <mrbc_decref>
      recv[i+1] = argary.array->data[i];
 80103da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103dc:	689a      	ldr	r2, [r3, #8]
 80103de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80103e2:	011b      	lsls	r3, r3, #4
 80103e4:	18d1      	adds	r1, r2, r3
 80103e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80103ea:	3301      	adds	r3, #1
 80103ec:	011b      	lsls	r3, r3, #4
 80103ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80103f0:	4413      	add	r3, r2
 80103f2:	461c      	mov	r4, r3
 80103f4:	460b      	mov	r3, r1
 80103f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for( int i = 0; i < argc; i++ ) {
 80103fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010400:	3301      	adds	r3, #1
 8010402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010406:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801040a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801040c:	429a      	cmp	r2, r3
 801040e:	dbdb      	blt.n	80103c8 <op_super+0xe0>
    }
    mrbc_array_delete_handle(&argary);
 8010410:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010414:	4618      	mov	r0, r3
 8010416:	f7fe f8ae 	bl	800e576 <mrbc_array_delete_handle>

    mrbc_decref( &recv[argc+1] );
 801041a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801041c:	3301      	adds	r3, #1
 801041e:	011b      	lsls	r3, r3, #4
 8010420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010422:	4413      	add	r3, r2
 8010424:	4618      	mov	r0, r3
 8010426:	f7fd ffd5 	bl	800e3d4 <mrbc_decref>
    recv[argc+1] = proc;
 801042a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801042c:	3301      	adds	r3, #1
 801042e:	011b      	lsls	r3, r3, #4
 8010430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010432:	4413      	add	r3, r2
 8010434:	461c      	mov	r4, r3
 8010436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801043a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801043c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    narg = argc;
 8010440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  }

  // Convert keyword argument to hash.
  if( karg && karg != CALL_MAXARGS ) {
 8010446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010448:	2b00      	cmp	r3, #0
 801044a:	d04b      	beq.n	80104e4 <op_super+0x1fc>
 801044c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801044e:	2b0f      	cmp	r3, #15
 8010450:	d048      	beq.n	80104e4 <op_super+0x1fc>
    narg++;
 8010452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010456:	3301      	adds	r3, #1
 8010458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    mrbc_value h = mrbc_hash_new( vm, karg );
 801045c:	f107 0318 	add.w	r3, r7, #24
 8010460:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	f7f3 fcd8 	bl	8003e1a <mrbc_hash_new>
    if( !h.hash ) return;	// ENOMEM
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 80b4 	beq.w	80105da <op_super+0x2f2>

    mrbc_value *r1 = recv + narg;
 8010472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010476:	011b      	lsls	r3, r3, #4
 8010478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801047a:	4413      	add	r3, r2
 801047c:	663b      	str	r3, [r7, #96]	; 0x60
    memcpy( h.hash->data, r1, sizeof(mrbc_value) * karg * 2 );
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	6898      	ldr	r0, [r3, #8]
 8010482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010484:	015b      	lsls	r3, r3, #5
 8010486:	461a      	mov	r2, r3
 8010488:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801048a:	f006 f95c 	bl	8016746 <memcpy>
    h.hash->n_stored = karg * 2;
 801048e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010490:	b29a      	uxth	r2, r3
 8010492:	6a3b      	ldr	r3, [r7, #32]
 8010494:	0052      	lsls	r2, r2, #1
 8010496:	b292      	uxth	r2, r2
 8010498:	80da      	strh	r2, [r3, #6]

    mrbc_value block = r1[karg * 2];
 801049a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801049c:	015b      	lsls	r3, r3, #5
 801049e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104a0:	4413      	add	r3, r2
 80104a2:	f107 0408 	add.w	r4, r7, #8
 80104a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memset( r1 + 2, 0, sizeof(mrbc_value) * (karg * 2 - 1) );
 80104ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104ae:	f103 0020 	add.w	r0, r3, #32
 80104b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	3b01      	subs	r3, #1
 80104b8:	011b      	lsls	r3, r3, #4
 80104ba:	461a      	mov	r2, r3
 80104bc:	2100      	movs	r1, #0
 80104be:	f006 f8a8 	bl	8016612 <memset>
    *r1++ = h;
 80104c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104c4:	f103 0210 	add.w	r2, r3, #16
 80104c8:	663a      	str	r2, [r7, #96]	; 0x60
 80104ca:	461c      	mov	r4, r3
 80104cc:	f107 0318 	add.w	r3, r7, #24
 80104d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    *r1 = block;
 80104d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80104d8:	461c      	mov	r4, r3
 80104da:	f107 0308 	add.w	r3, r7, #8
 80104de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80104e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  // find super class
  mrbc_callinfo *callinfo = vm->callinfo_tail;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  mrbc_class *cls = callinfo->own_class;
 80104ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104ec:	695b      	ldr	r3, [r3, #20]
 80104ee:	65bb      	str	r3, [r7, #88]	; 0x58
  mrbc_method method;

  assert( cls );
 80104f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d106      	bne.n	8010504 <op_super+0x21c>
 80104f6:	4b3f      	ldr	r3, [pc, #252]	; (80105f4 <op_super+0x30c>)
 80104f8:	4a3b      	ldr	r2, [pc, #236]	; (80105e8 <op_super+0x300>)
 80104fa:	f240 5124 	movw	r1, #1316	; 0x524
 80104fe:	483b      	ldr	r0, [pc, #236]	; (80105ec <op_super+0x304>)
 8010500:	f005 f846 	bl	8015590 <__assert_func>
  cls = cls->super;
 8010504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	65bb      	str	r3, [r7, #88]	; 0x58
  assert( cls );
 801050a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801050c:	2b00      	cmp	r3, #0
 801050e:	d106      	bne.n	801051e <op_super+0x236>
 8010510:	4b38      	ldr	r3, [pc, #224]	; (80105f4 <op_super+0x30c>)
 8010512:	4a35      	ldr	r2, [pc, #212]	; (80105e8 <op_super+0x300>)
 8010514:	f240 5126 	movw	r1, #1318	; 0x526
 8010518:	4834      	ldr	r0, [pc, #208]	; (80105ec <op_super+0x304>)
 801051a:	f005 f839 	bl	8015590 <__assert_func>
  if( mrbc_find_method( &method, cls, callinfo->method_id ) == 0 ) {
 801051e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010520:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8010524:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010528:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801052a:	4618      	mov	r0, r3
 801052c:	f7f9 f8b6 	bl	800969c <mrbc_find_method>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d116      	bne.n	8010564 <op_super+0x27c>
    mrbc_raisef( vm, MRBC_CLASS(NoMethodError),
 8010536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010538:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801053c:	4618      	mov	r0, r3
 801053e:	f7fd fafb 	bl	800db38 <mrbc_symid_to_str>
 8010542:	4604      	mov	r4, r0
	"no superclass method '%s' for %s",
	mrbc_symid_to_str(callinfo->method_id),
	mrbc_symid_to_str(callinfo->own_class->sym_id));
 8010544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010546:	695b      	ldr	r3, [r3, #20]
    mrbc_raisef( vm, MRBC_CLASS(NoMethodError),
 8010548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801054c:	4618      	mov	r0, r3
 801054e:	f7fd faf3 	bl	800db38 <mrbc_symid_to_str>
 8010552:	4603      	mov	r3, r0
 8010554:	9300      	str	r3, [sp, #0]
 8010556:	4623      	mov	r3, r4
 8010558:	4a27      	ldr	r2, [pc, #156]	; (80105f8 <op_super+0x310>)
 801055a:	4928      	ldr	r1, [pc, #160]	; (80105fc <op_super+0x314>)
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7fa ffa5 	bl	800b4ac <mrbc_raisef>
    return;
 8010562:	e03b      	b.n	80105dc <op_super+0x2f4>
  }

  // call C function and return.
  if( method.c_func ) {
 8010564:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8010568:	2b00      	cmp	r3, #0
 801056a:	d019      	beq.n	80105a0 <op_super+0x2b8>
    method.func(vm, recv, narg);
 801056c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801056e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010572:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	4798      	blx	r3
    for( int i = 1; i <= narg+1; i++ ) {
 8010578:	2301      	movs	r3, #1
 801057a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801057c:	e009      	b.n	8010592 <op_super+0x2aa>
      mrbc_decref_empty( recv + i );
 801057e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010580:	011b      	lsls	r3, r3, #4
 8010582:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010584:	4413      	add	r3, r2
 8010586:	4618      	mov	r0, r3
 8010588:	f7fd ff6a 	bl	800e460 <mrbc_decref_empty>
    for( int i = 1; i <= narg+1; i++ ) {
 801058c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801058e:	3301      	adds	r3, #1
 8010590:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010596:	3301      	adds	r3, #1
 8010598:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801059a:	429a      	cmp	r2, r3
 801059c:	ddef      	ble.n	801057e <op_super+0x296>
    }
    return;
 801059e:	e01d      	b.n	80105dc <op_super+0x2f4>
  }

  // call Ruby method.
  callinfo = mrbc_push_callinfo(vm, callinfo->method_id, a, narg);
 80105a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105a2:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 80105a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7fe fa5b 	bl	800ea68 <mrbc_push_callinfo>
 80105b2:	65f8      	str	r0, [r7, #92]	; 0x5c
  callinfo->own_class = method.cls;
 80105b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105b8:	615a      	str	r2, [r3, #20]
  callinfo->is_called_super = 1;
 80105ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105bc:	2201      	movs	r2, #1
 80105be:	f883 2020 	strb.w	r2, [r3, #32]

  vm->cur_irep = method.irep;
 80105c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	699a      	ldr	r2, [r3, #24]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	611a      	str	r2, [r3, #16]
  vm->cur_regs = recv;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105d6:	615a      	str	r2, [r3, #20]
 80105d8:	e000      	b.n	80105dc <op_super+0x2f4>
    if( !h.hash ) return;	// ENOMEM
 80105da:	bf00      	nop
}
 80105dc:	378c      	adds	r7, #140	; 0x8c
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd90      	pop	{r4, r7, pc}
 80105e2:	bf00      	nop
 80105e4:	0801a29c 	.word	0x0801a29c
 80105e8:	0801bec0 	.word	0x0801bec0
 80105ec:	0801a2b8 	.word	0x0801a2b8
 80105f0:	0801a46c 	.word	0x0801a46c
 80105f4:	0801a488 	.word	0x0801a488
 80105f8:	0801a48c 	.word	0x0801a48c
 80105fc:	20000184 	.word	0x20000184

08010600 <op_argary>:
  R[a] = argument array (16=m5:r1:m5:d1:lv4)

  flags: mmmm_mrmm_mmmd_llll
*/
static inline void op_argary( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010600:	b590      	push	{r4, r7, lr}
 8010602:	b099      	sub	sp, #100	; 0x64
 8010604:	af00      	add	r7, sp, #0
 8010606:	6178      	str	r0, [r7, #20]
 8010608:	6139      	str	r1, [r7, #16]
  FETCH_BS();
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	691b      	ldr	r3, [r3, #16]
 801060e:	1c59      	adds	r1, r3, #1
 8010610:	697a      	ldr	r2, [r7, #20]
 8010612:	6111      	str	r1, [r2, #16]
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	691b      	ldr	r3, [r3, #16]
 801061c:	1c59      	adds	r1, r3, #1
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	6111      	str	r1, [r2, #16]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	64bb      	str	r3, [r7, #72]	; 0x48
 8010626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010628:	021a      	lsls	r2, r3, #8
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	691b      	ldr	r3, [r3, #16]
 801062e:	1c58      	adds	r0, r3, #1
 8010630:	6979      	ldr	r1, [r7, #20]
 8010632:	6108      	str	r0, [r1, #16]
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	4313      	orrs	r3, r2
 8010638:	64bb      	str	r3, [r7, #72]	; 0x48

  int m1 = (b >> 11) & 0x3f;
 801063a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801063c:	0adb      	lsrs	r3, r3, #11
 801063e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010642:	647b      	str	r3, [r7, #68]	; 0x44
  int d  = (b >>  4) & 0x01;
 8010644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010646:	091b      	lsrs	r3, r3, #4
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	643b      	str	r3, [r7, #64]	; 0x40
  int lv = b & 0x0f;
 801064e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010650:	f003 030f 	and.w	r3, r3, #15
 8010654:	63fb      	str	r3, [r7, #60]	; 0x3c

  if( b & 0x400 ) {	// check REST parameter.
 8010656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801065c:	2b00      	cmp	r3, #0
 801065e:	d005      	beq.n	801066c <op_argary+0x6c>
    // TODO: want to support.
    mrbc_raise( vm, MRBC_CLASS(NotImplementedError), "Not support rest parameter by super.");
 8010660:	4a73      	ldr	r2, [pc, #460]	; (8010830 <op_argary+0x230>)
 8010662:	4974      	ldr	r1, [pc, #464]	; (8010834 <op_argary+0x234>)
 8010664:	6978      	ldr	r0, [r7, #20]
 8010666:	f7fa fecd 	bl	800b404 <mrbc_raise>
    return;
 801066a:	e0de      	b.n	801082a <op_argary+0x22a>
  }
  if( b & 0x3e0 ) {	// check m2 parameter.
 801066c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801066e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d005      	beq.n	8010682 <op_argary+0x82>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "not support m2 or keyword argument.");
 8010676:	4a70      	ldr	r2, [pc, #448]	; (8010838 <op_argary+0x238>)
 8010678:	4970      	ldr	r1, [pc, #448]	; (801083c <op_argary+0x23c>)
 801067a:	6978      	ldr	r0, [r7, #20]
 801067c:	f7fa fec2 	bl	800b404 <mrbc_raise>
    return;
 8010680:	e0d3      	b.n	801082a <op_argary+0x22a>
  }

  mrbc_value *reg0 = regs;
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	65fb      	str	r3, [r7, #92]	; 0x5c

  // rewind proc nest
  if( lv ) {
 8010686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010688:	2b00      	cmp	r3, #0
 801068a:	d04b      	beq.n	8010724 <op_argary+0x124>
    assert( mrbc_type(*reg0) == MRBC_TT_PROC );
 801068c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801068e:	f993 3000 	ldrsb.w	r3, [r3]
 8010692:	2b09      	cmp	r3, #9
 8010694:	d006      	beq.n	80106a4 <op_argary+0xa4>
 8010696:	4b6a      	ldr	r3, [pc, #424]	; (8010840 <op_argary+0x240>)
 8010698:	4a6a      	ldr	r2, [pc, #424]	; (8010844 <op_argary+0x244>)
 801069a:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 801069e:	486a      	ldr	r0, [pc, #424]	; (8010848 <op_argary+0x248>)
 80106a0:	f004 ff76 	bl	8015590 <__assert_func>
    mrbc_callinfo *callinfo = reg0->proc->callinfo;
 80106a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	65bb      	str	r3, [r7, #88]	; 0x58
    assert( callinfo );
 80106ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d106      	bne.n	80106c0 <op_argary+0xc0>
 80106b2:	4b66      	ldr	r3, [pc, #408]	; (801084c <op_argary+0x24c>)
 80106b4:	4a63      	ldr	r2, [pc, #396]	; (8010844 <op_argary+0x244>)
 80106b6:	f240 5162 	movw	r1, #1378	; 0x562
 80106ba:	4863      	ldr	r0, [pc, #396]	; (8010848 <op_argary+0x248>)
 80106bc:	f004 ff68 	bl	8015590 <__assert_func>

    for( int i = 1; i < lv; i ++ ) {
 80106c0:	2301      	movs	r3, #1
 80106c2:	657b      	str	r3, [r7, #84]	; 0x54
 80106c4:	e023      	b.n	801070e <op_argary+0x10e>
      reg0 = callinfo->cur_regs + callinfo->reg_offset;
 80106c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106c8:	68da      	ldr	r2, [r3, #12]
 80106ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106cc:	7f9b      	ldrb	r3, [r3, #30]
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	4413      	add	r3, r2
 80106d2:	65fb      	str	r3, [r7, #92]	; 0x5c
      assert( mrbc_type(*reg0) == MRBC_TT_PROC );
 80106d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d6:	f993 3000 	ldrsb.w	r3, [r3]
 80106da:	2b09      	cmp	r3, #9
 80106dc:	d006      	beq.n	80106ec <op_argary+0xec>
 80106de:	4b58      	ldr	r3, [pc, #352]	; (8010840 <op_argary+0x240>)
 80106e0:	4a58      	ldr	r2, [pc, #352]	; (8010844 <op_argary+0x244>)
 80106e2:	f240 5166 	movw	r1, #1382	; 0x566
 80106e6:	4858      	ldr	r0, [pc, #352]	; (8010848 <op_argary+0x248>)
 80106e8:	f004 ff52 	bl	8015590 <__assert_func>
      callinfo = reg0->proc->callinfo;
 80106ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ee:	689b      	ldr	r3, [r3, #8]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	65bb      	str	r3, [r7, #88]	; 0x58
      assert( callinfo );
 80106f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d106      	bne.n	8010708 <op_argary+0x108>
 80106fa:	4b54      	ldr	r3, [pc, #336]	; (801084c <op_argary+0x24c>)
 80106fc:	4a51      	ldr	r2, [pc, #324]	; (8010844 <op_argary+0x244>)
 80106fe:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010702:	4851      	ldr	r0, [pc, #324]	; (8010848 <op_argary+0x248>)
 8010704:	f004 ff44 	bl	8015590 <__assert_func>
    for( int i = 1; i < lv; i ++ ) {
 8010708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801070a:	3301      	adds	r3, #1
 801070c:	657b      	str	r3, [r7, #84]	; 0x54
 801070e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010712:	429a      	cmp	r2, r3
 8010714:	dbd7      	blt.n	80106c6 <op_argary+0xc6>
    }

    reg0 = callinfo->cur_regs + callinfo->reg_offset;
 8010716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010718:	68da      	ldr	r2, [r3, #12]
 801071a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801071c:	7f9b      	ldrb	r3, [r3, #30]
 801071e:	011b      	lsls	r3, r3, #4
 8010720:	4413      	add	r3, r2
 8010722:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // create arguent array.
  int array_size = m1 + d;
 8010724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010728:	4413      	add	r3, r2
 801072a:	63bb      	str	r3, [r7, #56]	; 0x38
  mrbc_value val = mrbc_array_new( vm, array_size );
 801072c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010732:	6979      	ldr	r1, [r7, #20]
 8010734:	4618      	mov	r0, r3
 8010736:	f7f1 fdfc 	bl	8002332 <mrbc_array_new>
  if( !val.array ) return;	// ENOMEM
 801073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073c:	2b00      	cmp	r3, #0
 801073e:	d073      	beq.n	8010828 <op_argary+0x228>

  if( vm->callinfo_tail->karg_keep ) {
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	69db      	ldr	r3, [r3, #28]
 8010744:	699b      	ldr	r3, [r3, #24]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d022      	beq.n	8010790 <op_argary+0x190>
    mrbc_value karg = {.tt = MRBC_TT_HASH, .hash = vm->callinfo_tail->karg_keep};
 801074a:	f107 0318 	add.w	r3, r7, #24
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	605a      	str	r2, [r3, #4]
 8010754:	609a      	str	r2, [r3, #8]
 8010756:	60da      	str	r2, [r3, #12]
 8010758:	230d      	movs	r3, #13
 801075a:	763b      	strb	r3, [r7, #24]
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	69db      	ldr	r3, [r3, #28]
 8010760:	699b      	ldr	r3, [r3, #24]
 8010762:	623b      	str	r3, [r7, #32]
    karg = mrbc_hash_dup(vm, &karg);
 8010764:	463b      	mov	r3, r7
 8010766:	f107 0218 	add.w	r2, r7, #24
 801076a:	6979      	ldr	r1, [r7, #20]
 801076c:	4618      	mov	r0, r3
 801076e:	f7f3 fd3b 	bl	80041e8 <mrbc_hash_dup>
 8010772:	f107 0418 	add.w	r4, r7, #24
 8010776:	463b      	mov	r3, r7
 8010778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801077a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_array_push( &val, &karg );
 801077e:	f107 0218 	add.w	r2, r7, #24
 8010782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f7f1 ff02 	bl	8002592 <mrbc_array_push>
 801078e:	e01a      	b.n	80107c6 <op_argary+0x1c6>
  } else {
    for( int i = 1; i <= array_size; i++ ) {
 8010790:	2301      	movs	r3, #1
 8010792:	653b      	str	r3, [r7, #80]	; 0x50
 8010794:	e013      	b.n	80107be <op_argary+0x1be>
      mrbc_incref( &reg0[i] );
 8010796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010798:	011b      	lsls	r3, r3, #4
 801079a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801079c:	4413      	add	r3, r2
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fd fde4 	bl	800e36c <mrbc_incref>
      mrbc_array_push( &val, &reg0[i] );
 80107a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a6:	011b      	lsls	r3, r3, #4
 80107a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80107aa:	441a      	add	r2, r3
 80107ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107b0:	4611      	mov	r1, r2
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f1 feed 	bl	8002592 <mrbc_array_push>
    for( int i = 1; i <= array_size; i++ ) {
 80107b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ba:	3301      	adds	r3, #1
 80107bc:	653b      	str	r3, [r7, #80]	; 0x50
 80107be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c2:	429a      	cmp	r2, r3
 80107c4:	dde7      	ble.n	8010796 <op_argary+0x196>
    }
  }

  mrbc_decref( &regs[a] );
 80107c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c8:	011b      	lsls	r3, r3, #4
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	4413      	add	r3, r2
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fd fe00 	bl	800e3d4 <mrbc_decref>
  regs[a] = val;
 80107d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d6:	011b      	lsls	r3, r3, #4
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	4413      	add	r3, r2
 80107dc:	461c      	mov	r4, r3
 80107de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // copy a block object
  mrbc_decref( &regs[a+1] );
 80107e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ea:	3301      	adds	r3, #1
 80107ec:	011b      	lsls	r3, r3, #4
 80107ee:	693a      	ldr	r2, [r7, #16]
 80107f0:	4413      	add	r3, r2
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fd fdee 	bl	800e3d4 <mrbc_decref>
  regs[a+1] = reg0[array_size+1];
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	3301      	adds	r3, #1
 80107fc:	011b      	lsls	r3, r3, #4
 80107fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010800:	18d1      	adds	r1, r2, r3
 8010802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010804:	3301      	adds	r3, #1
 8010806:	011b      	lsls	r3, r3, #4
 8010808:	693a      	ldr	r2, [r7, #16]
 801080a:	4413      	add	r3, r2
 801080c:	461c      	mov	r4, r3
 801080e:	460b      	mov	r3, r1
 8010810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  mrbc_incref( &regs[a+1] );
 8010816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010818:	3301      	adds	r3, #1
 801081a:	011b      	lsls	r3, r3, #4
 801081c:	693a      	ldr	r2, [r7, #16]
 801081e:	4413      	add	r3, r2
 8010820:	4618      	mov	r0, r3
 8010822:	f7fd fda3 	bl	800e36c <mrbc_incref>
 8010826:	e000      	b.n	801082a <op_argary+0x22a>
  if( !val.array ) return;	// ENOMEM
 8010828:	bf00      	nop
}
 801082a:	3764      	adds	r7, #100	; 0x64
 801082c:	46bd      	mov	sp, r7
 801082e:	bd90      	pop	{r4, r7, pc}
 8010830:	0801a4b0 	.word	0x0801a4b0
 8010834:	20000134 	.word	0x20000134
 8010838:	0801a4d8 	.word	0x0801a4d8
 801083c:	20000154 	.word	0x20000154
 8010840:	0801a4fc 	.word	0x0801a4fc
 8010844:	0801becc 	.word	0x0801becc
 8010848:	0801a2b8 	.word	0x0801a2b8
 801084c:	0801a378 	.word	0x0801a378

08010850 <op_enter>:
  arg setup according to flags (23=m5:o5:r1:m5:k5:d1:b1)

  flags: 0mmm_mmoo_ooor_mmmm_mkkk_kkdb
*/
static inline void op_enter( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010850:	b590      	push	{r4, r7, lr}
 8010852:	b0a7      	sub	sp, #156	; 0x9c
 8010854:	af00      	add	r7, sp, #0
 8010856:	6178      	str	r0, [r7, #20]
 8010858:	6139      	str	r1, [r7, #16]
#define FLAG_M2		0x0f80
#define FLAG_KW		0x007c
#define FLAG_DICT	0x0002
#define FLAG_BLOCK	0x0001

  FETCH_W();
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	691b      	ldr	r3, [r3, #16]
 801085e:	1c59      	adds	r1, r3, #1
 8010860:	697a      	ldr	r2, [r7, #20]
 8010862:	6111      	str	r1, [r2, #16]
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	677b      	str	r3, [r7, #116]	; 0x74
 8010868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801086a:	021a      	lsls	r2, r3, #8
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	691b      	ldr	r3, [r3, #16]
 8010870:	1c58      	adds	r0, r3, #1
 8010872:	6979      	ldr	r1, [r7, #20]
 8010874:	6108      	str	r0, [r1, #16]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	4313      	orrs	r3, r2
 801087a:	677b      	str	r3, [r7, #116]	; 0x74
 801087c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801087e:	021a      	lsls	r2, r3, #8
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	691b      	ldr	r3, [r3, #16]
 8010884:	1c58      	adds	r0, r3, #1
 8010886:	6979      	ldr	r1, [r7, #20]
 8010888:	6108      	str	r0, [r1, #16]
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	4313      	orrs	r3, r2
 801088e:	677b      	str	r3, [r7, #116]	; 0x74

  // Check the number of registers to use.
  int reg_use_max = regs - vm->regs + vm->cur_irep->nregs;
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	3338      	adds	r3, #56	; 0x38
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	111b      	asrs	r3, r3, #4
 801089a:	461a      	mov	r2, r3
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	889b      	ldrh	r3, [r3, #4]
 80108a2:	4413      	add	r3, r2
 80108a4:	673b      	str	r3, [r7, #112]	; 0x70
  if( reg_use_max >= vm->regs_size ) {
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	88db      	ldrh	r3, [r3, #6]
 80108aa:	461a      	mov	r2, r3
 80108ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80108ae:	4293      	cmp	r3, r2
 80108b0:	db05      	blt.n	80108be <op_enter+0x6e>
    mrbc_raise( vm, MRBC_CLASS(Exception), "MAX_REGS_SIZE overflow.");
 80108b2:	4aa0      	ldr	r2, [pc, #640]	; (8010b34 <op_enter+0x2e4>)
 80108b4:	49a0      	ldr	r1, [pc, #640]	; (8010b38 <op_enter+0x2e8>)
 80108b6:	6978      	ldr	r0, [r7, #20]
 80108b8:	f7fa fda4 	bl	800b404 <mrbc_raise>
    return;
 80108bc:	e228      	b.n	8010d10 <op_enter+0x4c0>
  }

  // Check m2 parameter.
  if( a & FLAG_M2 ) {
 80108be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108c0:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d005      	beq.n	80108d4 <op_enter+0x84>
    mrbc_raise( vm, MRBC_CLASS(NotImplementedError), "not support m2 argument.");
 80108c8:	4a9c      	ldr	r2, [pc, #624]	; (8010b3c <op_enter+0x2ec>)
 80108ca:	499d      	ldr	r1, [pc, #628]	; (8010b40 <op_enter+0x2f0>)
 80108cc:	6978      	ldr	r0, [r7, #20]
 80108ce:	f7fa fd99 	bl	800b404 <mrbc_raise>
    return;
 80108d2:	e21d      	b.n	8010d10 <op_enter+0x4c0>
  }

  int m1 = (a >> 18) & 0x1f;	// num of required parameters 1
 80108d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108d6:	0c9b      	lsrs	r3, r3, #18
 80108d8:	f003 031f 	and.w	r3, r3, #31
 80108dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  int o  = (a >> 13) & 0x1f;	// num of optional parameters
 80108de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108e0:	0b5b      	lsrs	r3, r3, #13
 80108e2:	f003 031f 	and.w	r3, r3, #31
 80108e6:	66bb      	str	r3, [r7, #104]	; 0x68
  int argc = vm->callinfo_tail->n_args;
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	69db      	ldr	r3, [r3, #28]
 80108ec:	7fdb      	ldrb	r3, [r3, #31]
 80108ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  if( argc < m1 && mrbc_type(regs[0]) != MRBC_TT_PROC ) {
 80108f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80108f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108f8:	429a      	cmp	r2, r3
 80108fa:	da0a      	bge.n	8010912 <op_enter+0xc2>
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	f993 3000 	ldrsb.w	r3, [r3]
 8010902:	2b09      	cmp	r3, #9
 8010904:	d005      	beq.n	8010912 <op_enter+0xc2>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 8010906:	4a8f      	ldr	r2, [pc, #572]	; (8010b44 <op_enter+0x2f4>)
 8010908:	498f      	ldr	r1, [pc, #572]	; (8010b48 <op_enter+0x2f8>)
 801090a:	6978      	ldr	r0, [r7, #20]
 801090c:	f7fa fd7a 	bl	800b404 <mrbc_raise>
    return;
 8010910:	e1fe      	b.n	8010d10 <op_enter+0x4c0>
  }

  // save proc (or nil) object.
  mrbc_value proc = regs[argc+1];
 8010912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010916:	3301      	adds	r3, #1
 8010918:	011b      	lsls	r3, r3, #4
 801091a:	693a      	ldr	r2, [r7, #16]
 801091c:	4413      	add	r3, r2
 801091e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8010922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[argc+1].tt = MRBC_TT_EMPTY;
 8010928:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801092c:	3301      	adds	r3, #1
 801092e:	011b      	lsls	r3, r3, #4
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	4413      	add	r3, r2
 8010934:	2200      	movs	r2, #0
 8010936:	701a      	strb	r2, [r3, #0]

  // support yield [...] pattern, to expand array.
  if( mrbc_type(regs[0]) == MRBC_TT_PROC &&
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	f993 3000 	ldrsb.w	r3, [r3]
 801093e:	2b09      	cmp	r3, #9
 8010940:	d167      	bne.n	8010a12 <op_enter+0x1c2>
      mrbc_type(regs[1]) == MRBC_TT_ARRAY &&
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	3310      	adds	r3, #16
 8010946:	f993 3000 	ldrsb.w	r3, [r3]
  if( mrbc_type(regs[0]) == MRBC_TT_PROC &&
 801094a:	2b0a      	cmp	r3, #10
 801094c:	d161      	bne.n	8010a12 <op_enter+0x1c2>
      mrbc_type(regs[1]) == MRBC_TT_ARRAY &&
 801094e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010952:	2b01      	cmp	r3, #1
 8010954:	d15d      	bne.n	8010a12 <op_enter+0x1c2>
      argc == 1 && m1 > 1 ) {
 8010956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010958:	2b01      	cmp	r3, #1
 801095a:	dd5a      	ble.n	8010a12 <op_enter+0x1c2>
    mrbc_value argary = regs[1];
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8010962:	3310      	adds	r3, #16
 8010964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    regs[1].tt = MRBC_TT_EMPTY;
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	3310      	adds	r3, #16
 801096e:	2200      	movs	r2, #0
 8010970:	701a      	strb	r2, [r3, #0]

    argc = mrbc_array_size(&argary);
 8010972:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010976:	4618      	mov	r0, r3
 8010978:	f7fd fdf0 	bl	800e55c <mrbc_array_size>
 801097c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    if( argc < m1 ) argc = m1;
 8010980:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010986:	429a      	cmp	r2, r3
 8010988:	da02      	bge.n	8010990 <op_enter+0x140>
 801098a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801098c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for( int i = 0; i < argc; i++ ) {
 8010990:	2300      	movs	r3, #0
 8010992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010996:	e031      	b.n	80109fc <op_enter+0x1ac>
      mrbc_decref( &regs[i+1] );
 8010998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801099c:	3301      	adds	r3, #1
 801099e:	011b      	lsls	r3, r3, #4
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	4413      	add	r3, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fd fd15 	bl	800e3d4 <mrbc_decref>
      if( mrbc_array_size(&argary) > i ) {
 80109aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fd fdd4 	bl	800e55c <mrbc_array_size>
 80109b4:	4602      	mov	r2, r0
 80109b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109ba:	4293      	cmp	r3, r2
 80109bc:	da11      	bge.n	80109e2 <op_enter+0x192>
	regs[i+1] = argary.array->data[i];
 80109be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109c0:	689a      	ldr	r2, [r3, #8]
 80109c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109c6:	011b      	lsls	r3, r3, #4
 80109c8:	18d1      	adds	r1, r2, r3
 80109ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109ce:	3301      	adds	r3, #1
 80109d0:	011b      	lsls	r3, r3, #4
 80109d2:	693a      	ldr	r2, [r7, #16]
 80109d4:	4413      	add	r3, r2
 80109d6:	461c      	mov	r4, r3
 80109d8:	460b      	mov	r3, r1
 80109da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80109dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80109e0:	e007      	b.n	80109f2 <op_enter+0x1a2>
      } else {
	mrbc_set_nil( &regs[i+1] );
 80109e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109e6:	3301      	adds	r3, #1
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	693a      	ldr	r2, [r7, #16]
 80109ec:	4413      	add	r3, r2
 80109ee:	2201      	movs	r2, #1
 80109f0:	701a      	strb	r2, [r3, #0]
    for( int i = 0; i < argc; i++ ) {
 80109f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109f6:	3301      	adds	r3, #1
 80109f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80109fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a04:	429a      	cmp	r2, r3
 8010a06:	dbc7      	blt.n	8010998 <op_enter+0x148>
      }
    }
    mrbc_array_delete_handle( &argary );
 8010a08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fd fdb2 	bl	800e576 <mrbc_array_delete_handle>
  }

  // dictionary, keyword or rest parameter exists.
  if( a & (FLAG_DICT|FLAG_KW|FLAG_REST) ) {
 8010a12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010a14:	f241 037e 	movw	r3, #4222	; 0x107e
 8010a18:	4013      	ands	r3, r2
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f000 811b 	beq.w	8010c56 <op_enter+0x406>
    mrbc_value dict;
    if( a & (FLAG_DICT|FLAG_KW) ) {
 8010a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a22:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d02f      	beq.n	8010a8a <op_enter+0x23a>
      if( (argc - m1) > 0 && mrbc_type(regs[argc]) == MRBC_TT_HASH ) {
 8010a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a30:	1ad3      	subs	r3, r2, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	dd1d      	ble.n	8010a72 <op_enter+0x222>
 8010a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a3a:	011b      	lsls	r3, r3, #4
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	4413      	add	r3, r2
 8010a40:	f993 3000 	ldrsb.w	r3, [r3]
 8010a44:	2b0d      	cmp	r3, #13
 8010a46:	d114      	bne.n	8010a72 <op_enter+0x222>
	dict = regs[argc];
 8010a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a4c:	011b      	lsls	r3, r3, #4
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	4413      	add	r3, r2
 8010a52:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	regs[argc--].tt = MRBC_TT_EMPTY;
 8010a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a60:	1e5a      	subs	r2, r3, #1
 8010a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010a66:	011b      	lsls	r3, r3, #4
 8010a68:	693a      	ldr	r2, [r7, #16]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	701a      	strb	r2, [r3, #0]
 8010a70:	e00b      	b.n	8010a8a <op_enter+0x23a>
      } else {
	dict = mrbc_hash_new( vm, 0 );
 8010a72:	463b      	mov	r3, r7
 8010a74:	2200      	movs	r2, #0
 8010a76:	6979      	ldr	r1, [r7, #20]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7f3 f9ce 	bl	8003e1a <mrbc_hash_new>
 8010a7e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8010a82:	463b      	mov	r3, r7
 8010a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
    }

    mrbc_value rest;
    if( a & FLAG_REST ) {
 8010a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d049      	beq.n	8010b28 <op_enter+0x2d8>
      int rest_size = argc - m1 - o;
 8010a94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a9a:	1ad2      	subs	r2, r2, r3
 8010a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if( rest_size < 0 ) rest_size = 0;
 8010aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	da02      	bge.n	8010ab2 <op_enter+0x262>
 8010aac:	2300      	movs	r3, #0
 8010aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      rest = mrbc_array_new(vm, rest_size);
 8010ab2:	463b      	mov	r3, r7
 8010ab4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010ab8:	6979      	ldr	r1, [r7, #20]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f1 fc39 	bl	8002332 <mrbc_array_new>
 8010ac0:	f107 0418 	add.w	r4, r7, #24
 8010ac4:	463b      	mov	r3, r7
 8010ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      if( !rest.array ) return;	// ENOMEM
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 811d 	beq.w	8010d0e <op_enter+0x4be>

      int rest_reg = m1 + o + 1;
 8010ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ad8:	4413      	add	r3, r2
 8010ada:	3301      	adds	r3, #1
 8010adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      for( int i = 0; i < rest_size; i++ ) {
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ae6:	e019      	b.n	8010b1c <op_enter+0x2cc>
	mrbc_array_push( &rest, &regs[rest_reg] );
 8010ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010aec:	011b      	lsls	r3, r3, #4
 8010aee:	693a      	ldr	r2, [r7, #16]
 8010af0:	441a      	add	r2, r3
 8010af2:	f107 0318 	add.w	r3, r7, #24
 8010af6:	4611      	mov	r1, r2
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7f1 fd4a 	bl	8002592 <mrbc_array_push>
	regs[rest_reg++].tt = MRBC_TT_EMPTY;
 8010afe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b02:	1c5a      	adds	r2, r3, #1
 8010b04:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8010b08:	011b      	lsls	r3, r3, #4
 8010b0a:	693a      	ldr	r2, [r7, #16]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	2200      	movs	r2, #0
 8010b10:	701a      	strb	r2, [r3, #0]
      for( int i = 0; i < rest_size; i++ ) {
 8010b12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b16:	3301      	adds	r3, #1
 8010b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b24:	429a      	cmp	r2, r3
 8010b26:	dbdf      	blt.n	8010ae8 <op_enter+0x298>
      }
    }

    // reorder arguments.
    int i;
    for( i = argc; i < m1; ) {
 8010b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010b30:	e020      	b.n	8010b74 <op_enter+0x324>
 8010b32:	bf00      	nop
 8010b34:	0801a520 	.word	0x0801a520
 8010b38:	2000010c 	.word	0x2000010c
 8010b3c:	0801a538 	.word	0x0801a538
 8010b40:	20000134 	.word	0x20000134
 8010b44:	0801a554 	.word	0x0801a554
 8010b48:	20000154 	.word	0x20000154
      mrbc_decref( &regs[++i] );
 8010b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b50:	3301      	adds	r3, #1
 8010b52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b5a:	011b      	lsls	r3, r3, #4
 8010b5c:	693a      	ldr	r2, [r7, #16]
 8010b5e:	4413      	add	r3, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7fd fc37 	bl	800e3d4 <mrbc_decref>
      mrbc_set_nil( &regs[i] );
 8010b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b6a:	011b      	lsls	r3, r3, #4
 8010b6c:	693a      	ldr	r2, [r7, #16]
 8010b6e:	4413      	add	r3, r2
 8010b70:	2201      	movs	r2, #1
 8010b72:	701a      	strb	r2, [r3, #0]
    for( i = argc; i < m1; ) {
 8010b74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	dbe6      	blt.n	8010b4c <op_enter+0x2fc>
    }
    i = m1 + o;
 8010b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b82:	4413      	add	r3, r2
 8010b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if( a & FLAG_REST ) {
 8010b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d017      	beq.n	8010bc2 <op_enter+0x372>
      mrbc_decref(&regs[++i]);
 8010b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b96:	3301      	adds	r3, #1
 8010b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ba0:	011b      	lsls	r3, r3, #4
 8010ba2:	693a      	ldr	r2, [r7, #16]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fd fc14 	bl	800e3d4 <mrbc_decref>
      regs[i] = rest;
 8010bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bb0:	011b      	lsls	r3, r3, #4
 8010bb2:	693a      	ldr	r2, [r7, #16]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	461c      	mov	r4, r3
 8010bb8:	f107 0318 	add.w	r3, r7, #24
 8010bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
    if( a & (FLAG_DICT|FLAG_KW) ) {
 8010bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bc4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d028      	beq.n	8010c1e <op_enter+0x3ce>
      mrbc_decref(&regs[++i]);
 8010bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bda:	011b      	lsls	r3, r3, #4
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	4413      	add	r3, r2
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fd fbf7 	bl	800e3d4 <mrbc_decref>
      regs[i] = dict;
 8010be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bea:	011b      	lsls	r3, r3, #4
 8010bec:	693a      	ldr	r2, [r7, #16]
 8010bee:	4413      	add	r3, r2
 8010bf0:	461c      	mov	r4, r3
 8010bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      if( a & FLAG_KW ) {
 8010bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bfe:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00b      	beq.n	8010c1e <op_enter+0x3ce>
	vm->callinfo_tail->karg_keep = mrbc_hash_dup(vm, &dict).hash;
 8010c06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c0e:	6979      	ldr	r1, [r7, #20]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f3 fae9 	bl	80041e8 <mrbc_hash_dup>
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	69db      	ldr	r3, [r3, #28]
 8010c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c1c:	619a      	str	r2, [r3, #24]
      }
    }
    mrbc_decref(&regs[i+1]);
 8010c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c22:	3301      	adds	r3, #1
 8010c24:	011b      	lsls	r3, r3, #4
 8010c26:	693a      	ldr	r2, [r7, #16]
 8010c28:	4413      	add	r3, r2
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fd fbd2 	bl	800e3d4 <mrbc_decref>
    regs[i+1] = proc;
 8010c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c34:	3301      	adds	r3, #1
 8010c36:	011b      	lsls	r3, r3, #4
 8010c38:	693a      	ldr	r2, [r7, #16]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	461c      	mov	r4, r3
 8010c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->callinfo_tail->n_args = i;
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	69db      	ldr	r3, [r3, #28]
 8010c4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c50:	b2d2      	uxtb	r2, r2
 8010c52:	77da      	strb	r2, [r3, #31]
 8010c54:	e033      	b.n	8010cbe <op_enter+0x46e>

  } else {
    // reorder arguments.
    int i;
    for( i = argc; i < m1; ) {
 8010c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c5c:	e00f      	b.n	8010c7e <op_enter+0x42e>
      mrbc_decref( &regs[++i] );
 8010c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c60:	3301      	adds	r3, #1
 8010c62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c66:	011b      	lsls	r3, r3, #4
 8010c68:	693a      	ldr	r2, [r7, #16]
 8010c6a:	4413      	add	r3, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fd fbb1 	bl	800e3d4 <mrbc_decref>
      mrbc_set_nil( &regs[i] );
 8010c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c74:	011b      	lsls	r3, r3, #4
 8010c76:	693a      	ldr	r2, [r7, #16]
 8010c78:	4413      	add	r3, r2
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	701a      	strb	r2, [r3, #0]
    for( i = argc; i < m1; ) {
 8010c7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c82:	429a      	cmp	r2, r3
 8010c84:	dbeb      	blt.n	8010c5e <op_enter+0x40e>
    }
    i = m1 + o;
 8010c86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c8a:	4413      	add	r3, r2
 8010c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    mrbc_decref(&regs[i+1]);
 8010c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010c90:	3301      	adds	r3, #1
 8010c92:	011b      	lsls	r3, r3, #4
 8010c94:	693a      	ldr	r2, [r7, #16]
 8010c96:	4413      	add	r3, r2
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7fd fb9b 	bl	800e3d4 <mrbc_decref>
    regs[i+1] = proc;
 8010c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	011b      	lsls	r3, r3, #4
 8010ca4:	693a      	ldr	r2, [r7, #16]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	461c      	mov	r4, r3
 8010caa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vm->callinfo_tail->n_args = i;
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	69db      	ldr	r3, [r3, #28]
 8010cb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010cba:	b2d2      	uxtb	r2, r2
 8010cbc:	77da      	strb	r2, [r3, #31]
  }

  // prepare for get default arguments.
  int jmp_ofs = argc - m1;
 8010cbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	67bb      	str	r3, [r7, #120]	; 0x78
  if( jmp_ofs > 0 ) {
 8010cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dd20      	ble.n	8010d10 <op_enter+0x4c0>
    if( jmp_ofs > o ) {
 8010cce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	dd11      	ble.n	8010cfa <op_enter+0x4aa>
      jmp_ofs = o;
 8010cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cd8:	67bb      	str	r3, [r7, #120]	; 0x78

      if( !(a & FLAG_REST) && mrbc_type(regs[0]) != MRBC_TT_PROC ) {
 8010cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d10a      	bne.n	8010cfa <op_enter+0x4aa>
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8010cea:	2b09      	cmp	r3, #9
 8010cec:	d005      	beq.n	8010cfa <op_enter+0x4aa>
	mrbc_raise( vm, MRBC_CLASS(ArgumentError), "wrong number of arguments.");
 8010cee:	4a0a      	ldr	r2, [pc, #40]	; (8010d18 <op_enter+0x4c8>)
 8010cf0:	490a      	ldr	r1, [pc, #40]	; (8010d1c <op_enter+0x4cc>)
 8010cf2:	6978      	ldr	r0, [r7, #20]
 8010cf4:	f7fa fb86 	bl	800b404 <mrbc_raise>
	return;
 8010cf8:	e00a      	b.n	8010d10 <op_enter+0x4c0>
      }
    }
    vm->inst += jmp_ofs * 3;	// 3 = bytecode size of OP_JMP
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	6919      	ldr	r1, [r3, #16]
 8010cfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010d00:	4613      	mov	r3, r2
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	4413      	add	r3, r2
 8010d06:	18ca      	adds	r2, r1, r3
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	611a      	str	r2, [r3, #16]
 8010d0c:	e000      	b.n	8010d10 <op_enter+0x4c0>
      if( !rest.array ) return;	// ENOMEM
 8010d0e:	bf00      	nop
#undef FLAG_REST
#undef FLAG_M2
#undef FLAG_KW
#undef FLAG_DICT
#undef FLAG_BLOCK
}
 8010d10:	379c      	adds	r7, #156	; 0x9c
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd90      	pop	{r4, r7, pc}
 8010d16:	bf00      	nop
 8010d18:	0801a554 	.word	0x0801a554
 8010d1c:	20000154 	.word	0x20000154

08010d20 <op_key_p>:
/*! op_key_p

  R[a] = kdict.key?(Syms[b])
*/
static inline void op_key_p( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b088      	sub	sp, #32
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	691b      	ldr	r3, [r3, #16]
 8010d2e:	1c59      	adds	r1, r3, #1
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	6111      	str	r1, [r2, #16]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	691b      	ldr	r3, [r3, #16]
 8010d3c:	1c59      	adds	r1, r3, #1
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	6111      	str	r1, [r2, #16]
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	61bb      	str	r3, [r7, #24]

  mrbc_value *kdict = &regs[vm->callinfo_tail->n_args];
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	69db      	ldr	r3, [r3, #28]
 8010d4a:	7fdb      	ldrb	r3, [r3, #31]
 8010d4c:	011b      	lsls	r3, r3, #4
 8010d4e:	683a      	ldr	r2, [r7, #0]
 8010d50:	4413      	add	r3, r2
 8010d52:	617b      	str	r3, [r7, #20]
  mrbc_sym sym_id = mrbc_irep_symbol_id( vm->cur_irep, b );
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	f103 0220 	add.w	r2, r3, #32
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	4413      	add	r3, r2
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	827b      	strh	r3, [r7, #18]
  mrbc_value *v = mrbc_hash_search_by_id( kdict, sym_id );
 8010d66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6978      	ldr	r0, [r7, #20]
 8010d6e:	f7f3 f8d9 	bl	8003f24 <mrbc_hash_search_by_id>
 8010d72:	60f8      	str	r0, [r7, #12]

  mrbc_decref(&regs[a]);
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	011b      	lsls	r3, r3, #4
 8010d78:	683a      	ldr	r2, [r7, #0]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fd fb29 	bl	800e3d4 <mrbc_decref>
  mrbc_set_bool(&regs[a], v);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d001      	beq.n	8010d8c <op_key_p+0x6c>
 8010d88:	2103      	movs	r1, #3
 8010d8a:	e000      	b.n	8010d8e <op_key_p+0x6e>
 8010d8c:	2102      	movs	r1, #2
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	011b      	lsls	r3, r3, #4
 8010d92:	683a      	ldr	r2, [r7, #0]
 8010d94:	4413      	add	r3, r2
 8010d96:	460a      	mov	r2, r1
 8010d98:	701a      	strb	r2, [r3, #0]
}
 8010d9a:	bf00      	nop
 8010d9c:	3720      	adds	r7, #32
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
	...

08010da4 <op_keyend>:
/*! op_keyend

  raise unless kdict.empty?
*/
static inline void op_keyend( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b088      	sub	sp, #32
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  FETCH_Z();

  mrbc_value *kdict = &regs[vm->callinfo_tail->n_args];
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	69db      	ldr	r3, [r3, #28]
 8010db2:	7fdb      	ldrb	r3, [r3, #31]
 8010db4:	011b      	lsls	r3, r3, #4
 8010db6:	683a      	ldr	r2, [r7, #0]
 8010db8:	4413      	add	r3, r2
 8010dba:	61fb      	str	r3, [r7, #28]

  if( mrbc_hash_size(kdict) != 0 ) {
 8010dbc:	69f8      	ldr	r0, [r7, #28]
 8010dbe:	f7fd fbed 	bl	800e59c <mrbc_hash_size>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d017      	beq.n	8010df8 <op_keyend+0x54>
    mrbc_hash_iterator ite = mrbc_hash_iterator_new(kdict);
 8010dc8:	f107 030c 	add.w	r3, r7, #12
 8010dcc:	69f9      	ldr	r1, [r7, #28]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fd fbf3 	bl	800e5ba <mrbc_hash_iterator_new>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8010dd4:	f107 030c 	add.w	r3, r7, #12
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fd fc21 	bl	800e620 <mrbc_hash_i_next>
 8010dde:	61b8      	str	r0, [r7, #24]

    mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "unknown keyword: %s",
		mrbc_symid_to_str(kv->i));
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	689b      	ldr	r3, [r3, #8]
    mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "unknown keyword: %s",
 8010de4:	b21b      	sxth	r3, r3
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7fc fea6 	bl	800db38 <mrbc_symid_to_str>
 8010dec:	4603      	mov	r3, r0
 8010dee:	4a04      	ldr	r2, [pc, #16]	; (8010e00 <op_keyend+0x5c>)
 8010df0:	4904      	ldr	r1, [pc, #16]	; (8010e04 <op_keyend+0x60>)
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7fa fb5a 	bl	800b4ac <mrbc_raisef>
  }
}
 8010df8:	bf00      	nop
 8010dfa:	3720      	adds	r7, #32
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	0801a570 	.word	0x0801a570
 8010e04:	20000154 	.word	0x20000154

08010e08 <op_karg>:
/*! op_karg

  R[a] = kdict[Syms[b]]; kdict.delete(Syms[b])
*/
static inline void op_karg( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010e08:	b590      	push	{r4, r7, lr}
 8010e0a:	b08b      	sub	sp, #44	; 0x2c
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	691b      	ldr	r3, [r3, #16]
 8010e16:	1c59      	adds	r1, r3, #1
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	6111      	str	r1, [r2, #16]
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	691b      	ldr	r3, [r3, #16]
 8010e24:	1c59      	adds	r1, r3, #1
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	6111      	str	r1, [r2, #16]
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	623b      	str	r3, [r7, #32]

  mrbc_value *kdict = &regs[vm->callinfo_tail->n_args];
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	69db      	ldr	r3, [r3, #28]
 8010e32:	7fdb      	ldrb	r3, [r3, #31]
 8010e34:	011b      	lsls	r3, r3, #4
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	4413      	add	r3, r2
 8010e3a:	61fb      	str	r3, [r7, #28]
  mrbc_sym sym_id = mrbc_irep_symbol_id( vm->cur_irep, b );
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	f103 0220 	add.w	r2, r3, #32
 8010e44:	6a3b      	ldr	r3, [r7, #32]
 8010e46:	005b      	lsls	r3, r3, #1
 8010e48:	4413      	add	r3, r2
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	837b      	strh	r3, [r7, #26]
  mrbc_value v = mrbc_hash_remove_by_id( kdict, sym_id );
 8010e4e:	f107 0308 	add.w	r3, r7, #8
 8010e52:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010e56:	69f9      	ldr	r1, [r7, #28]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f3 f936 	bl	80040ca <mrbc_hash_remove_by_id>

  if( v.tt == MRBC_TT_EMPTY ) {
 8010e5e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d10b      	bne.n	8010e7e <op_karg+0x76>
    mrbc_raisef(vm, MRBC_CLASS(ArgumentError), "missing keywords: %s",
 8010e66:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fc fe64 	bl	800db38 <mrbc_symid_to_str>
 8010e70:	4603      	mov	r3, r0
 8010e72:	4a0d      	ldr	r2, [pc, #52]	; (8010ea8 <op_karg+0xa0>)
 8010e74:	490d      	ldr	r1, [pc, #52]	; (8010eac <op_karg+0xa4>)
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7fa fb18 	bl	800b4ac <mrbc_raisef>
 8010e7c:	e010      	b.n	8010ea0 <op_karg+0x98>
		mrbc_symid_to_str(sym_id));
    return;
  }

  mrbc_decref(&regs[a]);
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	011b      	lsls	r3, r3, #4
 8010e82:	683a      	ldr	r2, [r7, #0]
 8010e84:	4413      	add	r3, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fd faa4 	bl	800e3d4 <mrbc_decref>
  regs[a] = v;
 8010e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8e:	011b      	lsls	r3, r3, #4
 8010e90:	683a      	ldr	r2, [r7, #0]
 8010e92:	4413      	add	r3, r2
 8010e94:	461c      	mov	r4, r3
 8010e96:	f107 0308 	add.w	r3, r7, #8
 8010e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010ea0:	372c      	adds	r7, #44	; 0x2c
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd90      	pop	{r4, r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	0801a584 	.word	0x0801a584
 8010eac:	20000154 	.word	0x20000154

08010eb0 <op_return__sub>:

//================================================================
/*! op_return, op_return_blk subroutine.
*/
static inline void op_return__sub( mrbc_vm *vm, mrbc_value *regs, int a )
{
 8010eb0:	b590      	push	{r4, r7, lr}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
  // If have a ensure, jump to it.
  if( vm->cur_irep->clen ) {
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	891b      	ldrh	r3, [r3, #8]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d038      	beq.n	8010f38 <op_return__sub+0x88>
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f7fd fd1c 	bl	800e904 <find_catch_handler_ensure>
 8010ecc:	6178      	str	r0, [r7, #20]
    if( handler ) {
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d031      	beq.n	8010f38 <op_return__sub+0x88>
      assert( vm->exception.tt == MRBC_TT_NIL );
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d006      	beq.n	8010eec <op_return__sub+0x3c>
 8010ede:	4b38      	ldr	r3, [pc, #224]	; (8010fc0 <op_return__sub+0x110>)
 8010ee0:	4a38      	ldr	r2, [pc, #224]	; (8010fc4 <op_return__sub+0x114>)
 8010ee2:	f240 6163 	movw	r1, #1635	; 0x663
 8010ee6:	4838      	ldr	r0, [pc, #224]	; (8010fc8 <op_return__sub+0x118>)
 8010ee8:	f004 fb52 	bl	8015590 <__assert_func>

      // Save the return value in the last+1 register.
      regs[ vm->cur_irep->nregs ] = regs[a];
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	011b      	lsls	r3, r3, #4
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	18d1      	adds	r1, r2, r3
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	889b      	ldrh	r3, [r3, #4]
 8010efa:	011b      	lsls	r3, r3, #4
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	4413      	add	r3, r2
 8010f00:	461c      	mov	r4, r3
 8010f02:	460b      	mov	r3, r1
 8010f04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010f06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      regs[a].tt = MRBC_TT_EMPTY;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	011b      	lsls	r3, r3, #4
 8010f0e:	68ba      	ldr	r2, [r7, #8]
 8010f10:	4413      	add	r3, r2
 8010f12:	2200      	movs	r2, #0
 8010f14:	701a      	strb	r2, [r3, #0]

      vm->exception.tt = MRBC_TT_RETURN;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	22fe      	movs	r2, #254	; 0xfe
 8010f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	699c      	ldr	r4, [r3, #24]
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	3309      	adds	r3, #9
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fd fb8d 	bl	800e648 <bin_to_uint32>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	18e2      	adds	r2, r4, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	611a      	str	r2, [r3, #16]
      return;
 8010f36:	e03f      	b.n	8010fb8 <op_return__sub+0x108>
    }
  }

  // return without anything if top level.
  if( vm->callinfo_tail == NULL ) {
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	69db      	ldr	r3, [r3, #28]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d116      	bne.n	8010f6e <op_return__sub+0xbe>
    if( vm->flag_permanence ) mrbc_incref(&regs[a]);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	791b      	ldrb	r3, [r3, #4]
 8010f44:	f003 0304 	and.w	r3, r3, #4
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d006      	beq.n	8010f5c <op_return__sub+0xac>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	68ba      	ldr	r2, [r7, #8]
 8010f54:	4413      	add	r3, r2
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fd fa08 	bl	800e36c <mrbc_incref>
    vm->flag_preemption = 1;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	70da      	strb	r2, [r3, #3]
    vm->flag_stop = 1;
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	7913      	ldrb	r3, [r2, #4]
 8010f66:	f043 0302 	orr.w	r3, r3, #2
 8010f6a:	7113      	strb	r3, [r2, #4]
    return;
 8010f6c:	e024      	b.n	8010fb8 <op_return__sub+0x108>
  }

  // not in initialize method, set return value.
  if( vm->callinfo_tail->method_id != MRBC_SYM(initialize) ) goto SET_RETURN;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	69db      	ldr	r3, [r3, #28]
 8010f72:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010f76:	2b76      	cmp	r3, #118	; 0x76
 8010f78:	d106      	bne.n	8010f88 <op_return__sub+0xd8>

  // not called by op_super, ignore return value.
  if( !vm->callinfo_tail->is_called_super ) goto RETURN;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	69db      	ldr	r3, [r3, #28]
 8010f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d014      	beq.n	8010fb0 <op_return__sub+0x100>

  // set the return value
 SET_RETURN:
 8010f86:	e000      	b.n	8010f8a <op_return__sub+0xda>
  if( vm->callinfo_tail->method_id != MRBC_SYM(initialize) ) goto SET_RETURN;
 8010f88:	bf00      	nop
  mrbc_decref(&regs[0]);
 8010f8a:	68b8      	ldr	r0, [r7, #8]
 8010f8c:	f7fd fa22 	bl	800e3d4 <mrbc_decref>
  regs[0] = regs[a];
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	011b      	lsls	r3, r3, #4
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	4413      	add	r3, r2
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	4614      	mov	r4, r2
 8010f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	011b      	lsls	r3, r3, #4
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	4413      	add	r3, r2
 8010faa:	2200      	movs	r2, #0
 8010fac:	701a      	strb	r2, [r3, #0]
 8010fae:	e000      	b.n	8010fb2 <op_return__sub+0x102>
  if( !vm->callinfo_tail->is_called_super ) goto RETURN;
 8010fb0:	bf00      	nop

 RETURN:
  mrbc_pop_callinfo(vm);
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7fd fd9a 	bl	800eaec <mrbc_pop_callinfo>
}
 8010fb8:	371c      	adds	r7, #28
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd90      	pop	{r4, r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	0801a3bc 	.word	0x0801a3bc
 8010fc4:	0801bed8 	.word	0x0801bed8
 8010fc8:	0801a2b8 	.word	0x0801a2b8

08010fcc <op_return>:
/*! OP_RETURN

  return R[a] (normal)
*/
static inline void op_return( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	691b      	ldr	r3, [r3, #16]
 8010fda:	1c59      	adds	r1, r3, #1
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	6111      	str	r1, [r2, #16]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	60fb      	str	r3, [r7, #12]

  op_return__sub( vm, regs, a );
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	6839      	ldr	r1, [r7, #0]
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff ff60 	bl	8010eb0 <op_return__sub>
}
 8010ff0:	bf00      	nop
 8010ff2:	3710      	adds	r7, #16
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <op_return_blk>:
/*! OP_RETURN_BLK

  return R[a] (in-block return)
*/
static inline void op_return_blk( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8010ff8:	b590      	push	{r4, r7, lr}
 8010ffa:	b089      	sub	sp, #36	; 0x24
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	1c59      	adds	r1, r3, #1
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	6111      	str	r1, [r2, #16]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	61fb      	str	r3, [r7, #28]

  if( mrbc_type(regs[0]) != MRBC_TT_PROC ) {
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	f993 3000 	ldrsb.w	r3, [r3]
 8011016:	2b09      	cmp	r3, #9
 8011018:	d006      	beq.n	8011028 <op_return_blk+0x30>
    op_return__sub( vm, regs, a );
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	461a      	mov	r2, r3
 801101e:	6839      	ldr	r1, [r7, #0]
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f7ff ff45 	bl	8010eb0 <op_return__sub>
    return;
 8011026:	e07a      	b.n	801111e <op_return_blk+0x126>
  }

  // Save the return value in the proc object.
  mrbc_incref( &regs[0] );
 8011028:	6838      	ldr	r0, [r7, #0]
 801102a:	f7fd f99f 	bl	800e36c <mrbc_incref>
  vm->ret_blk = regs[0].proc;
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	689a      	ldr	r2, [r3, #8]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	621a      	str	r2, [r3, #32]
  vm->ret_blk->ret_val = regs[a];
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	011b      	lsls	r3, r3, #4
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	441a      	add	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	f103 0410 	add.w	r4, r3, #16
 8011046:	4613      	mov	r3, r2
 8011048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801104a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	011b      	lsls	r3, r3, #4
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	4413      	add	r3, r2
 8011056:	2200      	movs	r2, #0
 8011058:	701a      	strb	r2, [r3, #0]

  // return to the proc generated level.
  while( 1 ) {
    // If have a ensure, jump to it.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7fd fc52 	bl	800e904 <find_catch_handler_ensure>
 8011060:	61b8      	str	r0, [r7, #24]
    if( handler ) {
 8011062:	69bb      	ldr	r3, [r7, #24]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d01c      	beq.n	80110a2 <op_return_blk+0xaa>
      assert( vm->exception.tt == MRBC_TT_NIL );
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 801106e:	2b01      	cmp	r3, #1
 8011070:	d006      	beq.n	8011080 <op_return_blk+0x88>
 8011072:	4b2c      	ldr	r3, [pc, #176]	; (8011124 <op_return_blk+0x12c>)
 8011074:	4a2c      	ldr	r2, [pc, #176]	; (8011128 <op_return_blk+0x130>)
 8011076:	f240 61ae 	movw	r1, #1710	; 0x6ae
 801107a:	482c      	ldr	r0, [pc, #176]	; (801112c <op_return_blk+0x134>)
 801107c:	f004 fa88 	bl	8015590 <__assert_func>
      vm->exception.tt = MRBC_TT_RETURN_BLK;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	22fd      	movs	r2, #253	; 0xfd
 8011084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	699c      	ldr	r4, [r3, #24]
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	3309      	adds	r3, #9
 8011092:	4618      	mov	r0, r3
 8011094:	f7fd fad8 	bl	800e648 <bin_to_uint32>
 8011098:	4603      	mov	r3, r0
 801109a:	18e2      	adds	r2, r4, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	611a      	str	r2, [r3, #16]
      return;
 80110a0:	e03d      	b.n	801111e <op_return_blk+0x126>
    }

    // Is it the origin (generator) of proc?
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	69da      	ldr	r2, [r3, #28]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d003      	beq.n	80110b8 <op_return_blk+0xc0>

    mrbc_pop_callinfo(vm);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fd fd1b 	bl	800eaec <mrbc_pop_callinfo>
  while( 1 ) {
 80110b6:	e7d0      	b.n	801105a <op_return_blk+0x62>
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80110b8:	bf00      	nop
  }

  // top level return ?
  if( vm->callinfo_tail == NULL ) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	69db      	ldr	r3, [r3, #28]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d108      	bne.n	80110d4 <op_return_blk+0xdc>
    vm->flag_preemption = 1;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2201      	movs	r2, #1
 80110c6:	70da      	strb	r2, [r3, #3]
    vm->flag_stop = 1;
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	7913      	ldrb	r3, [r2, #4]
 80110cc:	f043 0302 	orr.w	r3, r3, #2
 80110d0:	7113      	strb	r3, [r2, #4]
 80110d2:	e010      	b.n	80110f6 <op_return_blk+0xfe>
  } else {
    // set the return value.
    mrbc_decref(&vm->cur_regs[0]);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	695b      	ldr	r3, [r3, #20]
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fd f97b 	bl	800e3d4 <mrbc_decref>
    vm->cur_regs[0] = vm->ret_blk->ret_val;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6a1b      	ldr	r3, [r3, #32]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	6952      	ldr	r2, [r2, #20]
 80110e6:	4614      	mov	r4, r2
 80110e8:	3310      	adds	r3, #16
 80110ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    mrbc_pop_callinfo(vm);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f7fd fcfb 	bl	800eaec <mrbc_pop_callinfo>
  }

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 80110f6:	f107 0308 	add.w	r3, r7, #8
 80110fa:	2200      	movs	r2, #0
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	605a      	str	r2, [r3, #4]
 8011100:	609a      	str	r2, [r3, #8]
 8011102:	60da      	str	r2, [r3, #12]
 8011104:	2309      	movs	r3, #9
 8011106:	723b      	strb	r3, [r7, #8]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6a1b      	ldr	r3, [r3, #32]
 801110c:	613b      	str	r3, [r7, #16]
 801110e:	f107 0308 	add.w	r3, r7, #8
 8011112:	4618      	mov	r0, r3
 8011114:	f7fd f95e 	bl	800e3d4 <mrbc_decref>
  vm->ret_blk = 0;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	621a      	str	r2, [r3, #32]
}
 801111e:	3724      	adds	r7, #36	; 0x24
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}
 8011124:	0801a3bc 	.word	0x0801a3bc
 8011128:	0801bee8 	.word	0x0801bee8
 801112c:	0801a2b8 	.word	0x0801a2b8

08011130 <op_break>:
/*! OP_BREAK

  break R[a]
*/
static inline void op_break( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011130:	b590      	push	{r4, r7, lr}
 8011132:	b08b      	sub	sp, #44	; 0x2c
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  FETCH_B();
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	691b      	ldr	r3, [r3, #16]
 801113e:	1c59      	adds	r1, r3, #1
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	6111      	str	r1, [r2, #16]
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	623b      	str	r3, [r7, #32]

  assert( regs[0].tt == MRBC_TT_PROC );
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	f993 3000 	ldrsb.w	r3, [r3]
 801114e:	2b09      	cmp	r3, #9
 8011150:	d006      	beq.n	8011160 <op_break+0x30>
 8011152:	4b3f      	ldr	r3, [pc, #252]	; (8011250 <op_break+0x120>)
 8011154:	4a3f      	ldr	r2, [pc, #252]	; (8011254 <op_break+0x124>)
 8011156:	f240 61d4 	movw	r1, #1748	; 0x6d4
 801115a:	483f      	ldr	r0, [pc, #252]	; (8011258 <op_break+0x128>)
 801115c:	f004 fa18 	bl	8015590 <__assert_func>

  // Save the return value in the proc object.
  mrbc_incref( &regs[0] );
 8011160:	6838      	ldr	r0, [r7, #0]
 8011162:	f7fd f903 	bl	800e36c <mrbc_incref>
  vm->ret_blk = regs[0].proc;
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	689a      	ldr	r2, [r3, #8]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	621a      	str	r2, [r3, #32]
  vm->ret_blk->ret_val = regs[a];
 801116e:	6a3b      	ldr	r3, [r7, #32]
 8011170:	011b      	lsls	r3, r3, #4
 8011172:	683a      	ldr	r2, [r7, #0]
 8011174:	441a      	add	r2, r3
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6a1b      	ldr	r3, [r3, #32]
 801117a:	f103 0410 	add.w	r4, r3, #16
 801117e:	4613      	mov	r3, r2
 8011180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a].tt = MRBC_TT_EMPTY;
 8011186:	6a3b      	ldr	r3, [r7, #32]
 8011188:	011b      	lsls	r3, r3, #4
 801118a:	683a      	ldr	r2, [r7, #0]
 801118c:	4413      	add	r3, r2
 801118e:	2200      	movs	r2, #0
 8011190:	701a      	strb	r2, [r3, #0]

  // return to the proc generated level.
  int reg_offset = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	627b      	str	r3, [r7, #36]	; 0x24
  while( 1 ) {
    // If have a ensure, jump to it.
    const mrbc_irep_catch_handler *handler = find_catch_handler_ensure(vm);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f7fd fbb4 	bl	800e904 <find_catch_handler_ensure>
 801119c:	61f8      	str	r0, [r7, #28]
    if( handler ) {
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d01c      	beq.n	80111de <op_break+0xae>
      assert( vm->exception.tt == MRBC_TT_NIL );
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d006      	beq.n	80111bc <op_break+0x8c>
 80111ae:	4b2b      	ldr	r3, [pc, #172]	; (801125c <op_break+0x12c>)
 80111b0:	4a28      	ldr	r2, [pc, #160]	; (8011254 <op_break+0x124>)
 80111b2:	f240 61e2 	movw	r1, #1762	; 0x6e2
 80111b6:	4828      	ldr	r0, [pc, #160]	; (8011258 <op_break+0x128>)
 80111b8:	f004 f9ea 	bl	8015590 <__assert_func>
      vm->exception.tt = MRBC_TT_BREAK;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	22fc      	movs	r2, #252	; 0xfc
 80111c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	699c      	ldr	r4, [r3, #24]
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	3309      	adds	r3, #9
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fd fa3a 	bl	800e648 <bin_to_uint32>
 80111d4:	4603      	mov	r3, r0
 80111d6:	18e2      	adds	r2, r4, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	611a      	str	r2, [r3, #16]
 80111dc:	e034      	b.n	8011248 <op_break+0x118>
      return;
    }

    // Is it the origin (generator) of proc?
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	69da      	ldr	r2, [r3, #28]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6a1b      	ldr	r3, [r3, #32]
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d007      	beq.n	80111fc <op_break+0xcc>

    reg_offset = vm->callinfo_tail->reg_offset;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	69db      	ldr	r3, [r3, #28]
 80111f0:	7f9b      	ldrb	r3, [r3, #30]
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24
    mrbc_pop_callinfo(vm);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7fd fc79 	bl	800eaec <mrbc_pop_callinfo>
  while( 1 ) {
 80111fa:	e7cc      	b.n	8011196 <op_break+0x66>
    if( vm->callinfo_tail == vm->ret_blk->callinfo_self ) break;
 80111fc:	bf00      	nop
  }

  // set the return value.
  mrbc_value *reg0 = vm->cur_regs + reg_offset;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	695a      	ldr	r2, [r3, #20]
 8011202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011204:	011b      	lsls	r3, r3, #4
 8011206:	4413      	add	r3, r2
 8011208:	61bb      	str	r3, [r7, #24]
  mrbc_decref(reg0);
 801120a:	69b8      	ldr	r0, [r7, #24]
 801120c:	f7fd f8e2 	bl	800e3d4 <mrbc_decref>
  *reg0 = vm->ret_blk->ret_val;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6a1b      	ldr	r3, [r3, #32]
 8011214:	69ba      	ldr	r2, [r7, #24]
 8011216:	4614      	mov	r4, r2
 8011218:	3310      	adds	r3, #16
 801121a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801121c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  mrbc_decref(&(mrbc_value){.tt = MRBC_TT_PROC, .proc = vm->ret_blk});
 8011220:	f107 0308 	add.w	r3, r7, #8
 8011224:	2200      	movs	r2, #0
 8011226:	601a      	str	r2, [r3, #0]
 8011228:	605a      	str	r2, [r3, #4]
 801122a:	609a      	str	r2, [r3, #8]
 801122c:	60da      	str	r2, [r3, #12]
 801122e:	2309      	movs	r3, #9
 8011230:	723b      	strb	r3, [r7, #8]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a1b      	ldr	r3, [r3, #32]
 8011236:	613b      	str	r3, [r7, #16]
 8011238:	f107 0308 	add.w	r3, r7, #8
 801123c:	4618      	mov	r0, r3
 801123e:	f7fd f8c9 	bl	800e3d4 <mrbc_decref>
  vm->ret_blk = 0;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	621a      	str	r2, [r3, #32]
}
 8011248:	372c      	adds	r7, #44	; 0x2c
 801124a:	46bd      	mov	sp, r7
 801124c:	bd90      	pop	{r4, r7, pc}
 801124e:	bf00      	nop
 8011250:	0801a384 	.word	0x0801a384
 8011254:	0801bef8 	.word	0x0801bef8
 8011258:	0801a2b8 	.word	0x0801a2b8
 801125c:	0801a3bc 	.word	0x0801a3bc

08011260 <op_blkpush>:
/*! OP_BLKPUSH

  R[a] = block (16=m5:r1:m5:d1:lv4)
*/
static inline void op_blkpush( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011260:	b590      	push	{r4, r7, lr}
 8011262:	b08d      	sub	sp, #52	; 0x34
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  FETCH_BS();
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	691b      	ldr	r3, [r3, #16]
 801126e:	1c59      	adds	r1, r3, #1
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	6111      	str	r1, [r2, #16]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	62bb      	str	r3, [r7, #40]	; 0x28
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	691b      	ldr	r3, [r3, #16]
 801127c:	1c59      	adds	r1, r3, #1
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	6111      	str	r1, [r2, #16]
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	627b      	str	r3, [r7, #36]	; 0x24
 8011286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011288:	021a      	lsls	r2, r3, #8
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	1c58      	adds	r0, r3, #1
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	6108      	str	r0, [r1, #16]
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	4313      	orrs	r3, r2
 8011298:	627b      	str	r3, [r7, #36]	; 0x24

  int m1 = (b >> 11) & 0x3f;
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	0adb      	lsrs	r3, r3, #11
 801129e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80112a2:	623b      	str	r3, [r7, #32]
  int r  = (b >> 10) & 0x01;
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	0a9b      	lsrs	r3, r3, #10
 80112a8:	f003 0301 	and.w	r3, r3, #1
 80112ac:	61fb      	str	r3, [r7, #28]
  int m2 = (b >>  5) & 0x1f;
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	095b      	lsrs	r3, r3, #5
 80112b2:	f003 031f 	and.w	r3, r3, #31
 80112b6:	61bb      	str	r3, [r7, #24]
  int d  = (b >>  4) & 0x01;
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	091b      	lsrs	r3, r3, #4
 80112bc:	f003 0301 	and.w	r3, r3, #1
 80112c0:	617b      	str	r3, [r7, #20]
  int lv = (b      ) & 0x0f;
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c4:	f003 030f 	and.w	r3, r3, #15
 80112c8:	613b      	str	r3, [r7, #16]

  if( m2 ) {
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d005      	beq.n	80112dc <op_blkpush+0x7c>
    mrbc_raise( vm, MRBC_CLASS(ArgumentError), "not support m2 or keyword argument.");
 80112d0:	4a28      	ldr	r2, [pc, #160]	; (8011374 <op_blkpush+0x114>)
 80112d2:	4929      	ldr	r1, [pc, #164]	; (8011378 <op_blkpush+0x118>)
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7fa f895 	bl	800b404 <mrbc_raise>
    return;
 80112da:	e047      	b.n	801136c <op_blkpush+0x10c>
  }

  int offset = m1 + r + d + 1;
 80112dc:	6a3a      	ldr	r2, [r7, #32]
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	441a      	add	r2, r3
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	4413      	add	r3, r2
 80112e6:	3301      	adds	r3, #1
 80112e8:	60fb      	str	r3, [r7, #12]
  mrbc_value *blk;

  if( lv == 0 ) {
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d105      	bne.n	80112fc <op_blkpush+0x9c>
    // current env
    blk = regs + offset;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	011b      	lsls	r3, r3, #4
 80112f4:	683a      	ldr	r2, [r7, #0]
 80112f6:	4413      	add	r3, r2
 80112f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112fa:	e019      	b.n	8011330 <op_blkpush+0xd0>
  } else {
    // upper env
    assert( regs[0].tt == MRBC_TT_PROC );
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	f993 3000 	ldrsb.w	r3, [r3]
 8011302:	2b09      	cmp	r3, #9
 8011304:	d006      	beq.n	8011314 <op_blkpush+0xb4>
 8011306:	4b1d      	ldr	r3, [pc, #116]	; (801137c <op_blkpush+0x11c>)
 8011308:	4a1d      	ldr	r2, [pc, #116]	; (8011380 <op_blkpush+0x120>)
 801130a:	f240 7115 	movw	r1, #1813	; 0x715
 801130e:	481d      	ldr	r0, [pc, #116]	; (8011384 <op_blkpush+0x124>)
 8011310:	f004 f93e 	bl	8015590 <__assert_func>

    mrbc_callinfo *callinfo = regs[0].proc->callinfo_self;
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	60bb      	str	r3, [r7, #8]
    blk = callinfo->cur_regs + callinfo->reg_offset + offset;
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	68da      	ldr	r2, [r3, #12]
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	7f9b      	ldrb	r3, [r3, #30]
 8011324:	4619      	mov	r1, r3
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	440b      	add	r3, r1
 801132a:	011b      	lsls	r3, r3, #4
 801132c:	4413      	add	r3, r2
 801132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  if( blk->tt != MRBC_TT_PROC ) {
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	f993 3000 	ldrsb.w	r3, [r3]
 8011336:	2b09      	cmp	r3, #9
 8011338:	d005      	beq.n	8011346 <op_blkpush+0xe6>
    mrbc_raise( vm, MRBC_CLASS(Exception), "no block given (yield)");
 801133a:	4a13      	ldr	r2, [pc, #76]	; (8011388 <op_blkpush+0x128>)
 801133c:	4913      	ldr	r1, [pc, #76]	; (801138c <op_blkpush+0x12c>)
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7fa f860 	bl	800b404 <mrbc_raise>
    return;
 8011344:	e012      	b.n	801136c <op_blkpush+0x10c>
  }

  mrbc_incref(blk);
 8011346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011348:	f7fd f810 	bl	800e36c <mrbc_incref>
  mrbc_decref(&regs[a]);
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	011b      	lsls	r3, r3, #4
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	4413      	add	r3, r2
 8011354:	4618      	mov	r0, r3
 8011356:	f7fd f83d 	bl	800e3d4 <mrbc_decref>
  regs[a] = *blk;
 801135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135c:	011b      	lsls	r3, r3, #4
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	441a      	add	r2, r3
 8011362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011364:	4614      	mov	r4, r2
 8011366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801136c:	3734      	adds	r7, #52	; 0x34
 801136e:	46bd      	mov	sp, r7
 8011370:	bd90      	pop	{r4, r7, pc}
 8011372:	bf00      	nop
 8011374:	0801a4d8 	.word	0x0801a4d8
 8011378:	20000154 	.word	0x20000154
 801137c:	0801a384 	.word	0x0801a384
 8011380:	0801bf04 	.word	0x0801bf04
 8011384:	0801a2b8 	.word	0x0801a2b8
 8011388:	0801a59c 	.word	0x0801a59c
 801138c:	2000010c 	.word	0x2000010c

08011390 <op_add>:
/*! OP_ADD

  R[a] = R[a]+R[a+1]
*/
static inline void op_add( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  FETCH_B();
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	1c59      	adds	r1, r3, #1
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	6111      	str	r1, [r2, #16]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	011b      	lsls	r3, r3, #4
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	4413      	add	r3, r2
 80113b0:	f993 3000 	ldrsb.w	r3, [r3]
 80113b4:	2b04      	cmp	r3, #4
 80113b6:	d143      	bne.n	8011440 <op_add+0xb0>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	3301      	adds	r3, #1
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	683a      	ldr	r2, [r7, #0]
 80113c0:	4413      	add	r3, r2
 80113c2:	f993 3000 	ldrsb.w	r3, [r3]
 80113c6:	2b04      	cmp	r3, #4
 80113c8:	d111      	bne.n	80113ee <op_add+0x5e>
      regs[a].i += regs[a+1].i;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	011b      	lsls	r3, r3, #4
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	4413      	add	r3, r2
 80113d2:	6899      	ldr	r1, [r3, #8]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	3301      	adds	r3, #1
 80113d8:	011b      	lsls	r3, r3, #4
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	4413      	add	r3, r2
 80113de:	689a      	ldr	r2, [r3, #8]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	011b      	lsls	r3, r3, #4
 80113e4:	6838      	ldr	r0, [r7, #0]
 80113e6:	4403      	add	r3, r0
 80113e8:	440a      	add	r2, r1
 80113ea:	609a      	str	r2, [r3, #8]
      return;
 80113ec:	e07e      	b.n	80114ec <op_add+0x15c>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	3301      	adds	r3, #1
 80113f2:	011b      	lsls	r3, r3, #4
 80113f4:	683a      	ldr	r2, [r7, #0]
 80113f6:	4413      	add	r3, r2
 80113f8:	f993 3000 	ldrsb.w	r3, [r3]
 80113fc:	2b05      	cmp	r3, #5
 80113fe:	d11f      	bne.n	8011440 <op_add+0xb0>
      regs[a].tt = MRBC_TT_FLOAT;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	011b      	lsls	r3, r3, #4
 8011404:	683a      	ldr	r2, [r7, #0]
 8011406:	4413      	add	r3, r2
 8011408:	2205      	movs	r2, #5
 801140a:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i + regs[a+1].d;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	011b      	lsls	r3, r3, #4
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	4413      	add	r3, r2
 8011414:	689b      	ldr	r3, [r3, #8]
 8011416:	4618      	mov	r0, r3
 8011418:	f7ef f89c 	bl	8000554 <__aeabi_i2d>
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	3301      	adds	r3, #1
 8011420:	011b      	lsls	r3, r3, #4
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	4413      	add	r3, r2
 8011426:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801142a:	68fc      	ldr	r4, [r7, #12]
 801142c:	0124      	lsls	r4, r4, #4
 801142e:	683d      	ldr	r5, [r7, #0]
 8011430:	442c      	add	r4, r5
 8011432:	f7ee ff43 	bl	80002bc <__adddf3>
 8011436:	4602      	mov	r2, r0
 8011438:	460b      	mov	r3, r1
 801143a:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 801143e:	e055      	b.n	80114ec <op_add+0x15c>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	011b      	lsls	r3, r3, #4
 8011444:	683a      	ldr	r2, [r7, #0]
 8011446:	4413      	add	r3, r2
 8011448:	f993 3000 	ldrsb.w	r3, [r3]
 801144c:	2b05      	cmp	r3, #5
 801144e:	d147      	bne.n	80114e0 <op_add+0x150>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	3301      	adds	r3, #1
 8011454:	011b      	lsls	r3, r3, #4
 8011456:	683a      	ldr	r2, [r7, #0]
 8011458:	4413      	add	r3, r2
 801145a:	f993 3000 	ldrsb.w	r3, [r3]
 801145e:	2b04      	cmp	r3, #4
 8011460:	d11d      	bne.n	801149e <op_add+0x10e>
      regs[a].d += regs[a+1].i;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	011b      	lsls	r3, r3, #4
 8011466:	683a      	ldr	r2, [r7, #0]
 8011468:	4413      	add	r3, r2
 801146a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	3301      	adds	r3, #1
 8011472:	011b      	lsls	r3, r3, #4
 8011474:	683a      	ldr	r2, [r7, #0]
 8011476:	4413      	add	r3, r2
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	4618      	mov	r0, r3
 801147c:	f7ef f86a 	bl	8000554 <__aeabi_i2d>
 8011480:	4602      	mov	r2, r0
 8011482:	460b      	mov	r3, r1
 8011484:	68f9      	ldr	r1, [r7, #12]
 8011486:	0109      	lsls	r1, r1, #4
 8011488:	6838      	ldr	r0, [r7, #0]
 801148a:	1846      	adds	r6, r0, r1
 801148c:	4620      	mov	r0, r4
 801148e:	4629      	mov	r1, r5
 8011490:	f7ee ff14 	bl	80002bc <__adddf3>
 8011494:	4602      	mov	r2, r0
 8011496:	460b      	mov	r3, r1
 8011498:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 801149c:	e026      	b.n	80114ec <op_add+0x15c>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	3301      	adds	r3, #1
 80114a2:	011b      	lsls	r3, r3, #4
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	4413      	add	r3, r2
 80114a8:	f993 3000 	ldrsb.w	r3, [r3]
 80114ac:	2b05      	cmp	r3, #5
 80114ae:	d117      	bne.n	80114e0 <op_add+0x150>
      regs[a].d += regs[a+1].d;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	011b      	lsls	r3, r3, #4
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	4413      	add	r3, r2
 80114b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3301      	adds	r3, #1
 80114c0:	011b      	lsls	r3, r3, #4
 80114c2:	683a      	ldr	r2, [r7, #0]
 80114c4:	4413      	add	r3, r2
 80114c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80114ca:	68fc      	ldr	r4, [r7, #12]
 80114cc:	0124      	lsls	r4, r4, #4
 80114ce:	683d      	ldr	r5, [r7, #0]
 80114d0:	442c      	add	r4, r5
 80114d2:	f7ee fef3 	bl	80002bc <__adddf3>
 80114d6:	4602      	mov	r2, r0
 80114d8:	460b      	mov	r3, r1
 80114da:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 80114de:	e005      	b.n	80114ec <op_add+0x15c>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(PLUS), a, 1 );
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	2301      	movs	r3, #1
 80114e4:	2107      	movs	r1, #7
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7fd f8cc 	bl	800e684 <send_by_name>
}
 80114ec:	3714      	adds	r7, #20
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080114f4 <op_addi>:
/*! OP_ADDI

  R[a] = R[a]+mrb_int(b)
*/
static inline void op_addi( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80114f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114f6:	b085      	sub	sp, #20
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	691b      	ldr	r3, [r3, #16]
 8011502:	1c59      	adds	r1, r3, #1
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	6111      	str	r1, [r2, #16]
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	60fb      	str	r3, [r7, #12]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	691b      	ldr	r3, [r3, #16]
 8011510:	1c59      	adds	r1, r3, #1
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	6111      	str	r1, [r2, #16]
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	011b      	lsls	r3, r3, #4
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	4413      	add	r3, r2
 8011522:	f993 3000 	ldrsb.w	r3, [r3]
 8011526:	2b04      	cmp	r3, #4
 8011528:	d10e      	bne.n	8011548 <op_addi+0x54>
    regs[a].i += b;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	011b      	lsls	r3, r3, #4
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	4413      	add	r3, r2
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	461a      	mov	r2, r3
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	18d1      	adds	r1, r2, r3
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	011b      	lsls	r3, r3, #4
 801153e:	683a      	ldr	r2, [r7, #0]
 8011540:	4413      	add	r3, r2
 8011542:	460a      	mov	r2, r1
 8011544:	609a      	str	r2, [r3, #8]
    return;
 8011546:	e024      	b.n	8011592 <op_addi+0x9e>
  }

#if MRBC_USE_FLOAT
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	011b      	lsls	r3, r3, #4
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	4413      	add	r3, r2
 8011550:	f993 3000 	ldrsb.w	r3, [r3]
 8011554:	2b05      	cmp	r3, #5
 8011556:	d117      	bne.n	8011588 <op_addi+0x94>
    regs[a].d += b;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	011b      	lsls	r3, r3, #4
 801155c:	683a      	ldr	r2, [r7, #0]
 801155e:	4413      	add	r3, r2
 8011560:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011564:	68b8      	ldr	r0, [r7, #8]
 8011566:	f7ee ffe5 	bl	8000534 <__aeabi_ui2d>
 801156a:	4602      	mov	r2, r0
 801156c:	460b      	mov	r3, r1
 801156e:	68f9      	ldr	r1, [r7, #12]
 8011570:	0109      	lsls	r1, r1, #4
 8011572:	6838      	ldr	r0, [r7, #0]
 8011574:	1846      	adds	r6, r0, r1
 8011576:	4620      	mov	r0, r4
 8011578:	4629      	mov	r1, r5
 801157a:	f7ee fe9f 	bl	80002bc <__adddf3>
 801157e:	4602      	mov	r2, r0
 8011580:	460b      	mov	r3, r1
 8011582:	e9c6 2302 	strd	r2, r3, [r6, #8]
    return;
 8011586:	e004      	b.n	8011592 <op_addi+0x9e>
  }
#endif

  mrbc_raise(vm, MRBC_CLASS(TypeError), "no implicit conversion of Integer");
 8011588:	4a03      	ldr	r2, [pc, #12]	; (8011598 <op_addi+0xa4>)
 801158a:	4904      	ldr	r1, [pc, #16]	; (801159c <op_addi+0xa8>)
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7f9 ff39 	bl	800b404 <mrbc_raise>
}
 8011592:	3714      	adds	r7, #20
 8011594:	46bd      	mov	sp, r7
 8011596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011598:	0801a5b4 	.word	0x0801a5b4
 801159c:	200001b4 	.word	0x200001b4

080115a0 <op_sub>:
/*! OP_SUB

  R[a] = R[a]-R[a+1]
*/
static inline void op_sub( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80115a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a2:	b085      	sub	sp, #20
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	1c59      	adds	r1, r3, #1
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	6111      	str	r1, [r2, #16]
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	683a      	ldr	r2, [r7, #0]
 80115be:	4413      	add	r3, r2
 80115c0:	f993 3000 	ldrsb.w	r3, [r3]
 80115c4:	2b04      	cmp	r3, #4
 80115c6:	d143      	bne.n	8011650 <op_sub+0xb0>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	3301      	adds	r3, #1
 80115cc:	011b      	lsls	r3, r3, #4
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4413      	add	r3, r2
 80115d2:	f993 3000 	ldrsb.w	r3, [r3]
 80115d6:	2b04      	cmp	r3, #4
 80115d8:	d111      	bne.n	80115fe <op_sub+0x5e>
      regs[a].i -= regs[a+1].i;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	011b      	lsls	r3, r3, #4
 80115de:	683a      	ldr	r2, [r7, #0]
 80115e0:	4413      	add	r3, r2
 80115e2:	6899      	ldr	r1, [r3, #8]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	3301      	adds	r3, #1
 80115e8:	011b      	lsls	r3, r3, #4
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	4413      	add	r3, r2
 80115ee:	689a      	ldr	r2, [r3, #8]
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	011b      	lsls	r3, r3, #4
 80115f4:	6838      	ldr	r0, [r7, #0]
 80115f6:	4403      	add	r3, r0
 80115f8:	1a8a      	subs	r2, r1, r2
 80115fa:	609a      	str	r2, [r3, #8]
      return;
 80115fc:	e07e      	b.n	80116fc <op_sub+0x15c>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	3301      	adds	r3, #1
 8011602:	011b      	lsls	r3, r3, #4
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	4413      	add	r3, r2
 8011608:	f993 3000 	ldrsb.w	r3, [r3]
 801160c:	2b05      	cmp	r3, #5
 801160e:	d11f      	bne.n	8011650 <op_sub+0xb0>
      regs[a].tt = MRBC_TT_FLOAT;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	011b      	lsls	r3, r3, #4
 8011614:	683a      	ldr	r2, [r7, #0]
 8011616:	4413      	add	r3, r2
 8011618:	2205      	movs	r2, #5
 801161a:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i - regs[a+1].d;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	011b      	lsls	r3, r3, #4
 8011620:	683a      	ldr	r2, [r7, #0]
 8011622:	4413      	add	r3, r2
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	4618      	mov	r0, r3
 8011628:	f7ee ff94 	bl	8000554 <__aeabi_i2d>
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	3301      	adds	r3, #1
 8011630:	011b      	lsls	r3, r3, #4
 8011632:	683a      	ldr	r2, [r7, #0]
 8011634:	4413      	add	r3, r2
 8011636:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801163a:	68fc      	ldr	r4, [r7, #12]
 801163c:	0124      	lsls	r4, r4, #4
 801163e:	683d      	ldr	r5, [r7, #0]
 8011640:	442c      	add	r4, r5
 8011642:	f7ee fe39 	bl	80002b8 <__aeabi_dsub>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 801164e:	e055      	b.n	80116fc <op_sub+0x15c>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	011b      	lsls	r3, r3, #4
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	4413      	add	r3, r2
 8011658:	f993 3000 	ldrsb.w	r3, [r3]
 801165c:	2b05      	cmp	r3, #5
 801165e:	d147      	bne.n	80116f0 <op_sub+0x150>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3301      	adds	r3, #1
 8011664:	011b      	lsls	r3, r3, #4
 8011666:	683a      	ldr	r2, [r7, #0]
 8011668:	4413      	add	r3, r2
 801166a:	f993 3000 	ldrsb.w	r3, [r3]
 801166e:	2b04      	cmp	r3, #4
 8011670:	d11d      	bne.n	80116ae <op_sub+0x10e>
      regs[a].d -= regs[a+1].i;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	011b      	lsls	r3, r3, #4
 8011676:	683a      	ldr	r2, [r7, #0]
 8011678:	4413      	add	r3, r2
 801167a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	3301      	adds	r3, #1
 8011682:	011b      	lsls	r3, r3, #4
 8011684:	683a      	ldr	r2, [r7, #0]
 8011686:	4413      	add	r3, r2
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	4618      	mov	r0, r3
 801168c:	f7ee ff62 	bl	8000554 <__aeabi_i2d>
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	68f9      	ldr	r1, [r7, #12]
 8011696:	0109      	lsls	r1, r1, #4
 8011698:	6838      	ldr	r0, [r7, #0]
 801169a:	1846      	adds	r6, r0, r1
 801169c:	4620      	mov	r0, r4
 801169e:	4629      	mov	r1, r5
 80116a0:	f7ee fe0a 	bl	80002b8 <__aeabi_dsub>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 80116ac:	e026      	b.n	80116fc <op_sub+0x15c>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3301      	adds	r3, #1
 80116b2:	011b      	lsls	r3, r3, #4
 80116b4:	683a      	ldr	r2, [r7, #0]
 80116b6:	4413      	add	r3, r2
 80116b8:	f993 3000 	ldrsb.w	r3, [r3]
 80116bc:	2b05      	cmp	r3, #5
 80116be:	d117      	bne.n	80116f0 <op_sub+0x150>
      regs[a].d -= regs[a+1].d;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	011b      	lsls	r3, r3, #4
 80116c4:	683a      	ldr	r2, [r7, #0]
 80116c6:	4413      	add	r3, r2
 80116c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	3301      	adds	r3, #1
 80116d0:	011b      	lsls	r3, r3, #4
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	4413      	add	r3, r2
 80116d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80116da:	68fc      	ldr	r4, [r7, #12]
 80116dc:	0124      	lsls	r4, r4, #4
 80116de:	683d      	ldr	r5, [r7, #0]
 80116e0:	442c      	add	r4, r5
 80116e2:	f7ee fde9 	bl	80002b8 <__aeabi_dsub>
 80116e6:	4602      	mov	r2, r0
 80116e8:	460b      	mov	r3, r1
 80116ea:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 80116ee:	e005      	b.n	80116fc <op_sub+0x15c>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(MINUS), a, 1 );
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	2301      	movs	r3, #1
 80116f4:	2109      	movs	r1, #9
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7fc ffc4 	bl	800e684 <send_by_name>
}
 80116fc:	3714      	adds	r7, #20
 80116fe:	46bd      	mov	sp, r7
 8011700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011704 <op_subi>:
/*! OP_SUBI

  R[a] = R[a]-mrb_int(b)
*/
static inline void op_subi( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	691b      	ldr	r3, [r3, #16]
 8011712:	1c59      	adds	r1, r3, #1
 8011714:	687a      	ldr	r2, [r7, #4]
 8011716:	6111      	str	r1, [r2, #16]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	1c59      	adds	r1, r3, #1
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	6111      	str	r1, [r2, #16]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	60bb      	str	r3, [r7, #8]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	011b      	lsls	r3, r3, #4
 801172e:	683a      	ldr	r2, [r7, #0]
 8011730:	4413      	add	r3, r2
 8011732:	f993 3000 	ldrsb.w	r3, [r3]
 8011736:	2b04      	cmp	r3, #4
 8011738:	d10e      	bne.n	8011758 <op_subi+0x54>
    regs[a].i -= b;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	011b      	lsls	r3, r3, #4
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	4413      	add	r3, r2
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	461a      	mov	r2, r3
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	1ad1      	subs	r1, r2, r3
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	011b      	lsls	r3, r3, #4
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	4413      	add	r3, r2
 8011752:	460a      	mov	r2, r1
 8011754:	609a      	str	r2, [r3, #8]
    return;
 8011756:	e024      	b.n	80117a2 <op_subi+0x9e>
  }

#if MRBC_USE_FLOAT
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	011b      	lsls	r3, r3, #4
 801175c:	683a      	ldr	r2, [r7, #0]
 801175e:	4413      	add	r3, r2
 8011760:	f993 3000 	ldrsb.w	r3, [r3]
 8011764:	2b05      	cmp	r3, #5
 8011766:	d117      	bne.n	8011798 <op_subi+0x94>
    regs[a].d -= b;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	011b      	lsls	r3, r3, #4
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	4413      	add	r3, r2
 8011770:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011774:	68b8      	ldr	r0, [r7, #8]
 8011776:	f7ee fedd 	bl	8000534 <__aeabi_ui2d>
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	68f9      	ldr	r1, [r7, #12]
 8011780:	0109      	lsls	r1, r1, #4
 8011782:	6838      	ldr	r0, [r7, #0]
 8011784:	1846      	adds	r6, r0, r1
 8011786:	4620      	mov	r0, r4
 8011788:	4629      	mov	r1, r5
 801178a:	f7ee fd95 	bl	80002b8 <__aeabi_dsub>
 801178e:	4602      	mov	r2, r0
 8011790:	460b      	mov	r3, r1
 8011792:	e9c6 2302 	strd	r2, r3, [r6, #8]
    return;
 8011796:	e004      	b.n	80117a2 <op_subi+0x9e>
  }
#endif

  mrbc_raise(vm, MRBC_CLASS(TypeError), "no implicit conversion of Integer");
 8011798:	4a03      	ldr	r2, [pc, #12]	; (80117a8 <op_subi+0xa4>)
 801179a:	4904      	ldr	r1, [pc, #16]	; (80117ac <op_subi+0xa8>)
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7f9 fe31 	bl	800b404 <mrbc_raise>
}
 80117a2:	3714      	adds	r7, #20
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a8:	0801a5b4 	.word	0x0801a5b4
 80117ac:	200001b4 	.word	0x200001b4

080117b0 <op_mul>:
/*! OP_MUL

  R[a] = R[a]*R[a+1]
*/
static inline void op_mul( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80117b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	1c59      	adds	r1, r3, #1
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	6111      	str	r1, [r2, #16]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	011b      	lsls	r3, r3, #4
 80117cc:	683a      	ldr	r2, [r7, #0]
 80117ce:	4413      	add	r3, r2
 80117d0:	f993 3000 	ldrsb.w	r3, [r3]
 80117d4:	2b04      	cmp	r3, #4
 80117d6:	d144      	bne.n	8011862 <op_mul+0xb2>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	3301      	adds	r3, #1
 80117dc:	011b      	lsls	r3, r3, #4
 80117de:	683a      	ldr	r2, [r7, #0]
 80117e0:	4413      	add	r3, r2
 80117e2:	f993 3000 	ldrsb.w	r3, [r3]
 80117e6:	2b04      	cmp	r3, #4
 80117e8:	d112      	bne.n	8011810 <op_mul+0x60>
      regs[a].i *= regs[a+1].i;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	011b      	lsls	r3, r3, #4
 80117ee:	683a      	ldr	r2, [r7, #0]
 80117f0:	4413      	add	r3, r2
 80117f2:	689a      	ldr	r2, [r3, #8]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	3301      	adds	r3, #1
 80117f8:	011b      	lsls	r3, r3, #4
 80117fa:	6839      	ldr	r1, [r7, #0]
 80117fc:	440b      	add	r3, r1
 80117fe:	6899      	ldr	r1, [r3, #8]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	011b      	lsls	r3, r3, #4
 8011804:	6838      	ldr	r0, [r7, #0]
 8011806:	4403      	add	r3, r0
 8011808:	fb01 f202 	mul.w	r2, r1, r2
 801180c:	609a      	str	r2, [r3, #8]
      return;
 801180e:	e07e      	b.n	801190e <op_mul+0x15e>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	3301      	adds	r3, #1
 8011814:	011b      	lsls	r3, r3, #4
 8011816:	683a      	ldr	r2, [r7, #0]
 8011818:	4413      	add	r3, r2
 801181a:	f993 3000 	ldrsb.w	r3, [r3]
 801181e:	2b05      	cmp	r3, #5
 8011820:	d11f      	bne.n	8011862 <op_mul+0xb2>
      regs[a].tt = MRBC_TT_FLOAT;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	011b      	lsls	r3, r3, #4
 8011826:	683a      	ldr	r2, [r7, #0]
 8011828:	4413      	add	r3, r2
 801182a:	2205      	movs	r2, #5
 801182c:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i * regs[a+1].d;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	011b      	lsls	r3, r3, #4
 8011832:	683a      	ldr	r2, [r7, #0]
 8011834:	4413      	add	r3, r2
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	4618      	mov	r0, r3
 801183a:	f7ee fe8b 	bl	8000554 <__aeabi_i2d>
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	3301      	adds	r3, #1
 8011842:	011b      	lsls	r3, r3, #4
 8011844:	683a      	ldr	r2, [r7, #0]
 8011846:	4413      	add	r3, r2
 8011848:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801184c:	68fc      	ldr	r4, [r7, #12]
 801184e:	0124      	lsls	r4, r4, #4
 8011850:	683d      	ldr	r5, [r7, #0]
 8011852:	442c      	add	r4, r5
 8011854:	f7ee fee8 	bl	8000628 <__aeabi_dmul>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011860:	e055      	b.n	801190e <op_mul+0x15e>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	011b      	lsls	r3, r3, #4
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	4413      	add	r3, r2
 801186a:	f993 3000 	ldrsb.w	r3, [r3]
 801186e:	2b05      	cmp	r3, #5
 8011870:	d147      	bne.n	8011902 <op_mul+0x152>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	3301      	adds	r3, #1
 8011876:	011b      	lsls	r3, r3, #4
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	4413      	add	r3, r2
 801187c:	f993 3000 	ldrsb.w	r3, [r3]
 8011880:	2b04      	cmp	r3, #4
 8011882:	d11d      	bne.n	80118c0 <op_mul+0x110>
      regs[a].d *= regs[a+1].i;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	011b      	lsls	r3, r3, #4
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	4413      	add	r3, r2
 801188c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	3301      	adds	r3, #1
 8011894:	011b      	lsls	r3, r3, #4
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	4413      	add	r3, r2
 801189a:	689b      	ldr	r3, [r3, #8]
 801189c:	4618      	mov	r0, r3
 801189e:	f7ee fe59 	bl	8000554 <__aeabi_i2d>
 80118a2:	4602      	mov	r2, r0
 80118a4:	460b      	mov	r3, r1
 80118a6:	68f9      	ldr	r1, [r7, #12]
 80118a8:	0109      	lsls	r1, r1, #4
 80118aa:	6838      	ldr	r0, [r7, #0]
 80118ac:	1846      	adds	r6, r0, r1
 80118ae:	4620      	mov	r0, r4
 80118b0:	4629      	mov	r1, r5
 80118b2:	f7ee feb9 	bl	8000628 <__aeabi_dmul>
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 80118be:	e026      	b.n	801190e <op_mul+0x15e>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	3301      	adds	r3, #1
 80118c4:	011b      	lsls	r3, r3, #4
 80118c6:	683a      	ldr	r2, [r7, #0]
 80118c8:	4413      	add	r3, r2
 80118ca:	f993 3000 	ldrsb.w	r3, [r3]
 80118ce:	2b05      	cmp	r3, #5
 80118d0:	d117      	bne.n	8011902 <op_mul+0x152>
      regs[a].d *= regs[a+1].d;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	011b      	lsls	r3, r3, #4
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	4413      	add	r3, r2
 80118da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	3301      	adds	r3, #1
 80118e2:	011b      	lsls	r3, r3, #4
 80118e4:	683a      	ldr	r2, [r7, #0]
 80118e6:	4413      	add	r3, r2
 80118e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80118ec:	68fc      	ldr	r4, [r7, #12]
 80118ee:	0124      	lsls	r4, r4, #4
 80118f0:	683d      	ldr	r5, [r7, #0]
 80118f2:	442c      	add	r4, r5
 80118f4:	f7ee fe98 	bl	8000628 <__aeabi_dmul>
 80118f8:	4602      	mov	r2, r0
 80118fa:	460b      	mov	r3, r1
 80118fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011900:	e005      	b.n	801190e <op_mul+0x15e>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(MUL), a, 1 );
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	2301      	movs	r3, #1
 8011906:	2105      	movs	r1, #5
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7fc febb 	bl	800e684 <send_by_name>
}
 801190e:	3714      	adds	r7, #20
 8011910:	46bd      	mov	sp, r7
 8011912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011914 <op_div>:
/*! OP_DIV

  R[a] = R[a]/R[a+1]
*/
static inline void op_div( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  FETCH_B();
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	1c59      	adds	r1, r3, #1
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	6111      	str	r1, [r2, #16]
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	60fb      	str	r3, [r7, #12]

  if( regs[a].tt == MRBC_TT_INTEGER ) {
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	011b      	lsls	r3, r3, #4
 8011930:	683a      	ldr	r2, [r7, #0]
 8011932:	4413      	add	r3, r2
 8011934:	f993 3000 	ldrsb.w	r3, [r3]
 8011938:	2b04      	cmp	r3, #4
 801193a:	d152      	bne.n	80119e2 <op_div+0xce>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Integer, Integer
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	3301      	adds	r3, #1
 8011940:	011b      	lsls	r3, r3, #4
 8011942:	683a      	ldr	r2, [r7, #0]
 8011944:	4413      	add	r3, r2
 8011946:	f993 3000 	ldrsb.w	r3, [r3]
 801194a:	2b04      	cmp	r3, #4
 801194c:	d120      	bne.n	8011990 <op_div+0x7c>
      if( regs[a+1].i == 0 ) {
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	3301      	adds	r3, #1
 8011952:	011b      	lsls	r3, r3, #4
 8011954:	683a      	ldr	r2, [r7, #0]
 8011956:	4413      	add	r3, r2
 8011958:	689b      	ldr	r3, [r3, #8]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d105      	bne.n	801196a <op_div+0x56>
	mrbc_raise(vm, MRBC_CLASS(ZeroDivisionError), 0 );
 801195e:	2200      	movs	r2, #0
 8011960:	494c      	ldr	r1, [pc, #304]	; (8011a94 <op_div+0x180>)
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7f9 fd4e 	bl	800b404 <mrbc_raise>
      } else {
	regs[a].i /= regs[a+1].i;
      }
      return;
 8011968:	e091      	b.n	8011a8e <op_div+0x17a>
	regs[a].i /= regs[a+1].i;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	011b      	lsls	r3, r3, #4
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4413      	add	r3, r2
 8011972:	6899      	ldr	r1, [r3, #8]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	3301      	adds	r3, #1
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	683a      	ldr	r2, [r7, #0]
 801197c:	4413      	add	r3, r2
 801197e:	689a      	ldr	r2, [r3, #8]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	011b      	lsls	r3, r3, #4
 8011984:	6838      	ldr	r0, [r7, #0]
 8011986:	4403      	add	r3, r0
 8011988:	fb91 f2f2 	sdiv	r2, r1, r2
 801198c:	609a      	str	r2, [r3, #8]
      return;
 801198e:	e07e      	b.n	8011a8e <op_div+0x17a>
    }
#if MRBC_USE_FLOAT
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Integer, Float
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	3301      	adds	r3, #1
 8011994:	011b      	lsls	r3, r3, #4
 8011996:	683a      	ldr	r2, [r7, #0]
 8011998:	4413      	add	r3, r2
 801199a:	f993 3000 	ldrsb.w	r3, [r3]
 801199e:	2b05      	cmp	r3, #5
 80119a0:	d11f      	bne.n	80119e2 <op_div+0xce>
      regs[a].tt = MRBC_TT_FLOAT;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	011b      	lsls	r3, r3, #4
 80119a6:	683a      	ldr	r2, [r7, #0]
 80119a8:	4413      	add	r3, r2
 80119aa:	2205      	movs	r2, #5
 80119ac:	701a      	strb	r2, [r3, #0]
      regs[a].d = regs[a].i / regs[a+1].d;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	011b      	lsls	r3, r3, #4
 80119b2:	683a      	ldr	r2, [r7, #0]
 80119b4:	4413      	add	r3, r2
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7ee fdcb 	bl	8000554 <__aeabi_i2d>
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	3301      	adds	r3, #1
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	4413      	add	r3, r2
 80119c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80119cc:	68fc      	ldr	r4, [r7, #12]
 80119ce:	0124      	lsls	r4, r4, #4
 80119d0:	683d      	ldr	r5, [r7, #0]
 80119d2:	442c      	add	r4, r5
 80119d4:	f7ee ff52 	bl	800087c <__aeabi_ddiv>
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 80119e0:	e055      	b.n	8011a8e <op_div+0x17a>
    }
  }
  if( regs[a].tt == MRBC_TT_FLOAT ) {
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	011b      	lsls	r3, r3, #4
 80119e6:	683a      	ldr	r2, [r7, #0]
 80119e8:	4413      	add	r3, r2
 80119ea:	f993 3000 	ldrsb.w	r3, [r3]
 80119ee:	2b05      	cmp	r3, #5
 80119f0:	d147      	bne.n	8011a82 <op_div+0x16e>
    if( regs[a+1].tt == MRBC_TT_INTEGER ) {     // in case of Float, Integer
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3301      	adds	r3, #1
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	683a      	ldr	r2, [r7, #0]
 80119fa:	4413      	add	r3, r2
 80119fc:	f993 3000 	ldrsb.w	r3, [r3]
 8011a00:	2b04      	cmp	r3, #4
 8011a02:	d11d      	bne.n	8011a40 <op_div+0x12c>
      regs[a].d /= regs[a+1].i;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	011b      	lsls	r3, r3, #4
 8011a08:	683a      	ldr	r2, [r7, #0]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	3301      	adds	r3, #1
 8011a14:	011b      	lsls	r3, r3, #4
 8011a16:	683a      	ldr	r2, [r7, #0]
 8011a18:	4413      	add	r3, r2
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7ee fd99 	bl	8000554 <__aeabi_i2d>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	68f9      	ldr	r1, [r7, #12]
 8011a28:	0109      	lsls	r1, r1, #4
 8011a2a:	6838      	ldr	r0, [r7, #0]
 8011a2c:	1846      	adds	r6, r0, r1
 8011a2e:	4620      	mov	r0, r4
 8011a30:	4629      	mov	r1, r5
 8011a32:	f7ee ff23 	bl	800087c <__aeabi_ddiv>
 8011a36:	4602      	mov	r2, r0
 8011a38:	460b      	mov	r3, r1
 8011a3a:	e9c6 2302 	strd	r2, r3, [r6, #8]
      return;
 8011a3e:	e026      	b.n	8011a8e <op_div+0x17a>
    }
    if( regs[a+1].tt == MRBC_TT_FLOAT ) {      // in case of Float, Float
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	3301      	adds	r3, #1
 8011a44:	011b      	lsls	r3, r3, #4
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	4413      	add	r3, r2
 8011a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8011a4e:	2b05      	cmp	r3, #5
 8011a50:	d117      	bne.n	8011a82 <op_div+0x16e>
      regs[a].d /= regs[a+1].d;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	011b      	lsls	r3, r3, #4
 8011a56:	683a      	ldr	r2, [r7, #0]
 8011a58:	4413      	add	r3, r2
 8011a5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	3301      	adds	r3, #1
 8011a62:	011b      	lsls	r3, r3, #4
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	4413      	add	r3, r2
 8011a68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011a6c:	68fc      	ldr	r4, [r7, #12]
 8011a6e:	0124      	lsls	r4, r4, #4
 8011a70:	683d      	ldr	r5, [r7, #0]
 8011a72:	442c      	add	r4, r5
 8011a74:	f7ee ff02 	bl	800087c <__aeabi_ddiv>
 8011a78:	4602      	mov	r2, r0
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
      return;
 8011a80:	e005      	b.n	8011a8e <op_div+0x17a>
    }
#endif
  }

  // other case
  send_by_name( vm, MRBC_SYM(DIV), a, 1 );
 8011a82:	68fa      	ldr	r2, [r7, #12]
 8011a84:	2301      	movs	r3, #1
 8011a86:	210b      	movs	r1, #11
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7fc fdfb 	bl	800e684 <send_by_name>
}
 8011a8e:	3714      	adds	r7, #20
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a94:	200001c4 	.word	0x200001c4

08011a98 <op_eq>:
/*! OP_EQ

  R[a] = R[a]==R[a+1]
*/
static inline void op_eq( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b084      	sub	sp, #16
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	691b      	ldr	r3, [r3, #16]
 8011aa6:	1c59      	adds	r1, r3, #1
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	6111      	str	r1, [r2, #16]
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	011b      	lsls	r3, r3, #4
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8011abc:	2b08      	cmp	r3, #8
 8011abe:	d106      	bne.n	8011ace <op_eq+0x36>
    send_by_name(vm, MRBC_SYM(EQ_EQ), a, 1);
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	2110      	movs	r1, #16
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f7fc fddc 	bl	800e684 <send_by_name>
    return;
 8011acc:	e01f      	b.n	8011b0e <op_eq+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	011b      	lsls	r3, r3, #4
 8011ad2:	683a      	ldr	r2, [r7, #0]
 8011ad4:	18d0      	adds	r0, r2, r3
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	011b      	lsls	r3, r3, #4
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	4413      	add	r3, r2
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	f7fc faa9 	bl	800e038 <mrbc_compare>
 8011ae6:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	011b      	lsls	r3, r3, #4
 8011aec:	683a      	ldr	r2, [r7, #0]
 8011aee:	4413      	add	r3, r2
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fc fc6f 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = result ? MRBC_TT_FALSE : MRBC_TT_TRUE;
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d001      	beq.n	8011b00 <op_eq+0x68>
 8011afc:	2102      	movs	r1, #2
 8011afe:	e000      	b.n	8011b02 <op_eq+0x6a>
 8011b00:	2103      	movs	r1, #3
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	011b      	lsls	r3, r3, #4
 8011b06:	683a      	ldr	r2, [r7, #0]
 8011b08:	4413      	add	r3, r2
 8011b0a:	460a      	mov	r2, r1
 8011b0c:	701a      	strb	r2, [r3, #0]
}
 8011b0e:	3710      	adds	r7, #16
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <op_lt>:
/*! OP_LT

  R[a] = R[a]<R[a+1]
*/
static inline void op_lt( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	1c59      	adds	r1, r3, #1
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	6111      	str	r1, [r2, #16]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	011b      	lsls	r3, r3, #4
 8011b30:	683a      	ldr	r2, [r7, #0]
 8011b32:	4413      	add	r3, r2
 8011b34:	f993 3000 	ldrsb.w	r3, [r3]
 8011b38:	2b08      	cmp	r3, #8
 8011b3a:	d106      	bne.n	8011b4a <op_lt+0x36>
    send_by_name(vm, MRBC_SYM(LT), a, 1);
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	2301      	movs	r3, #1
 8011b40:	210c      	movs	r1, #12
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7fc fd9e 	bl	800e684 <send_by_name>
    return;
 8011b48:	e01f      	b.n	8011b8a <op_lt+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	011b      	lsls	r3, r3, #4
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	18d0      	adds	r0, r2, r3
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	3301      	adds	r3, #1
 8011b56:	011b      	lsls	r3, r3, #4
 8011b58:	683a      	ldr	r2, [r7, #0]
 8011b5a:	4413      	add	r3, r2
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	f7fc fa6b 	bl	800e038 <mrbc_compare>
 8011b62:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	683a      	ldr	r2, [r7, #0]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fc fc31 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = result < 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	da01      	bge.n	8011b7c <op_lt+0x68>
 8011b78:	2103      	movs	r1, #3
 8011b7a:	e000      	b.n	8011b7e <op_lt+0x6a>
 8011b7c:	2102      	movs	r1, #2
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	011b      	lsls	r3, r3, #4
 8011b82:	683a      	ldr	r2, [r7, #0]
 8011b84:	4413      	add	r3, r2
 8011b86:	460a      	mov	r2, r1
 8011b88:	701a      	strb	r2, [r3, #0]
}
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <op_le>:
/*! OP_LE

  R[a] = R[a]<=R[a+1]
*/
static inline void op_le( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	1c59      	adds	r1, r3, #1
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	6111      	str	r1, [r2, #16]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	011b      	lsls	r3, r3, #4
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	4413      	add	r3, r2
 8011bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8011bb4:	2b08      	cmp	r3, #8
 8011bb6:	d106      	bne.n	8011bc6 <op_le+0x36>
    send_by_name(vm, MRBC_SYM(LT_EQ), a, 1);
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	2301      	movs	r3, #1
 8011bbc:	210e      	movs	r1, #14
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f7fc fd60 	bl	800e684 <send_by_name>
    return;
 8011bc4:	e01f      	b.n	8011c06 <op_le+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	18d0      	adds	r0, r2, r3
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	683a      	ldr	r2, [r7, #0]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	4619      	mov	r1, r3
 8011bda:	f7fc fa2d 	bl	800e038 <mrbc_compare>
 8011bde:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	011b      	lsls	r3, r3, #4
 8011be4:	683a      	ldr	r2, [r7, #0]
 8011be6:	4413      	add	r3, r2
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7fc fbf3 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = result <= 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	dc01      	bgt.n	8011bf8 <op_le+0x68>
 8011bf4:	2103      	movs	r1, #3
 8011bf6:	e000      	b.n	8011bfa <op_le+0x6a>
 8011bf8:	2102      	movs	r1, #2
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	011b      	lsls	r3, r3, #4
 8011bfe:	683a      	ldr	r2, [r7, #0]
 8011c00:	4413      	add	r3, r2
 8011c02:	460a      	mov	r2, r1
 8011c04:	701a      	strb	r2, [r3, #0]
}
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <op_gt>:
/*! OP_GT

  R[a] = R[a]>R[a+1]
*/
static inline void op_gt( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	691b      	ldr	r3, [r3, #16]
 8011c1a:	1c59      	adds	r1, r3, #1
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	6111      	str	r1, [r2, #16]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	683a      	ldr	r2, [r7, #0]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8011c30:	2b08      	cmp	r3, #8
 8011c32:	d106      	bne.n	8011c42 <op_gt+0x36>
    send_by_name(vm, MRBC_SYM(GT), a, 1);
 8011c34:	68fa      	ldr	r2, [r7, #12]
 8011c36:	2301      	movs	r3, #1
 8011c38:	2112      	movs	r1, #18
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7fc fd22 	bl	800e684 <send_by_name>
    return;
 8011c40:	e01f      	b.n	8011c82 <op_gt+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	011b      	lsls	r3, r3, #4
 8011c46:	683a      	ldr	r2, [r7, #0]
 8011c48:	18d0      	adds	r0, r2, r3
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	011b      	lsls	r3, r3, #4
 8011c50:	683a      	ldr	r2, [r7, #0]
 8011c52:	4413      	add	r3, r2
 8011c54:	4619      	mov	r1, r3
 8011c56:	f7fc f9ef 	bl	800e038 <mrbc_compare>
 8011c5a:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	011b      	lsls	r3, r3, #4
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	4413      	add	r3, r2
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fc fbb5 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = result > 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	dd01      	ble.n	8011c74 <op_gt+0x68>
 8011c70:	2103      	movs	r1, #3
 8011c72:	e000      	b.n	8011c76 <op_gt+0x6a>
 8011c74:	2102      	movs	r1, #2
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	011b      	lsls	r3, r3, #4
 8011c7a:	683a      	ldr	r2, [r7, #0]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	460a      	mov	r2, r1
 8011c80:	701a      	strb	r2, [r3, #0]
}
 8011c82:	3710      	adds	r7, #16
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <op_ge>:
/*! OP_GE

  R[a] = R[a]>=R[a+1]
*/
static inline void op_ge( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	691b      	ldr	r3, [r3, #16]
 8011c96:	1c59      	adds	r1, r3, #1
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	6111      	str	r1, [r2, #16]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	60fb      	str	r3, [r7, #12]

  if (regs[a].tt == MRBC_TT_OBJECT) {
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	011b      	lsls	r3, r3, #4
 8011ca4:	683a      	ldr	r2, [r7, #0]
 8011ca6:	4413      	add	r3, r2
 8011ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8011cac:	2b08      	cmp	r3, #8
 8011cae:	d106      	bne.n	8011cbe <op_ge+0x36>
    send_by_name(vm, MRBC_SYM(GT_EQ), a, 1);
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	2113      	movs	r1, #19
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7fc fce4 	bl	800e684 <send_by_name>
    return;
 8011cbc:	e01f      	b.n	8011cfe <op_ge+0x76>
  }

  int result = mrbc_compare(&regs[a], &regs[a+1]);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	011b      	lsls	r3, r3, #4
 8011cc2:	683a      	ldr	r2, [r7, #0]
 8011cc4:	18d0      	adds	r0, r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	011b      	lsls	r3, r3, #4
 8011ccc:	683a      	ldr	r2, [r7, #0]
 8011cce:	4413      	add	r3, r2
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	f7fc f9b1 	bl	800e038 <mrbc_compare>
 8011cd6:	60b8      	str	r0, [r7, #8]

  mrbc_decref(&regs[a]);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	011b      	lsls	r3, r3, #4
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	4413      	add	r3, r2
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7fc fb77 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = result >= 0 ? MRBC_TT_TRUE : MRBC_TT_FALSE;
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	db01      	blt.n	8011cf0 <op_ge+0x68>
 8011cec:	2103      	movs	r1, #3
 8011cee:	e000      	b.n	8011cf2 <op_ge+0x6a>
 8011cf0:	2102      	movs	r1, #2
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	011b      	lsls	r3, r3, #4
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	460a      	mov	r2, r1
 8011cfc:	701a      	strb	r2, [r3, #0]
}
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <op_array>:
/*! OP_ARRAY

  R[a] = ary_new(R[a],R[a+1]..R[a+b])
*/
static inline void op_array( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011d04:	b590      	push	{r4, r7, lr}
 8011d06:	b089      	sub	sp, #36	; 0x24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	691b      	ldr	r3, [r3, #16]
 8011d12:	1c59      	adds	r1, r3, #1
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	6111      	str	r1, [r2, #16]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	61fb      	str	r3, [r7, #28]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	691b      	ldr	r3, [r3, #16]
 8011d20:	1c59      	adds	r1, r3, #1
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	6111      	str	r1, [r2, #16]
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	61bb      	str	r3, [r7, #24]

  mrbc_value value = mrbc_array_new(vm, b);
 8011d2a:	69ba      	ldr	r2, [r7, #24]
 8011d2c:	f107 0308 	add.w	r3, r7, #8
 8011d30:	6879      	ldr	r1, [r7, #4]
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7f0 fafd 	bl	8002332 <mrbc_array_new>
  if( value.array == NULL ) return;  // ENOMEM
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d02a      	beq.n	8011d94 <op_array+0x90>

  memcpy( value.array->data, &regs[a], sizeof(mrbc_value) * b );
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	6898      	ldr	r0, [r3, #8]
 8011d42:	69fb      	ldr	r3, [r7, #28]
 8011d44:	011b      	lsls	r3, r3, #4
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	18d1      	adds	r1, r2, r3
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	011b      	lsls	r3, r3, #4
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f004 fcf9 	bl	8016746 <memcpy>
  memset( &regs[a], 0, sizeof(mrbc_value) * b );
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	011b      	lsls	r3, r3, #4
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	18d0      	adds	r0, r2, r3
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	011b      	lsls	r3, r3, #4
 8011d60:	461a      	mov	r2, r3
 8011d62:	2100      	movs	r1, #0
 8011d64:	f004 fc55 	bl	8016612 <memset>
  value.array->n_stored = b;
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	69ba      	ldr	r2, [r7, #24]
 8011d6c:	b292      	uxth	r2, r2
 8011d6e:	80da      	strh	r2, [r3, #6]

  mrbc_decref(&regs[a]);
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	011b      	lsls	r3, r3, #4
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	4413      	add	r3, r2
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7fc fb2b 	bl	800e3d4 <mrbc_decref>
  regs[a] = value;
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	011b      	lsls	r3, r3, #4
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	4413      	add	r3, r2
 8011d86:	461c      	mov	r4, r3
 8011d88:	f107 0308 	add.w	r3, r7, #8
 8011d8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011d92:	e000      	b.n	8011d96 <op_array+0x92>
  if( value.array == NULL ) return;  // ENOMEM
 8011d94:	bf00      	nop
}
 8011d96:	3724      	adds	r7, #36	; 0x24
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd90      	pop	{r4, r7, pc}

08011d9c <op_array2>:
/*! OP_ARRAY2

  R[a] = ary_new(R[b],R[b+1]..R[b+c])
*/
static inline void op_array2( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011d9c:	b590      	push	{r4, r7, lr}
 8011d9e:	b08b      	sub	sp, #44	; 0x2c
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	1c59      	adds	r1, r3, #1
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	6111      	str	r1, [r2, #16]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	623b      	str	r3, [r7, #32]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	691b      	ldr	r3, [r3, #16]
 8011db8:	1c59      	adds	r1, r3, #1
 8011dba:	687a      	ldr	r2, [r7, #4]
 8011dbc:	6111      	str	r1, [r2, #16]
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	61fb      	str	r3, [r7, #28]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	691b      	ldr	r3, [r3, #16]
 8011dc6:	1c59      	adds	r1, r3, #1
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	6111      	str	r1, [r2, #16]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	61bb      	str	r3, [r7, #24]

  mrbc_value value = mrbc_array_new(vm, c);
 8011dd0:	69ba      	ldr	r2, [r7, #24]
 8011dd2:	f107 0308 	add.w	r3, r7, #8
 8011dd6:	6879      	ldr	r1, [r7, #4]
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7f0 faaa 	bl	8002332 <mrbc_array_new>
  if( value.array == NULL ) return;  // ENOMEM
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d038      	beq.n	8011e56 <op_array2+0xba>

  for( int i = 0; i < c; i++ ) {
 8011de4:	2300      	movs	r3, #0
 8011de6:	627b      	str	r3, [r7, #36]	; 0x24
 8011de8:	e01b      	b.n	8011e22 <op_array2+0x86>
    mrbc_incref( &regs[b+i] );
 8011dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	4413      	add	r3, r2
 8011df0:	011b      	lsls	r3, r3, #4
 8011df2:	683a      	ldr	r2, [r7, #0]
 8011df4:	4413      	add	r3, r2
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fc fab8 	bl	800e36c <mrbc_incref>
    value.array->data[i] = regs[b+i];
 8011dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	4413      	add	r3, r2
 8011e02:	011b      	lsls	r3, r3, #4
 8011e04:	683a      	ldr	r2, [r7, #0]
 8011e06:	18d1      	adds	r1, r2, r3
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	689a      	ldr	r2, [r3, #8]
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	011b      	lsls	r3, r3, #4
 8011e10:	4413      	add	r3, r2
 8011e12:	461c      	mov	r4, r3
 8011e14:	460b      	mov	r3, r1
 8011e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for( int i = 0; i < c; i++ ) {
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	3301      	adds	r3, #1
 8011e20:	627b      	str	r3, [r7, #36]	; 0x24
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	69ba      	ldr	r2, [r7, #24]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d8df      	bhi.n	8011dea <op_array2+0x4e>
  }
  value.array->n_stored = c;
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	69ba      	ldr	r2, [r7, #24]
 8011e2e:	b292      	uxth	r2, r2
 8011e30:	80da      	strh	r2, [r3, #6]

  mrbc_decref(&regs[a]);
 8011e32:	6a3b      	ldr	r3, [r7, #32]
 8011e34:	011b      	lsls	r3, r3, #4
 8011e36:	683a      	ldr	r2, [r7, #0]
 8011e38:	4413      	add	r3, r2
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fc faca 	bl	800e3d4 <mrbc_decref>
  regs[a] = value;
 8011e40:	6a3b      	ldr	r3, [r7, #32]
 8011e42:	011b      	lsls	r3, r3, #4
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	4413      	add	r3, r2
 8011e48:	461c      	mov	r4, r3
 8011e4a:	f107 0308 	add.w	r3, r7, #8
 8011e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e54:	e000      	b.n	8011e58 <op_array2+0xbc>
  if( value.array == NULL ) return;  // ENOMEM
 8011e56:	bf00      	nop
}
 8011e58:	372c      	adds	r7, #44	; 0x2c
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd90      	pop	{r4, r7, pc}
	...

08011e60 <op_arycat>:
/*! OP_ARYCAT

  ary_cat(R[a],R[a+1])
*/
static inline void op_arycat( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011e60:	b590      	push	{r4, r7, lr}
 8011e62:	b089      	sub	sp, #36	; 0x24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	1c59      	adds	r1, r3, #1
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	6111      	str	r1, [r2, #16]
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	61bb      	str	r3, [r7, #24]

  if( regs[a].tt == MRBC_TT_NIL ) {
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	683a      	ldr	r2, [r7, #0]
 8011e7e:	4413      	add	r3, r2
 8011e80:	f993 3000 	ldrsb.w	r3, [r3]
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d125      	bne.n	8011ed4 <op_arycat+0x74>
    // arycat(nil, [...]) #=> [...]
    assert( regs[a+1].tt == MRBC_TT_ARRAY );
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	011b      	lsls	r3, r3, #4
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	4413      	add	r3, r2
 8011e92:	f993 3000 	ldrsb.w	r3, [r3]
 8011e96:	2b0a      	cmp	r3, #10
 8011e98:	d006      	beq.n	8011ea8 <op_arycat+0x48>
 8011e9a:	4b52      	ldr	r3, [pc, #328]	; (8011fe4 <op_arycat+0x184>)
 8011e9c:	4a52      	ldr	r2, [pc, #328]	; (8011fe8 <op_arycat+0x188>)
 8011e9e:	f640 0193 	movw	r1, #2195	; 0x893
 8011ea2:	4852      	ldr	r0, [pc, #328]	; (8011fec <op_arycat+0x18c>)
 8011ea4:	f003 fb74 	bl	8015590 <__assert_func>
    regs[a] = regs[a+1];
 8011ea8:	69bb      	ldr	r3, [r7, #24]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	011b      	lsls	r3, r3, #4
 8011eae:	683a      	ldr	r2, [r7, #0]
 8011eb0:	18d1      	adds	r1, r2, r3
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	011b      	lsls	r3, r3, #4
 8011eb6:	683a      	ldr	r2, [r7, #0]
 8011eb8:	4413      	add	r3, r2
 8011eba:	461c      	mov	r4, r3
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    regs[a+1].tt = MRBC_TT_NIL;
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	011b      	lsls	r3, r3, #4
 8011eca:	683a      	ldr	r2, [r7, #0]
 8011ecc:	4413      	add	r3, r2
 8011ece:	2201      	movs	r2, #1
 8011ed0:	701a      	strb	r2, [r3, #0]

    return;
 8011ed2:	e083      	b.n	8011fdc <op_arycat+0x17c>
  }

  assert( regs[a  ].tt == MRBC_TT_ARRAY );
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	011b      	lsls	r3, r3, #4
 8011ed8:	683a      	ldr	r2, [r7, #0]
 8011eda:	4413      	add	r3, r2
 8011edc:	f993 3000 	ldrsb.w	r3, [r3]
 8011ee0:	2b0a      	cmp	r3, #10
 8011ee2:	d006      	beq.n	8011ef2 <op_arycat+0x92>
 8011ee4:	4b42      	ldr	r3, [pc, #264]	; (8011ff0 <op_arycat+0x190>)
 8011ee6:	4a40      	ldr	r2, [pc, #256]	; (8011fe8 <op_arycat+0x188>)
 8011ee8:	f640 019a 	movw	r1, #2202	; 0x89a
 8011eec:	483f      	ldr	r0, [pc, #252]	; (8011fec <op_arycat+0x18c>)
 8011eee:	f003 fb4f 	bl	8015590 <__assert_func>
  assert( regs[a+1].tt == MRBC_TT_ARRAY );
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	011b      	lsls	r3, r3, #4
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	4413      	add	r3, r2
 8011efc:	f993 3000 	ldrsb.w	r3, [r3]
 8011f00:	2b0a      	cmp	r3, #10
 8011f02:	d006      	beq.n	8011f12 <op_arycat+0xb2>
 8011f04:	4b37      	ldr	r3, [pc, #220]	; (8011fe4 <op_arycat+0x184>)
 8011f06:	4a38      	ldr	r2, [pc, #224]	; (8011fe8 <op_arycat+0x188>)
 8011f08:	f640 019b 	movw	r1, #2203	; 0x89b
 8011f0c:	4837      	ldr	r0, [pc, #220]	; (8011fec <op_arycat+0x18c>)
 8011f0e:	f003 fb3f 	bl	8015590 <__assert_func>

  int size_1 = regs[a  ].array->n_stored;
 8011f12:	69bb      	ldr	r3, [r7, #24]
 8011f14:	011b      	lsls	r3, r3, #4
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	4413      	add	r3, r2
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	88db      	ldrh	r3, [r3, #6]
 8011f1e:	617b      	str	r3, [r7, #20]
  int size_2 = regs[a+1].array->n_stored;
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	3301      	adds	r3, #1
 8011f24:	011b      	lsls	r3, r3, #4
 8011f26:	683a      	ldr	r2, [r7, #0]
 8011f28:	4413      	add	r3, r2
 8011f2a:	689b      	ldr	r3, [r3, #8]
 8011f2c:	88db      	ldrh	r3, [r3, #6]
 8011f2e:	613b      	str	r3, [r7, #16]
  int new_size = size_1 + regs[a+1].array->n_stored;
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	3301      	adds	r3, #1
 8011f34:	011b      	lsls	r3, r3, #4
 8011f36:	683a      	ldr	r2, [r7, #0]
 8011f38:	4413      	add	r3, r2
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	88db      	ldrh	r3, [r3, #6]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	4413      	add	r3, r2
 8011f44:	60fb      	str	r3, [r7, #12]

  // need resize?
  if( regs[a].array->data_size < new_size ) {
 8011f46:	69bb      	ldr	r3, [r7, #24]
 8011f48:	011b      	lsls	r3, r3, #4
 8011f4a:	683a      	ldr	r2, [r7, #0]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	889b      	ldrh	r3, [r3, #4]
 8011f52:	461a      	mov	r2, r3
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	4293      	cmp	r3, r2
 8011f58:	dd07      	ble.n	8011f6a <op_arycat+0x10a>
    mrbc_array_resize(&regs[a], new_size);
 8011f5a:	69bb      	ldr	r3, [r7, #24]
 8011f5c:	011b      	lsls	r3, r3, #4
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	4413      	add	r3, r2
 8011f62:	68f9      	ldr	r1, [r7, #12]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7f0 fa59 	bl	800241c <mrbc_array_resize>
  }

  for( int i = 0; i < size_2; i++ ) {
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	61fb      	str	r3, [r7, #28]
 8011f6e:	e029      	b.n	8011fc4 <op_arycat+0x164>
    mrbc_incref( &regs[a+1].array->data[i] );
 8011f70:	69bb      	ldr	r3, [r7, #24]
 8011f72:	3301      	adds	r3, #1
 8011f74:	011b      	lsls	r3, r3, #4
 8011f76:	683a      	ldr	r2, [r7, #0]
 8011f78:	4413      	add	r3, r2
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	689a      	ldr	r2, [r3, #8]
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	011b      	lsls	r3, r3, #4
 8011f82:	4413      	add	r3, r2
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fc f9f1 	bl	800e36c <mrbc_incref>
    regs[a].array->data[size_1+i] = regs[a+1].array->data[i];
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	011b      	lsls	r3, r3, #4
 8011f90:	683a      	ldr	r2, [r7, #0]
 8011f92:	4413      	add	r3, r2
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	689a      	ldr	r2, [r3, #8]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	011b      	lsls	r3, r3, #4
 8011f9c:	18d0      	adds	r0, r2, r3
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	011b      	lsls	r3, r3, #4
 8011fa2:	683a      	ldr	r2, [r7, #0]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	689a      	ldr	r2, [r3, #8]
 8011faa:	6979      	ldr	r1, [r7, #20]
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	440b      	add	r3, r1
 8011fb0:	011b      	lsls	r3, r3, #4
 8011fb2:	4413      	add	r3, r2
 8011fb4:	461c      	mov	r4, r3
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for( int i = 0; i < size_2; i++ ) {
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	61fb      	str	r3, [r7, #28]
 8011fc4:	69fa      	ldr	r2, [r7, #28]
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	dbd1      	blt.n	8011f70 <op_arycat+0x110>
  }
  regs[a].array->n_stored = new_size;
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	683a      	ldr	r2, [r7, #0]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	68fa      	ldr	r2, [r7, #12]
 8011fd8:	b292      	uxth	r2, r2
 8011fda:	80da      	strh	r2, [r3, #6]
}
 8011fdc:	3724      	adds	r7, #36	; 0x24
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd90      	pop	{r4, r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	0801a5d8 	.word	0x0801a5d8
 8011fe8:	0801bf10 	.word	0x0801bf10
 8011fec:	0801a2b8 	.word	0x0801a2b8
 8011ff0:	0801a5f8 	.word	0x0801a5f8

08011ff4 <op_arypush>:
/*! OP_ARYPUSH

  ary_push(R[a],R[a+1]..R[a+b])
*/
static inline void op_arypush( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b086      	sub	sp, #24
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	691b      	ldr	r3, [r3, #16]
 8012002:	1c59      	adds	r1, r3, #1
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	6111      	str	r1, [r2, #16]
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	617b      	str	r3, [r7, #20]
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	691b      	ldr	r3, [r3, #16]
 8012010:	1c59      	adds	r1, r3, #1
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	6111      	str	r1, [r2, #16]
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	613b      	str	r3, [r7, #16]

  int sz1 = mrbc_array_size(&regs[a]);
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	011b      	lsls	r3, r3, #4
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	4413      	add	r3, r2
 8012022:	4618      	mov	r0, r3
 8012024:	f7fc fa9a 	bl	800e55c <mrbc_array_size>
 8012028:	60f8      	str	r0, [r7, #12]

  int ret = mrbc_array_resize(&regs[a], sz1 + b);
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	011b      	lsls	r3, r3, #4
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	18d0      	adds	r0, r2, r3
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	4413      	add	r3, r2
 8012038:	4619      	mov	r1, r3
 801203a:	f7f0 f9ef 	bl	800241c <mrbc_array_resize>
 801203e:	60b8      	str	r0, [r7, #8]
  if( ret != 0 ) return;	// ENOMEM ?
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d12a      	bne.n	801209c <op_arypush+0xa8>

  // data copy.
  memcpy( regs[a].array->data + sz1, &regs[a+1], sizeof(mrbc_value) * b );
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	011b      	lsls	r3, r3, #4
 801204a:	683a      	ldr	r2, [r7, #0]
 801204c:	4413      	add	r3, r2
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	689a      	ldr	r2, [r3, #8]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	011b      	lsls	r3, r3, #4
 8012056:	18d0      	adds	r0, r2, r3
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	3301      	adds	r3, #1
 801205c:	011b      	lsls	r3, r3, #4
 801205e:	683a      	ldr	r2, [r7, #0]
 8012060:	18d1      	adds	r1, r2, r3
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	011b      	lsls	r3, r3, #4
 8012066:	461a      	mov	r2, r3
 8012068:	f004 fb6d 	bl	8016746 <memcpy>
  memset( &regs[a+1], 0, sizeof(mrbc_value) * b );
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	3301      	adds	r3, #1
 8012070:	011b      	lsls	r3, r3, #4
 8012072:	683a      	ldr	r2, [r7, #0]
 8012074:	18d0      	adds	r0, r2, r3
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	011b      	lsls	r3, r3, #4
 801207a:	461a      	mov	r2, r3
 801207c:	2100      	movs	r1, #0
 801207e:	f004 fac8 	bl	8016612 <memset>
  regs[a].array->n_stored = sz1 + b;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	b299      	uxth	r1, r3
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	b29a      	uxth	r2, r3
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	011b      	lsls	r3, r3, #4
 801208e:	6838      	ldr	r0, [r7, #0]
 8012090:	4403      	add	r3, r0
 8012092:	689b      	ldr	r3, [r3, #8]
 8012094:	440a      	add	r2, r1
 8012096:	b292      	uxth	r2, r2
 8012098:	80da      	strh	r2, [r3, #6]
 801209a:	e000      	b.n	801209e <op_arypush+0xaa>
  if( ret != 0 ) return;	// ENOMEM ?
 801209c:	bf00      	nop
}
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <op_arydup>:
/*! OP_ARYDUP

  R[a] = ary_dup(R[a])
*/
static inline void op_arydup( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80120a4:	b590      	push	{r4, r7, lr}
 80120a6:	b089      	sub	sp, #36	; 0x24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	1c59      	adds	r1, r3, #1
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	6111      	str	r1, [r2, #16]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	61fb      	str	r3, [r7, #28]

  mrbc_value ret = mrbc_array_dup( vm, &regs[a] );
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	011b      	lsls	r3, r3, #4
 80120c0:	683a      	ldr	r2, [r7, #0]
 80120c2:	441a      	add	r2, r3
 80120c4:	f107 0308 	add.w	r3, r7, #8
 80120c8:	6879      	ldr	r1, [r7, #4]
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7f0 fcde 	bl	8002a8c <mrbc_array_dup>
  mrbc_decref(&regs[a]);
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	011b      	lsls	r3, r3, #4
 80120d4:	683a      	ldr	r2, [r7, #0]
 80120d6:	4413      	add	r3, r2
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fc f97b 	bl	800e3d4 <mrbc_decref>
  regs[a] = ret;
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	683a      	ldr	r2, [r7, #0]
 80120e4:	4413      	add	r3, r2
 80120e6:	461c      	mov	r4, r3
 80120e8:	f107 0308 	add.w	r3, r7, #8
 80120ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80120ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80120f2:	bf00      	nop
 80120f4:	3724      	adds	r7, #36	; 0x24
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd90      	pop	{r4, r7, pc}

080120fa <op_aref>:
/*! OP_AREF

  R[a] = R[b][c]
*/
static inline void op_aref( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80120fa:	b590      	push	{r4, r7, lr}
 80120fc:	b08d      	sub	sp, #52	; 0x34
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6178      	str	r0, [r7, #20]
 8012102:	6139      	str	r1, [r7, #16]
  FETCH_BBB();
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	691b      	ldr	r3, [r3, #16]
 8012108:	1c59      	adds	r1, r3, #1
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	6111      	str	r1, [r2, #16]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	691b      	ldr	r3, [r3, #16]
 8012116:	1c59      	adds	r1, r3, #1
 8012118:	697a      	ldr	r2, [r7, #20]
 801211a:	6111      	str	r1, [r2, #16]
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	691b      	ldr	r3, [r3, #16]
 8012124:	1c59      	adds	r1, r3, #1
 8012126:	697a      	ldr	r2, [r7, #20]
 8012128:	6111      	str	r1, [r2, #16]
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	627b      	str	r3, [r7, #36]	; 0x24

  mrbc_value *src = &regs[b];
 801212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012130:	011b      	lsls	r3, r3, #4
 8012132:	693a      	ldr	r2, [r7, #16]
 8012134:	4413      	add	r3, r2
 8012136:	623b      	str	r3, [r7, #32]
  mrbc_value *dst = &regs[a];
 8012138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213a:	011b      	lsls	r3, r3, #4
 801213c:	693a      	ldr	r2, [r7, #16]
 801213e:	4413      	add	r3, r2
 8012140:	61fb      	str	r3, [r7, #28]

  mrbc_decref( dst );
 8012142:	69f8      	ldr	r0, [r7, #28]
 8012144:	f7fc f946 	bl	800e3d4 <mrbc_decref>

  if( mrbc_type(*src) == MRBC_TT_ARRAY ) {
 8012148:	6a3b      	ldr	r3, [r7, #32]
 801214a:	f993 3000 	ldrsb.w	r3, [r3]
 801214e:	2b0a      	cmp	r3, #10
 8012150:	d10e      	bne.n	8012170 <op_aref+0x76>
    // src is Array
    *dst = mrbc_array_get(src, c);
 8012152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012154:	69fc      	ldr	r4, [r7, #28]
 8012156:	463b      	mov	r3, r7
 8012158:	6a39      	ldr	r1, [r7, #32]
 801215a:	4618      	mov	r0, r3
 801215c:	f7f0 f9e4 	bl	8002528 <mrbc_array_get>
 8012160:	463b      	mov	r3, r7
 8012162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    mrbc_incref(dst);
 8012168:	69f8      	ldr	r0, [r7, #28]
 801216a:	f7fc f8ff 	bl	800e36c <mrbc_incref>
      *dst = *src;
    } else {
      mrbc_set_nil( dst );
    }
  }
}
 801216e:	e00f      	b.n	8012190 <op_aref+0x96>
    if( c == 0 ) {
 8012170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012172:	2b00      	cmp	r3, #0
 8012174:	d109      	bne.n	801218a <op_aref+0x90>
      mrbc_incref(src);
 8012176:	6a38      	ldr	r0, [r7, #32]
 8012178:	f7fc f8f8 	bl	800e36c <mrbc_incref>
      *dst = *src;
 801217c:	69fa      	ldr	r2, [r7, #28]
 801217e:	6a3b      	ldr	r3, [r7, #32]
 8012180:	4614      	mov	r4, r2
 8012182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012188:	e002      	b.n	8012190 <op_aref+0x96>
      mrbc_set_nil( dst );
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	2201      	movs	r2, #1
 801218e:	701a      	strb	r2, [r3, #0]
}
 8012190:	bf00      	nop
 8012192:	3734      	adds	r7, #52	; 0x34
 8012194:	46bd      	mov	sp, r7
 8012196:	bd90      	pop	{r4, r7, pc}

08012198 <op_aset>:
/*! OP_ASET

  R[b][c] = R[a]
*/
static inline void op_aset( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b086      	sub	sp, #24
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  FETCH_BBB();
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	691b      	ldr	r3, [r3, #16]
 80121a6:	1c59      	adds	r1, r3, #1
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	6111      	str	r1, [r2, #16]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	617b      	str	r3, [r7, #20]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	1c59      	adds	r1, r3, #1
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	6111      	str	r1, [r2, #16]
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	613b      	str	r3, [r7, #16]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	691b      	ldr	r3, [r3, #16]
 80121c2:	1c59      	adds	r1, r3, #1
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	6111      	str	r1, [r2, #16]
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	60fb      	str	r3, [r7, #12]

  assert( mrbc_type(regs[b]) == MRBC_TT_ARRAY );
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	011b      	lsls	r3, r3, #4
 80121d0:	683a      	ldr	r2, [r7, #0]
 80121d2:	4413      	add	r3, r2
 80121d4:	f993 3000 	ldrsb.w	r3, [r3]
 80121d8:	2b0a      	cmp	r3, #10
 80121da:	d006      	beq.n	80121ea <op_aset+0x52>
 80121dc:	4b0e      	ldr	r3, [pc, #56]	; (8012218 <op_aset+0x80>)
 80121de:	4a0f      	ldr	r2, [pc, #60]	; (801221c <op_aset+0x84>)
 80121e0:	f640 01f9 	movw	r1, #2297	; 0x8f9
 80121e4:	480e      	ldr	r0, [pc, #56]	; (8012220 <op_aset+0x88>)
 80121e6:	f003 f9d3 	bl	8015590 <__assert_func>

  mrbc_incref( &regs[b] );
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	011b      	lsls	r3, r3, #4
 80121ee:	683a      	ldr	r2, [r7, #0]
 80121f0:	4413      	add	r3, r2
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fc f8ba 	bl	800e36c <mrbc_incref>
  mrbc_array_set(&regs[a], c, &regs[b]);
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	011b      	lsls	r3, r3, #4
 80121fc:	683a      	ldr	r2, [r7, #0]
 80121fe:	18d0      	adds	r0, r2, r3
 8012200:	68f9      	ldr	r1, [r7, #12]
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	011b      	lsls	r3, r3, #4
 8012206:	683a      	ldr	r2, [r7, #0]
 8012208:	4413      	add	r3, r2
 801220a:	461a      	mov	r2, r3
 801220c:	f7f0 f928 	bl	8002460 <mrbc_array_set>
}
 8012210:	bf00      	nop
 8012212:	3718      	adds	r7, #24
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	0801a618 	.word	0x0801a618
 801221c:	0801bf1c 	.word	0x0801bf1c
 8012220:	0801a2b8 	.word	0x0801a2b8

08012224 <op_apost>:
/*! OP_APOST

  *R[a],R[a+1]..R[a+c] = R[a][b..]
*/
static inline void op_apost( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012224:	b590      	push	{r4, r7, lr}
 8012226:	b093      	sub	sp, #76	; 0x4c
 8012228:	af00      	add	r7, sp, #0
 801222a:	6178      	str	r0, [r7, #20]
 801222c:	6139      	str	r1, [r7, #16]
  FETCH_BBB();
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	691b      	ldr	r3, [r3, #16]
 8012232:	1c59      	adds	r1, r3, #1
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	6111      	str	r1, [r2, #16]
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	643b      	str	r3, [r7, #64]	; 0x40
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	1c59      	adds	r1, r3, #1
 8012242:	697a      	ldr	r2, [r7, #20]
 8012244:	6111      	str	r1, [r2, #16]
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	63fb      	str	r3, [r7, #60]	; 0x3c
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	1c59      	adds	r1, r3, #1
 8012250:	697a      	ldr	r2, [r7, #20]
 8012252:	6111      	str	r1, [r2, #16]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	63bb      	str	r3, [r7, #56]	; 0x38

  mrbc_value src = regs[a];
 8012258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801225a:	011b      	lsls	r3, r3, #4
 801225c:	693a      	ldr	r2, [r7, #16]
 801225e:	4413      	add	r3, r2
 8012260:	f107 0418 	add.w	r4, r7, #24
 8012264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if( mrbc_type(src) != MRBC_TT_ARRAY ) {
 801226a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801226e:	2b0a      	cmp	r3, #10
 8012270:	d019      	beq.n	80122a6 <op_apost+0x82>
    src = mrbc_array_new(vm, 1);
 8012272:	463b      	mov	r3, r7
 8012274:	2201      	movs	r2, #1
 8012276:	6979      	ldr	r1, [r7, #20]
 8012278:	4618      	mov	r0, r3
 801227a:	f7f0 f85a 	bl	8002332 <mrbc_array_new>
 801227e:	f107 0418 	add.w	r4, r7, #24
 8012282:	463b      	mov	r3, r7
 8012284:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    src.array->data[0] = regs[a];
 801228a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801228c:	011b      	lsls	r3, r3, #4
 801228e:	693a      	ldr	r2, [r7, #16]
 8012290:	441a      	add	r2, r3
 8012292:	6a3b      	ldr	r3, [r7, #32]
 8012294:	689b      	ldr	r3, [r3, #8]
 8012296:	461c      	mov	r4, r3
 8012298:	4613      	mov	r3, r2
 801229a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801229c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    src.array->n_stored = 1;
 80122a0:	6a3b      	ldr	r3, [r7, #32]
 80122a2:	2201      	movs	r2, #1
 80122a4:	80da      	strh	r2, [r3, #6]
  }

  int pre  = b;
 80122a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122a8:	637b      	str	r3, [r7, #52]	; 0x34
  int post = c;
 80122aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ac:	633b      	str	r3, [r7, #48]	; 0x30
  int len = mrbc_array_size(&src);
 80122ae:	f107 0318 	add.w	r3, r7, #24
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7fc f952 	bl	800e55c <mrbc_array_size>
 80122b8:	62f8      	str	r0, [r7, #44]	; 0x2c

  if( len > pre + post ) {
 80122ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122be:	4413      	add	r3, r2
 80122c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122c2:	429a      	cmp	r2, r3
 80122c4:	dd47      	ble.n	8012356 <op_apost+0x132>
    int ary_size = len - pre - post;
 80122c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ca:	1ad2      	subs	r2, r2, r3
 80122cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	62bb      	str	r3, [r7, #40]	; 0x28
    regs[a] = mrbc_array_new(vm, ary_size);
 80122d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d4:	011b      	lsls	r3, r3, #4
 80122d6:	693a      	ldr	r2, [r7, #16]
 80122d8:	18d4      	adds	r4, r2, r3
 80122da:	463b      	mov	r3, r7
 80122dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122de:	6979      	ldr	r1, [r7, #20]
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7f0 f826 	bl	8002332 <mrbc_array_new>
 80122e6:	463b      	mov	r3, r7
 80122e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // copy elements
    for( int i = 0; i < ary_size; i++ ) {
 80122ee:	2300      	movs	r3, #0
 80122f0:	647b      	str	r3, [r7, #68]	; 0x44
 80122f2:	e023      	b.n	801233c <op_apost+0x118>
      regs[a].array->data[i] = src.array->data[pre+i];
 80122f4:	6a3b      	ldr	r3, [r7, #32]
 80122f6:	689a      	ldr	r2, [r3, #8]
 80122f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80122fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122fc:	440b      	add	r3, r1
 80122fe:	011b      	lsls	r3, r3, #4
 8012300:	18d1      	adds	r1, r2, r3
 8012302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012304:	011b      	lsls	r3, r3, #4
 8012306:	693a      	ldr	r2, [r7, #16]
 8012308:	4413      	add	r3, r2
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	689a      	ldr	r2, [r3, #8]
 801230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012310:	011b      	lsls	r3, r3, #4
 8012312:	4413      	add	r3, r2
 8012314:	461c      	mov	r4, r3
 8012316:	460b      	mov	r3, r1
 8012318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801231a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      mrbc_incref( &regs[a].array->data[i] );
 801231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012320:	011b      	lsls	r3, r3, #4
 8012322:	693a      	ldr	r2, [r7, #16]
 8012324:	4413      	add	r3, r2
 8012326:	689b      	ldr	r3, [r3, #8]
 8012328:	689a      	ldr	r2, [r3, #8]
 801232a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801232c:	011b      	lsls	r3, r3, #4
 801232e:	4413      	add	r3, r2
 8012330:	4618      	mov	r0, r3
 8012332:	f7fc f81b 	bl	800e36c <mrbc_incref>
    for( int i = 0; i < ary_size; i++ ) {
 8012336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012338:	3301      	adds	r3, #1
 801233a:	647b      	str	r3, [r7, #68]	; 0x44
 801233c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012340:	429a      	cmp	r2, r3
 8012342:	dbd7      	blt.n	80122f4 <op_apost+0xd0>
    }
    regs[a].array->n_stored = ary_size;
 8012344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012346:	011b      	lsls	r3, r3, #4
 8012348:	693a      	ldr	r2, [r7, #16]
 801234a:	4413      	add	r3, r2
 801234c:	689b      	ldr	r3, [r3, #8]
 801234e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012350:	b292      	uxth	r2, r2
 8012352:	80da      	strh	r2, [r3, #6]
 8012354:	e006      	b.n	8012364 <op_apost+0x140>

  } else {
    assert(!"Not support this case in op_apost.");
 8012356:	4b08      	ldr	r3, [pc, #32]	; (8012378 <op_apost+0x154>)
 8012358:	4a08      	ldr	r2, [pc, #32]	; (801237c <op_apost+0x158>)
 801235a:	f44f 6112 	mov.w	r1, #2336	; 0x920
 801235e:	4808      	ldr	r0, [pc, #32]	; (8012380 <op_apost+0x15c>)
 8012360:	f003 f916 	bl	8015590 <__assert_func>
    // empty
    regs[a] = mrbc_array_new(vm, 0);
  }

  mrbc_decref(&src);
 8012364:	f107 0318 	add.w	r3, r7, #24
 8012368:	4618      	mov	r0, r3
 801236a:	f7fc f833 	bl	800e3d4 <mrbc_decref>
}
 801236e:	bf00      	nop
 8012370:	374c      	adds	r7, #76	; 0x4c
 8012372:	46bd      	mov	sp, r7
 8012374:	bd90      	pop	{r4, r7, pc}
 8012376:	bf00      	nop
 8012378:	0801a63c 	.word	0x0801a63c
 801237c:	0801bf24 	.word	0x0801bf24
 8012380:	0801a2b8 	.word	0x0801a2b8

08012384 <op_intern>:
/*! OP_INTERN

  R[a] = intern(R[a])
*/
static inline void op_intern( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012384:	b590      	push	{r4, r7, lr}
 8012386:	b089      	sub	sp, #36	; 0x24
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  FETCH_B();
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	1c59      	adds	r1, r3, #1
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	6111      	str	r1, [r2, #16]
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	61fb      	str	r3, [r7, #28]

  assert( regs[a].tt == MRBC_TT_STRING );
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	011b      	lsls	r3, r3, #4
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	4413      	add	r3, r2
 80123a4:	f993 3000 	ldrsb.w	r3, [r3]
 80123a8:	2b0b      	cmp	r3, #11
 80123aa:	d006      	beq.n	80123ba <op_intern+0x36>
 80123ac:	4b13      	ldr	r3, [pc, #76]	; (80123fc <op_intern+0x78>)
 80123ae:	4a14      	ldr	r2, [pc, #80]	; (8012400 <op_intern+0x7c>)
 80123b0:	f640 1132 	movw	r1, #2354	; 0x932
 80123b4:	4813      	ldr	r0, [pc, #76]	; (8012404 <op_intern+0x80>)
 80123b6:	f003 f8eb 	bl	8015590 <__assert_func>

  mrbc_value sym_val = mrbc_symbol_new(vm, (const char*)regs[a].string->data);
 80123ba:	69fb      	ldr	r3, [r7, #28]
 80123bc:	011b      	lsls	r3, r3, #4
 80123be:	683a      	ldr	r2, [r7, #0]
 80123c0:	4413      	add	r3, r2
 80123c2:	689b      	ldr	r3, [r3, #8]
 80123c4:	689a      	ldr	r2, [r3, #8]
 80123c6:	f107 0308 	add.w	r3, r7, #8
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fb fce1 	bl	800dd94 <mrbc_symbol_new>

  mrbc_decref( &regs[a] );
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	011b      	lsls	r3, r3, #4
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	4413      	add	r3, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fb fffa 	bl	800e3d4 <mrbc_decref>
  regs[a] = sym_val;
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	011b      	lsls	r3, r3, #4
 80123e4:	683a      	ldr	r2, [r7, #0]
 80123e6:	4413      	add	r3, r2
 80123e8:	461c      	mov	r4, r3
 80123ea:	f107 0308 	add.w	r3, r7, #8
 80123ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80123f4:	bf00      	nop
 80123f6:	3724      	adds	r7, #36	; 0x24
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd90      	pop	{r4, r7, pc}
 80123fc:	0801a664 	.word	0x0801a664
 8012400:	0801bf30 	.word	0x0801bf30
 8012404:	0801a2b8 	.word	0x0801a2b8

08012408 <op_symbol>:
/*! OP_SYMBOL

  R[a] = intern(Pool[b])
*/
static inline void op_symbol( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b08a      	sub	sp, #40	; 0x28
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	691b      	ldr	r3, [r3, #16]
 8012416:	1c59      	adds	r1, r3, #1
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	6111      	str	r1, [r2, #16]
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	627b      	str	r3, [r7, #36]	; 0x24
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	691b      	ldr	r3, [r3, #16]
 8012424:	1c59      	adds	r1, r3, #1
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	6111      	str	r1, [r2, #16]
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	623b      	str	r3, [r7, #32]

  const char *p = (const char *)mrbc_irep_pool_ptr(vm->cur_irep, b);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	68db      	ldr	r3, [r3, #12]
 8012432:	69db      	ldr	r3, [r3, #28]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	68d2      	ldr	r2, [r2, #12]
 8012438:	f102 0120 	add.w	r1, r2, #32
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	68d2      	ldr	r2, [r2, #12]
 8012440:	8a52      	ldrh	r2, [r2, #18]
 8012442:	4610      	mov	r0, r2
 8012444:	6a3a      	ldr	r2, [r7, #32]
 8012446:	4402      	add	r2, r0
 8012448:	0052      	lsls	r2, r2, #1
 801244a:	440a      	add	r2, r1
 801244c:	8812      	ldrh	r2, [r2, #0]
 801244e:	4413      	add	r3, r2
 8012450:	61fb      	str	r3, [r7, #28]
  mrbc_sym sym_id = mrbc_str_to_symid( p+3 );	// 3 is TT and length
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	3303      	adds	r3, #3
 8012456:	4618      	mov	r0, r3
 8012458:	f7fb fb36 	bl	800dac8 <mrbc_str_to_symid>
 801245c:	4603      	mov	r3, r0
 801245e:	837b      	strh	r3, [r7, #26]
  if( sym_id < 0 ) {
 8012460:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012464:	2b00      	cmp	r3, #0
 8012466:	da05      	bge.n	8012474 <op_symbol+0x6c>
    mrbc_raise(vm, MRBC_CLASS(Exception), "Overflow MAX_SYMBOLS_COUNT");
 8012468:	4a0f      	ldr	r2, [pc, #60]	; (80124a8 <op_symbol+0xa0>)
 801246a:	4910      	ldr	r1, [pc, #64]	; (80124ac <op_symbol+0xa4>)
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7f8 ffc9 	bl	800b404 <mrbc_raise>
 8012472:	e015      	b.n	80124a0 <op_symbol+0x98>
    return;
  }

  mrbc_decref(&regs[a]);
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	011b      	lsls	r3, r3, #4
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	4413      	add	r3, r2
 801247c:	4618      	mov	r0, r3
 801247e:	f7fb ffa9 	bl	800e3d4 <mrbc_decref>
  regs[a] = mrbc_symbol_value( sym_id );
 8012482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012484:	011b      	lsls	r3, r3, #4
 8012486:	683a      	ldr	r2, [r7, #0]
 8012488:	18d1      	adds	r1, r2, r3
 801248a:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 801248e:	460a      	mov	r2, r1
 8012490:	2300      	movs	r3, #0
 8012492:	6013      	str	r3, [r2, #0]
 8012494:	6053      	str	r3, [r2, #4]
 8012496:	6093      	str	r3, [r2, #8]
 8012498:	60d3      	str	r3, [r2, #12]
 801249a:	2306      	movs	r3, #6
 801249c:	700b      	strb	r3, [r1, #0]
 801249e:	6088      	str	r0, [r1, #8]
}
 80124a0:	3728      	adds	r7, #40	; 0x28
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	0801a2fc 	.word	0x0801a2fc
 80124ac:	2000010c 	.word	0x2000010c

080124b0 <op_string>:
/*! OP_STRING

  R[a] = str_dup(Pool[b])
*/
static inline void op_string( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80124b0:	b590      	push	{r4, r7, lr}
 80124b2:	b089      	sub	sp, #36	; 0x24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6178      	str	r0, [r7, #20]
 80124b8:	6139      	str	r1, [r7, #16]
  FETCH_BB();
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	691b      	ldr	r3, [r3, #16]
 80124be:	1c59      	adds	r1, r3, #1
 80124c0:	697a      	ldr	r2, [r7, #20]
 80124c2:	6111      	str	r1, [r2, #16]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	61fb      	str	r3, [r7, #28]
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	1c59      	adds	r1, r3, #1
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	6111      	str	r1, [r2, #16]
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	61bb      	str	r3, [r7, #24]

  mrbc_decref(&regs[a]);
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	011b      	lsls	r3, r3, #4
 80124da:	693a      	ldr	r2, [r7, #16]
 80124dc:	4413      	add	r3, r2
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fb ff78 	bl	800e3d4 <mrbc_decref>
  regs[a] = mrbc_irep_pool_value(vm, b);
 80124e4:	69b9      	ldr	r1, [r7, #24]
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	011b      	lsls	r3, r3, #4
 80124ea:	693a      	ldr	r2, [r7, #16]
 80124ec:	18d4      	adds	r4, r2, r3
 80124ee:	463b      	mov	r3, r7
 80124f0:	460a      	mov	r2, r1
 80124f2:	6979      	ldr	r1, [r7, #20]
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7fa f82b 	bl	800c550 <mrbc_irep_pool_value>
 80124fa:	463b      	mov	r3, r7
 80124fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012502:	bf00      	nop
 8012504:	3724      	adds	r7, #36	; 0x24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd90      	pop	{r4, r7, pc}

0801250a <op_strcat>:
/*! OP_STRCAT

  str_cat(R[a],R[a+1])
*/
static inline void op_strcat( mrbc_vm *vm, mrbc_value *regs EXT )
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b086      	sub	sp, #24
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
 8012512:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	1c59      	adds	r1, r3, #1
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	6111      	str	r1, [r2, #16]
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	617b      	str	r3, [r7, #20]

#if MRBC_USE_STRING
  // call "to_s"
  mrbc_method method;
  if( mrbc_find_method( &method, find_class_by_object(&regs[a+1]),
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	3301      	adds	r3, #1
 8012526:	011b      	lsls	r3, r3, #4
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	4413      	add	r3, r2
 801252c:	4618      	mov	r0, r3
 801252e:	f7fb ffbf 	bl	800e4b0 <find_class_by_object>
 8012532:	4601      	mov	r1, r0
 8012534:	f107 0308 	add.w	r3, r7, #8
 8012538:	22c6      	movs	r2, #198	; 0xc6
 801253a:	4618      	mov	r0, r3
 801253c:	f7f7 f8ae 	bl	800969c <mrbc_find_method>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d020      	beq.n	8012588 <op_strcat+0x7e>
			MRBC_SYM(to_s)) == 0 ) return;
  if( !method.c_func ) return;		// TODO: Not support?
 8012546:	7a7b      	ldrb	r3, [r7, #9]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d01f      	beq.n	801258c <op_strcat+0x82>

  method.func( vm, regs + a + 1, 0 );
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	697a      	ldr	r2, [r7, #20]
 8012550:	3201      	adds	r2, #1
 8012552:	0112      	lsls	r2, r2, #4
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	4411      	add	r1, r2
 8012558:	2200      	movs	r2, #0
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	4798      	blx	r3
  mrbc_string_append( &regs[a], &regs[a+1] );
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	011b      	lsls	r3, r3, #4
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	18d0      	adds	r0, r2, r3
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	3301      	adds	r3, #1
 801256a:	011b      	lsls	r3, r3, #4
 801256c:	683a      	ldr	r2, [r7, #0]
 801256e:	4413      	add	r3, r2
 8012570:	4619      	mov	r1, r3
 8012572:	f7f4 ff48 	bl	8007406 <mrbc_string_append>
  mrbc_decref_empty( &regs[a+1] );
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	3301      	adds	r3, #1
 801257a:	011b      	lsls	r3, r3, #4
 801257c:	683a      	ldr	r2, [r7, #0]
 801257e:	4413      	add	r3, r2
 8012580:	4618      	mov	r0, r3
 8012582:	f7fb ff6d 	bl	800e460 <mrbc_decref_empty>
 8012586:	e002      	b.n	801258e <op_strcat+0x84>
			MRBC_SYM(to_s)) == 0 ) return;
 8012588:	bf00      	nop
 801258a:	e000      	b.n	801258e <op_strcat+0x84>
  if( !method.c_func ) return;		// TODO: Not support?
 801258c:	bf00      	nop

#else
  mrbc_raise(vm, MRBC_CLASS(Exception), "Not support String.");
#endif
}
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <op_hash>:
/*! OP_HASH

  R[a] = hash_new(R[a],R[a+1]..R[a+b*2-1])
*/
static inline void op_hash( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012594:	b590      	push	{r4, r7, lr}
 8012596:	b089      	sub	sp, #36	; 0x24
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	1c59      	adds	r1, r3, #1
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	6111      	str	r1, [r2, #16]
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	61fb      	str	r3, [r7, #28]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	691b      	ldr	r3, [r3, #16]
 80125b0:	1c59      	adds	r1, r3, #1
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	6111      	str	r1, [r2, #16]
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	61bb      	str	r3, [r7, #24]

  mrbc_value value = mrbc_hash_new(vm, b);
 80125ba:	69ba      	ldr	r2, [r7, #24]
 80125bc:	f107 0308 	add.w	r3, r7, #8
 80125c0:	6879      	ldr	r1, [r7, #4]
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7f1 fc29 	bl	8003e1a <mrbc_hash_new>
  if( value.hash == NULL ) return;   // ENOMEM
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d02d      	beq.n	801262a <op_hash+0x96>

  // note: Do not detect duplicate keys.
  b *= 2;
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	005b      	lsls	r3, r3, #1
 80125d2:	61bb      	str	r3, [r7, #24]
  memcpy( value.hash->data, &regs[a], sizeof(mrbc_value) * b );
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	6898      	ldr	r0, [r3, #8]
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	011b      	lsls	r3, r3, #4
 80125dc:	683a      	ldr	r2, [r7, #0]
 80125de:	18d1      	adds	r1, r2, r3
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	011b      	lsls	r3, r3, #4
 80125e4:	461a      	mov	r2, r3
 80125e6:	f004 f8ae 	bl	8016746 <memcpy>
  memset( &regs[a], 0, sizeof(mrbc_value) * b );
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	011b      	lsls	r3, r3, #4
 80125ee:	683a      	ldr	r2, [r7, #0]
 80125f0:	18d0      	adds	r0, r2, r3
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	011b      	lsls	r3, r3, #4
 80125f6:	461a      	mov	r2, r3
 80125f8:	2100      	movs	r1, #0
 80125fa:	f004 f80a 	bl	8016612 <memset>
  value.hash->n_stored = b;
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	69ba      	ldr	r2, [r7, #24]
 8012602:	b292      	uxth	r2, r2
 8012604:	80da      	strh	r2, [r3, #6]

  mrbc_decref(&regs[a]);
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	011b      	lsls	r3, r3, #4
 801260a:	683a      	ldr	r2, [r7, #0]
 801260c:	4413      	add	r3, r2
 801260e:	4618      	mov	r0, r3
 8012610:	f7fb fee0 	bl	800e3d4 <mrbc_decref>
  regs[a] = value;
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	011b      	lsls	r3, r3, #4
 8012618:	683a      	ldr	r2, [r7, #0]
 801261a:	4413      	add	r3, r2
 801261c:	461c      	mov	r4, r3
 801261e:	f107 0308 	add.w	r3, r7, #8
 8012622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012628:	e000      	b.n	801262c <op_hash+0x98>
  if( value.hash == NULL ) return;   // ENOMEM
 801262a:	bf00      	nop
}
 801262c:	3724      	adds	r7, #36	; 0x24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd90      	pop	{r4, r7, pc}

08012632 <op_hashadd>:
/*! OP_HASHADD

  hash_push(R[a],R[a+1]..R[a+b*2])
*/
static inline void op_hashadd( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b088      	sub	sp, #32
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	1c59      	adds	r1, r3, #1
 8012642:	687a      	ldr	r2, [r7, #4]
 8012644:	6111      	str	r1, [r2, #16]
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	61fb      	str	r3, [r7, #28]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	691b      	ldr	r3, [r3, #16]
 801264e:	1c59      	adds	r1, r3, #1
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	6111      	str	r1, [r2, #16]
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	61bb      	str	r3, [r7, #24]

  int sz1 = mrbc_array_size(&regs[a]);
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	011b      	lsls	r3, r3, #4
 801265c:	683a      	ldr	r2, [r7, #0]
 801265e:	4413      	add	r3, r2
 8012660:	4618      	mov	r0, r3
 8012662:	f7fb ff7b 	bl	800e55c <mrbc_array_size>
 8012666:	6178      	str	r0, [r7, #20]
  int sz2 = b * 2;
 8012668:	69bb      	ldr	r3, [r7, #24]
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	613b      	str	r3, [r7, #16]

  int ret = mrbc_array_resize(&regs[a], sz1 + sz2);
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	011b      	lsls	r3, r3, #4
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	18d0      	adds	r0, r2, r3
 8012676:	697a      	ldr	r2, [r7, #20]
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	4413      	add	r3, r2
 801267c:	4619      	mov	r1, r3
 801267e:	f7ef fecd 	bl	800241c <mrbc_array_resize>
 8012682:	60f8      	str	r0, [r7, #12]
  if( ret != 0 ) return;	// ENOMEM
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d12a      	bne.n	80126e0 <op_hashadd+0xae>

  // data copy.
  // note: Do not detect duplicate keys.
  memcpy( regs[a].hash->data + sz1, &regs[a+1], sizeof(mrbc_value) * sz2 );
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	011b      	lsls	r3, r3, #4
 801268e:	683a      	ldr	r2, [r7, #0]
 8012690:	4413      	add	r3, r2
 8012692:	689b      	ldr	r3, [r3, #8]
 8012694:	689a      	ldr	r2, [r3, #8]
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	011b      	lsls	r3, r3, #4
 801269a:	18d0      	adds	r0, r2, r3
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	3301      	adds	r3, #1
 80126a0:	011b      	lsls	r3, r3, #4
 80126a2:	683a      	ldr	r2, [r7, #0]
 80126a4:	18d1      	adds	r1, r2, r3
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	011b      	lsls	r3, r3, #4
 80126aa:	461a      	mov	r2, r3
 80126ac:	f004 f84b 	bl	8016746 <memcpy>
  memset( &regs[a+1], 0, sizeof(mrbc_value) * sz2 );
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	3301      	adds	r3, #1
 80126b4:	011b      	lsls	r3, r3, #4
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	18d0      	adds	r0, r2, r3
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	011b      	lsls	r3, r3, #4
 80126be:	461a      	mov	r2, r3
 80126c0:	2100      	movs	r1, #0
 80126c2:	f003 ffa6 	bl	8016612 <memset>
  regs[a].hash->n_stored = sz1 + sz2;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	b299      	uxth	r1, r3
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	011b      	lsls	r3, r3, #4
 80126d2:	6838      	ldr	r0, [r7, #0]
 80126d4:	4403      	add	r3, r0
 80126d6:	689b      	ldr	r3, [r3, #8]
 80126d8:	440a      	add	r2, r1
 80126da:	b292      	uxth	r2, r2
 80126dc:	80da      	strh	r2, [r3, #6]
 80126de:	e000      	b.n	80126e2 <op_hashadd+0xb0>
  if( ret != 0 ) return;	// ENOMEM
 80126e0:	bf00      	nop
}
 80126e2:	3720      	adds	r7, #32
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <op_hashcat>:
/*! OP_HASHCAT

  R[a] = hash_cat(R[a],R[a+1])
*/
static inline void op_hashcat( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b088      	sub	sp, #32
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	691b      	ldr	r3, [r3, #16]
 80126f6:	1c59      	adds	r1, r3, #1
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	6111      	str	r1, [r2, #16]
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	61fb      	str	r3, [r7, #28]

  mrbc_hash_iterator ite = mrbc_hash_iterator_new(&regs[a+1]);
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	3301      	adds	r3, #1
 8012704:	011b      	lsls	r3, r3, #4
 8012706:	683a      	ldr	r2, [r7, #0]
 8012708:	441a      	add	r2, r3
 801270a:	f107 030c 	add.w	r3, r7, #12
 801270e:	4611      	mov	r1, r2
 8012710:	4618      	mov	r0, r3
 8012712:	f7fb ff52 	bl	800e5ba <mrbc_hash_iterator_new>

  while( mrbc_hash_i_has_next(&ite) ) {
 8012716:	e017      	b.n	8012748 <op_hashcat+0x60>
    mrbc_value *kv = mrbc_hash_i_next(&ite);
 8012718:	f107 030c 	add.w	r3, r7, #12
 801271c:	4618      	mov	r0, r3
 801271e:	f7fb ff7f 	bl	800e620 <mrbc_hash_i_next>
 8012722:	61b8      	str	r0, [r7, #24]
    mrbc_hash_set( &regs[a], &kv[0], &kv[1] );
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	011b      	lsls	r3, r3, #4
 8012728:	683a      	ldr	r2, [r7, #0]
 801272a:	18d0      	adds	r0, r2, r3
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	3310      	adds	r3, #16
 8012730:	461a      	mov	r2, r3
 8012732:	69b9      	ldr	r1, [r7, #24]
 8012734:	f7f1 fc23 	bl	8003f7e <mrbc_hash_set>
    mrbc_incref( &kv[0] );
 8012738:	69b8      	ldr	r0, [r7, #24]
 801273a:	f7fb fe17 	bl	800e36c <mrbc_incref>
    mrbc_incref( &kv[1] );
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	3310      	adds	r3, #16
 8012742:	4618      	mov	r0, r3
 8012744:	f7fb fe12 	bl	800e36c <mrbc_incref>
  while( mrbc_hash_i_has_next(&ite) ) {
 8012748:	f107 030c 	add.w	r3, r7, #12
 801274c:	4618      	mov	r0, r3
 801274e:	f7fb ff54 	bl	800e5fa <mrbc_hash_i_has_next>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1df      	bne.n	8012718 <op_hashcat+0x30>
  }
}
 8012758:	bf00      	nop
 801275a:	bf00      	nop
 801275c:	3720      	adds	r7, #32
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}

08012762 <op_method>:

  R[a] = lambda(Irep[b],L_BLOCK)
  R[a] = lambda(Irep[b],L_METHOD)
*/
static inline void op_method( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012762:	b590      	push	{r4, r7, lr}
 8012764:	b089      	sub	sp, #36	; 0x24
 8012766:	af00      	add	r7, sp, #0
 8012768:	6078      	str	r0, [r7, #4]
 801276a:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	691b      	ldr	r3, [r3, #16]
 8012770:	1c59      	adds	r1, r3, #1
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	6111      	str	r1, [r2, #16]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	61fb      	str	r3, [r7, #28]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	691b      	ldr	r3, [r3, #16]
 801277e:	1c59      	adds	r1, r3, #1
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	6111      	str	r1, [r2, #16]
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	61bb      	str	r3, [r7, #24]

  mrbc_decref(&regs[a]);
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	011b      	lsls	r3, r3, #4
 801278c:	683a      	ldr	r2, [r7, #0]
 801278e:	4413      	add	r3, r2
 8012790:	4618      	mov	r0, r3
 8012792:	f7fb fe1f 	bl	800e3d4 <mrbc_decref>

  mrbc_value val = mrbc_proc_new(vm, mrbc_irep_child_irep(vm->cur_irep, b));
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	f103 0220 	add.w	r2, r3, #32
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	8a9b      	ldrh	r3, [r3, #20]
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	4619      	mov	r1, r3
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	440b      	add	r3, r1
 80127ae:	4413      	add	r3, r2
 80127b0:	681a      	ldr	r2, [r3, #0]
 80127b2:	f107 0308 	add.w	r3, r7, #8
 80127b6:	6879      	ldr	r1, [r7, #4]
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7f6 fefc 	bl	80095b6 <mrbc_proc_new>
  if( !val.proc ) return;	// ENOMEM
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d00a      	beq.n	80127da <op_method+0x78>

  regs[a] = val;
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	011b      	lsls	r3, r3, #4
 80127c8:	683a      	ldr	r2, [r7, #0]
 80127ca:	4413      	add	r3, r2
 80127cc:	461c      	mov	r4, r3
 80127ce:	f107 0308 	add.w	r3, r7, #8
 80127d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127d8:	e000      	b.n	80127dc <op_method+0x7a>
  if( !val.proc ) return;	// ENOMEM
 80127da:	bf00      	nop
}
 80127dc:	3724      	adds	r7, #36	; 0x24
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd90      	pop	{r4, r7, pc}

080127e2 <op_range_inc>:
/*! OP_RANGE_INC

  R[a] = range_new(R[a],R[a+1],FALSE)
*/
static inline void op_range_inc( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80127e2:	b590      	push	{r4, r7, lr}
 80127e4:	b08b      	sub	sp, #44	; 0x2c
 80127e6:	af02      	add	r7, sp, #8
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	1c59      	adds	r1, r3, #1
 80127f2:	687a      	ldr	r2, [r7, #4]
 80127f4:	6111      	str	r1, [r2, #16]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	61fb      	str	r3, [r7, #28]

  mrbc_value value = mrbc_range_new(vm, &regs[a], &regs[a+1], 0);
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	011b      	lsls	r3, r3, #4
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	18d1      	adds	r1, r2, r3
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	3301      	adds	r3, #1
 8012806:	011b      	lsls	r3, r3, #4
 8012808:	683a      	ldr	r2, [r7, #0]
 801280a:	4413      	add	r3, r2
 801280c:	f107 0008 	add.w	r0, r7, #8
 8012810:	2200      	movs	r2, #0
 8012812:	9200      	str	r2, [sp, #0]
 8012814:	460a      	mov	r2, r1
 8012816:	6879      	ldr	r1, [r7, #4]
 8012818:	f7f4 f9df 	bl	8006bda <mrbc_range_new>
  regs[a] = value;
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	011b      	lsls	r3, r3, #4
 8012820:	683a      	ldr	r2, [r7, #0]
 8012822:	4413      	add	r3, r2
 8012824:	461c      	mov	r4, r3
 8012826:	f107 0308 	add.w	r3, r7, #8
 801282a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801282c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a+1].tt = MRBC_TT_EMPTY;
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	3301      	adds	r3, #1
 8012834:	011b      	lsls	r3, r3, #4
 8012836:	683a      	ldr	r2, [r7, #0]
 8012838:	4413      	add	r3, r2
 801283a:	2200      	movs	r2, #0
 801283c:	701a      	strb	r2, [r3, #0]
}
 801283e:	bf00      	nop
 8012840:	3724      	adds	r7, #36	; 0x24
 8012842:	46bd      	mov	sp, r7
 8012844:	bd90      	pop	{r4, r7, pc}

08012846 <op_range_exc>:
/*! OP_RANGE_EXC

  R[a] = range_new(R[a],R[a+1],TRUE)
*/
static inline void op_range_exc( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012846:	b590      	push	{r4, r7, lr}
 8012848:	b08b      	sub	sp, #44	; 0x2c
 801284a:	af02      	add	r7, sp, #8
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	691b      	ldr	r3, [r3, #16]
 8012854:	1c59      	adds	r1, r3, #1
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	6111      	str	r1, [r2, #16]
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	61fb      	str	r3, [r7, #28]

  mrbc_value value = mrbc_range_new(vm, &regs[a], &regs[a+1], 1);
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	011b      	lsls	r3, r3, #4
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	18d1      	adds	r1, r2, r3
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	3301      	adds	r3, #1
 801286a:	011b      	lsls	r3, r3, #4
 801286c:	683a      	ldr	r2, [r7, #0]
 801286e:	4413      	add	r3, r2
 8012870:	f107 0008 	add.w	r0, r7, #8
 8012874:	2201      	movs	r2, #1
 8012876:	9200      	str	r2, [sp, #0]
 8012878:	460a      	mov	r2, r1
 801287a:	6879      	ldr	r1, [r7, #4]
 801287c:	f7f4 f9ad 	bl	8006bda <mrbc_range_new>
  regs[a] = value;
 8012880:	69fb      	ldr	r3, [r7, #28]
 8012882:	011b      	lsls	r3, r3, #4
 8012884:	683a      	ldr	r2, [r7, #0]
 8012886:	4413      	add	r3, r2
 8012888:	461c      	mov	r4, r3
 801288a:	f107 0308 	add.w	r3, r7, #8
 801288e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  regs[a+1].tt = MRBC_TT_EMPTY;
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	3301      	adds	r3, #1
 8012898:	011b      	lsls	r3, r3, #4
 801289a:	683a      	ldr	r2, [r7, #0]
 801289c:	4413      	add	r3, r2
 801289e:	2200      	movs	r2, #0
 80128a0:	701a      	strb	r2, [r3, #0]
}
 80128a2:	bf00      	nop
 80128a4:	3724      	adds	r7, #36	; 0x24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd90      	pop	{r4, r7, pc}
	...

080128ac <op_oclass>:
/*! OP_OCLASS

  R[a] = ::Object
*/
static inline void op_oclass( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  FETCH_B();
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	691b      	ldr	r3, [r3, #16]
 80128ba:	1c59      	adds	r1, r3, #1
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	6111      	str	r1, [r2, #16]
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	011b      	lsls	r3, r3, #4
 80128c8:	683a      	ldr	r2, [r7, #0]
 80128ca:	4413      	add	r3, r2
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7fb fd81 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = MRBC_TT_CLASS;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	011b      	lsls	r3, r3, #4
 80128d6:	683a      	ldr	r2, [r7, #0]
 80128d8:	4413      	add	r3, r2
 80128da:	2207      	movs	r2, #7
 80128dc:	701a      	strb	r2, [r3, #0]
  regs[a].cls = mrbc_class_object;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	011b      	lsls	r3, r3, #4
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	4413      	add	r3, r2
 80128e6:	4a03      	ldr	r2, [pc, #12]	; (80128f4 <op_oclass+0x48>)
 80128e8:	609a      	str	r2, [r3, #8]
}
 80128ea:	bf00      	nop
 80128ec:	3710      	adds	r7, #16
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	20000064 	.word	0x20000064

080128f8 <op_class>:
/*! OP_CLASS

  R[a] = newclass(R[a],Syms[b],R[a+1])
*/
static inline void op_class( mrbc_vm *vm, mrbc_value *regs EXT )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b08a      	sub	sp, #40	; 0x28
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	691b      	ldr	r3, [r3, #16]
 8012906:	1c59      	adds	r1, r3, #1
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	6111      	str	r1, [r2, #16]
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	61bb      	str	r3, [r7, #24]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	691b      	ldr	r3, [r3, #16]
 8012914:	1c59      	adds	r1, r3, #1
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	6111      	str	r1, [r2, #16]
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	617b      	str	r3, [r7, #20]

  mrbc_class *super = (regs[a+1].tt == MRBC_TT_CLASS) ? regs[a+1].cls : 0;
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	3301      	adds	r3, #1
 8012922:	011b      	lsls	r3, r3, #4
 8012924:	683a      	ldr	r2, [r7, #0]
 8012926:	4413      	add	r3, r2
 8012928:	f993 3000 	ldrsb.w	r3, [r3]
 801292c:	2b07      	cmp	r3, #7
 801292e:	d106      	bne.n	801293e <op_class+0x46>
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	3301      	adds	r3, #1
 8012934:	011b      	lsls	r3, r3, #4
 8012936:	683a      	ldr	r2, [r7, #0]
 8012938:	4413      	add	r3, r2
 801293a:	689b      	ldr	r3, [r3, #8]
 801293c:	e000      	b.n	8012940 <op_class+0x48>
 801293e:	2300      	movs	r3, #0
 8012940:	613b      	str	r3, [r7, #16]

  // check unsupported pattern.
  if( super ) {
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d015      	beq.n	8012974 <op_class+0x7c>
    for( int i = 1; i < MRBC_TT_MAXVAL; i++ ) {
 8012948:	2301      	movs	r3, #1
 801294a:	627b      	str	r3, [r7, #36]	; 0x24
 801294c:	e00f      	b.n	801296e <op_class+0x76>
      if( super == mrbc_class_tbl[i] ) {
 801294e:	4a2d      	ldr	r2, [pc, #180]	; (8012a04 <op_class+0x10c>)
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012956:	693a      	ldr	r2, [r7, #16]
 8012958:	429a      	cmp	r2, r3
 801295a:	d105      	bne.n	8012968 <op_class+0x70>
	mrbc_raise(vm, MRBC_CLASS(NotImplementedError), "Inherit the built-in class is not supported.");
 801295c:	4a2a      	ldr	r2, [pc, #168]	; (8012a08 <op_class+0x110>)
 801295e:	492b      	ldr	r1, [pc, #172]	; (8012a0c <op_class+0x114>)
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7f8 fd4f 	bl	800b404 <mrbc_raise>
	return;
 8012966:	e04a      	b.n	80129fe <op_class+0x106>
    for( int i = 1; i < MRBC_TT_MAXVAL; i++ ) {
 8012968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296a:	3301      	adds	r3, #1
 801296c:	627b      	str	r3, [r7, #36]	; 0x24
 801296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012970:	2b0d      	cmp	r3, #13
 8012972:	ddec      	ble.n	801294e <op_class+0x56>
      }
    }
  }

  mrbc_class *outer = 0;
 8012974:	2300      	movs	r3, #0
 8012976:	623b      	str	r3, [r7, #32]

  if( regs[a].tt == MRBC_TT_CLASS ) {
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	011b      	lsls	r3, r3, #4
 801297c:	683a      	ldr	r2, [r7, #0]
 801297e:	4413      	add	r3, r2
 8012980:	f993 3000 	ldrsb.w	r3, [r3]
 8012984:	2b07      	cmp	r3, #7
 8012986:	d106      	bne.n	8012996 <op_class+0x9e>
    outer = regs[a].cls;
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	011b      	lsls	r3, r3, #4
 801298c:	683a      	ldr	r2, [r7, #0]
 801298e:	4413      	add	r3, r2
 8012990:	689b      	ldr	r3, [r3, #8]
 8012992:	623b      	str	r3, [r7, #32]
 8012994:	e009      	b.n	80129aa <op_class+0xb2>
  } else if( vm->cur_regs[0].tt == MRBC_TT_CLASS ) {
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	695b      	ldr	r3, [r3, #20]
 801299a:	f993 3000 	ldrsb.w	r3, [r3]
 801299e:	2b07      	cmp	r3, #7
 80129a0:	d103      	bne.n	80129aa <op_class+0xb2>
    outer = vm->cur_regs[0].cls;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	695b      	ldr	r3, [r3, #20]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	623b      	str	r3, [r7, #32]
  }

  const char *class_name = mrbc_irep_symbol_cstr(vm->cur_irep, b);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	f103 0220 	add.w	r2, r3, #32
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	005b      	lsls	r3, r3, #1
 80129b6:	4413      	add	r3, r2
 80129b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129bc:	4618      	mov	r0, r3
 80129be:	f7fb f8bb 	bl	800db38 <mrbc_symid_to_str>
 80129c2:	60f8      	str	r0, [r7, #12]
  mrbc_class *cls;

  // define a new class (or get an already defined class)
  if( outer ) {
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d007      	beq.n	80129da <op_class+0xe2>
    cls = mrbc_define_class_under(vm, outer, class_name, super);
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	6a39      	ldr	r1, [r7, #32]
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7f6 fc85 	bl	80092e0 <mrbc_define_class_under>
 80129d6:	61f8      	str	r0, [r7, #28]
 80129d8:	e005      	b.n	80129e6 <op_class+0xee>
  } else {
    cls = mrbc_define_class(vm, class_name, super);
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	68f9      	ldr	r1, [r7, #12]
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7f6 fc12 	bl	8009208 <mrbc_define_class>
 80129e4:	61f8      	str	r0, [r7, #28]
  }

  // (note)
  //  regs[a] was set to NIL or Class by compiler. So, no need to release.
  regs[a].tt = MRBC_TT_CLASS;
 80129e6:	69bb      	ldr	r3, [r7, #24]
 80129e8:	011b      	lsls	r3, r3, #4
 80129ea:	683a      	ldr	r2, [r7, #0]
 80129ec:	4413      	add	r3, r2
 80129ee:	2207      	movs	r2, #7
 80129f0:	701a      	strb	r2, [r3, #0]
  regs[a].cls = cls;
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	011b      	lsls	r3, r3, #4
 80129f6:	683a      	ldr	r2, [r7, #0]
 80129f8:	4413      	add	r3, r2
 80129fa:	69fa      	ldr	r2, [r7, #28]
 80129fc:	609a      	str	r2, [r3, #8]
}
 80129fe:	3728      	adds	r7, #40	; 0x28
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	0801ad44 	.word	0x0801ad44
 8012a08:	0801a684 	.word	0x0801a684
 8012a0c:	20000134 	.word	0x20000134

08012a10 <op_exec>:
/*! OP_EXEC

  R[a] = blockexec(R[a],Irep[b])
*/
static inline void op_exec( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	1c59      	adds	r1, r3, #1
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	6111      	str	r1, [r2, #16]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	60fb      	str	r3, [r7, #12]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	691b      	ldr	r3, [r3, #16]
 8012a2c:	1c59      	adds	r1, r3, #1
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	6111      	str	r1, [r2, #16]
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	60bb      	str	r3, [r7, #8]
  assert( regs[a].tt == MRBC_TT_CLASS );
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	011b      	lsls	r3, r3, #4
 8012a3a:	683a      	ldr	r2, [r7, #0]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8012a42:	2b07      	cmp	r3, #7
 8012a44:	d006      	beq.n	8012a54 <op_exec+0x44>
 8012a46:	4b1a      	ldr	r3, [pc, #104]	; (8012ab0 <op_exec+0xa0>)
 8012a48:	4a1a      	ldr	r2, [pc, #104]	; (8012ab4 <op_exec+0xa4>)
 8012a4a:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8012a4e:	481a      	ldr	r0, [pc, #104]	; (8012ab8 <op_exec+0xa8>)
 8012a50:	f002 fd9e 	bl	8015590 <__assert_func>

  // prepare callinfo
  mrbc_push_callinfo(vm, 0, a, 0);
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	2300      	movs	r3, #0
 8012a58:	2100      	movs	r1, #0
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f7fc f804 	bl	800ea68 <mrbc_push_callinfo>

  // target irep
  vm->cur_irep = mrbc_irep_child_irep(vm->cur_irep, b);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	f103 0220 	add.w	r2, r3, #32
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	8a9b      	ldrh	r3, [r3, #20]
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	4619      	mov	r1, r3
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	440b      	add	r3, r1
 8012a78:	4413      	add	r3, r2
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	60da      	str	r2, [r3, #12]
  vm->inst = vm->cur_irep->inst;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	699a      	ldr	r2, [r3, #24]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	611a      	str	r2, [r3, #16]
  vm->cur_regs += a;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	695a      	ldr	r2, [r3, #20]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	011b      	lsls	r3, r3, #4
 8012a92:	441a      	add	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	615a      	str	r2, [r3, #20]

  vm->target_class = regs[a].cls;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	683a      	ldr	r2, [r7, #0]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	689a      	ldr	r2, [r3, #8]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	619a      	str	r2, [r3, #24]
}
 8012aa6:	bf00      	nop
 8012aa8:	3710      	adds	r7, #16
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
 8012aae:	bf00      	nop
 8012ab0:	0801a6b4 	.word	0x0801a6b4
 8012ab4:	0801bf3c 	.word	0x0801bf3c
 8012ab8:	0801a2b8 	.word	0x0801a2b8

08012abc <op_def>:
/*! OP_DEF

  R[a].newmethod(Syms[b],R[a+1]); R[a] = Syms[b]
*/
static inline void op_def( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b08a      	sub	sp, #40	; 0x28
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	691b      	ldr	r3, [r3, #16]
 8012aca:	1c59      	adds	r1, r3, #1
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	6111      	str	r1, [r2, #16]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	623b      	str	r3, [r7, #32]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	691b      	ldr	r3, [r3, #16]
 8012ad8:	1c59      	adds	r1, r3, #1
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	6111      	str	r1, [r2, #16]
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	61fb      	str	r3, [r7, #28]

  assert( regs[a].tt == MRBC_TT_CLASS );
 8012ae2:	6a3b      	ldr	r3, [r7, #32]
 8012ae4:	011b      	lsls	r3, r3, #4
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	4413      	add	r3, r2
 8012aea:	f993 3000 	ldrsb.w	r3, [r3]
 8012aee:	2b07      	cmp	r3, #7
 8012af0:	d006      	beq.n	8012b00 <op_def+0x44>
 8012af2:	4b45      	ldr	r3, [pc, #276]	; (8012c08 <op_def+0x14c>)
 8012af4:	4a45      	ldr	r2, [pc, #276]	; (8012c0c <op_def+0x150>)
 8012af6:	f640 2147 	movw	r1, #2631	; 0xa47
 8012afa:	4845      	ldr	r0, [pc, #276]	; (8012c10 <op_def+0x154>)
 8012afc:	f002 fd48 	bl	8015590 <__assert_func>
  assert( regs[a+1].tt == MRBC_TT_PROC );
 8012b00:	6a3b      	ldr	r3, [r7, #32]
 8012b02:	3301      	adds	r3, #1
 8012b04:	011b      	lsls	r3, r3, #4
 8012b06:	683a      	ldr	r2, [r7, #0]
 8012b08:	4413      	add	r3, r2
 8012b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8012b0e:	2b09      	cmp	r3, #9
 8012b10:	d006      	beq.n	8012b20 <op_def+0x64>
 8012b12:	4b40      	ldr	r3, [pc, #256]	; (8012c14 <op_def+0x158>)
 8012b14:	4a3d      	ldr	r2, [pc, #244]	; (8012c0c <op_def+0x150>)
 8012b16:	f640 2148 	movw	r1, #2632	; 0xa48
 8012b1a:	483d      	ldr	r0, [pc, #244]	; (8012c10 <op_def+0x154>)
 8012b1c:	f002 fd38 	bl	8015590 <__assert_func>

  mrbc_class *cls = regs[a].cls;
 8012b20:	6a3b      	ldr	r3, [r7, #32]
 8012b22:	011b      	lsls	r3, r3, #4
 8012b24:	683a      	ldr	r2, [r7, #0]
 8012b26:	4413      	add	r3, r2
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	61bb      	str	r3, [r7, #24]
  mrbc_sym sym_id = mrbc_irep_symbol_id(vm->cur_irep, b);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	f103 0220 	add.w	r2, r3, #32
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	4413      	add	r3, r2
 8012b3a:	881b      	ldrh	r3, [r3, #0]
 8012b3c:	82fb      	strh	r3, [r7, #22]
  mrbc_proc *proc = regs[a+1].proc;
 8012b3e:	6a3b      	ldr	r3, [r7, #32]
 8012b40:	3301      	adds	r3, #1
 8012b42:	011b      	lsls	r3, r3, #4
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	4413      	add	r3, r2
 8012b48:	689b      	ldr	r3, [r3, #8]
 8012b4a:	613b      	str	r3, [r7, #16]
  mrbc_method *method;

  if( vm->vm_id == 0 ) {
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	789b      	ldrb	r3, [r3, #2]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d104      	bne.n	8012b5e <op_def+0xa2>
    method = mrbc_raw_alloc_no_free( sizeof(mrbc_method) );
 8012b54:	200c      	movs	r0, #12
 8012b56:	f7ef f905 	bl	8001d64 <mrbc_raw_alloc_no_free>
 8012b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8012b5c:	e003      	b.n	8012b66 <op_def+0xaa>
  } else {
    method = mrbc_raw_alloc( sizeof(mrbc_method) );
 8012b5e:	200c      	movs	r0, #12
 8012b60:	f7ee ffa0 	bl	8001aa4 <mrbc_raw_alloc>
 8012b64:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if( !method ) return; // ENOMEM
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d048      	beq.n	8012bfe <op_def+0x142>

  method->type = (vm->vm_id == 0) ? 'm' : 'M';
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	789b      	ldrb	r3, [r3, #2]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d101      	bne.n	8012b78 <op_def+0xbc>
 8012b74:	226d      	movs	r2, #109	; 0x6d
 8012b76:	e000      	b.n	8012b7a <op_def+0xbe>
 8012b78:	224d      	movs	r2, #77	; 0x4d
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	701a      	strb	r2, [r3, #0]
  method->c_func = 0;
 8012b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b80:	2200      	movs	r2, #0
 8012b82:	705a      	strb	r2, [r3, #1]
  method->sym_id = sym_id;
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	8afa      	ldrh	r2, [r7, #22]
 8012b88:	805a      	strh	r2, [r3, #2]
  method->irep = proc->irep;
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	68da      	ldr	r2, [r3, #12]
 8012b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b90:	605a      	str	r2, [r3, #4]
  method->next = cls->method_link;
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	689a      	ldr	r2, [r3, #8]
 8012b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b98:	609a      	str	r2, [r3, #8]
  cls->method_link = method;
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b9e:	609a      	str	r2, [r3, #8]

  // checking same method
  for( ;method->next != NULL; method = method->next ) {
 8012ba0:	e019      	b.n	8012bd6 <op_def+0x11a>
    if( method->next->sym_id == sym_id ) {
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	689b      	ldr	r3, [r3, #8]
 8012ba6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012baa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d10e      	bne.n	8012bd0 <op_def+0x114>
      // Found it. Unchain it in linked list and remove.
      mrbc_method *del_method = method->next;
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb4:	689b      	ldr	r3, [r3, #8]
 8012bb6:	60fb      	str	r3, [r7, #12]

      method->next = del_method->next;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	689a      	ldr	r2, [r3, #8]
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbe:	609a      	str	r2, [r3, #8]
      if( del_method->type == 'M' ) mrbc_raw_free( del_method );
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b4d      	cmp	r3, #77	; 0x4d
 8012bc6:	d10b      	bne.n	8012be0 <op_def+0x124>
 8012bc8:	68f8      	ldr	r0, [r7, #12]
 8012bca:	f7ef f947 	bl	8001e5c <mrbc_raw_free>

      break;
 8012bce:	e007      	b.n	8012be0 <op_def+0x124>
  for( ;method->next != NULL; method = method->next ) {
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8012bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd8:	689b      	ldr	r3, [r3, #8]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d1e1      	bne.n	8012ba2 <op_def+0xe6>
 8012bde:	e000      	b.n	8012be2 <op_def+0x126>
      break;
 8012be0:	bf00      	nop
    }
  }

  mrbc_set_symbol(&regs[a], sym_id);
 8012be2:	6a3b      	ldr	r3, [r7, #32]
 8012be4:	011b      	lsls	r3, r3, #4
 8012be6:	683a      	ldr	r2, [r7, #0]
 8012be8:	4413      	add	r3, r2
 8012bea:	2206      	movs	r2, #6
 8012bec:	701a      	strb	r2, [r3, #0]
 8012bee:	6a3b      	ldr	r3, [r7, #32]
 8012bf0:	011b      	lsls	r3, r3, #4
 8012bf2:	683a      	ldr	r2, [r7, #0]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012bfa:	609a      	str	r2, [r3, #8]
 8012bfc:	e000      	b.n	8012c00 <op_def+0x144>
  if( !method ) return; // ENOMEM
 8012bfe:	bf00      	nop
}
 8012c00:	3728      	adds	r7, #40	; 0x28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	0801a6b4 	.word	0x0801a6b4
 8012c0c:	0801bf44 	.word	0x0801bf44
 8012c10:	0801a2b8 	.word	0x0801a2b8
 8012c14:	0801a6d0 	.word	0x0801a6d0

08012c18 <op_alias>:
/*! OP_ALIAS

  alias_method(target_class,Syms[a],Syms[b])
*/
static inline void op_alias( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b088      	sub	sp, #32
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	6039      	str	r1, [r7, #0]
  FETCH_BB();
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	691b      	ldr	r3, [r3, #16]
 8012c26:	1c59      	adds	r1, r3, #1
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	6111      	str	r1, [r2, #16]
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	61bb      	str	r3, [r7, #24]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	691b      	ldr	r3, [r3, #16]
 8012c34:	1c59      	adds	r1, r3, #1
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	6111      	str	r1, [r2, #16]
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	617b      	str	r3, [r7, #20]

  mrbc_sym sym_id_new = mrbc_irep_symbol_id(vm->cur_irep, a);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	f103 0220 	add.w	r2, r3, #32
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	4413      	add	r3, r2
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	827b      	strh	r3, [r7, #18]
  mrbc_sym sym_id_org = mrbc_irep_symbol_id(vm->cur_irep, b);
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	f103 0220 	add.w	r2, r3, #32
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	005b      	lsls	r3, r3, #1
 8012c5c:	4413      	add	r3, r2
 8012c5e:	881b      	ldrh	r3, [r3, #0]
 8012c60:	823b      	strh	r3, [r7, #16]
  mrbc_class *cls = vm->target_class;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	60fb      	str	r3, [r7, #12]
  mrbc_method *method = mrbc_raw_alloc( sizeof(mrbc_method) );
 8012c68:	200c      	movs	r0, #12
 8012c6a:	f7ee ff1b 	bl	8001aa4 <mrbc_raw_alloc>
 8012c6e:	61f8      	str	r0, [r7, #28]
  if( !method ) return;	// ENOMEM
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d045      	beq.n	8012d02 <op_alias+0xea>

  if( mrbc_find_method( method, cls, sym_id_org ) == 0 ) {
 8012c76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	68f9      	ldr	r1, [r7, #12]
 8012c7e:	69f8      	ldr	r0, [r7, #28]
 8012c80:	f7f6 fd0c 	bl	800969c <mrbc_find_method>
 8012c84:	4603      	mov	r3, r0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10e      	bne.n	8012ca8 <op_alias+0x90>
    mrbc_raisef(vm, MRBC_CLASS(NameError), "undefined method '%s'",
 8012c8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7fa ff52 	bl	800db38 <mrbc_symid_to_str>
 8012c94:	4603      	mov	r3, r0
 8012c96:	4a1e      	ldr	r2, [pc, #120]	; (8012d10 <op_alias+0xf8>)
 8012c98:	491e      	ldr	r1, [pc, #120]	; (8012d14 <op_alias+0xfc>)
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7f8 fc06 	bl	800b4ac <mrbc_raisef>
		mrbc_symid_to_str(sym_id_org));
    mrbc_raw_free( method );
 8012ca0:	69f8      	ldr	r0, [r7, #28]
 8012ca2:	f7ef f8db 	bl	8001e5c <mrbc_raw_free>
    return;
 8012ca6:	e02f      	b.n	8012d08 <op_alias+0xf0>
  }

  method->type = 'M';
 8012ca8:	69fb      	ldr	r3, [r7, #28]
 8012caa:	224d      	movs	r2, #77	; 0x4d
 8012cac:	701a      	strb	r2, [r3, #0]
  method->sym_id = sym_id_new;
 8012cae:	69fb      	ldr	r3, [r7, #28]
 8012cb0:	8a7a      	ldrh	r2, [r7, #18]
 8012cb2:	805a      	strh	r2, [r3, #2]
  method->next = cls->method_link;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	689a      	ldr	r2, [r3, #8]
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	609a      	str	r2, [r3, #8]
  cls->method_link = method;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	69fa      	ldr	r2, [r7, #28]
 8012cc0:	609a      	str	r2, [r3, #8]

  // checking same method
  //  see OP_DEF function. same it.
  for( ;method->next != NULL; method = method->next ) {
 8012cc2:	e019      	b.n	8012cf8 <op_alias+0xe0>
    if( method->next->sym_id == sym_id_new ) {
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	689b      	ldr	r3, [r3, #8]
 8012cc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ccc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d10e      	bne.n	8012cf2 <op_alias+0xda>
      mrbc_method *del_method = method->next;
 8012cd4:	69fb      	ldr	r3, [r7, #28]
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	60bb      	str	r3, [r7, #8]
      method->next = del_method->next;
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	689a      	ldr	r2, [r3, #8]
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	609a      	str	r2, [r3, #8]
      if( del_method->type == 'M' ) mrbc_raw_free( del_method );
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	2b4d      	cmp	r3, #77	; 0x4d
 8012ce8:	d10d      	bne.n	8012d06 <op_alias+0xee>
 8012cea:	68b8      	ldr	r0, [r7, #8]
 8012cec:	f7ef f8b6 	bl	8001e5c <mrbc_raw_free>
      break;
 8012cf0:	e009      	b.n	8012d06 <op_alias+0xee>
  for( ;method->next != NULL; method = method->next ) {
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	61fb      	str	r3, [r7, #28]
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	689b      	ldr	r3, [r3, #8]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d1e1      	bne.n	8012cc4 <op_alias+0xac>
 8012d00:	e002      	b.n	8012d08 <op_alias+0xf0>
  if( !method ) return;	// ENOMEM
 8012d02:	bf00      	nop
 8012d04:	e000      	b.n	8012d08 <op_alias+0xf0>
      break;
 8012d06:	bf00      	nop
    }
  }
}
 8012d08:	3720      	adds	r7, #32
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	0801a6f0 	.word	0x0801a6f0
 8012d14:	20000174 	.word	0x20000174

08012d18 <op_sclass>:
/*! OP_SCLASS

  R[a] = R[a].singleton_class
*/
static inline void op_sclass( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  // currently, not supported
  FETCH_B();
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	691b      	ldr	r3, [r3, #16]
 8012d26:	1c59      	adds	r1, r3, #1
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	6111      	str	r1, [r2, #16]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	60fb      	str	r3, [r7, #12]
}
 8012d30:	bf00      	nop
 8012d32:	3714      	adds	r7, #20
 8012d34:	46bd      	mov	sp, r7
 8012d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3a:	4770      	bx	lr

08012d3c <op_tclass>:
/*! OP_TCLASS

  R[a] = target_class
*/
static inline void op_tclass( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	6039      	str	r1, [r7, #0]
  FETCH_B();
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	691b      	ldr	r3, [r3, #16]
 8012d4a:	1c59      	adds	r1, r3, #1
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	6111      	str	r1, [r2, #16]
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	60fb      	str	r3, [r7, #12]

  mrbc_decref(&regs[a]);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	011b      	lsls	r3, r3, #4
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fb fb39 	bl	800e3d4 <mrbc_decref>
  regs[a].tt = MRBC_TT_CLASS;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	011b      	lsls	r3, r3, #4
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	4413      	add	r3, r2
 8012d6a:	2207      	movs	r2, #7
 8012d6c:	701a      	strb	r2, [r3, #0]
  regs[a].cls = vm->target_class;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	011b      	lsls	r3, r3, #4
 8012d72:	683a      	ldr	r2, [r7, #0]
 8012d74:	4413      	add	r3, r2
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	6992      	ldr	r2, [r2, #24]
 8012d7a:	609a      	str	r2, [r3, #8]
}
 8012d7c:	bf00      	nop
 8012d7e:	3710      	adds	r7, #16
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <op_ext>:
  make 1st operand (a) 16bit
  make 2nd operand (b) 16bit
  make 2nd operand (b) 16bit
*/
static inline void op_ext( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
  FETCH_Z();
  mrbc_raise(vm, MRBC_CLASS(Exception),
 8012d8e:	4a04      	ldr	r2, [pc, #16]	; (8012da0 <op_ext+0x1c>)
 8012d90:	4904      	ldr	r1, [pc, #16]	; (8012da4 <op_ext+0x20>)
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7f8 fb36 	bl	800b404 <mrbc_raise>
	     "Not support op_ext. Re-compile with MRBC_SUPPORT_OP_EXT");
}
 8012d98:	bf00      	nop
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	0801a708 	.word	0x0801a708
 8012da4:	2000010c 	.word	0x2000010c

08012da8 <op_stop>:
/*! OP_STOP

  stop VM
*/
static inline void op_stop( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012da8:	b480      	push	{r7}
 8012daa:	b083      	sub	sp, #12
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
  FETCH_Z();

  vm->flag_preemption = 1;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	70da      	strb	r2, [r3, #3]
  vm->flag_stop = 1;
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	7913      	ldrb	r3, [r2, #4]
 8012dbc:	f043 0302 	orr.w	r3, r3, #2
 8012dc0:	7113      	strb	r3, [r2, #4]
}
 8012dc2:	bf00      	nop
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
	...

08012dd0 <op_unsupported>:

//================================================================
/* Unsupported opecodes
*/
static inline void op_unsupported( mrbc_vm *vm, mrbc_value *regs EXT )
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
  mrbc_raisef( vm, MRBC_CLASS(Exception),
	       "Unimplemented opcode (0x%02x) found.", *(vm->inst - 1));
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	691b      	ldr	r3, [r3, #16]
 8012dde:	3b01      	subs	r3, #1
 8012de0:	781b      	ldrb	r3, [r3, #0]
  mrbc_raisef( vm, MRBC_CLASS(Exception),
 8012de2:	4a04      	ldr	r2, [pc, #16]	; (8012df4 <op_unsupported+0x24>)
 8012de4:	4904      	ldr	r1, [pc, #16]	; (8012df8 <op_unsupported+0x28>)
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7f8 fb60 	bl	800b4ac <mrbc_raisef>
}
 8012dec:	bf00      	nop
 8012dee:	3708      	adds	r7, #8
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	0801a740 	.word	0x0801a740
 8012df8:	2000010c 	.word	0x2000010c

08012dfc <mrbc_vm_run>:
  @retval 0	(maybe) preemption by timer.
  @retval 1	program done.
  @retval 2	exception occurred.
*/
int mrbc_vm_run( struct VM *vm )
{
 8012dfc:	b590      	push	{r4, r7, lr}
 8012dfe:	b08b      	sub	sp, #44	; 0x2c
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
#else
#define EXT
#endif

  while( 1 ) {
    mrbc_value *regs = vm->cur_regs;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	695b      	ldr	r3, [r3, #20]
 8012e08:	623b      	str	r3, [r7, #32]
    uint8_t op = *vm->inst++;		// Dispatch
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	691b      	ldr	r3, [r3, #16]
 8012e0e:	1c59      	adds	r1, r3, #1
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	6111      	str	r1, [r2, #16]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	77fb      	strb	r3, [r7, #31]

    switch( op ) {
 8012e18:	7ffb      	ldrb	r3, [r7, #31]
 8012e1a:	2b69      	cmp	r3, #105	; 0x69
 8012e1c:	f200 82b3 	bhi.w	8013386 <mrbc_vm_run+0x58a>
 8012e20:	a201      	add	r2, pc, #4	; (adr r2, 8012e28 <mrbc_vm_run+0x2c>)
 8012e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e26:	bf00      	nop
 8012e28:	08012fd1 	.word	0x08012fd1
 8012e2c:	08012fdb 	.word	0x08012fdb
 8012e30:	08012fe5 	.word	0x08012fe5
 8012e34:	08012fef 	.word	0x08012fef
 8012e38:	08012ff9 	.word	0x08012ff9
 8012e3c:	08013003 	.word	0x08013003
 8012e40:	08013003 	.word	0x08013003
 8012e44:	08013003 	.word	0x08013003
 8012e48:	08013003 	.word	0x08013003
 8012e4c:	08013003 	.word	0x08013003
 8012e50:	08013003 	.word	0x08013003
 8012e54:	08013003 	.word	0x08013003
 8012e58:	08013003 	.word	0x08013003
 8012e5c:	08013003 	.word	0x08013003
 8012e60:	0801300d 	.word	0x0801300d
 8012e64:	08013017 	.word	0x08013017
 8012e68:	08013021 	.word	0x08013021
 8012e6c:	0801302b 	.word	0x0801302b
 8012e70:	08013035 	.word	0x08013035
 8012e74:	0801303f 	.word	0x0801303f
 8012e78:	08013049 	.word	0x08013049
 8012e7c:	08013053 	.word	0x08013053
 8012e80:	0801305d 	.word	0x0801305d
 8012e84:	08013067 	.word	0x08013067
 8012e88:	08013071 	.word	0x08013071
 8012e8c:	0801307b 	.word	0x0801307b
 8012e90:	08013085 	.word	0x08013085
 8012e94:	0801308f 	.word	0x0801308f
 8012e98:	08013099 	.word	0x08013099
 8012e9c:	080130a3 	.word	0x080130a3
 8012ea0:	080130ad 	.word	0x080130ad
 8012ea4:	080130b7 	.word	0x080130b7
 8012ea8:	080130c1 	.word	0x080130c1
 8012eac:	080130cb 	.word	0x080130cb
 8012eb0:	080130d5 	.word	0x080130d5
 8012eb4:	080130df 	.word	0x080130df
 8012eb8:	080130e9 	.word	0x080130e9
 8012ebc:	080130f3 	.word	0x080130f3
 8012ec0:	080130fd 	.word	0x080130fd
 8012ec4:	08013107 	.word	0x08013107
 8012ec8:	08013111 	.word	0x08013111
 8012ecc:	0801311b 	.word	0x0801311b
 8012ed0:	08013125 	.word	0x08013125
 8012ed4:	0801312f 	.word	0x0801312f
 8012ed8:	08013139 	.word	0x08013139
 8012edc:	08013143 	.word	0x08013143
 8012ee0:	0801314d 	.word	0x0801314d
 8012ee4:	08013157 	.word	0x08013157
 8012ee8:	08013161 	.word	0x08013161
 8012eec:	0801316b 	.word	0x0801316b
 8012ef0:	08013175 	.word	0x08013175
 8012ef4:	0801317f 	.word	0x0801317f
 8012ef8:	08013189 	.word	0x08013189
 8012efc:	08013193 	.word	0x08013193
 8012f00:	0801319d 	.word	0x0801319d
 8012f04:	080131a7 	.word	0x080131a7
 8012f08:	080131b1 	.word	0x080131b1
 8012f0c:	080131bb 	.word	0x080131bb
 8012f10:	080131c5 	.word	0x080131c5
 8012f14:	080131cf 	.word	0x080131cf
 8012f18:	080131d9 	.word	0x080131d9
 8012f1c:	080131e3 	.word	0x080131e3
 8012f20:	080131ed 	.word	0x080131ed
 8012f24:	080131f7 	.word	0x080131f7
 8012f28:	08013201 	.word	0x08013201
 8012f2c:	0801320b 	.word	0x0801320b
 8012f30:	08013215 	.word	0x08013215
 8012f34:	0801321f 	.word	0x0801321f
 8012f38:	08013229 	.word	0x08013229
 8012f3c:	08013233 	.word	0x08013233
 8012f40:	0801323d 	.word	0x0801323d
 8012f44:	08013247 	.word	0x08013247
 8012f48:	08013251 	.word	0x08013251
 8012f4c:	0801325b 	.word	0x0801325b
 8012f50:	08013265 	.word	0x08013265
 8012f54:	0801326f 	.word	0x0801326f
 8012f58:	08013279 	.word	0x08013279
 8012f5c:	08013283 	.word	0x08013283
 8012f60:	0801328d 	.word	0x0801328d
 8012f64:	08013297 	.word	0x08013297
 8012f68:	080132a1 	.word	0x080132a1
 8012f6c:	080132ab 	.word	0x080132ab
 8012f70:	080132b5 	.word	0x080132b5
 8012f74:	080132bf 	.word	0x080132bf
 8012f78:	080132c9 	.word	0x080132c9
 8012f7c:	080132d3 	.word	0x080132d3
 8012f80:	080132dd 	.word	0x080132dd
 8012f84:	080132e7 	.word	0x080132e7
 8012f88:	080132e7 	.word	0x080132e7
 8012f8c:	080132f1 	.word	0x080132f1
 8012f90:	080132fb 	.word	0x080132fb
 8012f94:	08013305 	.word	0x08013305
 8012f98:	0801330f 	.word	0x0801330f
 8012f9c:	08013319 	.word	0x08013319
 8012fa0:	08013323 	.word	0x08013323
 8012fa4:	0801332d 	.word	0x0801332d
 8012fa8:	08013337 	.word	0x08013337
 8012fac:	08013341 	.word	0x08013341
 8012fb0:	0801334b 	.word	0x0801334b
 8012fb4:	08013355 	.word	0x08013355
 8012fb8:	0801335f 	.word	0x0801335f
 8012fbc:	08013369 	.word	0x08013369
 8012fc0:	08013373 	.word	0x08013373
 8012fc4:	08013373 	.word	0x08013373
 8012fc8:	08013373 	.word	0x08013373
 8012fcc:	0801337d 	.word	0x0801337d
    case OP_NOP:        op_nop        (vm, regs EXT); break;
 8012fd0:	6a39      	ldr	r1, [r7, #32]
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fb ff5e 	bl	800ee94 <op_nop>
 8012fd8:	e1da      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_MOVE:       op_move       (vm, regs EXT); break;
 8012fda:	6a39      	ldr	r1, [r7, #32]
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7fb ff64 	bl	800eeaa <op_move>
 8012fe2:	e1d5      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADL:      op_loadl      (vm, regs EXT); break;
 8012fe4:	6a39      	ldr	r1, [r7, #32]
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7fb ff91 	bl	800ef0e <op_loadl>
 8012fec:	e1d0      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADI:      op_loadi      (vm, regs EXT); break;
 8012fee:	6a39      	ldr	r1, [r7, #32]
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7fb ffb9 	bl	800ef68 <op_loadi>
 8012ff6:	e1cb      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADINEG:   op_loadineg   (vm, regs EXT); break;
 8012ff8:	6a39      	ldr	r1, [r7, #32]
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f7fb ffde 	bl	800efbc <op_loadineg>
 8013000:	e1c6      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADI_2:    // fall through
    case OP_LOADI_3:    // fall through
    case OP_LOADI_4:    // fall through
    case OP_LOADI_5:    // fall through
    case OP_LOADI_6:    // fall through
    case OP_LOADI_7:    op_loadi_n    (vm, regs EXT); break;
 8013002:	6a39      	ldr	r1, [r7, #32]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7fc f804 	bl	800f012 <op_loadi_n>
 801300a:	e1c1      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADI16:    op_loadi16    (vm, regs EXT); break;
 801300c:	6a39      	ldr	r1, [r7, #32]
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7fc f82a 	bl	800f068 <op_loadi16>
 8013014:	e1bc      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADI32:    op_loadi32    (vm, regs EXT); break;
 8013016:	6a39      	ldr	r1, [r7, #32]
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7fc f85c 	bl	800f0d6 <op_loadi32>
 801301e:	e1b7      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADSYM:    op_loadsym    (vm, regs EXT); break;
 8013020:	6a39      	ldr	r1, [r7, #32]
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7fc f89f 	bl	800f166 <op_loadsym>
 8013028:	e1b2      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADNIL:    op_loadnil    (vm, regs EXT); break;
 801302a:	6a39      	ldr	r1, [r7, #32]
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7fc f8cd 	bl	800f1cc <op_loadnil>
 8013032:	e1ad      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADSELF:   op_loadself   (vm, regs EXT); break;
 8013034:	6a39      	ldr	r1, [r7, #32]
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7fc f8e5 	bl	800f206 <op_loadself>
 801303c:	e1a8      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADT:      op_loadt      (vm, regs EXT); break;
 801303e:	6a39      	ldr	r1, [r7, #32]
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7fc f90c 	bl	800f25e <op_loadt>
 8013046:	e1a3      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LOADF:      op_loadf      (vm, regs EXT); break;
 8013048:	6a39      	ldr	r1, [r7, #32]
 801304a:	6878      	ldr	r0, [r7, #4]
 801304c:	f7fc f924 	bl	800f298 <op_loadf>
 8013050:	e19e      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETGV:      op_getgv      (vm, regs EXT); break;
 8013052:	6a39      	ldr	r1, [r7, #32]
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f7fc f93c 	bl	800f2d2 <op_getgv>
 801305a:	e199      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETGV:      op_setgv      (vm, regs EXT); break;
 801305c:	6a39      	ldr	r1, [r7, #32]
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f7fc f978 	bl	800f354 <op_setgv>
 8013064:	e194      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETSV:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013066:	6a39      	ldr	r1, [r7, #32]
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f7ff feb1 	bl	8012dd0 <op_unsupported>
 801306e:	e18f      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETSV:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013070:	6a39      	ldr	r1, [r7, #32]
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff feac 	bl	8012dd0 <op_unsupported>
 8013078:	e18a      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETIV:      op_getiv      (vm, regs EXT); break;
 801307a:	6a39      	ldr	r1, [r7, #32]
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f7fc f997 	bl	800f3b0 <op_getiv>
 8013082:	e185      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETIV:      op_setiv      (vm, regs EXT); break;
 8013084:	6a39      	ldr	r1, [r7, #32]
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f7fc f9e6 	bl	800f458 <op_setiv>
 801308c:	e180      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETCV:      op_unsupported(vm, regs EXT); break; // not implemented.
 801308e:	6a39      	ldr	r1, [r7, #32]
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7ff fe9d 	bl	8012dd0 <op_unsupported>
 8013096:	e17b      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETCV:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013098:	6a39      	ldr	r1, [r7, #32]
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7ff fe98 	bl	8012dd0 <op_unsupported>
 80130a0:	e176      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETCONST:   op_getconst   (vm, regs EXT); break;
 80130a2:	6a39      	ldr	r1, [r7, #32]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7fc fa1f 	bl	800f4e8 <op_getconst>
 80130aa:	e171      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETCONST:   op_setconst   (vm, regs EXT); break;
 80130ac:	6a39      	ldr	r1, [r7, #32]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7fc fabe 	bl	800f630 <op_setconst>
 80130b4:	e16c      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETMCNST:   op_getmcnst   (vm, regs EXT); break;
 80130b6:	6a39      	ldr	r1, [r7, #32]
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7fc fafb 	bl	800f6b4 <op_getmcnst>
 80130be:	e167      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETMCNST:   op_unsupported(vm, regs EXT); break; // not implemented.
 80130c0:	6a39      	ldr	r1, [r7, #32]
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f7ff fe84 	bl	8012dd0 <op_unsupported>
 80130c8:	e162      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETUPVAR:   op_getupvar   (vm, regs EXT); break;
 80130ca:	6a39      	ldr	r1, [r7, #32]
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7fc fb59 	bl	800f784 <op_getupvar>
 80130d2:	e15d      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETUPVAR:   op_setupvar   (vm, regs EXT); break;
 80130d4:	6a39      	ldr	r1, [r7, #32]
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f7fc fbd8 	bl	800f88c <op_setupvar>
 80130dc:	e158      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GETIDX:     op_getidx     (vm, regs EXT); break;
 80130de:	6a39      	ldr	r1, [r7, #32]
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f7fc fc5f 	bl	800f9a4 <op_getidx>
 80130e6:	e153      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SETIDX:     op_setidx     (vm, regs EXT); break;
 80130e8:	6a39      	ldr	r1, [r7, #32]
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7fc fc70 	bl	800f9d0 <op_setidx>
 80130f0:	e14e      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_JMP:        op_jmp        (vm, regs EXT); break;
 80130f2:	6a39      	ldr	r1, [r7, #32]
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7fc fc81 	bl	800f9fc <op_jmp>
 80130fa:	e149      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_JMPIF:      op_jmpif      (vm, regs EXT); break;
 80130fc:	6a39      	ldr	r1, [r7, #32]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7fc fc9f 	bl	800fa42 <op_jmpif>
 8013104:	e144      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_JMPNOT:     op_jmpnot     (vm, regs EXT); break;
 8013106:	6a39      	ldr	r1, [r7, #32]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7fc fccc 	bl	800faa6 <op_jmpnot>
 801310e:	e13f      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_JMPNIL:     op_jmpnil     (vm, regs EXT); break;
 8013110:	6a39      	ldr	r1, [r7, #32]
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7fc fcf9 	bl	800fb0a <op_jmpnil>
 8013118:	e13a      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_JMPUW:      op_jmpuw      (vm, regs EXT); break;
 801311a:	6a39      	ldr	r1, [r7, #32]
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7fc fd27 	bl	800fb70 <op_jmpuw>
 8013122:	e135      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_EXCEPT:     op_except     (vm, regs EXT); break;
 8013124:	6a39      	ldr	r1, [r7, #32]
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7fc fd8e 	bl	800fc48 <op_except>
 801312c:	e130      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_RESCUE:     op_rescue     (vm, regs EXT); break;
 801312e:	6a39      	ldr	r1, [r7, #32]
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7fc fdaf 	bl	800fc94 <op_rescue>
 8013136:	e12b      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_RAISEIF:    op_raiseif    (vm, regs EXT); break;
 8013138:	6a39      	ldr	r1, [r7, #32]
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7fc fe00 	bl	800fd40 <op_raiseif>
 8013140:	e126      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SSEND:      op_ssend      (vm, regs EXT); break;
 8013142:	6a39      	ldr	r1, [r7, #32]
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f7fc ffe3 	bl	8010110 <op_ssend>
 801314a:	e121      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SSENDB:     op_ssendb     (vm, regs EXT); break;
 801314c:	6a39      	ldr	r1, [r7, #32]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f7fd f826 	bl	80101a0 <op_ssendb>
 8013154:	e11c      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SEND:       op_send       (vm, regs EXT); break;
 8013156:	6a39      	ldr	r1, [r7, #32]
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7fd f86b 	bl	8010234 <op_send>
 801315e:	e117      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SENDB:      op_sendb      (vm, regs EXT); break;
 8013160:	6a39      	ldr	r1, [r7, #32]
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7fd f892 	bl	801028c <op_sendb>
 8013168:	e112      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_CALL:       op_unsupported(vm, regs EXT); break; // not implemented.
 801316a:	6a39      	ldr	r1, [r7, #32]
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7ff fe2f 	bl	8012dd0 <op_unsupported>
 8013172:	e10d      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SUPER:      op_super      (vm, regs EXT); break;
 8013174:	6a39      	ldr	r1, [r7, #32]
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f7fd f8b6 	bl	80102e8 <op_super>
 801317c:	e108      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ARGARY:     op_argary     (vm, regs EXT); break;
 801317e:	6a39      	ldr	r1, [r7, #32]
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f7fd fa3d 	bl	8010600 <op_argary>
 8013186:	e103      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ENTER:      op_enter      (vm, regs EXT); break;
 8013188:	6a39      	ldr	r1, [r7, #32]
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7fd fb60 	bl	8010850 <op_enter>
 8013190:	e0fe      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_KEY_P:      op_key_p      (vm, regs EXT); break;
 8013192:	6a39      	ldr	r1, [r7, #32]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f7fd fdc3 	bl	8010d20 <op_key_p>
 801319a:	e0f9      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_KEYEND:     op_keyend     (vm, regs EXT); break;
 801319c:	6a39      	ldr	r1, [r7, #32]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7fd fe00 	bl	8010da4 <op_keyend>
 80131a4:	e0f4      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_KARG:       op_karg       (vm, regs EXT); break;
 80131a6:	6a39      	ldr	r1, [r7, #32]
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7fd fe2d 	bl	8010e08 <op_karg>
 80131ae:	e0ef      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_RETURN:     op_return     (vm, regs EXT); break;
 80131b0:	6a39      	ldr	r1, [r7, #32]
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7fd ff0a 	bl	8010fcc <op_return>
 80131b8:	e0ea      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_RETURN_BLK: op_return_blk (vm, regs EXT); break;
 80131ba:	6a39      	ldr	r1, [r7, #32]
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7fd ff1b 	bl	8010ff8 <op_return_blk>
 80131c2:	e0e5      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_BREAK:      op_break      (vm, regs EXT); break;
 80131c4:	6a39      	ldr	r1, [r7, #32]
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f7fd ffb2 	bl	8011130 <op_break>
 80131cc:	e0e0      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_BLKPUSH:    op_blkpush    (vm, regs EXT); break;
 80131ce:	6a39      	ldr	r1, [r7, #32]
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f7fe f845 	bl	8011260 <op_blkpush>
 80131d6:	e0db      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ADD:        op_add        (vm, regs EXT); break;
 80131d8:	6a39      	ldr	r1, [r7, #32]
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f7fe f8d8 	bl	8011390 <op_add>
 80131e0:	e0d6      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ADDI:       op_addi       (vm, regs EXT); break;
 80131e2:	6a39      	ldr	r1, [r7, #32]
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7fe f985 	bl	80114f4 <op_addi>
 80131ea:	e0d1      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SUB:        op_sub        (vm, regs EXT); break;
 80131ec:	6a39      	ldr	r1, [r7, #32]
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f7fe f9d6 	bl	80115a0 <op_sub>
 80131f4:	e0cc      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SUBI:       op_subi       (vm, regs EXT); break;
 80131f6:	6a39      	ldr	r1, [r7, #32]
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7fe fa83 	bl	8011704 <op_subi>
 80131fe:	e0c7      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_MUL:        op_mul        (vm, regs EXT); break;
 8013200:	6a39      	ldr	r1, [r7, #32]
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f7fe fad4 	bl	80117b0 <op_mul>
 8013208:	e0c2      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_DIV:        op_div        (vm, regs EXT); break;
 801320a:	6a39      	ldr	r1, [r7, #32]
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7fe fb81 	bl	8011914 <op_div>
 8013212:	e0bd      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_EQ:         op_eq         (vm, regs EXT); break;
 8013214:	6a39      	ldr	r1, [r7, #32]
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7fe fc3e 	bl	8011a98 <op_eq>
 801321c:	e0b8      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LT:         op_lt         (vm, regs EXT); break;
 801321e:	6a39      	ldr	r1, [r7, #32]
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7fe fc77 	bl	8011b14 <op_lt>
 8013226:	e0b3      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LE:         op_le         (vm, regs EXT); break;
 8013228:	6a39      	ldr	r1, [r7, #32]
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7fe fcb0 	bl	8011b90 <op_le>
 8013230:	e0ae      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GT:         op_gt         (vm, regs EXT); break;
 8013232:	6a39      	ldr	r1, [r7, #32]
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7fe fce9 	bl	8011c0c <op_gt>
 801323a:	e0a9      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_GE:         op_ge         (vm, regs EXT); break;
 801323c:	6a39      	ldr	r1, [r7, #32]
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7fe fd22 	bl	8011c88 <op_ge>
 8013244:	e0a4      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ARRAY:      op_array      (vm, regs EXT); break;
 8013246:	6a39      	ldr	r1, [r7, #32]
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7fe fd5b 	bl	8011d04 <op_array>
 801324e:	e09f      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ARRAY2:     op_array2     (vm, regs EXT); break;
 8013250:	6a39      	ldr	r1, [r7, #32]
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f7fe fda2 	bl	8011d9c <op_array2>
 8013258:	e09a      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ARYCAT:     op_arycat     (vm, regs EXT); break;
 801325a:	6a39      	ldr	r1, [r7, #32]
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7fe fdff 	bl	8011e60 <op_arycat>
 8013262:	e095      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ARYPUSH:    op_arypush    (vm, regs EXT); break;
 8013264:	6a39      	ldr	r1, [r7, #32]
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f7fe fec4 	bl	8011ff4 <op_arypush>
 801326c:	e090      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ARYDUP:     op_arydup     (vm, regs EXT); break;
 801326e:	6a39      	ldr	r1, [r7, #32]
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7fe ff17 	bl	80120a4 <op_arydup>
 8013276:	e08b      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_AREF:       op_aref       (vm, regs EXT); break;
 8013278:	6a39      	ldr	r1, [r7, #32]
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f7fe ff3d 	bl	80120fa <op_aref>
 8013280:	e086      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ASET:       op_aset       (vm, regs EXT); break;
 8013282:	6a39      	ldr	r1, [r7, #32]
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7fe ff87 	bl	8012198 <op_aset>
 801328a:	e081      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_APOST:      op_apost      (vm, regs EXT); break;
 801328c:	6a39      	ldr	r1, [r7, #32]
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f7fe ffc8 	bl	8012224 <op_apost>
 8013294:	e07c      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_INTERN:     op_intern     (vm, regs EXT); break;
 8013296:	6a39      	ldr	r1, [r7, #32]
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff f873 	bl	8012384 <op_intern>
 801329e:	e077      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SYMBOL:     op_symbol     (vm, regs EXT); break;
 80132a0:	6a39      	ldr	r1, [r7, #32]
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f7ff f8b0 	bl	8012408 <op_symbol>
 80132a8:	e072      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_STRING:     op_string     (vm, regs EXT); break;
 80132aa:	6a39      	ldr	r1, [r7, #32]
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f7ff f8ff 	bl	80124b0 <op_string>
 80132b2:	e06d      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_STRCAT:     op_strcat     (vm, regs EXT); break;
 80132b4:	6a39      	ldr	r1, [r7, #32]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f7ff f927 	bl	801250a <op_strcat>
 80132bc:	e068      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_HASH:       op_hash       (vm, regs EXT); break;
 80132be:	6a39      	ldr	r1, [r7, #32]
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f7ff f967 	bl	8012594 <op_hash>
 80132c6:	e063      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_HASHADD:    op_hashadd    (vm, regs EXT); break;
 80132c8:	6a39      	ldr	r1, [r7, #32]
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f7ff f9b1 	bl	8012632 <op_hashadd>
 80132d0:	e05e      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_HASHCAT:    op_hashcat    (vm, regs EXT); break;
 80132d2:	6a39      	ldr	r1, [r7, #32]
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f7ff fa07 	bl	80126e8 <op_hashcat>
 80132da:	e059      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_LAMBDA:     op_unsupported(vm, regs EXT); break; // not implemented.
 80132dc:	6a39      	ldr	r1, [r7, #32]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7ff fd76 	bl	8012dd0 <op_unsupported>
 80132e4:	e054      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_BLOCK:      // fall through
    case OP_METHOD:     op_method     (vm, regs EXT); break;
 80132e6:	6a39      	ldr	r1, [r7, #32]
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f7ff fa3a 	bl	8012762 <op_method>
 80132ee:	e04f      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_RANGE_INC:  op_range_inc  (vm, regs EXT); break;
 80132f0:	6a39      	ldr	r1, [r7, #32]
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f7ff fa75 	bl	80127e2 <op_range_inc>
 80132f8:	e04a      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_RANGE_EXC:  op_range_exc  (vm, regs EXT); break;
 80132fa:	6a39      	ldr	r1, [r7, #32]
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7ff faa2 	bl	8012846 <op_range_exc>
 8013302:	e045      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_OCLASS:     op_oclass     (vm, regs EXT); break;
 8013304:	6a39      	ldr	r1, [r7, #32]
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f7ff fad0 	bl	80128ac <op_oclass>
 801330c:	e040      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_CLASS:      op_class      (vm, regs EXT); break;
 801330e:	6a39      	ldr	r1, [r7, #32]
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7ff faf1 	bl	80128f8 <op_class>
 8013316:	e03b      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_MODULE:     op_unsupported(vm, regs EXT); break; // not implemented.
 8013318:	6a39      	ldr	r1, [r7, #32]
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f7ff fd58 	bl	8012dd0 <op_unsupported>
 8013320:	e036      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_EXEC:       op_exec       (vm, regs EXT); break;
 8013322:	6a39      	ldr	r1, [r7, #32]
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f7ff fb73 	bl	8012a10 <op_exec>
 801332a:	e031      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_DEF:        op_def        (vm, regs EXT); break;
 801332c:	6a39      	ldr	r1, [r7, #32]
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7ff fbc4 	bl	8012abc <op_def>
 8013334:	e02c      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ALIAS:      op_alias      (vm, regs EXT); break;
 8013336:	6a39      	ldr	r1, [r7, #32]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7ff fc6d 	bl	8012c18 <op_alias>
 801333e:	e027      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_UNDEF:      op_unsupported(vm, regs EXT); break; // not implemented.
 8013340:	6a39      	ldr	r1, [r7, #32]
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f7ff fd44 	bl	8012dd0 <op_unsupported>
 8013348:	e022      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_SCLASS:     op_sclass     (vm, regs EXT); break;
 801334a:	6a39      	ldr	r1, [r7, #32]
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7ff fce3 	bl	8012d18 <op_sclass>
 8013352:	e01d      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_TCLASS:     op_tclass     (vm, regs EXT); break;
 8013354:	6a39      	ldr	r1, [r7, #32]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff fcf0 	bl	8012d3c <op_tclass>
 801335c:	e018      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_DEBUG:      op_unsupported(vm, regs EXT); break; // not implemented.
 801335e:	6a39      	ldr	r1, [r7, #32]
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7ff fd35 	bl	8012dd0 <op_unsupported>
 8013366:	e013      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_ERR:        op_unsupported(vm, regs EXT); break; // not implemented.
 8013368:	6a39      	ldr	r1, [r7, #32]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f7ff fd30 	bl	8012dd0 <op_unsupported>
 8013370:	e00e      	b.n	8013390 <mrbc_vm_run+0x594>
    case OP_EXT2:       ext = 2; continue;
    case OP_EXT3:       ext = 3; continue;
#else
    case OP_EXT1:       // fall through
    case OP_EXT2:       // fall through
    case OP_EXT3:       op_ext        (vm, regs EXT); break;
 8013372:	6a39      	ldr	r1, [r7, #32]
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7ff fd05 	bl	8012d84 <op_ext>
 801337a:	e009      	b.n	8013390 <mrbc_vm_run+0x594>
#endif
    case OP_STOP:       op_stop       (vm, regs EXT); break;
 801337c:	6a39      	ldr	r1, [r7, #32]
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff fd12 	bl	8012da8 <op_stop>
 8013384:	e004      	b.n	8013390 <mrbc_vm_run+0x594>
    default:		op_unsupported(vm, regs EXT); break;
 8013386:	6a39      	ldr	r1, [r7, #32]
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff fd21 	bl	8012dd0 <op_unsupported>
 801338e:	bf00      	nop

#undef EXT
#if defined(MRBC_SUPPORT_OP_EXT)
    ext = 0;
#endif
    if( !vm->flag_preemption ) continue;	// execute next ope code.
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	78db      	ldrb	r3, [r3, #3]
 8013394:	b25b      	sxtb	r3, r3
 8013396:	2b00      	cmp	r3, #0
 8013398:	d05c      	beq.n	8013454 <mrbc_vm_run+0x658>
    if( !mrbc_israised(vm) ) return vm->flag_stop; // normal return.
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80133a0:	2b0e      	cmp	r3, #14
 80133a2:	d005      	beq.n	80133b0 <mrbc_vm_run+0x5b4>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	791b      	ldrb	r3, [r3, #4]
 80133a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80133ac:	b2db      	uxtb	r3, r3
 80133ae:	e053      	b.n	8013458 <mrbc_vm_run+0x65c>
    vm->flag_preemption = 0;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2200      	movs	r2, #0
 80133b4:	70da      	strb	r2, [r3, #3]

    // Handle exception
    const mrbc_irep_catch_handler *handler;

    while( 1 ) {
      const mrbc_irep *irep = vm->cur_irep;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	61bb      	str	r3, [r7, #24]
      const mrbc_irep_catch_handler *catch_table =
	(const mrbc_irep_catch_handler *)(irep->inst + irep->ilen);
 80133bc:	69bb      	ldr	r3, [r7, #24]
 80133be:	699a      	ldr	r2, [r3, #24]
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	68db      	ldr	r3, [r3, #12]
      const mrbc_irep_catch_handler *catch_table =
 80133c4:	4413      	add	r3, r2
 80133c6:	617b      	str	r3, [r7, #20]
      uint32_t inst = vm->inst - irep->inst;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	691a      	ldr	r2, [r3, #16]
 80133cc:	69bb      	ldr	r3, [r7, #24]
 80133ce:	699b      	ldr	r3, [r3, #24]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	613b      	str	r3, [r7, #16]
      int cnt = irep->clen;
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	891b      	ldrh	r3, [r3, #8]
 80133d8:	627b      	str	r3, [r7, #36]	; 0x24

      for( cnt--; cnt >= 0 ; cnt-- ) {
 80133da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133dc:	3b01      	subs	r3, #1
 80133de:	627b      	str	r3, [r7, #36]	; 0x24
 80133e0:	e01d      	b.n	801341e <mrbc_vm_run+0x622>
	handler = catch_table + cnt;
 80133e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133e4:	4613      	mov	r3, r2
 80133e6:	005b      	lsls	r3, r3, #1
 80133e8:	4413      	add	r3, r2
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	4413      	add	r3, r2
 80133ee:	697a      	ldr	r2, [r7, #20]
 80133f0:	4413      	add	r3, r2
 80133f2:	60fb      	str	r3, [r7, #12]
	if( (bin_to_uint32(handler->begin) < inst) &&
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	3301      	adds	r3, #1
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fb f925 	bl	800e648 <bin_to_uint32>
 80133fe:	4602      	mov	r2, r0
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	4293      	cmp	r3, r2
 8013404:	d908      	bls.n	8013418 <mrbc_vm_run+0x61c>
	    (inst <= bin_to_uint32(handler->end)) ) goto JUMP_TO_HANDLER;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	3305      	adds	r3, #5
 801340a:	4618      	mov	r0, r3
 801340c:	f7fb f91c 	bl	800e648 <bin_to_uint32>
 8013410:	4602      	mov	r2, r0
	if( (bin_to_uint32(handler->begin) < inst) &&
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	4293      	cmp	r3, r2
 8013416:	d90f      	bls.n	8013438 <mrbc_vm_run+0x63c>
      for( cnt--; cnt >= 0 ; cnt-- ) {
 8013418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341a:	3b01      	subs	r3, #1
 801341c:	627b      	str	r3, [r7, #36]	; 0x24
 801341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013420:	2b00      	cmp	r3, #0
 8013422:	dade      	bge.n	80133e2 <mrbc_vm_run+0x5e6>
      }

      if( !vm->callinfo_tail ) return 2;	// return due to exception.
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	69db      	ldr	r3, [r3, #28]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d101      	bne.n	8013430 <mrbc_vm_run+0x634>
 801342c:	2302      	movs	r3, #2
 801342e:	e013      	b.n	8013458 <mrbc_vm_run+0x65c>
      mrbc_pop_callinfo( vm );
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7fb fb5b 	bl	800eaec <mrbc_pop_callinfo>
    while( 1 ) {
 8013436:	e7be      	b.n	80133b6 <mrbc_vm_run+0x5ba>
	    (inst <= bin_to_uint32(handler->end)) ) goto JUMP_TO_HANDLER;
 8013438:	bf00      	nop
    }

  JUMP_TO_HANDLER:
    // jump to handler (rescue or ensure).
    vm->inst = vm->cur_irep->inst + bin_to_uint32(handler->target);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	699c      	ldr	r4, [r3, #24]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	3309      	adds	r3, #9
 8013444:	4618      	mov	r0, r3
 8013446:	f7fb f8ff 	bl	800e648 <bin_to_uint32>
 801344a:	4603      	mov	r3, r0
 801344c:	18e2      	adds	r2, r4, r3
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	611a      	str	r2, [r3, #16]
 8013452:	e4d7      	b.n	8012e04 <mrbc_vm_run+0x8>
    if( !vm->flag_preemption ) continue;	// execute next ope code.
 8013454:	bf00      	nop
  while( 1 ) {
 8013456:	e4d5      	b.n	8012e04 <mrbc_vm_run+0x8>
  }
}
 8013458:	4618      	mov	r0, r3
 801345a:	372c      	adds	r7, #44	; 0x2c
 801345c:	46bd      	mov	sp, r7
 801345e:	bd90      	pop	{r4, r7, pc}

08013460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8013460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8013464:	f7ee f8c4 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013468:	480c      	ldr	r0, [pc, #48]	; (801349c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801346a:	490d      	ldr	r1, [pc, #52]	; (80134a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801346c:	4a0d      	ldr	r2, [pc, #52]	; (80134a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801346e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013470:	e002      	b.n	8013478 <LoopCopyDataInit>

08013472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013476:	3304      	adds	r3, #4

08013478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801347a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801347c:	d3f9      	bcc.n	8013472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801347e:	4a0a      	ldr	r2, [pc, #40]	; (80134a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8013480:	4c0a      	ldr	r4, [pc, #40]	; (80134ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8013482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013484:	e001      	b.n	801348a <LoopFillZerobss>

08013486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013488:	3204      	adds	r2, #4

0801348a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801348a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801348c:	d3fb      	bcc.n	8013486 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 801348e:	f003 f933 	bl	80166f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013492:	f7ed fd5f 	bl	8000f54 <main>
  bx  lr    
 8013496:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8013498:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 801349c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80134a0:	2000077c 	.word	0x2000077c
  ldr r2, =_sidata
 80134a4:	0801c318 	.word	0x0801c318
  ldr r2, =_sbss
 80134a8:	2000077c 	.word	0x2000077c
  ldr r4, =_ebss
 80134ac:	200089a4 	.word	0x200089a4

080134b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80134b0:	e7fe      	b.n	80134b0 <ADC_IRQHandler>
	...

080134b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80134b8:	4b0e      	ldr	r3, [pc, #56]	; (80134f4 <HAL_Init+0x40>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4a0d      	ldr	r2, [pc, #52]	; (80134f4 <HAL_Init+0x40>)
 80134be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80134c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80134c4:	4b0b      	ldr	r3, [pc, #44]	; (80134f4 <HAL_Init+0x40>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4a0a      	ldr	r2, [pc, #40]	; (80134f4 <HAL_Init+0x40>)
 80134ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80134ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80134d0:	4b08      	ldr	r3, [pc, #32]	; (80134f4 <HAL_Init+0x40>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4a07      	ldr	r2, [pc, #28]	; (80134f4 <HAL_Init+0x40>)
 80134d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80134dc:	2003      	movs	r0, #3
 80134de:	f000 f95f 	bl	80137a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80134e2:	2000      	movs	r0, #0
 80134e4:	f000 f808 	bl	80134f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80134e8:	f7ed fef2 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80134ec:	2300      	movs	r3, #0
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	40023c00 	.word	0x40023c00

080134f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013500:	4b12      	ldr	r3, [pc, #72]	; (801354c <HAL_InitTick+0x54>)
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	4b12      	ldr	r3, [pc, #72]	; (8013550 <HAL_InitTick+0x58>)
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	4619      	mov	r1, r3
 801350a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801350e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013512:	fbb2 f3f3 	udiv	r3, r2, r3
 8013516:	4618      	mov	r0, r3
 8013518:	f000 f977 	bl	801380a <HAL_SYSTICK_Config>
 801351c:	4603      	mov	r3, r0
 801351e:	2b00      	cmp	r3, #0
 8013520:	d001      	beq.n	8013526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8013522:	2301      	movs	r3, #1
 8013524:	e00e      	b.n	8013544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2b0f      	cmp	r3, #15
 801352a:	d80a      	bhi.n	8013542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801352c:	2200      	movs	r2, #0
 801352e:	6879      	ldr	r1, [r7, #4]
 8013530:	f04f 30ff 	mov.w	r0, #4294967295
 8013534:	f000 f93f 	bl	80137b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013538:	4a06      	ldr	r2, [pc, #24]	; (8013554 <HAL_InitTick+0x5c>)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801353e:	2300      	movs	r3, #0
 8013540:	e000      	b.n	8013544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8013542:	2301      	movs	r3, #1
}
 8013544:	4618      	mov	r0, r3
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	20000000 	.word	0x20000000
 8013550:	200005b0 	.word	0x200005b0
 8013554:	200005ac 	.word	0x200005ac

08013558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013558:	b480      	push	{r7}
 801355a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801355c:	4b06      	ldr	r3, [pc, #24]	; (8013578 <HAL_IncTick+0x20>)
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	461a      	mov	r2, r3
 8013562:	4b06      	ldr	r3, [pc, #24]	; (801357c <HAL_IncTick+0x24>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4413      	add	r3, r2
 8013568:	4a04      	ldr	r2, [pc, #16]	; (801357c <HAL_IncTick+0x24>)
 801356a:	6013      	str	r3, [r2, #0]
}
 801356c:	bf00      	nop
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr
 8013576:	bf00      	nop
 8013578:	200005b0 	.word	0x200005b0
 801357c:	20008854 	.word	0x20008854

08013580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013580:	b480      	push	{r7}
 8013582:	af00      	add	r7, sp, #0
  return uwTick;
 8013584:	4b03      	ldr	r3, [pc, #12]	; (8013594 <HAL_GetTick+0x14>)
 8013586:	681b      	ldr	r3, [r3, #0]
}
 8013588:	4618      	mov	r0, r3
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	20008854 	.word	0x20008854

08013598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80135a0:	f7ff ffee 	bl	8013580 <HAL_GetTick>
 80135a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b0:	d005      	beq.n	80135be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80135b2:	4b0a      	ldr	r3, [pc, #40]	; (80135dc <HAL_Delay+0x44>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	461a      	mov	r2, r3
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	4413      	add	r3, r2
 80135bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80135be:	bf00      	nop
 80135c0:	f7ff ffde 	bl	8013580 <HAL_GetTick>
 80135c4:	4602      	mov	r2, r0
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	1ad3      	subs	r3, r2, r3
 80135ca:	68fa      	ldr	r2, [r7, #12]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d8f7      	bhi.n	80135c0 <HAL_Delay+0x28>
  {
  }
}
 80135d0:	bf00      	nop
 80135d2:	bf00      	nop
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	200005b0 	.word	0x200005b0

080135e0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80135e0:	b480      	push	{r7}
 80135e2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80135e4:	4b05      	ldr	r3, [pc, #20]	; (80135fc <HAL_SuspendTick+0x1c>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	4a04      	ldr	r2, [pc, #16]	; (80135fc <HAL_SuspendTick+0x1c>)
 80135ea:	f023 0302 	bic.w	r3, r3, #2
 80135ee:	6013      	str	r3, [r2, #0]
}
 80135f0:	bf00      	nop
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr
 80135fa:	bf00      	nop
 80135fc:	e000e010 	.word	0xe000e010

08013600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013600:	b480      	push	{r7}
 8013602:	b085      	sub	sp, #20
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f003 0307 	and.w	r3, r3, #7
 801360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013610:	4b0c      	ldr	r3, [pc, #48]	; (8013644 <__NVIC_SetPriorityGrouping+0x44>)
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013616:	68ba      	ldr	r2, [r7, #8]
 8013618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801361c:	4013      	ands	r3, r2
 801361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013632:	4a04      	ldr	r2, [pc, #16]	; (8013644 <__NVIC_SetPriorityGrouping+0x44>)
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	60d3      	str	r3, [r2, #12]
}
 8013638:	bf00      	nop
 801363a:	3714      	adds	r7, #20
 801363c:	46bd      	mov	sp, r7
 801363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013642:	4770      	bx	lr
 8013644:	e000ed00 	.word	0xe000ed00

08013648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013648:	b480      	push	{r7}
 801364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801364c:	4b04      	ldr	r3, [pc, #16]	; (8013660 <__NVIC_GetPriorityGrouping+0x18>)
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	0a1b      	lsrs	r3, r3, #8
 8013652:	f003 0307 	and.w	r3, r3, #7
}
 8013656:	4618      	mov	r0, r3
 8013658:	46bd      	mov	sp, r7
 801365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365e:	4770      	bx	lr
 8013660:	e000ed00 	.word	0xe000ed00

08013664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	4603      	mov	r3, r0
 801366c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013672:	2b00      	cmp	r3, #0
 8013674:	db0b      	blt.n	801368e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	f003 021f 	and.w	r2, r3, #31
 801367c:	4907      	ldr	r1, [pc, #28]	; (801369c <__NVIC_EnableIRQ+0x38>)
 801367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013682:	095b      	lsrs	r3, r3, #5
 8013684:	2001      	movs	r0, #1
 8013686:	fa00 f202 	lsl.w	r2, r0, r2
 801368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801368e:	bf00      	nop
 8013690:	370c      	adds	r7, #12
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr
 801369a:	bf00      	nop
 801369c:	e000e100 	.word	0xe000e100

080136a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	4603      	mov	r3, r0
 80136a8:	6039      	str	r1, [r7, #0]
 80136aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80136ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	db0a      	blt.n	80136ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	490c      	ldr	r1, [pc, #48]	; (80136ec <__NVIC_SetPriority+0x4c>)
 80136ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80136be:	0112      	lsls	r2, r2, #4
 80136c0:	b2d2      	uxtb	r2, r2
 80136c2:	440b      	add	r3, r1
 80136c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80136c8:	e00a      	b.n	80136e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	b2da      	uxtb	r2, r3
 80136ce:	4908      	ldr	r1, [pc, #32]	; (80136f0 <__NVIC_SetPriority+0x50>)
 80136d0:	79fb      	ldrb	r3, [r7, #7]
 80136d2:	f003 030f 	and.w	r3, r3, #15
 80136d6:	3b04      	subs	r3, #4
 80136d8:	0112      	lsls	r2, r2, #4
 80136da:	b2d2      	uxtb	r2, r2
 80136dc:	440b      	add	r3, r1
 80136de:	761a      	strb	r2, [r3, #24]
}
 80136e0:	bf00      	nop
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr
 80136ec:	e000e100 	.word	0xe000e100
 80136f0:	e000ed00 	.word	0xe000ed00

080136f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b089      	sub	sp, #36	; 0x24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f003 0307 	and.w	r3, r3, #7
 8013706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	f1c3 0307 	rsb	r3, r3, #7
 801370e:	2b04      	cmp	r3, #4
 8013710:	bf28      	it	cs
 8013712:	2304      	movcs	r3, #4
 8013714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	3304      	adds	r3, #4
 801371a:	2b06      	cmp	r3, #6
 801371c:	d902      	bls.n	8013724 <NVIC_EncodePriority+0x30>
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	3b03      	subs	r3, #3
 8013722:	e000      	b.n	8013726 <NVIC_EncodePriority+0x32>
 8013724:	2300      	movs	r3, #0
 8013726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013728:	f04f 32ff 	mov.w	r2, #4294967295
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	fa02 f303 	lsl.w	r3, r2, r3
 8013732:	43da      	mvns	r2, r3
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	401a      	ands	r2, r3
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801373c:	f04f 31ff 	mov.w	r1, #4294967295
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	fa01 f303 	lsl.w	r3, r1, r3
 8013746:	43d9      	mvns	r1, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801374c:	4313      	orrs	r3, r2
         );
}
 801374e:	4618      	mov	r0, r3
 8013750:	3724      	adds	r7, #36	; 0x24
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr
	...

0801375c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	3b01      	subs	r3, #1
 8013768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801376c:	d301      	bcc.n	8013772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801376e:	2301      	movs	r3, #1
 8013770:	e00f      	b.n	8013792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013772:	4a0a      	ldr	r2, [pc, #40]	; (801379c <SysTick_Config+0x40>)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	3b01      	subs	r3, #1
 8013778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801377a:	210f      	movs	r1, #15
 801377c:	f04f 30ff 	mov.w	r0, #4294967295
 8013780:	f7ff ff8e 	bl	80136a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013784:	4b05      	ldr	r3, [pc, #20]	; (801379c <SysTick_Config+0x40>)
 8013786:	2200      	movs	r2, #0
 8013788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801378a:	4b04      	ldr	r3, [pc, #16]	; (801379c <SysTick_Config+0x40>)
 801378c:	2207      	movs	r2, #7
 801378e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013790:	2300      	movs	r3, #0
}
 8013792:	4618      	mov	r0, r3
 8013794:	3708      	adds	r7, #8
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	e000e010 	.word	0xe000e010

080137a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b082      	sub	sp, #8
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7ff ff29 	bl	8013600 <__NVIC_SetPriorityGrouping>
}
 80137ae:	bf00      	nop
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b086      	sub	sp, #24
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	4603      	mov	r3, r0
 80137be:	60b9      	str	r1, [r7, #8]
 80137c0:	607a      	str	r2, [r7, #4]
 80137c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80137c4:	2300      	movs	r3, #0
 80137c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80137c8:	f7ff ff3e 	bl	8013648 <__NVIC_GetPriorityGrouping>
 80137cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	68b9      	ldr	r1, [r7, #8]
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7ff ff8e 	bl	80136f4 <NVIC_EncodePriority>
 80137d8:	4602      	mov	r2, r0
 80137da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137de:	4611      	mov	r1, r2
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7ff ff5d 	bl	80136a0 <__NVIC_SetPriority>
}
 80137e6:	bf00      	nop
 80137e8:	3718      	adds	r7, #24
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80137ee:	b580      	push	{r7, lr}
 80137f0:	b082      	sub	sp, #8
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	4603      	mov	r3, r0
 80137f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80137f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7ff ff31 	bl	8013664 <__NVIC_EnableIRQ>
}
 8013802:	bf00      	nop
 8013804:	3708      	adds	r7, #8
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801380a:	b580      	push	{r7, lr}
 801380c:	b082      	sub	sp, #8
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f7ff ffa2 	bl	801375c <SysTick_Config>
 8013818:	4603      	mov	r3, r0
}
 801381a:	4618      	mov	r0, r3
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
	...

08013824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013824:	b480      	push	{r7}
 8013826:	b089      	sub	sp, #36	; 0x24
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801382e:	2300      	movs	r3, #0
 8013830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013832:	2300      	movs	r3, #0
 8013834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013836:	2300      	movs	r3, #0
 8013838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801383a:	2300      	movs	r3, #0
 801383c:	61fb      	str	r3, [r7, #28]
 801383e:	e159      	b.n	8013af4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013840:	2201      	movs	r2, #1
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	fa02 f303 	lsl.w	r3, r2, r3
 8013848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	697a      	ldr	r2, [r7, #20]
 8013850:	4013      	ands	r3, r2
 8013852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013854:	693a      	ldr	r2, [r7, #16]
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	429a      	cmp	r2, r3
 801385a:	f040 8148 	bne.w	8013aee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	f003 0303 	and.w	r3, r3, #3
 8013866:	2b01      	cmp	r3, #1
 8013868:	d005      	beq.n	8013876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013872:	2b02      	cmp	r3, #2
 8013874:	d130      	bne.n	80138d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	689b      	ldr	r3, [r3, #8]
 801387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	005b      	lsls	r3, r3, #1
 8013880:	2203      	movs	r2, #3
 8013882:	fa02 f303 	lsl.w	r3, r2, r3
 8013886:	43db      	mvns	r3, r3
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	4013      	ands	r3, r2
 801388c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	68da      	ldr	r2, [r3, #12]
 8013892:	69fb      	ldr	r3, [r7, #28]
 8013894:	005b      	lsls	r3, r3, #1
 8013896:	fa02 f303 	lsl.w	r3, r2, r3
 801389a:	69ba      	ldr	r2, [r7, #24]
 801389c:	4313      	orrs	r3, r2
 801389e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	69ba      	ldr	r2, [r7, #24]
 80138a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80138ac:	2201      	movs	r2, #1
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	fa02 f303 	lsl.w	r3, r2, r3
 80138b4:	43db      	mvns	r3, r3
 80138b6:	69ba      	ldr	r2, [r7, #24]
 80138b8:	4013      	ands	r3, r2
 80138ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	091b      	lsrs	r3, r3, #4
 80138c2:	f003 0201 	and.w	r2, r3, #1
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	fa02 f303 	lsl.w	r3, r2, r3
 80138cc:	69ba      	ldr	r2, [r7, #24]
 80138ce:	4313      	orrs	r3, r2
 80138d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	69ba      	ldr	r2, [r7, #24]
 80138d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	f003 0303 	and.w	r3, r3, #3
 80138e0:	2b03      	cmp	r3, #3
 80138e2:	d017      	beq.n	8013914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	005b      	lsls	r3, r3, #1
 80138ee:	2203      	movs	r2, #3
 80138f0:	fa02 f303 	lsl.w	r3, r2, r3
 80138f4:	43db      	mvns	r3, r3
 80138f6:	69ba      	ldr	r2, [r7, #24]
 80138f8:	4013      	ands	r3, r2
 80138fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	689a      	ldr	r2, [r3, #8]
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	005b      	lsls	r3, r3, #1
 8013904:	fa02 f303 	lsl.w	r3, r2, r3
 8013908:	69ba      	ldr	r2, [r7, #24]
 801390a:	4313      	orrs	r3, r2
 801390c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	69ba      	ldr	r2, [r7, #24]
 8013912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	f003 0303 	and.w	r3, r3, #3
 801391c:	2b02      	cmp	r3, #2
 801391e:	d123      	bne.n	8013968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	08da      	lsrs	r2, r3, #3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	3208      	adds	r2, #8
 8013928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	f003 0307 	and.w	r3, r3, #7
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	220f      	movs	r2, #15
 8013938:	fa02 f303 	lsl.w	r3, r2, r3
 801393c:	43db      	mvns	r3, r3
 801393e:	69ba      	ldr	r2, [r7, #24]
 8013940:	4013      	ands	r3, r2
 8013942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	691a      	ldr	r2, [r3, #16]
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	f003 0307 	and.w	r3, r3, #7
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	fa02 f303 	lsl.w	r3, r2, r3
 8013954:	69ba      	ldr	r2, [r7, #24]
 8013956:	4313      	orrs	r3, r2
 8013958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	08da      	lsrs	r2, r3, #3
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	3208      	adds	r2, #8
 8013962:	69b9      	ldr	r1, [r7, #24]
 8013964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	005b      	lsls	r3, r3, #1
 8013972:	2203      	movs	r2, #3
 8013974:	fa02 f303 	lsl.w	r3, r2, r3
 8013978:	43db      	mvns	r3, r3
 801397a:	69ba      	ldr	r2, [r7, #24]
 801397c:	4013      	ands	r3, r2
 801397e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	f003 0203 	and.w	r2, r3, #3
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	005b      	lsls	r3, r3, #1
 801398c:	fa02 f303 	lsl.w	r3, r2, r3
 8013990:	69ba      	ldr	r2, [r7, #24]
 8013992:	4313      	orrs	r3, r2
 8013994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	69ba      	ldr	r2, [r7, #24]
 801399a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f000 80a2 	beq.w	8013aee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80139aa:	2300      	movs	r3, #0
 80139ac:	60fb      	str	r3, [r7, #12]
 80139ae:	4b57      	ldr	r3, [pc, #348]	; (8013b0c <HAL_GPIO_Init+0x2e8>)
 80139b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139b2:	4a56      	ldr	r2, [pc, #344]	; (8013b0c <HAL_GPIO_Init+0x2e8>)
 80139b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80139b8:	6453      	str	r3, [r2, #68]	; 0x44
 80139ba:	4b54      	ldr	r3, [pc, #336]	; (8013b0c <HAL_GPIO_Init+0x2e8>)
 80139bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80139c2:	60fb      	str	r3, [r7, #12]
 80139c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80139c6:	4a52      	ldr	r2, [pc, #328]	; (8013b10 <HAL_GPIO_Init+0x2ec>)
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	089b      	lsrs	r3, r3, #2
 80139cc:	3302      	adds	r3, #2
 80139ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	f003 0303 	and.w	r3, r3, #3
 80139da:	009b      	lsls	r3, r3, #2
 80139dc:	220f      	movs	r2, #15
 80139de:	fa02 f303 	lsl.w	r3, r2, r3
 80139e2:	43db      	mvns	r3, r3
 80139e4:	69ba      	ldr	r2, [r7, #24]
 80139e6:	4013      	ands	r3, r2
 80139e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a49      	ldr	r2, [pc, #292]	; (8013b14 <HAL_GPIO_Init+0x2f0>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d019      	beq.n	8013a26 <HAL_GPIO_Init+0x202>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4a48      	ldr	r2, [pc, #288]	; (8013b18 <HAL_GPIO_Init+0x2f4>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d013      	beq.n	8013a22 <HAL_GPIO_Init+0x1fe>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4a47      	ldr	r2, [pc, #284]	; (8013b1c <HAL_GPIO_Init+0x2f8>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d00d      	beq.n	8013a1e <HAL_GPIO_Init+0x1fa>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4a46      	ldr	r2, [pc, #280]	; (8013b20 <HAL_GPIO_Init+0x2fc>)
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d007      	beq.n	8013a1a <HAL_GPIO_Init+0x1f6>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4a45      	ldr	r2, [pc, #276]	; (8013b24 <HAL_GPIO_Init+0x300>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d101      	bne.n	8013a16 <HAL_GPIO_Init+0x1f2>
 8013a12:	2304      	movs	r3, #4
 8013a14:	e008      	b.n	8013a28 <HAL_GPIO_Init+0x204>
 8013a16:	2307      	movs	r3, #7
 8013a18:	e006      	b.n	8013a28 <HAL_GPIO_Init+0x204>
 8013a1a:	2303      	movs	r3, #3
 8013a1c:	e004      	b.n	8013a28 <HAL_GPIO_Init+0x204>
 8013a1e:	2302      	movs	r3, #2
 8013a20:	e002      	b.n	8013a28 <HAL_GPIO_Init+0x204>
 8013a22:	2301      	movs	r3, #1
 8013a24:	e000      	b.n	8013a28 <HAL_GPIO_Init+0x204>
 8013a26:	2300      	movs	r3, #0
 8013a28:	69fa      	ldr	r2, [r7, #28]
 8013a2a:	f002 0203 	and.w	r2, r2, #3
 8013a2e:	0092      	lsls	r2, r2, #2
 8013a30:	4093      	lsls	r3, r2
 8013a32:	69ba      	ldr	r2, [r7, #24]
 8013a34:	4313      	orrs	r3, r2
 8013a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013a38:	4935      	ldr	r1, [pc, #212]	; (8013b10 <HAL_GPIO_Init+0x2ec>)
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	089b      	lsrs	r3, r3, #2
 8013a3e:	3302      	adds	r3, #2
 8013a40:	69ba      	ldr	r2, [r7, #24]
 8013a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013a46:	4b38      	ldr	r3, [pc, #224]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013a48:	689b      	ldr	r3, [r3, #8]
 8013a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	43db      	mvns	r3, r3
 8013a50:	69ba      	ldr	r2, [r7, #24]
 8013a52:	4013      	ands	r3, r2
 8013a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d003      	beq.n	8013a6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8013a62:	69ba      	ldr	r2, [r7, #24]
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	4313      	orrs	r3, r2
 8013a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8013a6a:	4a2f      	ldr	r2, [pc, #188]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013a6c:	69bb      	ldr	r3, [r7, #24]
 8013a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8013a70:	4b2d      	ldr	r3, [pc, #180]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013a76:	693b      	ldr	r3, [r7, #16]
 8013a78:	43db      	mvns	r3, r3
 8013a7a:	69ba      	ldr	r2, [r7, #24]
 8013a7c:	4013      	ands	r3, r2
 8013a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d003      	beq.n	8013a94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8013a8c:	69ba      	ldr	r2, [r7, #24]
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	4313      	orrs	r3, r2
 8013a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8013a94:	4a24      	ldr	r2, [pc, #144]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8013a9a:	4b23      	ldr	r3, [pc, #140]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	43db      	mvns	r3, r3
 8013aa4:	69ba      	ldr	r2, [r7, #24]
 8013aa6:	4013      	ands	r3, r2
 8013aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d003      	beq.n	8013abe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8013ab6:	69ba      	ldr	r2, [r7, #24]
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	4313      	orrs	r3, r2
 8013abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8013abe:	4a1a      	ldr	r2, [pc, #104]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013ac4:	4b18      	ldr	r3, [pc, #96]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	43db      	mvns	r3, r3
 8013ace:	69ba      	ldr	r2, [r7, #24]
 8013ad0:	4013      	ands	r3, r2
 8013ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d003      	beq.n	8013ae8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8013ae0:	69ba      	ldr	r2, [r7, #24]
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	4313      	orrs	r3, r2
 8013ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8013ae8:	4a0f      	ldr	r2, [pc, #60]	; (8013b28 <HAL_GPIO_Init+0x304>)
 8013aea:	69bb      	ldr	r3, [r7, #24]
 8013aec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	3301      	adds	r3, #1
 8013af2:	61fb      	str	r3, [r7, #28]
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	2b0f      	cmp	r3, #15
 8013af8:	f67f aea2 	bls.w	8013840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8013afc:	bf00      	nop
 8013afe:	bf00      	nop
 8013b00:	3724      	adds	r7, #36	; 0x24
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr
 8013b0a:	bf00      	nop
 8013b0c:	40023800 	.word	0x40023800
 8013b10:	40013800 	.word	0x40013800
 8013b14:	40020000 	.word	0x40020000
 8013b18:	40020400 	.word	0x40020400
 8013b1c:	40020800 	.word	0x40020800
 8013b20:	40020c00 	.word	0x40020c00
 8013b24:	40021000 	.word	0x40021000
 8013b28:	40013c00 	.word	0x40013c00

08013b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	460b      	mov	r3, r1
 8013b36:	807b      	strh	r3, [r7, #2]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013b3c:	787b      	ldrb	r3, [r7, #1]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d003      	beq.n	8013b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013b42:	887a      	ldrh	r2, [r7, #2]
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8013b48:	e003      	b.n	8013b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013b4a:	887b      	ldrh	r3, [r7, #2]
 8013b4c:	041a      	lsls	r2, r3, #16
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	619a      	str	r2, [r3, #24]
}
 8013b52:	bf00      	nop
 8013b54:	370c      	adds	r7, #12
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr
	...

08013b60 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	460b      	mov	r3, r1
 8013b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8013b6c:	4b12      	ldr	r3, [pc, #72]	; (8013bb8 <HAL_PWR_EnterSTOPMode+0x58>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	f023 0203 	bic.w	r2, r3, #3
 8013b74:	4910      	ldr	r1, [pc, #64]	; (8013bb8 <HAL_PWR_EnterSTOPMode+0x58>)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4313      	orrs	r3, r2
 8013b7a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8013b7c:	4b0f      	ldr	r3, [pc, #60]	; (8013bbc <HAL_PWR_EnterSTOPMode+0x5c>)
 8013b7e:	691b      	ldr	r3, [r3, #16]
 8013b80:	4a0e      	ldr	r2, [pc, #56]	; (8013bbc <HAL_PWR_EnterSTOPMode+0x5c>)
 8013b82:	f043 0304 	orr.w	r3, r3, #4
 8013b86:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8013b88:	78fb      	ldrb	r3, [r7, #3]
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d101      	bne.n	8013b92 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8013b8e:	bf30      	wfi
 8013b90:	e005      	b.n	8013b9e <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8013b92:	78fb      	ldrb	r3, [r7, #3]
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d001      	beq.n	8013b9c <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8013b98:	bf40      	sev
      __WFE();
 8013b9a:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8013b9c:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8013b9e:	4b07      	ldr	r3, [pc, #28]	; (8013bbc <HAL_PWR_EnterSTOPMode+0x5c>)
 8013ba0:	691b      	ldr	r3, [r3, #16]
 8013ba2:	4a06      	ldr	r2, [pc, #24]	; (8013bbc <HAL_PWR_EnterSTOPMode+0x5c>)
 8013ba4:	f023 0304 	bic.w	r3, r3, #4
 8013ba8:	6113      	str	r3, [r2, #16]
}
 8013baa:	bf00      	nop
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr
 8013bb6:	bf00      	nop
 8013bb8:	40007000 	.word	0x40007000
 8013bbc:	e000ed00 	.word	0xe000ed00

08013bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b086      	sub	sp, #24
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d101      	bne.n	8013bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013bce:	2301      	movs	r3, #1
 8013bd0:	e267      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f003 0301 	and.w	r3, r3, #1
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d075      	beq.n	8013cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013bde:	4b88      	ldr	r3, [pc, #544]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013be0:	689b      	ldr	r3, [r3, #8]
 8013be2:	f003 030c 	and.w	r3, r3, #12
 8013be6:	2b04      	cmp	r3, #4
 8013be8:	d00c      	beq.n	8013c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013bea:	4b85      	ldr	r3, [pc, #532]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013bec:	689b      	ldr	r3, [r3, #8]
 8013bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013bf2:	2b08      	cmp	r3, #8
 8013bf4:	d112      	bne.n	8013c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013bf6:	4b82      	ldr	r3, [pc, #520]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013c02:	d10b      	bne.n	8013c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013c04:	4b7e      	ldr	r3, [pc, #504]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d05b      	beq.n	8013cc8 <HAL_RCC_OscConfig+0x108>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d157      	bne.n	8013cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e242      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c24:	d106      	bne.n	8013c34 <HAL_RCC_OscConfig+0x74>
 8013c26:	4b76      	ldr	r3, [pc, #472]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4a75      	ldr	r2, [pc, #468]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013c30:	6013      	str	r3, [r2, #0]
 8013c32:	e01d      	b.n	8013c70 <HAL_RCC_OscConfig+0xb0>
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013c3c:	d10c      	bne.n	8013c58 <HAL_RCC_OscConfig+0x98>
 8013c3e:	4b70      	ldr	r3, [pc, #448]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	4a6f      	ldr	r2, [pc, #444]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013c48:	6013      	str	r3, [r2, #0]
 8013c4a:	4b6d      	ldr	r3, [pc, #436]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4a6c      	ldr	r2, [pc, #432]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013c54:	6013      	str	r3, [r2, #0]
 8013c56:	e00b      	b.n	8013c70 <HAL_RCC_OscConfig+0xb0>
 8013c58:	4b69      	ldr	r3, [pc, #420]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4a68      	ldr	r2, [pc, #416]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013c62:	6013      	str	r3, [r2, #0]
 8013c64:	4b66      	ldr	r3, [pc, #408]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	4a65      	ldr	r2, [pc, #404]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d013      	beq.n	8013ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c78:	f7ff fc82 	bl	8013580 <HAL_GetTick>
 8013c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013c7e:	e008      	b.n	8013c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013c80:	f7ff fc7e 	bl	8013580 <HAL_GetTick>
 8013c84:	4602      	mov	r2, r0
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	1ad3      	subs	r3, r2, r3
 8013c8a:	2b64      	cmp	r3, #100	; 0x64
 8013c8c:	d901      	bls.n	8013c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013c8e:	2303      	movs	r3, #3
 8013c90:	e207      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013c92:	4b5b      	ldr	r3, [pc, #364]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d0f0      	beq.n	8013c80 <HAL_RCC_OscConfig+0xc0>
 8013c9e:	e014      	b.n	8013cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ca0:	f7ff fc6e 	bl	8013580 <HAL_GetTick>
 8013ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013ca6:	e008      	b.n	8013cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013ca8:	f7ff fc6a 	bl	8013580 <HAL_GetTick>
 8013cac:	4602      	mov	r2, r0
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	1ad3      	subs	r3, r2, r3
 8013cb2:	2b64      	cmp	r3, #100	; 0x64
 8013cb4:	d901      	bls.n	8013cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013cb6:	2303      	movs	r3, #3
 8013cb8:	e1f3      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013cba:	4b51      	ldr	r3, [pc, #324]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1f0      	bne.n	8013ca8 <HAL_RCC_OscConfig+0xe8>
 8013cc6:	e000      	b.n	8013cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	f003 0302 	and.w	r3, r3, #2
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d063      	beq.n	8013d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013cd6:	4b4a      	ldr	r3, [pc, #296]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	f003 030c 	and.w	r3, r3, #12
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d00b      	beq.n	8013cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013ce2:	4b47      	ldr	r3, [pc, #284]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013ce4:	689b      	ldr	r3, [r3, #8]
 8013ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013cea:	2b08      	cmp	r3, #8
 8013cec:	d11c      	bne.n	8013d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013cee:	4b44      	ldr	r3, [pc, #272]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d116      	bne.n	8013d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013cfa:	4b41      	ldr	r3, [pc, #260]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f003 0302 	and.w	r3, r3, #2
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d005      	beq.n	8013d12 <HAL_RCC_OscConfig+0x152>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d001      	beq.n	8013d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e1c7      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013d12:	4b3b      	ldr	r3, [pc, #236]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	691b      	ldr	r3, [r3, #16]
 8013d1e:	00db      	lsls	r3, r3, #3
 8013d20:	4937      	ldr	r1, [pc, #220]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013d22:	4313      	orrs	r3, r2
 8013d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013d26:	e03a      	b.n	8013d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d020      	beq.n	8013d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013d30:	4b34      	ldr	r3, [pc, #208]	; (8013e04 <HAL_RCC_OscConfig+0x244>)
 8013d32:	2201      	movs	r2, #1
 8013d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d36:	f7ff fc23 	bl	8013580 <HAL_GetTick>
 8013d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013d3c:	e008      	b.n	8013d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013d3e:	f7ff fc1f 	bl	8013580 <HAL_GetTick>
 8013d42:	4602      	mov	r2, r0
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	2b02      	cmp	r3, #2
 8013d4a:	d901      	bls.n	8013d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013d4c:	2303      	movs	r3, #3
 8013d4e:	e1a8      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013d50:	4b2b      	ldr	r3, [pc, #172]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f003 0302 	and.w	r3, r3, #2
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d0f0      	beq.n	8013d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013d5c:	4b28      	ldr	r3, [pc, #160]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	691b      	ldr	r3, [r3, #16]
 8013d68:	00db      	lsls	r3, r3, #3
 8013d6a:	4925      	ldr	r1, [pc, #148]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013d6c:	4313      	orrs	r3, r2
 8013d6e:	600b      	str	r3, [r1, #0]
 8013d70:	e015      	b.n	8013d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013d72:	4b24      	ldr	r3, [pc, #144]	; (8013e04 <HAL_RCC_OscConfig+0x244>)
 8013d74:	2200      	movs	r2, #0
 8013d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013d78:	f7ff fc02 	bl	8013580 <HAL_GetTick>
 8013d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013d7e:	e008      	b.n	8013d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013d80:	f7ff fbfe 	bl	8013580 <HAL_GetTick>
 8013d84:	4602      	mov	r2, r0
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	2b02      	cmp	r3, #2
 8013d8c:	d901      	bls.n	8013d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013d8e:	2303      	movs	r3, #3
 8013d90:	e187      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013d92:	4b1b      	ldr	r3, [pc, #108]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	f003 0302 	and.w	r3, r3, #2
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d1f0      	bne.n	8013d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f003 0308 	and.w	r3, r3, #8
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d036      	beq.n	8013e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	695b      	ldr	r3, [r3, #20]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d016      	beq.n	8013de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013db2:	4b15      	ldr	r3, [pc, #84]	; (8013e08 <HAL_RCC_OscConfig+0x248>)
 8013db4:	2201      	movs	r2, #1
 8013db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013db8:	f7ff fbe2 	bl	8013580 <HAL_GetTick>
 8013dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013dbe:	e008      	b.n	8013dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013dc0:	f7ff fbde 	bl	8013580 <HAL_GetTick>
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d901      	bls.n	8013dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013dce:	2303      	movs	r3, #3
 8013dd0:	e167      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013dd2:	4b0b      	ldr	r3, [pc, #44]	; (8013e00 <HAL_RCC_OscConfig+0x240>)
 8013dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dd6:	f003 0302 	and.w	r3, r3, #2
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d0f0      	beq.n	8013dc0 <HAL_RCC_OscConfig+0x200>
 8013dde:	e01b      	b.n	8013e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013de0:	4b09      	ldr	r3, [pc, #36]	; (8013e08 <HAL_RCC_OscConfig+0x248>)
 8013de2:	2200      	movs	r2, #0
 8013de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013de6:	f7ff fbcb 	bl	8013580 <HAL_GetTick>
 8013dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013dec:	e00e      	b.n	8013e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013dee:	f7ff fbc7 	bl	8013580 <HAL_GetTick>
 8013df2:	4602      	mov	r2, r0
 8013df4:	693b      	ldr	r3, [r7, #16]
 8013df6:	1ad3      	subs	r3, r2, r3
 8013df8:	2b02      	cmp	r3, #2
 8013dfa:	d907      	bls.n	8013e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013dfc:	2303      	movs	r3, #3
 8013dfe:	e150      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
 8013e00:	40023800 	.word	0x40023800
 8013e04:	42470000 	.word	0x42470000
 8013e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013e0c:	4b88      	ldr	r3, [pc, #544]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e10:	f003 0302 	and.w	r3, r3, #2
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d1ea      	bne.n	8013dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f003 0304 	and.w	r3, r3, #4
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f000 8097 	beq.w	8013f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013e26:	2300      	movs	r3, #0
 8013e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013e2a:	4b81      	ldr	r3, [pc, #516]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d10f      	bne.n	8013e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013e36:	2300      	movs	r3, #0
 8013e38:	60bb      	str	r3, [r7, #8]
 8013e3a:	4b7d      	ldr	r3, [pc, #500]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e3e:	4a7c      	ldr	r2, [pc, #496]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e44:	6413      	str	r3, [r2, #64]	; 0x40
 8013e46:	4b7a      	ldr	r3, [pc, #488]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e4e:	60bb      	str	r3, [r7, #8]
 8013e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013e52:	2301      	movs	r3, #1
 8013e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013e56:	4b77      	ldr	r3, [pc, #476]	; (8014034 <HAL_RCC_OscConfig+0x474>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d118      	bne.n	8013e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013e62:	4b74      	ldr	r3, [pc, #464]	; (8014034 <HAL_RCC_OscConfig+0x474>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	4a73      	ldr	r2, [pc, #460]	; (8014034 <HAL_RCC_OscConfig+0x474>)
 8013e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013e6e:	f7ff fb87 	bl	8013580 <HAL_GetTick>
 8013e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013e74:	e008      	b.n	8013e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013e76:	f7ff fb83 	bl	8013580 <HAL_GetTick>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	1ad3      	subs	r3, r2, r3
 8013e80:	2b02      	cmp	r3, #2
 8013e82:	d901      	bls.n	8013e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013e84:	2303      	movs	r3, #3
 8013e86:	e10c      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013e88:	4b6a      	ldr	r3, [pc, #424]	; (8014034 <HAL_RCC_OscConfig+0x474>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d0f0      	beq.n	8013e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	689b      	ldr	r3, [r3, #8]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d106      	bne.n	8013eaa <HAL_RCC_OscConfig+0x2ea>
 8013e9c:	4b64      	ldr	r3, [pc, #400]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ea0:	4a63      	ldr	r2, [pc, #396]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013ea2:	f043 0301 	orr.w	r3, r3, #1
 8013ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8013ea8:	e01c      	b.n	8013ee4 <HAL_RCC_OscConfig+0x324>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	689b      	ldr	r3, [r3, #8]
 8013eae:	2b05      	cmp	r3, #5
 8013eb0:	d10c      	bne.n	8013ecc <HAL_RCC_OscConfig+0x30c>
 8013eb2:	4b5f      	ldr	r3, [pc, #380]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013eb6:	4a5e      	ldr	r2, [pc, #376]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013eb8:	f043 0304 	orr.w	r3, r3, #4
 8013ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8013ebe:	4b5c      	ldr	r3, [pc, #368]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ec2:	4a5b      	ldr	r2, [pc, #364]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013ec4:	f043 0301 	orr.w	r3, r3, #1
 8013ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8013eca:	e00b      	b.n	8013ee4 <HAL_RCC_OscConfig+0x324>
 8013ecc:	4b58      	ldr	r3, [pc, #352]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ed0:	4a57      	ldr	r2, [pc, #348]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013ed2:	f023 0301 	bic.w	r3, r3, #1
 8013ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8013ed8:	4b55      	ldr	r3, [pc, #340]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013edc:	4a54      	ldr	r2, [pc, #336]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013ede:	f023 0304 	bic.w	r3, r3, #4
 8013ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d015      	beq.n	8013f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013eec:	f7ff fb48 	bl	8013580 <HAL_GetTick>
 8013ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013ef2:	e00a      	b.n	8013f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013ef4:	f7ff fb44 	bl	8013580 <HAL_GetTick>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	1ad3      	subs	r3, r2, r3
 8013efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d901      	bls.n	8013f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013f06:	2303      	movs	r3, #3
 8013f08:	e0cb      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013f0a:	4b49      	ldr	r3, [pc, #292]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f0e:	f003 0302 	and.w	r3, r3, #2
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d0ee      	beq.n	8013ef4 <HAL_RCC_OscConfig+0x334>
 8013f16:	e014      	b.n	8013f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013f18:	f7ff fb32 	bl	8013580 <HAL_GetTick>
 8013f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013f1e:	e00a      	b.n	8013f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013f20:	f7ff fb2e 	bl	8013580 <HAL_GetTick>
 8013f24:	4602      	mov	r2, r0
 8013f26:	693b      	ldr	r3, [r7, #16]
 8013f28:	1ad3      	subs	r3, r2, r3
 8013f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d901      	bls.n	8013f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013f32:	2303      	movs	r3, #3
 8013f34:	e0b5      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013f36:	4b3e      	ldr	r3, [pc, #248]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f3a:	f003 0302 	and.w	r3, r3, #2
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1ee      	bne.n	8013f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013f42:	7dfb      	ldrb	r3, [r7, #23]
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d105      	bne.n	8013f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013f48:	4b39      	ldr	r3, [pc, #228]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4c:	4a38      	ldr	r2, [pc, #224]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	699b      	ldr	r3, [r3, #24]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f000 80a1 	beq.w	80140a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013f5e:	4b34      	ldr	r3, [pc, #208]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013f60:	689b      	ldr	r3, [r3, #8]
 8013f62:	f003 030c 	and.w	r3, r3, #12
 8013f66:	2b08      	cmp	r3, #8
 8013f68:	d05c      	beq.n	8014024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	699b      	ldr	r3, [r3, #24]
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d141      	bne.n	8013ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013f72:	4b31      	ldr	r3, [pc, #196]	; (8014038 <HAL_RCC_OscConfig+0x478>)
 8013f74:	2200      	movs	r2, #0
 8013f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013f78:	f7ff fb02 	bl	8013580 <HAL_GetTick>
 8013f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013f7e:	e008      	b.n	8013f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013f80:	f7ff fafe 	bl	8013580 <HAL_GetTick>
 8013f84:	4602      	mov	r2, r0
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	2b02      	cmp	r3, #2
 8013f8c:	d901      	bls.n	8013f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8013f8e:	2303      	movs	r3, #3
 8013f90:	e087      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013f92:	4b27      	ldr	r3, [pc, #156]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d1f0      	bne.n	8013f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	69da      	ldr	r2, [r3, #28]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6a1b      	ldr	r3, [r3, #32]
 8013fa6:	431a      	orrs	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fac:	019b      	lsls	r3, r3, #6
 8013fae:	431a      	orrs	r2, r3
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fb4:	085b      	lsrs	r3, r3, #1
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	041b      	lsls	r3, r3, #16
 8013fba:	431a      	orrs	r2, r3
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc0:	061b      	lsls	r3, r3, #24
 8013fc2:	491b      	ldr	r1, [pc, #108]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013fc4:	4313      	orrs	r3, r2
 8013fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013fc8:	4b1b      	ldr	r3, [pc, #108]	; (8014038 <HAL_RCC_OscConfig+0x478>)
 8013fca:	2201      	movs	r2, #1
 8013fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013fce:	f7ff fad7 	bl	8013580 <HAL_GetTick>
 8013fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013fd4:	e008      	b.n	8013fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013fd6:	f7ff fad3 	bl	8013580 <HAL_GetTick>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	1ad3      	subs	r3, r2, r3
 8013fe0:	2b02      	cmp	r3, #2
 8013fe2:	d901      	bls.n	8013fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013fe4:	2303      	movs	r3, #3
 8013fe6:	e05c      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013fe8:	4b11      	ldr	r3, [pc, #68]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d0f0      	beq.n	8013fd6 <HAL_RCC_OscConfig+0x416>
 8013ff4:	e054      	b.n	80140a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013ff6:	4b10      	ldr	r3, [pc, #64]	; (8014038 <HAL_RCC_OscConfig+0x478>)
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ffc:	f7ff fac0 	bl	8013580 <HAL_GetTick>
 8014000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014002:	e008      	b.n	8014016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014004:	f7ff fabc 	bl	8013580 <HAL_GetTick>
 8014008:	4602      	mov	r2, r0
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	2b02      	cmp	r3, #2
 8014010:	d901      	bls.n	8014016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8014012:	2303      	movs	r3, #3
 8014014:	e045      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014016:	4b06      	ldr	r3, [pc, #24]	; (8014030 <HAL_RCC_OscConfig+0x470>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801401e:	2b00      	cmp	r3, #0
 8014020:	d1f0      	bne.n	8014004 <HAL_RCC_OscConfig+0x444>
 8014022:	e03d      	b.n	80140a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	699b      	ldr	r3, [r3, #24]
 8014028:	2b01      	cmp	r3, #1
 801402a:	d107      	bne.n	801403c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801402c:	2301      	movs	r3, #1
 801402e:	e038      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
 8014030:	40023800 	.word	0x40023800
 8014034:	40007000 	.word	0x40007000
 8014038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801403c:	4b1b      	ldr	r3, [pc, #108]	; (80140ac <HAL_RCC_OscConfig+0x4ec>)
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	699b      	ldr	r3, [r3, #24]
 8014046:	2b01      	cmp	r3, #1
 8014048:	d028      	beq.n	801409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014054:	429a      	cmp	r2, r3
 8014056:	d121      	bne.n	801409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014062:	429a      	cmp	r2, r3
 8014064:	d11a      	bne.n	801409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801406c:	4013      	ands	r3, r2
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8014074:	4293      	cmp	r3, r2
 8014076:	d111      	bne.n	801409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014082:	085b      	lsrs	r3, r3, #1
 8014084:	3b01      	subs	r3, #1
 8014086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8014088:	429a      	cmp	r2, r3
 801408a:	d107      	bne.n	801409c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8014098:	429a      	cmp	r2, r3
 801409a:	d001      	beq.n	80140a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801409c:	2301      	movs	r3, #1
 801409e:	e000      	b.n	80140a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80140a0:	2300      	movs	r3, #0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3718      	adds	r7, #24
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	40023800 	.word	0x40023800

080140b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d101      	bne.n	80140c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80140c0:	2301      	movs	r3, #1
 80140c2:	e0cc      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80140c4:	4b68      	ldr	r3, [pc, #416]	; (8014268 <HAL_RCC_ClockConfig+0x1b8>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f003 0307 	and.w	r3, r3, #7
 80140cc:	683a      	ldr	r2, [r7, #0]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d90c      	bls.n	80140ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80140d2:	4b65      	ldr	r3, [pc, #404]	; (8014268 <HAL_RCC_ClockConfig+0x1b8>)
 80140d4:	683a      	ldr	r2, [r7, #0]
 80140d6:	b2d2      	uxtb	r2, r2
 80140d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80140da:	4b63      	ldr	r3, [pc, #396]	; (8014268 <HAL_RCC_ClockConfig+0x1b8>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	f003 0307 	and.w	r3, r3, #7
 80140e2:	683a      	ldr	r2, [r7, #0]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d001      	beq.n	80140ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80140e8:	2301      	movs	r3, #1
 80140ea:	e0b8      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	f003 0302 	and.w	r3, r3, #2
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d020      	beq.n	801413a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f003 0304 	and.w	r3, r3, #4
 8014100:	2b00      	cmp	r3, #0
 8014102:	d005      	beq.n	8014110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8014104:	4b59      	ldr	r3, [pc, #356]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	4a58      	ldr	r2, [pc, #352]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 801410a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801410e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f003 0308 	and.w	r3, r3, #8
 8014118:	2b00      	cmp	r3, #0
 801411a:	d005      	beq.n	8014128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801411c:	4b53      	ldr	r3, [pc, #332]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 801411e:	689b      	ldr	r3, [r3, #8]
 8014120:	4a52      	ldr	r2, [pc, #328]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8014126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014128:	4b50      	ldr	r3, [pc, #320]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 801412a:	689b      	ldr	r3, [r3, #8]
 801412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	494d      	ldr	r1, [pc, #308]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014136:	4313      	orrs	r3, r2
 8014138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f003 0301 	and.w	r3, r3, #1
 8014142:	2b00      	cmp	r3, #0
 8014144:	d044      	beq.n	80141d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	2b01      	cmp	r3, #1
 801414c:	d107      	bne.n	801415e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801414e:	4b47      	ldr	r3, [pc, #284]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014156:	2b00      	cmp	r3, #0
 8014158:	d119      	bne.n	801418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801415a:	2301      	movs	r3, #1
 801415c:	e07f      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	2b02      	cmp	r3, #2
 8014164:	d003      	beq.n	801416e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801416a:	2b03      	cmp	r3, #3
 801416c:	d107      	bne.n	801417e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801416e:	4b3f      	ldr	r3, [pc, #252]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014176:	2b00      	cmp	r3, #0
 8014178:	d109      	bne.n	801418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801417a:	2301      	movs	r3, #1
 801417c:	e06f      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801417e:	4b3b      	ldr	r3, [pc, #236]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	f003 0302 	and.w	r3, r3, #2
 8014186:	2b00      	cmp	r3, #0
 8014188:	d101      	bne.n	801418e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801418a:	2301      	movs	r3, #1
 801418c:	e067      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801418e:	4b37      	ldr	r3, [pc, #220]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	f023 0203 	bic.w	r2, r3, #3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	4934      	ldr	r1, [pc, #208]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 801419c:	4313      	orrs	r3, r2
 801419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80141a0:	f7ff f9ee 	bl	8013580 <HAL_GetTick>
 80141a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80141a6:	e00a      	b.n	80141be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80141a8:	f7ff f9ea 	bl	8013580 <HAL_GetTick>
 80141ac:	4602      	mov	r2, r0
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d901      	bls.n	80141be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80141ba:	2303      	movs	r3, #3
 80141bc:	e04f      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80141be:	4b2b      	ldr	r3, [pc, #172]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 80141c0:	689b      	ldr	r3, [r3, #8]
 80141c2:	f003 020c 	and.w	r2, r3, #12
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d1eb      	bne.n	80141a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80141d0:	4b25      	ldr	r3, [pc, #148]	; (8014268 <HAL_RCC_ClockConfig+0x1b8>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f003 0307 	and.w	r3, r3, #7
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d20c      	bcs.n	80141f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80141de:	4b22      	ldr	r3, [pc, #136]	; (8014268 <HAL_RCC_ClockConfig+0x1b8>)
 80141e0:	683a      	ldr	r2, [r7, #0]
 80141e2:	b2d2      	uxtb	r2, r2
 80141e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80141e6:	4b20      	ldr	r3, [pc, #128]	; (8014268 <HAL_RCC_ClockConfig+0x1b8>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f003 0307 	and.w	r3, r3, #7
 80141ee:	683a      	ldr	r2, [r7, #0]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d001      	beq.n	80141f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80141f4:	2301      	movs	r3, #1
 80141f6:	e032      	b.n	801425e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f003 0304 	and.w	r3, r3, #4
 8014200:	2b00      	cmp	r3, #0
 8014202:	d008      	beq.n	8014216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014204:	4b19      	ldr	r3, [pc, #100]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014206:	689b      	ldr	r3, [r3, #8]
 8014208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	4916      	ldr	r1, [pc, #88]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014212:	4313      	orrs	r3, r2
 8014214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f003 0308 	and.w	r3, r3, #8
 801421e:	2b00      	cmp	r3, #0
 8014220:	d009      	beq.n	8014236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014222:	4b12      	ldr	r3, [pc, #72]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014224:	689b      	ldr	r3, [r3, #8]
 8014226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	691b      	ldr	r3, [r3, #16]
 801422e:	00db      	lsls	r3, r3, #3
 8014230:	490e      	ldr	r1, [pc, #56]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 8014232:	4313      	orrs	r3, r2
 8014234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014236:	f000 f821 	bl	801427c <HAL_RCC_GetSysClockFreq>
 801423a:	4602      	mov	r2, r0
 801423c:	4b0b      	ldr	r3, [pc, #44]	; (801426c <HAL_RCC_ClockConfig+0x1bc>)
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	091b      	lsrs	r3, r3, #4
 8014242:	f003 030f 	and.w	r3, r3, #15
 8014246:	490a      	ldr	r1, [pc, #40]	; (8014270 <HAL_RCC_ClockConfig+0x1c0>)
 8014248:	5ccb      	ldrb	r3, [r1, r3]
 801424a:	fa22 f303 	lsr.w	r3, r2, r3
 801424e:	4a09      	ldr	r2, [pc, #36]	; (8014274 <HAL_RCC_ClockConfig+0x1c4>)
 8014250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014252:	4b09      	ldr	r3, [pc, #36]	; (8014278 <HAL_RCC_ClockConfig+0x1c8>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4618      	mov	r0, r3
 8014258:	f7ff f94e 	bl	80134f8 <HAL_InitTick>

  return HAL_OK;
 801425c:	2300      	movs	r3, #0
}
 801425e:	4618      	mov	r0, r3
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	40023c00 	.word	0x40023c00
 801426c:	40023800 	.word	0x40023800
 8014270:	0801a7e0 	.word	0x0801a7e0
 8014274:	20000000 	.word	0x20000000
 8014278:	200005ac 	.word	0x200005ac

0801427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801427c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014280:	b094      	sub	sp, #80	; 0x50
 8014282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014284:	2300      	movs	r3, #0
 8014286:	647b      	str	r3, [r7, #68]	; 0x44
 8014288:	2300      	movs	r3, #0
 801428a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801428c:	2300      	movs	r3, #0
 801428e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8014290:	2300      	movs	r3, #0
 8014292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014294:	4b79      	ldr	r3, [pc, #484]	; (801447c <HAL_RCC_GetSysClockFreq+0x200>)
 8014296:	689b      	ldr	r3, [r3, #8]
 8014298:	f003 030c 	and.w	r3, r3, #12
 801429c:	2b08      	cmp	r3, #8
 801429e:	d00d      	beq.n	80142bc <HAL_RCC_GetSysClockFreq+0x40>
 80142a0:	2b08      	cmp	r3, #8
 80142a2:	f200 80e1 	bhi.w	8014468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d002      	beq.n	80142b0 <HAL_RCC_GetSysClockFreq+0x34>
 80142aa:	2b04      	cmp	r3, #4
 80142ac:	d003      	beq.n	80142b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80142ae:	e0db      	b.n	8014468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80142b0:	4b73      	ldr	r3, [pc, #460]	; (8014480 <HAL_RCC_GetSysClockFreq+0x204>)
 80142b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80142b4:	e0db      	b.n	801446e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80142b6:	4b73      	ldr	r3, [pc, #460]	; (8014484 <HAL_RCC_GetSysClockFreq+0x208>)
 80142b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80142ba:	e0d8      	b.n	801446e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80142bc:	4b6f      	ldr	r3, [pc, #444]	; (801447c <HAL_RCC_GetSysClockFreq+0x200>)
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80142c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80142c6:	4b6d      	ldr	r3, [pc, #436]	; (801447c <HAL_RCC_GetSysClockFreq+0x200>)
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d063      	beq.n	801439a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80142d2:	4b6a      	ldr	r3, [pc, #424]	; (801447c <HAL_RCC_GetSysClockFreq+0x200>)
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	099b      	lsrs	r3, r3, #6
 80142d8:	2200      	movs	r2, #0
 80142da:	63bb      	str	r3, [r7, #56]	; 0x38
 80142dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80142de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142e4:	633b      	str	r3, [r7, #48]	; 0x30
 80142e6:	2300      	movs	r3, #0
 80142e8:	637b      	str	r3, [r7, #52]	; 0x34
 80142ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80142ee:	4622      	mov	r2, r4
 80142f0:	462b      	mov	r3, r5
 80142f2:	f04f 0000 	mov.w	r0, #0
 80142f6:	f04f 0100 	mov.w	r1, #0
 80142fa:	0159      	lsls	r1, r3, #5
 80142fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8014300:	0150      	lsls	r0, r2, #5
 8014302:	4602      	mov	r2, r0
 8014304:	460b      	mov	r3, r1
 8014306:	4621      	mov	r1, r4
 8014308:	1a51      	subs	r1, r2, r1
 801430a:	6139      	str	r1, [r7, #16]
 801430c:	4629      	mov	r1, r5
 801430e:	eb63 0301 	sbc.w	r3, r3, r1
 8014312:	617b      	str	r3, [r7, #20]
 8014314:	f04f 0200 	mov.w	r2, #0
 8014318:	f04f 0300 	mov.w	r3, #0
 801431c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8014320:	4659      	mov	r1, fp
 8014322:	018b      	lsls	r3, r1, #6
 8014324:	4651      	mov	r1, sl
 8014326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801432a:	4651      	mov	r1, sl
 801432c:	018a      	lsls	r2, r1, #6
 801432e:	4651      	mov	r1, sl
 8014330:	ebb2 0801 	subs.w	r8, r2, r1
 8014334:	4659      	mov	r1, fp
 8014336:	eb63 0901 	sbc.w	r9, r3, r1
 801433a:	f04f 0200 	mov.w	r2, #0
 801433e:	f04f 0300 	mov.w	r3, #0
 8014342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801434a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801434e:	4690      	mov	r8, r2
 8014350:	4699      	mov	r9, r3
 8014352:	4623      	mov	r3, r4
 8014354:	eb18 0303 	adds.w	r3, r8, r3
 8014358:	60bb      	str	r3, [r7, #8]
 801435a:	462b      	mov	r3, r5
 801435c:	eb49 0303 	adc.w	r3, r9, r3
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	f04f 0200 	mov.w	r2, #0
 8014366:	f04f 0300 	mov.w	r3, #0
 801436a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801436e:	4629      	mov	r1, r5
 8014370:	024b      	lsls	r3, r1, #9
 8014372:	4621      	mov	r1, r4
 8014374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8014378:	4621      	mov	r1, r4
 801437a:	024a      	lsls	r2, r1, #9
 801437c:	4610      	mov	r0, r2
 801437e:	4619      	mov	r1, r3
 8014380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014382:	2200      	movs	r2, #0
 8014384:	62bb      	str	r3, [r7, #40]	; 0x28
 8014386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801438c:	f7ec fc2e 	bl	8000bec <__aeabi_uldivmod>
 8014390:	4602      	mov	r2, r0
 8014392:	460b      	mov	r3, r1
 8014394:	4613      	mov	r3, r2
 8014396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014398:	e058      	b.n	801444c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801439a:	4b38      	ldr	r3, [pc, #224]	; (801447c <HAL_RCC_GetSysClockFreq+0x200>)
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	099b      	lsrs	r3, r3, #6
 80143a0:	2200      	movs	r2, #0
 80143a2:	4618      	mov	r0, r3
 80143a4:	4611      	mov	r1, r2
 80143a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80143aa:	623b      	str	r3, [r7, #32]
 80143ac:	2300      	movs	r3, #0
 80143ae:	627b      	str	r3, [r7, #36]	; 0x24
 80143b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80143b4:	4642      	mov	r2, r8
 80143b6:	464b      	mov	r3, r9
 80143b8:	f04f 0000 	mov.w	r0, #0
 80143bc:	f04f 0100 	mov.w	r1, #0
 80143c0:	0159      	lsls	r1, r3, #5
 80143c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80143c6:	0150      	lsls	r0, r2, #5
 80143c8:	4602      	mov	r2, r0
 80143ca:	460b      	mov	r3, r1
 80143cc:	4641      	mov	r1, r8
 80143ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80143d2:	4649      	mov	r1, r9
 80143d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80143d8:	f04f 0200 	mov.w	r2, #0
 80143dc:	f04f 0300 	mov.w	r3, #0
 80143e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80143e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80143e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80143ec:	ebb2 040a 	subs.w	r4, r2, sl
 80143f0:	eb63 050b 	sbc.w	r5, r3, fp
 80143f4:	f04f 0200 	mov.w	r2, #0
 80143f8:	f04f 0300 	mov.w	r3, #0
 80143fc:	00eb      	lsls	r3, r5, #3
 80143fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014402:	00e2      	lsls	r2, r4, #3
 8014404:	4614      	mov	r4, r2
 8014406:	461d      	mov	r5, r3
 8014408:	4643      	mov	r3, r8
 801440a:	18e3      	adds	r3, r4, r3
 801440c:	603b      	str	r3, [r7, #0]
 801440e:	464b      	mov	r3, r9
 8014410:	eb45 0303 	adc.w	r3, r5, r3
 8014414:	607b      	str	r3, [r7, #4]
 8014416:	f04f 0200 	mov.w	r2, #0
 801441a:	f04f 0300 	mov.w	r3, #0
 801441e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014422:	4629      	mov	r1, r5
 8014424:	028b      	lsls	r3, r1, #10
 8014426:	4621      	mov	r1, r4
 8014428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801442c:	4621      	mov	r1, r4
 801442e:	028a      	lsls	r2, r1, #10
 8014430:	4610      	mov	r0, r2
 8014432:	4619      	mov	r1, r3
 8014434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014436:	2200      	movs	r2, #0
 8014438:	61bb      	str	r3, [r7, #24]
 801443a:	61fa      	str	r2, [r7, #28]
 801443c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014440:	f7ec fbd4 	bl	8000bec <__aeabi_uldivmod>
 8014444:	4602      	mov	r2, r0
 8014446:	460b      	mov	r3, r1
 8014448:	4613      	mov	r3, r2
 801444a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801444c:	4b0b      	ldr	r3, [pc, #44]	; (801447c <HAL_RCC_GetSysClockFreq+0x200>)
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	0c1b      	lsrs	r3, r3, #16
 8014452:	f003 0303 	and.w	r3, r3, #3
 8014456:	3301      	adds	r3, #1
 8014458:	005b      	lsls	r3, r3, #1
 801445a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801445c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014460:	fbb2 f3f3 	udiv	r3, r2, r3
 8014464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8014466:	e002      	b.n	801446e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8014468:	4b05      	ldr	r3, [pc, #20]	; (8014480 <HAL_RCC_GetSysClockFreq+0x204>)
 801446a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801446c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014470:	4618      	mov	r0, r3
 8014472:	3750      	adds	r7, #80	; 0x50
 8014474:	46bd      	mov	sp, r7
 8014476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801447a:	bf00      	nop
 801447c:	40023800 	.word	0x40023800
 8014480:	00f42400 	.word	0x00f42400
 8014484:	007a1200 	.word	0x007a1200

08014488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014488:	b480      	push	{r7}
 801448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801448c:	4b03      	ldr	r3, [pc, #12]	; (801449c <HAL_RCC_GetHCLKFreq+0x14>)
 801448e:	681b      	ldr	r3, [r3, #0]
}
 8014490:	4618      	mov	r0, r3
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop
 801449c:	20000000 	.word	0x20000000

080144a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80144a4:	f7ff fff0 	bl	8014488 <HAL_RCC_GetHCLKFreq>
 80144a8:	4602      	mov	r2, r0
 80144aa:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80144ac:	689b      	ldr	r3, [r3, #8]
 80144ae:	0a9b      	lsrs	r3, r3, #10
 80144b0:	f003 0307 	and.w	r3, r3, #7
 80144b4:	4903      	ldr	r1, [pc, #12]	; (80144c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80144b6:	5ccb      	ldrb	r3, [r1, r3]
 80144b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80144bc:	4618      	mov	r0, r3
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	40023800 	.word	0x40023800
 80144c4:	0801a7f0 	.word	0x0801a7f0

080144c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80144cc:	f7ff ffdc 	bl	8014488 <HAL_RCC_GetHCLKFreq>
 80144d0:	4602      	mov	r2, r0
 80144d2:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80144d4:	689b      	ldr	r3, [r3, #8]
 80144d6:	0b5b      	lsrs	r3, r3, #13
 80144d8:	f003 0307 	and.w	r3, r3, #7
 80144dc:	4903      	ldr	r1, [pc, #12]	; (80144ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80144de:	5ccb      	ldrb	r3, [r1, r3]
 80144e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	40023800 	.word	0x40023800
 80144ec:	0801a7f0 	.word	0x0801a7f0

080144f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80144fe:	2301      	movs	r3, #1
 8014500:	e041      	b.n	8014586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014508:	b2db      	uxtb	r3, r3
 801450a:	2b00      	cmp	r3, #0
 801450c:	d106      	bne.n	801451c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2200      	movs	r2, #0
 8014512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f7ec ff02 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2202      	movs	r2, #2
 8014520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	3304      	adds	r3, #4
 801452c:	4619      	mov	r1, r3
 801452e:	4610      	mov	r0, r2
 8014530:	f000 fa7a 	bl	8014a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2201      	movs	r2, #1
 8014538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2201      	movs	r2, #1
 8014540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2201      	movs	r2, #1
 8014548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2201      	movs	r2, #1
 8014550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2201      	movs	r2, #1
 8014558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2201      	movs	r2, #1
 8014560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2201      	movs	r2, #1
 8014568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2201      	movs	r2, #1
 8014570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2201      	movs	r2, #1
 8014578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2201      	movs	r2, #1
 8014580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014584:	2300      	movs	r3, #0
}
 8014586:	4618      	mov	r0, r3
 8014588:	3708      	adds	r7, #8
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
	...

08014590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014590:	b480      	push	{r7}
 8014592:	b085      	sub	sp, #20
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	2b01      	cmp	r3, #1
 80145a2:	d001      	beq.n	80145a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80145a4:	2301      	movs	r3, #1
 80145a6:	e044      	b.n	8014632 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2202      	movs	r2, #2
 80145ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	68da      	ldr	r2, [r3, #12]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	f042 0201 	orr.w	r2, r2, #1
 80145be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a1e      	ldr	r2, [pc, #120]	; (8014640 <HAL_TIM_Base_Start_IT+0xb0>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d018      	beq.n	80145fc <HAL_TIM_Base_Start_IT+0x6c>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145d2:	d013      	beq.n	80145fc <HAL_TIM_Base_Start_IT+0x6c>
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	4a1a      	ldr	r2, [pc, #104]	; (8014644 <HAL_TIM_Base_Start_IT+0xb4>)
 80145da:	4293      	cmp	r3, r2
 80145dc:	d00e      	beq.n	80145fc <HAL_TIM_Base_Start_IT+0x6c>
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	4a19      	ldr	r2, [pc, #100]	; (8014648 <HAL_TIM_Base_Start_IT+0xb8>)
 80145e4:	4293      	cmp	r3, r2
 80145e6:	d009      	beq.n	80145fc <HAL_TIM_Base_Start_IT+0x6c>
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	4a17      	ldr	r2, [pc, #92]	; (801464c <HAL_TIM_Base_Start_IT+0xbc>)
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d004      	beq.n	80145fc <HAL_TIM_Base_Start_IT+0x6c>
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	4a16      	ldr	r2, [pc, #88]	; (8014650 <HAL_TIM_Base_Start_IT+0xc0>)
 80145f8:	4293      	cmp	r3, r2
 80145fa:	d111      	bne.n	8014620 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	689b      	ldr	r3, [r3, #8]
 8014602:	f003 0307 	and.w	r3, r3, #7
 8014606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2b06      	cmp	r3, #6
 801460c:	d010      	beq.n	8014630 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	681a      	ldr	r2, [r3, #0]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	f042 0201 	orr.w	r2, r2, #1
 801461c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801461e:	e007      	b.n	8014630 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	f042 0201 	orr.w	r2, r2, #1
 801462e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014630:	2300      	movs	r3, #0
}
 8014632:	4618      	mov	r0, r3
 8014634:	3714      	adds	r7, #20
 8014636:	46bd      	mov	sp, r7
 8014638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463c:	4770      	bx	lr
 801463e:	bf00      	nop
 8014640:	40010000 	.word	0x40010000
 8014644:	40000400 	.word	0x40000400
 8014648:	40000800 	.word	0x40000800
 801464c:	40000c00 	.word	0x40000c00
 8014650:	40014000 	.word	0x40014000

08014654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	68db      	ldr	r3, [r3, #12]
 8014662:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	691b      	ldr	r3, [r3, #16]
 801466a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	f003 0302 	and.w	r3, r3, #2
 8014672:	2b00      	cmp	r3, #0
 8014674:	d020      	beq.n	80146b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f003 0302 	and.w	r3, r3, #2
 801467c:	2b00      	cmp	r3, #0
 801467e:	d01b      	beq.n	80146b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	f06f 0202 	mvn.w	r2, #2
 8014688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2201      	movs	r2, #1
 801468e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	699b      	ldr	r3, [r3, #24]
 8014696:	f003 0303 	and.w	r3, r3, #3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d003      	beq.n	80146a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 f9a3 	bl	80149ea <HAL_TIM_IC_CaptureCallback>
 80146a4:	e005      	b.n	80146b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f000 f995 	bl	80149d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f000 f9a6 	bl	80149fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2200      	movs	r2, #0
 80146b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	f003 0304 	and.w	r3, r3, #4
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d020      	beq.n	8014704 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f003 0304 	and.w	r3, r3, #4
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d01b      	beq.n	8014704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f06f 0204 	mvn.w	r2, #4
 80146d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2202      	movs	r2, #2
 80146da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	699b      	ldr	r3, [r3, #24]
 80146e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d003      	beq.n	80146f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 f97d 	bl	80149ea <HAL_TIM_IC_CaptureCallback>
 80146f0:	e005      	b.n	80146fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f000 f96f 	bl	80149d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 f980 	bl	80149fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2200      	movs	r2, #0
 8014702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	f003 0308 	and.w	r3, r3, #8
 801470a:	2b00      	cmp	r3, #0
 801470c:	d020      	beq.n	8014750 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	f003 0308 	and.w	r3, r3, #8
 8014714:	2b00      	cmp	r3, #0
 8014716:	d01b      	beq.n	8014750 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f06f 0208 	mvn.w	r2, #8
 8014720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2204      	movs	r2, #4
 8014726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	69db      	ldr	r3, [r3, #28]
 801472e:	f003 0303 	and.w	r3, r3, #3
 8014732:	2b00      	cmp	r3, #0
 8014734:	d003      	beq.n	801473e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 f957 	bl	80149ea <HAL_TIM_IC_CaptureCallback>
 801473c:	e005      	b.n	801474a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f949 	bl	80149d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 f95a 	bl	80149fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2200      	movs	r2, #0
 801474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	f003 0310 	and.w	r3, r3, #16
 8014756:	2b00      	cmp	r3, #0
 8014758:	d020      	beq.n	801479c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f003 0310 	and.w	r3, r3, #16
 8014760:	2b00      	cmp	r3, #0
 8014762:	d01b      	beq.n	801479c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	f06f 0210 	mvn.w	r2, #16
 801476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2208      	movs	r2, #8
 8014772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	69db      	ldr	r3, [r3, #28]
 801477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801477e:	2b00      	cmp	r3, #0
 8014780:	d003      	beq.n	801478a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 f931 	bl	80149ea <HAL_TIM_IC_CaptureCallback>
 8014788:	e005      	b.n	8014796 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 f923 	bl	80149d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f000 f934 	bl	80149fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2200      	movs	r2, #0
 801479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	f003 0301 	and.w	r3, r3, #1
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00c      	beq.n	80147c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	f003 0301 	and.w	r3, r3, #1
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d007      	beq.n	80147c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	f06f 0201 	mvn.w	r2, #1
 80147b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 f901 	bl	80149c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d00c      	beq.n	80147e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d007      	beq.n	80147e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80147dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f000 fac0 	bl	8014d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00c      	beq.n	8014808 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d007      	beq.n	8014808 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 f905 	bl	8014a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	f003 0320 	and.w	r3, r3, #32
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00c      	beq.n	801482c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	f003 0320 	and.w	r3, r3, #32
 8014818:	2b00      	cmp	r3, #0
 801481a:	d007      	beq.n	801482c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f06f 0220 	mvn.w	r2, #32
 8014824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fa92 	bl	8014d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801482c:	bf00      	nop
 801482e:	3710      	adds	r7, #16
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b084      	sub	sp, #16
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801483e:	2300      	movs	r3, #0
 8014840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014848:	2b01      	cmp	r3, #1
 801484a:	d101      	bne.n	8014850 <HAL_TIM_ConfigClockSource+0x1c>
 801484c:	2302      	movs	r3, #2
 801484e:	e0b4      	b.n	80149ba <HAL_TIM_ConfigClockSource+0x186>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2201      	movs	r2, #1
 8014854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2202      	movs	r2, #2
 801485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	68ba      	ldr	r2, [r7, #8]
 801487e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014888:	d03e      	beq.n	8014908 <HAL_TIM_ConfigClockSource+0xd4>
 801488a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801488e:	f200 8087 	bhi.w	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 8014892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014896:	f000 8086 	beq.w	80149a6 <HAL_TIM_ConfigClockSource+0x172>
 801489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801489e:	d87f      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148a0:	2b70      	cmp	r3, #112	; 0x70
 80148a2:	d01a      	beq.n	80148da <HAL_TIM_ConfigClockSource+0xa6>
 80148a4:	2b70      	cmp	r3, #112	; 0x70
 80148a6:	d87b      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148a8:	2b60      	cmp	r3, #96	; 0x60
 80148aa:	d050      	beq.n	801494e <HAL_TIM_ConfigClockSource+0x11a>
 80148ac:	2b60      	cmp	r3, #96	; 0x60
 80148ae:	d877      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148b0:	2b50      	cmp	r3, #80	; 0x50
 80148b2:	d03c      	beq.n	801492e <HAL_TIM_ConfigClockSource+0xfa>
 80148b4:	2b50      	cmp	r3, #80	; 0x50
 80148b6:	d873      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148b8:	2b40      	cmp	r3, #64	; 0x40
 80148ba:	d058      	beq.n	801496e <HAL_TIM_ConfigClockSource+0x13a>
 80148bc:	2b40      	cmp	r3, #64	; 0x40
 80148be:	d86f      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148c0:	2b30      	cmp	r3, #48	; 0x30
 80148c2:	d064      	beq.n	801498e <HAL_TIM_ConfigClockSource+0x15a>
 80148c4:	2b30      	cmp	r3, #48	; 0x30
 80148c6:	d86b      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148c8:	2b20      	cmp	r3, #32
 80148ca:	d060      	beq.n	801498e <HAL_TIM_ConfigClockSource+0x15a>
 80148cc:	2b20      	cmp	r3, #32
 80148ce:	d867      	bhi.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d05c      	beq.n	801498e <HAL_TIM_ConfigClockSource+0x15a>
 80148d4:	2b10      	cmp	r3, #16
 80148d6:	d05a      	beq.n	801498e <HAL_TIM_ConfigClockSource+0x15a>
 80148d8:	e062      	b.n	80149a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80148ea:	f000 f9a3 	bl	8014c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	689b      	ldr	r3, [r3, #8]
 80148f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80148fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	68ba      	ldr	r2, [r7, #8]
 8014904:	609a      	str	r2, [r3, #8]
      break;
 8014906:	e04f      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8014918:	f000 f98c 	bl	8014c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	689a      	ldr	r2, [r3, #8]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801492a:	609a      	str	r2, [r3, #8]
      break;
 801492c:	e03c      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801493a:	461a      	mov	r2, r3
 801493c:	f000 f900 	bl	8014b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2150      	movs	r1, #80	; 0x50
 8014946:	4618      	mov	r0, r3
 8014948:	f000 f959 	bl	8014bfe <TIM_ITRx_SetConfig>
      break;
 801494c:	e02c      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801495a:	461a      	mov	r2, r3
 801495c:	f000 f91f 	bl	8014b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	2160      	movs	r1, #96	; 0x60
 8014966:	4618      	mov	r0, r3
 8014968:	f000 f949 	bl	8014bfe <TIM_ITRx_SetConfig>
      break;
 801496c:	e01c      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801497a:	461a      	mov	r2, r3
 801497c:	f000 f8e0 	bl	8014b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	2140      	movs	r1, #64	; 0x40
 8014986:	4618      	mov	r0, r3
 8014988:	f000 f939 	bl	8014bfe <TIM_ITRx_SetConfig>
      break;
 801498c:	e00c      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4619      	mov	r1, r3
 8014998:	4610      	mov	r0, r2
 801499a:	f000 f930 	bl	8014bfe <TIM_ITRx_SetConfig>
      break;
 801499e:	e003      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80149a0:	2301      	movs	r3, #1
 80149a2:	73fb      	strb	r3, [r7, #15]
      break;
 80149a4:	e000      	b.n	80149a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80149a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2201      	movs	r2, #1
 80149ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2200      	movs	r2, #0
 80149b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80149b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80149c2:	b480      	push	{r7}
 80149c4:	b083      	sub	sp, #12
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80149ca:	bf00      	nop
 80149cc:	370c      	adds	r7, #12
 80149ce:	46bd      	mov	sp, r7
 80149d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d4:	4770      	bx	lr

080149d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80149d6:	b480      	push	{r7}
 80149d8:	b083      	sub	sp, #12
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80149de:	bf00      	nop
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr

080149ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b083      	sub	sp, #12
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80149f2:	bf00      	nop
 80149f4:	370c      	adds	r7, #12
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr

080149fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80149fe:	b480      	push	{r7}
 8014a00:	b083      	sub	sp, #12
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014a06:	bf00      	nop
 8014a08:	370c      	adds	r7, #12
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr

08014a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014a12:	b480      	push	{r7}
 8014a14:	b083      	sub	sp, #12
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014a1a:	bf00      	nop
 8014a1c:	370c      	adds	r7, #12
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a24:	4770      	bx	lr
	...

08014a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a28:	b480      	push	{r7}
 8014a2a:	b085      	sub	sp, #20
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4a3a      	ldr	r2, [pc, #232]	; (8014b24 <TIM_Base_SetConfig+0xfc>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d00f      	beq.n	8014a60 <TIM_Base_SetConfig+0x38>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a46:	d00b      	beq.n	8014a60 <TIM_Base_SetConfig+0x38>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4a37      	ldr	r2, [pc, #220]	; (8014b28 <TIM_Base_SetConfig+0x100>)
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d007      	beq.n	8014a60 <TIM_Base_SetConfig+0x38>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	4a36      	ldr	r2, [pc, #216]	; (8014b2c <TIM_Base_SetConfig+0x104>)
 8014a54:	4293      	cmp	r3, r2
 8014a56:	d003      	beq.n	8014a60 <TIM_Base_SetConfig+0x38>
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	4a35      	ldr	r2, [pc, #212]	; (8014b30 <TIM_Base_SetConfig+0x108>)
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	d108      	bne.n	8014a72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	4313      	orrs	r3, r2
 8014a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	4a2b      	ldr	r2, [pc, #172]	; (8014b24 <TIM_Base_SetConfig+0xfc>)
 8014a76:	4293      	cmp	r3, r2
 8014a78:	d01b      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a80:	d017      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	4a28      	ldr	r2, [pc, #160]	; (8014b28 <TIM_Base_SetConfig+0x100>)
 8014a86:	4293      	cmp	r3, r2
 8014a88:	d013      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	4a27      	ldr	r2, [pc, #156]	; (8014b2c <TIM_Base_SetConfig+0x104>)
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d00f      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	4a26      	ldr	r2, [pc, #152]	; (8014b30 <TIM_Base_SetConfig+0x108>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d00b      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4a25      	ldr	r2, [pc, #148]	; (8014b34 <TIM_Base_SetConfig+0x10c>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d007      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	4a24      	ldr	r2, [pc, #144]	; (8014b38 <TIM_Base_SetConfig+0x110>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d003      	beq.n	8014ab2 <TIM_Base_SetConfig+0x8a>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4a23      	ldr	r2, [pc, #140]	; (8014b3c <TIM_Base_SetConfig+0x114>)
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	d108      	bne.n	8014ac4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	68db      	ldr	r3, [r3, #12]
 8014abe:	68fa      	ldr	r2, [r7, #12]
 8014ac0:	4313      	orrs	r3, r2
 8014ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	695b      	ldr	r3, [r3, #20]
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	689a      	ldr	r2, [r3, #8]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	4a0e      	ldr	r2, [pc, #56]	; (8014b24 <TIM_Base_SetConfig+0xfc>)
 8014aec:	4293      	cmp	r3, r2
 8014aee:	d103      	bne.n	8014af8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	691a      	ldr	r2, [r3, #16]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2201      	movs	r2, #1
 8014afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	691b      	ldr	r3, [r3, #16]
 8014b02:	f003 0301 	and.w	r3, r3, #1
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d105      	bne.n	8014b16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	691b      	ldr	r3, [r3, #16]
 8014b0e:	f023 0201 	bic.w	r2, r3, #1
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	611a      	str	r2, [r3, #16]
  }
}
 8014b16:	bf00      	nop
 8014b18:	3714      	adds	r7, #20
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	40010000 	.word	0x40010000
 8014b28:	40000400 	.word	0x40000400
 8014b2c:	40000800 	.word	0x40000800
 8014b30:	40000c00 	.word	0x40000c00
 8014b34:	40014000 	.word	0x40014000
 8014b38:	40014400 	.word	0x40014400
 8014b3c:	40014800 	.word	0x40014800

08014b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014b40:	b480      	push	{r7}
 8014b42:	b087      	sub	sp, #28
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	6a1b      	ldr	r3, [r3, #32]
 8014b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	6a1b      	ldr	r3, [r3, #32]
 8014b56:	f023 0201 	bic.w	r2, r3, #1
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	699b      	ldr	r3, [r3, #24]
 8014b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014b64:	693b      	ldr	r3, [r7, #16]
 8014b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	011b      	lsls	r3, r3, #4
 8014b70:	693a      	ldr	r2, [r7, #16]
 8014b72:	4313      	orrs	r3, r2
 8014b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	f023 030a 	bic.w	r3, r3, #10
 8014b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014b7e:	697a      	ldr	r2, [r7, #20]
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	4313      	orrs	r3, r2
 8014b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	693a      	ldr	r2, [r7, #16]
 8014b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	697a      	ldr	r2, [r7, #20]
 8014b90:	621a      	str	r2, [r3, #32]
}
 8014b92:	bf00      	nop
 8014b94:	371c      	adds	r7, #28
 8014b96:	46bd      	mov	sp, r7
 8014b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9c:	4770      	bx	lr

08014b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014b9e:	b480      	push	{r7}
 8014ba0:	b087      	sub	sp, #28
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	60f8      	str	r0, [r7, #12]
 8014ba6:	60b9      	str	r1, [r7, #8]
 8014ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	6a1b      	ldr	r3, [r3, #32]
 8014bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6a1b      	ldr	r3, [r3, #32]
 8014bb4:	f023 0210 	bic.w	r2, r3, #16
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	699b      	ldr	r3, [r3, #24]
 8014bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	031b      	lsls	r3, r3, #12
 8014bce:	693a      	ldr	r2, [r7, #16]
 8014bd0:	4313      	orrs	r3, r2
 8014bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	011b      	lsls	r3, r3, #4
 8014be0:	697a      	ldr	r2, [r7, #20]
 8014be2:	4313      	orrs	r3, r2
 8014be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	693a      	ldr	r2, [r7, #16]
 8014bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	697a      	ldr	r2, [r7, #20]
 8014bf0:	621a      	str	r2, [r3, #32]
}
 8014bf2:	bf00      	nop
 8014bf4:	371c      	adds	r7, #28
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfc:	4770      	bx	lr

08014bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014bfe:	b480      	push	{r7}
 8014c00:	b085      	sub	sp, #20
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
 8014c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	689b      	ldr	r3, [r3, #8]
 8014c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014c16:	683a      	ldr	r2, [r7, #0]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	f043 0307 	orr.w	r3, r3, #7
 8014c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	68fa      	ldr	r2, [r7, #12]
 8014c26:	609a      	str	r2, [r3, #8]
}
 8014c28:	bf00      	nop
 8014c2a:	3714      	adds	r7, #20
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b087      	sub	sp, #28
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
 8014c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	689b      	ldr	r3, [r3, #8]
 8014c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	021a      	lsls	r2, r3, #8
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	431a      	orrs	r2, r3
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	4313      	orrs	r3, r2
 8014c5c:	697a      	ldr	r2, [r7, #20]
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	697a      	ldr	r2, [r7, #20]
 8014c66:	609a      	str	r2, [r3, #8]
}
 8014c68:	bf00      	nop
 8014c6a:	371c      	adds	r7, #28
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c72:	4770      	bx	lr

08014c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b085      	sub	sp, #20
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d101      	bne.n	8014c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014c88:	2302      	movs	r3, #2
 8014c8a:	e050      	b.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	2201      	movs	r2, #1
 8014c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2202      	movs	r2, #2
 8014c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	689b      	ldr	r3, [r3, #8]
 8014caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	68fa      	ldr	r2, [r7, #12]
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	68fa      	ldr	r2, [r7, #12]
 8014cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	4a1c      	ldr	r2, [pc, #112]	; (8014d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	d018      	beq.n	8014d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cd8:	d013      	beq.n	8014d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	4a18      	ldr	r2, [pc, #96]	; (8014d40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	d00e      	beq.n	8014d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	4a16      	ldr	r2, [pc, #88]	; (8014d44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8014cea:	4293      	cmp	r3, r2
 8014cec:	d009      	beq.n	8014d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	4a15      	ldr	r2, [pc, #84]	; (8014d48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	d004      	beq.n	8014d02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4a13      	ldr	r2, [pc, #76]	; (8014d4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d10c      	bne.n	8014d1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	685b      	ldr	r3, [r3, #4]
 8014d0e:	68ba      	ldr	r2, [r7, #8]
 8014d10:	4313      	orrs	r3, r2
 8014d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	68ba      	ldr	r2, [r7, #8]
 8014d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2201      	movs	r2, #1
 8014d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014d2c:	2300      	movs	r3, #0
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr
 8014d3a:	bf00      	nop
 8014d3c:	40010000 	.word	0x40010000
 8014d40:	40000400 	.word	0x40000400
 8014d44:	40000800 	.word	0x40000800
 8014d48:	40000c00 	.word	0x40000c00
 8014d4c:	40014000 	.word	0x40014000

08014d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014d50:	b480      	push	{r7}
 8014d52:	b083      	sub	sp, #12
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014d58:	bf00      	nop
 8014d5a:	370c      	adds	r7, #12
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr

08014d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014d6c:	bf00      	nop
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr

08014d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d101      	bne.n	8014d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014d86:	2301      	movs	r3, #1
 8014d88:	e042      	b.n	8014e10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d106      	bne.n	8014da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f7ec fae4 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2224      	movs	r2, #36	; 0x24
 8014da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	68da      	ldr	r2, [r3, #12]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f000 f973 	bl	80150a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	691a      	ldr	r2, [r3, #16]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	695a      	ldr	r2, [r3, #20]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68da      	ldr	r2, [r3, #12]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2200      	movs	r2, #0
 8014df6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2220      	movs	r2, #32
 8014dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2220      	movs	r2, #32
 8014e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8014e0e:	2300      	movs	r3, #0
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	3708      	adds	r7, #8
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b08a      	sub	sp, #40	; 0x28
 8014e1c:	af02      	add	r7, sp, #8
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	60b9      	str	r1, [r7, #8]
 8014e22:	603b      	str	r3, [r7, #0]
 8014e24:	4613      	mov	r3, r2
 8014e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	2b20      	cmp	r3, #32
 8014e36:	d175      	bne.n	8014f24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d002      	beq.n	8014e44 <HAL_UART_Transmit+0x2c>
 8014e3e:	88fb      	ldrh	r3, [r7, #6]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d101      	bne.n	8014e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014e44:	2301      	movs	r3, #1
 8014e46:	e06e      	b.n	8014f26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2221      	movs	r2, #33	; 0x21
 8014e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014e56:	f7fe fb93 	bl	8013580 <HAL_GetTick>
 8014e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	88fa      	ldrh	r2, [r7, #6]
 8014e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	88fa      	ldrh	r2, [r7, #6]
 8014e66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	689b      	ldr	r3, [r3, #8]
 8014e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e70:	d108      	bne.n	8014e84 <HAL_UART_Transmit+0x6c>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	691b      	ldr	r3, [r3, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d104      	bne.n	8014e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	61bb      	str	r3, [r7, #24]
 8014e82:	e003      	b.n	8014e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014e8c:	e02e      	b.n	8014eec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	9300      	str	r3, [sp, #0]
 8014e92:	697b      	ldr	r3, [r7, #20]
 8014e94:	2200      	movs	r2, #0
 8014e96:	2180      	movs	r1, #128	; 0x80
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f000 f848 	bl	8014f2e <UART_WaitOnFlagUntilTimeout>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d005      	beq.n	8014eb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	2220      	movs	r2, #32
 8014ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8014eac:	2303      	movs	r3, #3
 8014eae:	e03a      	b.n	8014f26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d10b      	bne.n	8014ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014eb6:	69bb      	ldr	r3, [r7, #24]
 8014eb8:	881b      	ldrh	r3, [r3, #0]
 8014eba:	461a      	mov	r2, r3
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014ec6:	69bb      	ldr	r3, [r7, #24]
 8014ec8:	3302      	adds	r3, #2
 8014eca:	61bb      	str	r3, [r7, #24]
 8014ecc:	e007      	b.n	8014ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014ece:	69fb      	ldr	r3, [r7, #28]
 8014ed0:	781a      	ldrb	r2, [r3, #0]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	3301      	adds	r3, #1
 8014edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	3b01      	subs	r3, #1
 8014ee6:	b29a      	uxth	r2, r3
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014ef0:	b29b      	uxth	r3, r3
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d1cb      	bne.n	8014e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	9300      	str	r3, [sp, #0]
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2200      	movs	r2, #0
 8014efe:	2140      	movs	r1, #64	; 0x40
 8014f00:	68f8      	ldr	r0, [r7, #12]
 8014f02:	f000 f814 	bl	8014f2e <UART_WaitOnFlagUntilTimeout>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d005      	beq.n	8014f18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	2220      	movs	r2, #32
 8014f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8014f14:	2303      	movs	r3, #3
 8014f16:	e006      	b.n	8014f26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2220      	movs	r2, #32
 8014f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8014f20:	2300      	movs	r3, #0
 8014f22:	e000      	b.n	8014f26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8014f24:	2302      	movs	r3, #2
  }
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3720      	adds	r7, #32
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}

08014f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014f2e:	b580      	push	{r7, lr}
 8014f30:	b086      	sub	sp, #24
 8014f32:	af00      	add	r7, sp, #0
 8014f34:	60f8      	str	r0, [r7, #12]
 8014f36:	60b9      	str	r1, [r7, #8]
 8014f38:	603b      	str	r3, [r7, #0]
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014f3e:	e03b      	b.n	8014fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014f40:	6a3b      	ldr	r3, [r7, #32]
 8014f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f46:	d037      	beq.n	8014fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014f48:	f7fe fb1a 	bl	8013580 <HAL_GetTick>
 8014f4c:	4602      	mov	r2, r0
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	1ad3      	subs	r3, r2, r3
 8014f52:	6a3a      	ldr	r2, [r7, #32]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d302      	bcc.n	8014f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8014f58:	6a3b      	ldr	r3, [r7, #32]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d101      	bne.n	8014f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014f5e:	2303      	movs	r3, #3
 8014f60:	e03a      	b.n	8014fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	f003 0304 	and.w	r3, r3, #4
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d023      	beq.n	8014fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	2b80      	cmp	r3, #128	; 0x80
 8014f74:	d020      	beq.n	8014fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	2b40      	cmp	r3, #64	; 0x40
 8014f7a:	d01d      	beq.n	8014fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	f003 0308 	and.w	r3, r3, #8
 8014f86:	2b08      	cmp	r3, #8
 8014f88:	d116      	bne.n	8014fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	617b      	str	r3, [r7, #20]
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	617b      	str	r3, [r7, #20]
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	617b      	str	r3, [r7, #20]
 8014f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014fa0:	68f8      	ldr	r0, [r7, #12]
 8014fa2:	f000 f81d 	bl	8014fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2208      	movs	r2, #8
 8014faa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e00f      	b.n	8014fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	bf0c      	ite	eq
 8014fc8:	2301      	moveq	r3, #1
 8014fca:	2300      	movne	r3, #0
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	461a      	mov	r2, r3
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d0b4      	beq.n	8014f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014fd6:	2300      	movs	r3, #0
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3718      	adds	r7, #24
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b095      	sub	sp, #84	; 0x54
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	330c      	adds	r3, #12
 8014fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ff2:	e853 3f00 	ldrex	r3, [r3]
 8014ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	330c      	adds	r3, #12
 8015006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015008:	643a      	str	r2, [r7, #64]	; 0x40
 801500a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801500c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801500e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015010:	e841 2300 	strex	r3, r2, [r1]
 8015014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015018:	2b00      	cmp	r3, #0
 801501a:	d1e5      	bne.n	8014fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	3314      	adds	r3, #20
 8015022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015024:	6a3b      	ldr	r3, [r7, #32]
 8015026:	e853 3f00 	ldrex	r3, [r3]
 801502a:	61fb      	str	r3, [r7, #28]
   return(result);
 801502c:	69fb      	ldr	r3, [r7, #28]
 801502e:	f023 0301 	bic.w	r3, r3, #1
 8015032:	64bb      	str	r3, [r7, #72]	; 0x48
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	3314      	adds	r3, #20
 801503a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801503c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801503e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015044:	e841 2300 	strex	r3, r2, [r1]
 8015048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504c:	2b00      	cmp	r3, #0
 801504e:	d1e5      	bne.n	801501c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015054:	2b01      	cmp	r3, #1
 8015056:	d119      	bne.n	801508c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	330c      	adds	r3, #12
 801505e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	e853 3f00 	ldrex	r3, [r3]
 8015066:	60bb      	str	r3, [r7, #8]
   return(result);
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	f023 0310 	bic.w	r3, r3, #16
 801506e:	647b      	str	r3, [r7, #68]	; 0x44
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	330c      	adds	r3, #12
 8015076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015078:	61ba      	str	r2, [r7, #24]
 801507a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801507c:	6979      	ldr	r1, [r7, #20]
 801507e:	69ba      	ldr	r2, [r7, #24]
 8015080:	e841 2300 	strex	r3, r2, [r1]
 8015084:	613b      	str	r3, [r7, #16]
   return(result);
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d1e5      	bne.n	8015058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2220      	movs	r2, #32
 8015090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2200      	movs	r2, #0
 8015098:	631a      	str	r2, [r3, #48]	; 0x30
}
 801509a:	bf00      	nop
 801509c:	3754      	adds	r7, #84	; 0x54
 801509e:	46bd      	mov	sp, r7
 80150a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a4:	4770      	bx	lr
	...

080150a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80150a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80150ac:	b0c0      	sub	sp, #256	; 0x100
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80150b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	691b      	ldr	r3, [r3, #16]
 80150bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80150c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150c4:	68d9      	ldr	r1, [r3, #12]
 80150c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	ea40 0301 	orr.w	r3, r0, r1
 80150d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80150d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150d6:	689a      	ldr	r2, [r3, #8]
 80150d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150dc:	691b      	ldr	r3, [r3, #16]
 80150de:	431a      	orrs	r2, r3
 80150e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150e4:	695b      	ldr	r3, [r3, #20]
 80150e6:	431a      	orrs	r2, r3
 80150e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150ec:	69db      	ldr	r3, [r3, #28]
 80150ee:	4313      	orrs	r3, r2
 80150f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80150f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	68db      	ldr	r3, [r3, #12]
 80150fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8015100:	f021 010c 	bic.w	r1, r1, #12
 8015104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801510e:	430b      	orrs	r3, r1
 8015110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	695b      	ldr	r3, [r3, #20]
 801511a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015122:	6999      	ldr	r1, [r3, #24]
 8015124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	ea40 0301 	orr.w	r3, r0, r1
 801512e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015134:	681a      	ldr	r2, [r3, #0]
 8015136:	4b8f      	ldr	r3, [pc, #572]	; (8015374 <UART_SetConfig+0x2cc>)
 8015138:	429a      	cmp	r2, r3
 801513a:	d005      	beq.n	8015148 <UART_SetConfig+0xa0>
 801513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015140:	681a      	ldr	r2, [r3, #0]
 8015142:	4b8d      	ldr	r3, [pc, #564]	; (8015378 <UART_SetConfig+0x2d0>)
 8015144:	429a      	cmp	r2, r3
 8015146:	d104      	bne.n	8015152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8015148:	f7ff f9be 	bl	80144c8 <HAL_RCC_GetPCLK2Freq>
 801514c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8015150:	e003      	b.n	801515a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8015152:	f7ff f9a5 	bl	80144a0 <HAL_RCC_GetPCLK1Freq>
 8015156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801515e:	69db      	ldr	r3, [r3, #28]
 8015160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015164:	f040 810c 	bne.w	8015380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8015168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801516c:	2200      	movs	r2, #0
 801516e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8015172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8015176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801517a:	4622      	mov	r2, r4
 801517c:	462b      	mov	r3, r5
 801517e:	1891      	adds	r1, r2, r2
 8015180:	65b9      	str	r1, [r7, #88]	; 0x58
 8015182:	415b      	adcs	r3, r3
 8015184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801518a:	4621      	mov	r1, r4
 801518c:	eb12 0801 	adds.w	r8, r2, r1
 8015190:	4629      	mov	r1, r5
 8015192:	eb43 0901 	adc.w	r9, r3, r1
 8015196:	f04f 0200 	mov.w	r2, #0
 801519a:	f04f 0300 	mov.w	r3, #0
 801519e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80151a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80151a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80151aa:	4690      	mov	r8, r2
 80151ac:	4699      	mov	r9, r3
 80151ae:	4623      	mov	r3, r4
 80151b0:	eb18 0303 	adds.w	r3, r8, r3
 80151b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80151b8:	462b      	mov	r3, r5
 80151ba:	eb49 0303 	adc.w	r3, r9, r3
 80151be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80151c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	2200      	movs	r2, #0
 80151ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80151ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80151d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80151d6:	460b      	mov	r3, r1
 80151d8:	18db      	adds	r3, r3, r3
 80151da:	653b      	str	r3, [r7, #80]	; 0x50
 80151dc:	4613      	mov	r3, r2
 80151de:	eb42 0303 	adc.w	r3, r2, r3
 80151e2:	657b      	str	r3, [r7, #84]	; 0x54
 80151e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80151e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80151ec:	f7eb fcfe 	bl	8000bec <__aeabi_uldivmod>
 80151f0:	4602      	mov	r2, r0
 80151f2:	460b      	mov	r3, r1
 80151f4:	4b61      	ldr	r3, [pc, #388]	; (801537c <UART_SetConfig+0x2d4>)
 80151f6:	fba3 2302 	umull	r2, r3, r3, r2
 80151fa:	095b      	lsrs	r3, r3, #5
 80151fc:	011c      	lsls	r4, r3, #4
 80151fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015202:	2200      	movs	r2, #0
 8015204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801520c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8015210:	4642      	mov	r2, r8
 8015212:	464b      	mov	r3, r9
 8015214:	1891      	adds	r1, r2, r2
 8015216:	64b9      	str	r1, [r7, #72]	; 0x48
 8015218:	415b      	adcs	r3, r3
 801521a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801521c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015220:	4641      	mov	r1, r8
 8015222:	eb12 0a01 	adds.w	sl, r2, r1
 8015226:	4649      	mov	r1, r9
 8015228:	eb43 0b01 	adc.w	fp, r3, r1
 801522c:	f04f 0200 	mov.w	r2, #0
 8015230:	f04f 0300 	mov.w	r3, #0
 8015234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801523c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015240:	4692      	mov	sl, r2
 8015242:	469b      	mov	fp, r3
 8015244:	4643      	mov	r3, r8
 8015246:	eb1a 0303 	adds.w	r3, sl, r3
 801524a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801524e:	464b      	mov	r3, r9
 8015250:	eb4b 0303 	adc.w	r3, fp, r3
 8015254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	2200      	movs	r2, #0
 8015260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801526c:	460b      	mov	r3, r1
 801526e:	18db      	adds	r3, r3, r3
 8015270:	643b      	str	r3, [r7, #64]	; 0x40
 8015272:	4613      	mov	r3, r2
 8015274:	eb42 0303 	adc.w	r3, r2, r3
 8015278:	647b      	str	r3, [r7, #68]	; 0x44
 801527a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801527e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015282:	f7eb fcb3 	bl	8000bec <__aeabi_uldivmod>
 8015286:	4602      	mov	r2, r0
 8015288:	460b      	mov	r3, r1
 801528a:	4611      	mov	r1, r2
 801528c:	4b3b      	ldr	r3, [pc, #236]	; (801537c <UART_SetConfig+0x2d4>)
 801528e:	fba3 2301 	umull	r2, r3, r3, r1
 8015292:	095b      	lsrs	r3, r3, #5
 8015294:	2264      	movs	r2, #100	; 0x64
 8015296:	fb02 f303 	mul.w	r3, r2, r3
 801529a:	1acb      	subs	r3, r1, r3
 801529c:	00db      	lsls	r3, r3, #3
 801529e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80152a2:	4b36      	ldr	r3, [pc, #216]	; (801537c <UART_SetConfig+0x2d4>)
 80152a4:	fba3 2302 	umull	r2, r3, r3, r2
 80152a8:	095b      	lsrs	r3, r3, #5
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80152b0:	441c      	add	r4, r3
 80152b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80152b6:	2200      	movs	r2, #0
 80152b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80152bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80152c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80152c4:	4642      	mov	r2, r8
 80152c6:	464b      	mov	r3, r9
 80152c8:	1891      	adds	r1, r2, r2
 80152ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80152cc:	415b      	adcs	r3, r3
 80152ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80152d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80152d4:	4641      	mov	r1, r8
 80152d6:	1851      	adds	r1, r2, r1
 80152d8:	6339      	str	r1, [r7, #48]	; 0x30
 80152da:	4649      	mov	r1, r9
 80152dc:	414b      	adcs	r3, r1
 80152de:	637b      	str	r3, [r7, #52]	; 0x34
 80152e0:	f04f 0200 	mov.w	r2, #0
 80152e4:	f04f 0300 	mov.w	r3, #0
 80152e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80152ec:	4659      	mov	r1, fp
 80152ee:	00cb      	lsls	r3, r1, #3
 80152f0:	4651      	mov	r1, sl
 80152f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80152f6:	4651      	mov	r1, sl
 80152f8:	00ca      	lsls	r2, r1, #3
 80152fa:	4610      	mov	r0, r2
 80152fc:	4619      	mov	r1, r3
 80152fe:	4603      	mov	r3, r0
 8015300:	4642      	mov	r2, r8
 8015302:	189b      	adds	r3, r3, r2
 8015304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015308:	464b      	mov	r3, r9
 801530a:	460a      	mov	r2, r1
 801530c:	eb42 0303 	adc.w	r3, r2, r3
 8015310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	2200      	movs	r2, #0
 801531c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015328:	460b      	mov	r3, r1
 801532a:	18db      	adds	r3, r3, r3
 801532c:	62bb      	str	r3, [r7, #40]	; 0x28
 801532e:	4613      	mov	r3, r2
 8015330:	eb42 0303 	adc.w	r3, r2, r3
 8015334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801533a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801533e:	f7eb fc55 	bl	8000bec <__aeabi_uldivmod>
 8015342:	4602      	mov	r2, r0
 8015344:	460b      	mov	r3, r1
 8015346:	4b0d      	ldr	r3, [pc, #52]	; (801537c <UART_SetConfig+0x2d4>)
 8015348:	fba3 1302 	umull	r1, r3, r3, r2
 801534c:	095b      	lsrs	r3, r3, #5
 801534e:	2164      	movs	r1, #100	; 0x64
 8015350:	fb01 f303 	mul.w	r3, r1, r3
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	00db      	lsls	r3, r3, #3
 8015358:	3332      	adds	r3, #50	; 0x32
 801535a:	4a08      	ldr	r2, [pc, #32]	; (801537c <UART_SetConfig+0x2d4>)
 801535c:	fba2 2303 	umull	r2, r3, r2, r3
 8015360:	095b      	lsrs	r3, r3, #5
 8015362:	f003 0207 	and.w	r2, r3, #7
 8015366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4422      	add	r2, r4
 801536e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015370:	e106      	b.n	8015580 <UART_SetConfig+0x4d8>
 8015372:	bf00      	nop
 8015374:	40011000 	.word	0x40011000
 8015378:	40011400 	.word	0x40011400
 801537c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015384:	2200      	movs	r2, #0
 8015386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801538a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801538e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8015392:	4642      	mov	r2, r8
 8015394:	464b      	mov	r3, r9
 8015396:	1891      	adds	r1, r2, r2
 8015398:	6239      	str	r1, [r7, #32]
 801539a:	415b      	adcs	r3, r3
 801539c:	627b      	str	r3, [r7, #36]	; 0x24
 801539e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80153a2:	4641      	mov	r1, r8
 80153a4:	1854      	adds	r4, r2, r1
 80153a6:	4649      	mov	r1, r9
 80153a8:	eb43 0501 	adc.w	r5, r3, r1
 80153ac:	f04f 0200 	mov.w	r2, #0
 80153b0:	f04f 0300 	mov.w	r3, #0
 80153b4:	00eb      	lsls	r3, r5, #3
 80153b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80153ba:	00e2      	lsls	r2, r4, #3
 80153bc:	4614      	mov	r4, r2
 80153be:	461d      	mov	r5, r3
 80153c0:	4643      	mov	r3, r8
 80153c2:	18e3      	adds	r3, r4, r3
 80153c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80153c8:	464b      	mov	r3, r9
 80153ca:	eb45 0303 	adc.w	r3, r5, r3
 80153ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80153d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	2200      	movs	r2, #0
 80153da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80153de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80153e2:	f04f 0200 	mov.w	r2, #0
 80153e6:	f04f 0300 	mov.w	r3, #0
 80153ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80153ee:	4629      	mov	r1, r5
 80153f0:	008b      	lsls	r3, r1, #2
 80153f2:	4621      	mov	r1, r4
 80153f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80153f8:	4621      	mov	r1, r4
 80153fa:	008a      	lsls	r2, r1, #2
 80153fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015400:	f7eb fbf4 	bl	8000bec <__aeabi_uldivmod>
 8015404:	4602      	mov	r2, r0
 8015406:	460b      	mov	r3, r1
 8015408:	4b60      	ldr	r3, [pc, #384]	; (801558c <UART_SetConfig+0x4e4>)
 801540a:	fba3 2302 	umull	r2, r3, r3, r2
 801540e:	095b      	lsrs	r3, r3, #5
 8015410:	011c      	lsls	r4, r3, #4
 8015412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015416:	2200      	movs	r2, #0
 8015418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801541c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015424:	4642      	mov	r2, r8
 8015426:	464b      	mov	r3, r9
 8015428:	1891      	adds	r1, r2, r2
 801542a:	61b9      	str	r1, [r7, #24]
 801542c:	415b      	adcs	r3, r3
 801542e:	61fb      	str	r3, [r7, #28]
 8015430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015434:	4641      	mov	r1, r8
 8015436:	1851      	adds	r1, r2, r1
 8015438:	6139      	str	r1, [r7, #16]
 801543a:	4649      	mov	r1, r9
 801543c:	414b      	adcs	r3, r1
 801543e:	617b      	str	r3, [r7, #20]
 8015440:	f04f 0200 	mov.w	r2, #0
 8015444:	f04f 0300 	mov.w	r3, #0
 8015448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801544c:	4659      	mov	r1, fp
 801544e:	00cb      	lsls	r3, r1, #3
 8015450:	4651      	mov	r1, sl
 8015452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015456:	4651      	mov	r1, sl
 8015458:	00ca      	lsls	r2, r1, #3
 801545a:	4610      	mov	r0, r2
 801545c:	4619      	mov	r1, r3
 801545e:	4603      	mov	r3, r0
 8015460:	4642      	mov	r2, r8
 8015462:	189b      	adds	r3, r3, r2
 8015464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015468:	464b      	mov	r3, r9
 801546a:	460a      	mov	r2, r1
 801546c:	eb42 0303 	adc.w	r3, r2, r3
 8015470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	2200      	movs	r2, #0
 801547c:	67bb      	str	r3, [r7, #120]	; 0x78
 801547e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015480:	f04f 0200 	mov.w	r2, #0
 8015484:	f04f 0300 	mov.w	r3, #0
 8015488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801548c:	4649      	mov	r1, r9
 801548e:	008b      	lsls	r3, r1, #2
 8015490:	4641      	mov	r1, r8
 8015492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015496:	4641      	mov	r1, r8
 8015498:	008a      	lsls	r2, r1, #2
 801549a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801549e:	f7eb fba5 	bl	8000bec <__aeabi_uldivmod>
 80154a2:	4602      	mov	r2, r0
 80154a4:	460b      	mov	r3, r1
 80154a6:	4611      	mov	r1, r2
 80154a8:	4b38      	ldr	r3, [pc, #224]	; (801558c <UART_SetConfig+0x4e4>)
 80154aa:	fba3 2301 	umull	r2, r3, r3, r1
 80154ae:	095b      	lsrs	r3, r3, #5
 80154b0:	2264      	movs	r2, #100	; 0x64
 80154b2:	fb02 f303 	mul.w	r3, r2, r3
 80154b6:	1acb      	subs	r3, r1, r3
 80154b8:	011b      	lsls	r3, r3, #4
 80154ba:	3332      	adds	r3, #50	; 0x32
 80154bc:	4a33      	ldr	r2, [pc, #204]	; (801558c <UART_SetConfig+0x4e4>)
 80154be:	fba2 2303 	umull	r2, r3, r2, r3
 80154c2:	095b      	lsrs	r3, r3, #5
 80154c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154c8:	441c      	add	r4, r3
 80154ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80154ce:	2200      	movs	r2, #0
 80154d0:	673b      	str	r3, [r7, #112]	; 0x70
 80154d2:	677a      	str	r2, [r7, #116]	; 0x74
 80154d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80154d8:	4642      	mov	r2, r8
 80154da:	464b      	mov	r3, r9
 80154dc:	1891      	adds	r1, r2, r2
 80154de:	60b9      	str	r1, [r7, #8]
 80154e0:	415b      	adcs	r3, r3
 80154e2:	60fb      	str	r3, [r7, #12]
 80154e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80154e8:	4641      	mov	r1, r8
 80154ea:	1851      	adds	r1, r2, r1
 80154ec:	6039      	str	r1, [r7, #0]
 80154ee:	4649      	mov	r1, r9
 80154f0:	414b      	adcs	r3, r1
 80154f2:	607b      	str	r3, [r7, #4]
 80154f4:	f04f 0200 	mov.w	r2, #0
 80154f8:	f04f 0300 	mov.w	r3, #0
 80154fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8015500:	4659      	mov	r1, fp
 8015502:	00cb      	lsls	r3, r1, #3
 8015504:	4651      	mov	r1, sl
 8015506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801550a:	4651      	mov	r1, sl
 801550c:	00ca      	lsls	r2, r1, #3
 801550e:	4610      	mov	r0, r2
 8015510:	4619      	mov	r1, r3
 8015512:	4603      	mov	r3, r0
 8015514:	4642      	mov	r2, r8
 8015516:	189b      	adds	r3, r3, r2
 8015518:	66bb      	str	r3, [r7, #104]	; 0x68
 801551a:	464b      	mov	r3, r9
 801551c:	460a      	mov	r2, r1
 801551e:	eb42 0303 	adc.w	r3, r2, r3
 8015522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	2200      	movs	r2, #0
 801552c:	663b      	str	r3, [r7, #96]	; 0x60
 801552e:	667a      	str	r2, [r7, #100]	; 0x64
 8015530:	f04f 0200 	mov.w	r2, #0
 8015534:	f04f 0300 	mov.w	r3, #0
 8015538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801553c:	4649      	mov	r1, r9
 801553e:	008b      	lsls	r3, r1, #2
 8015540:	4641      	mov	r1, r8
 8015542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015546:	4641      	mov	r1, r8
 8015548:	008a      	lsls	r2, r1, #2
 801554a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801554e:	f7eb fb4d 	bl	8000bec <__aeabi_uldivmod>
 8015552:	4602      	mov	r2, r0
 8015554:	460b      	mov	r3, r1
 8015556:	4b0d      	ldr	r3, [pc, #52]	; (801558c <UART_SetConfig+0x4e4>)
 8015558:	fba3 1302 	umull	r1, r3, r3, r2
 801555c:	095b      	lsrs	r3, r3, #5
 801555e:	2164      	movs	r1, #100	; 0x64
 8015560:	fb01 f303 	mul.w	r3, r1, r3
 8015564:	1ad3      	subs	r3, r2, r3
 8015566:	011b      	lsls	r3, r3, #4
 8015568:	3332      	adds	r3, #50	; 0x32
 801556a:	4a08      	ldr	r2, [pc, #32]	; (801558c <UART_SetConfig+0x4e4>)
 801556c:	fba2 2303 	umull	r2, r3, r2, r3
 8015570:	095b      	lsrs	r3, r3, #5
 8015572:	f003 020f 	and.w	r2, r3, #15
 8015576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	4422      	add	r2, r4
 801557e:	609a      	str	r2, [r3, #8]
}
 8015580:	bf00      	nop
 8015582:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8015586:	46bd      	mov	sp, r7
 8015588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801558c:	51eb851f 	.word	0x51eb851f

08015590 <__assert_func>:
 8015590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015592:	4614      	mov	r4, r2
 8015594:	461a      	mov	r2, r3
 8015596:	4b09      	ldr	r3, [pc, #36]	; (80155bc <__assert_func+0x2c>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	4605      	mov	r5, r0
 801559c:	68d8      	ldr	r0, [r3, #12]
 801559e:	b14c      	cbz	r4, 80155b4 <__assert_func+0x24>
 80155a0:	4b07      	ldr	r3, [pc, #28]	; (80155c0 <__assert_func+0x30>)
 80155a2:	9100      	str	r1, [sp, #0]
 80155a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155a8:	4906      	ldr	r1, [pc, #24]	; (80155c4 <__assert_func+0x34>)
 80155aa:	462b      	mov	r3, r5
 80155ac:	f000 ff60 	bl	8016470 <fiprintf>
 80155b0:	f001 f8e2 	bl	8016778 <abort>
 80155b4:	4b04      	ldr	r3, [pc, #16]	; (80155c8 <__assert_func+0x38>)
 80155b6:	461c      	mov	r4, r3
 80155b8:	e7f3      	b.n	80155a2 <__assert_func+0x12>
 80155ba:	bf00      	nop
 80155bc:	20000778 	.word	0x20000778
 80155c0:	0801bf4b 	.word	0x0801bf4b
 80155c4:	0801bf58 	.word	0x0801bf58
 80155c8:	0801bf86 	.word	0x0801bf86

080155cc <atof>:
 80155cc:	2100      	movs	r1, #0
 80155ce:	f000 be13 	b.w	80161f8 <strtod>

080155d2 <atol>:
 80155d2:	220a      	movs	r2, #10
 80155d4:	2100      	movs	r1, #0
 80155d6:	f000 be9d 	b.w	8016314 <strtol>

080155da <sulp>:
 80155da:	b570      	push	{r4, r5, r6, lr}
 80155dc:	4604      	mov	r4, r0
 80155de:	460d      	mov	r5, r1
 80155e0:	ec45 4b10 	vmov	d0, r4, r5
 80155e4:	4616      	mov	r6, r2
 80155e6:	f002 f89d 	bl	8017724 <__ulp>
 80155ea:	ec51 0b10 	vmov	r0, r1, d0
 80155ee:	b17e      	cbz	r6, 8015610 <sulp+0x36>
 80155f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80155f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	dd09      	ble.n	8015610 <sulp+0x36>
 80155fc:	051b      	lsls	r3, r3, #20
 80155fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015602:	2400      	movs	r4, #0
 8015604:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015608:	4622      	mov	r2, r4
 801560a:	462b      	mov	r3, r5
 801560c:	f7eb f80c 	bl	8000628 <__aeabi_dmul>
 8015610:	bd70      	pop	{r4, r5, r6, pc}
 8015612:	0000      	movs	r0, r0
 8015614:	0000      	movs	r0, r0
	...

08015618 <_strtod_l>:
 8015618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801561c:	ed2d 8b02 	vpush	{d8}
 8015620:	b09b      	sub	sp, #108	; 0x6c
 8015622:	4604      	mov	r4, r0
 8015624:	9213      	str	r2, [sp, #76]	; 0x4c
 8015626:	2200      	movs	r2, #0
 8015628:	9216      	str	r2, [sp, #88]	; 0x58
 801562a:	460d      	mov	r5, r1
 801562c:	f04f 0800 	mov.w	r8, #0
 8015630:	f04f 0900 	mov.w	r9, #0
 8015634:	460a      	mov	r2, r1
 8015636:	9215      	str	r2, [sp, #84]	; 0x54
 8015638:	7811      	ldrb	r1, [r2, #0]
 801563a:	292b      	cmp	r1, #43	; 0x2b
 801563c:	d04c      	beq.n	80156d8 <_strtod_l+0xc0>
 801563e:	d83a      	bhi.n	80156b6 <_strtod_l+0x9e>
 8015640:	290d      	cmp	r1, #13
 8015642:	d834      	bhi.n	80156ae <_strtod_l+0x96>
 8015644:	2908      	cmp	r1, #8
 8015646:	d834      	bhi.n	80156b2 <_strtod_l+0x9a>
 8015648:	2900      	cmp	r1, #0
 801564a:	d03d      	beq.n	80156c8 <_strtod_l+0xb0>
 801564c:	2200      	movs	r2, #0
 801564e:	920a      	str	r2, [sp, #40]	; 0x28
 8015650:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015652:	7832      	ldrb	r2, [r6, #0]
 8015654:	2a30      	cmp	r2, #48	; 0x30
 8015656:	f040 80b4 	bne.w	80157c2 <_strtod_l+0x1aa>
 801565a:	7872      	ldrb	r2, [r6, #1]
 801565c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015660:	2a58      	cmp	r2, #88	; 0x58
 8015662:	d170      	bne.n	8015746 <_strtod_l+0x12e>
 8015664:	9302      	str	r3, [sp, #8]
 8015666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	ab16      	add	r3, sp, #88	; 0x58
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	4a8e      	ldr	r2, [pc, #568]	; (80158a8 <_strtod_l+0x290>)
 8015670:	ab17      	add	r3, sp, #92	; 0x5c
 8015672:	a915      	add	r1, sp, #84	; 0x54
 8015674:	4620      	mov	r0, r4
 8015676:	f001 f93b 	bl	80168f0 <__gethex>
 801567a:	f010 070f 	ands.w	r7, r0, #15
 801567e:	4605      	mov	r5, r0
 8015680:	d005      	beq.n	801568e <_strtod_l+0x76>
 8015682:	2f06      	cmp	r7, #6
 8015684:	d12a      	bne.n	80156dc <_strtod_l+0xc4>
 8015686:	3601      	adds	r6, #1
 8015688:	2300      	movs	r3, #0
 801568a:	9615      	str	r6, [sp, #84]	; 0x54
 801568c:	930a      	str	r3, [sp, #40]	; 0x28
 801568e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015690:	2b00      	cmp	r3, #0
 8015692:	f040 857f 	bne.w	8016194 <_strtod_l+0xb7c>
 8015696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015698:	b1db      	cbz	r3, 80156d2 <_strtod_l+0xba>
 801569a:	4642      	mov	r2, r8
 801569c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80156a0:	ec43 2b10 	vmov	d0, r2, r3
 80156a4:	b01b      	add	sp, #108	; 0x6c
 80156a6:	ecbd 8b02 	vpop	{d8}
 80156aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ae:	2920      	cmp	r1, #32
 80156b0:	d1cc      	bne.n	801564c <_strtod_l+0x34>
 80156b2:	3201      	adds	r2, #1
 80156b4:	e7bf      	b.n	8015636 <_strtod_l+0x1e>
 80156b6:	292d      	cmp	r1, #45	; 0x2d
 80156b8:	d1c8      	bne.n	801564c <_strtod_l+0x34>
 80156ba:	2101      	movs	r1, #1
 80156bc:	910a      	str	r1, [sp, #40]	; 0x28
 80156be:	1c51      	adds	r1, r2, #1
 80156c0:	9115      	str	r1, [sp, #84]	; 0x54
 80156c2:	7852      	ldrb	r2, [r2, #1]
 80156c4:	2a00      	cmp	r2, #0
 80156c6:	d1c3      	bne.n	8015650 <_strtod_l+0x38>
 80156c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80156ca:	9515      	str	r5, [sp, #84]	; 0x54
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	f040 855f 	bne.w	8016190 <_strtod_l+0xb78>
 80156d2:	4642      	mov	r2, r8
 80156d4:	464b      	mov	r3, r9
 80156d6:	e7e3      	b.n	80156a0 <_strtod_l+0x88>
 80156d8:	2100      	movs	r1, #0
 80156da:	e7ef      	b.n	80156bc <_strtod_l+0xa4>
 80156dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80156de:	b13a      	cbz	r2, 80156f0 <_strtod_l+0xd8>
 80156e0:	2135      	movs	r1, #53	; 0x35
 80156e2:	a818      	add	r0, sp, #96	; 0x60
 80156e4:	f002 f91b 	bl	801791e <__copybits>
 80156e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80156ea:	4620      	mov	r0, r4
 80156ec:	f001 fcee 	bl	80170cc <_Bfree>
 80156f0:	3f01      	subs	r7, #1
 80156f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80156f4:	2f04      	cmp	r7, #4
 80156f6:	d806      	bhi.n	8015706 <_strtod_l+0xee>
 80156f8:	e8df f007 	tbb	[pc, r7]
 80156fc:	201d0314 	.word	0x201d0314
 8015700:	14          	.byte	0x14
 8015701:	00          	.byte	0x00
 8015702:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015706:	05e9      	lsls	r1, r5, #23
 8015708:	bf48      	it	mi
 801570a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801570e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015712:	0d1b      	lsrs	r3, r3, #20
 8015714:	051b      	lsls	r3, r3, #20
 8015716:	2b00      	cmp	r3, #0
 8015718:	d1b9      	bne.n	801568e <_strtod_l+0x76>
 801571a:	f000 ffe7 	bl	80166ec <__errno>
 801571e:	2322      	movs	r3, #34	; 0x22
 8015720:	6003      	str	r3, [r0, #0]
 8015722:	e7b4      	b.n	801568e <_strtod_l+0x76>
 8015724:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015728:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801572c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015730:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015734:	e7e7      	b.n	8015706 <_strtod_l+0xee>
 8015736:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80158b0 <_strtod_l+0x298>
 801573a:	e7e4      	b.n	8015706 <_strtod_l+0xee>
 801573c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015740:	f04f 38ff 	mov.w	r8, #4294967295
 8015744:	e7df      	b.n	8015706 <_strtod_l+0xee>
 8015746:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015748:	1c5a      	adds	r2, r3, #1
 801574a:	9215      	str	r2, [sp, #84]	; 0x54
 801574c:	785b      	ldrb	r3, [r3, #1]
 801574e:	2b30      	cmp	r3, #48	; 0x30
 8015750:	d0f9      	beq.n	8015746 <_strtod_l+0x12e>
 8015752:	2b00      	cmp	r3, #0
 8015754:	d09b      	beq.n	801568e <_strtod_l+0x76>
 8015756:	2301      	movs	r3, #1
 8015758:	f04f 0a00 	mov.w	sl, #0
 801575c:	9304      	str	r3, [sp, #16]
 801575e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015760:	930b      	str	r3, [sp, #44]	; 0x2c
 8015762:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015766:	46d3      	mov	fp, sl
 8015768:	220a      	movs	r2, #10
 801576a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801576c:	7806      	ldrb	r6, [r0, #0]
 801576e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015772:	b2d9      	uxtb	r1, r3
 8015774:	2909      	cmp	r1, #9
 8015776:	d926      	bls.n	80157c6 <_strtod_l+0x1ae>
 8015778:	494c      	ldr	r1, [pc, #304]	; (80158ac <_strtod_l+0x294>)
 801577a:	2201      	movs	r2, #1
 801577c:	f000 ff5e 	bl	801663c <strncmp>
 8015780:	2800      	cmp	r0, #0
 8015782:	d030      	beq.n	80157e6 <_strtod_l+0x1ce>
 8015784:	2000      	movs	r0, #0
 8015786:	4632      	mov	r2, r6
 8015788:	9005      	str	r0, [sp, #20]
 801578a:	465e      	mov	r6, fp
 801578c:	4603      	mov	r3, r0
 801578e:	2a65      	cmp	r2, #101	; 0x65
 8015790:	d001      	beq.n	8015796 <_strtod_l+0x17e>
 8015792:	2a45      	cmp	r2, #69	; 0x45
 8015794:	d113      	bne.n	80157be <_strtod_l+0x1a6>
 8015796:	b91e      	cbnz	r6, 80157a0 <_strtod_l+0x188>
 8015798:	9a04      	ldr	r2, [sp, #16]
 801579a:	4302      	orrs	r2, r0
 801579c:	d094      	beq.n	80156c8 <_strtod_l+0xb0>
 801579e:	2600      	movs	r6, #0
 80157a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80157a2:	1c6a      	adds	r2, r5, #1
 80157a4:	9215      	str	r2, [sp, #84]	; 0x54
 80157a6:	786a      	ldrb	r2, [r5, #1]
 80157a8:	2a2b      	cmp	r2, #43	; 0x2b
 80157aa:	d074      	beq.n	8015896 <_strtod_l+0x27e>
 80157ac:	2a2d      	cmp	r2, #45	; 0x2d
 80157ae:	d078      	beq.n	80158a2 <_strtod_l+0x28a>
 80157b0:	f04f 0c00 	mov.w	ip, #0
 80157b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80157b8:	2909      	cmp	r1, #9
 80157ba:	d97f      	bls.n	80158bc <_strtod_l+0x2a4>
 80157bc:	9515      	str	r5, [sp, #84]	; 0x54
 80157be:	2700      	movs	r7, #0
 80157c0:	e09e      	b.n	8015900 <_strtod_l+0x2e8>
 80157c2:	2300      	movs	r3, #0
 80157c4:	e7c8      	b.n	8015758 <_strtod_l+0x140>
 80157c6:	f1bb 0f08 	cmp.w	fp, #8
 80157ca:	bfd8      	it	le
 80157cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80157ce:	f100 0001 	add.w	r0, r0, #1
 80157d2:	bfda      	itte	le
 80157d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80157d8:	9309      	strle	r3, [sp, #36]	; 0x24
 80157da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80157de:	f10b 0b01 	add.w	fp, fp, #1
 80157e2:	9015      	str	r0, [sp, #84]	; 0x54
 80157e4:	e7c1      	b.n	801576a <_strtod_l+0x152>
 80157e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157e8:	1c5a      	adds	r2, r3, #1
 80157ea:	9215      	str	r2, [sp, #84]	; 0x54
 80157ec:	785a      	ldrb	r2, [r3, #1]
 80157ee:	f1bb 0f00 	cmp.w	fp, #0
 80157f2:	d037      	beq.n	8015864 <_strtod_l+0x24c>
 80157f4:	9005      	str	r0, [sp, #20]
 80157f6:	465e      	mov	r6, fp
 80157f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80157fc:	2b09      	cmp	r3, #9
 80157fe:	d912      	bls.n	8015826 <_strtod_l+0x20e>
 8015800:	2301      	movs	r3, #1
 8015802:	e7c4      	b.n	801578e <_strtod_l+0x176>
 8015804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015806:	1c5a      	adds	r2, r3, #1
 8015808:	9215      	str	r2, [sp, #84]	; 0x54
 801580a:	785a      	ldrb	r2, [r3, #1]
 801580c:	3001      	adds	r0, #1
 801580e:	2a30      	cmp	r2, #48	; 0x30
 8015810:	d0f8      	beq.n	8015804 <_strtod_l+0x1ec>
 8015812:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015816:	2b08      	cmp	r3, #8
 8015818:	f200 84c1 	bhi.w	801619e <_strtod_l+0xb86>
 801581c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801581e:	9005      	str	r0, [sp, #20]
 8015820:	2000      	movs	r0, #0
 8015822:	930b      	str	r3, [sp, #44]	; 0x2c
 8015824:	4606      	mov	r6, r0
 8015826:	3a30      	subs	r2, #48	; 0x30
 8015828:	f100 0301 	add.w	r3, r0, #1
 801582c:	d014      	beq.n	8015858 <_strtod_l+0x240>
 801582e:	9905      	ldr	r1, [sp, #20]
 8015830:	4419      	add	r1, r3
 8015832:	9105      	str	r1, [sp, #20]
 8015834:	4633      	mov	r3, r6
 8015836:	eb00 0c06 	add.w	ip, r0, r6
 801583a:	210a      	movs	r1, #10
 801583c:	4563      	cmp	r3, ip
 801583e:	d113      	bne.n	8015868 <_strtod_l+0x250>
 8015840:	1833      	adds	r3, r6, r0
 8015842:	2b08      	cmp	r3, #8
 8015844:	f106 0601 	add.w	r6, r6, #1
 8015848:	4406      	add	r6, r0
 801584a:	dc1a      	bgt.n	8015882 <_strtod_l+0x26a>
 801584c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801584e:	230a      	movs	r3, #10
 8015850:	fb03 2301 	mla	r3, r3, r1, r2
 8015854:	9309      	str	r3, [sp, #36]	; 0x24
 8015856:	2300      	movs	r3, #0
 8015858:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801585a:	1c51      	adds	r1, r2, #1
 801585c:	9115      	str	r1, [sp, #84]	; 0x54
 801585e:	7852      	ldrb	r2, [r2, #1]
 8015860:	4618      	mov	r0, r3
 8015862:	e7c9      	b.n	80157f8 <_strtod_l+0x1e0>
 8015864:	4658      	mov	r0, fp
 8015866:	e7d2      	b.n	801580e <_strtod_l+0x1f6>
 8015868:	2b08      	cmp	r3, #8
 801586a:	f103 0301 	add.w	r3, r3, #1
 801586e:	dc03      	bgt.n	8015878 <_strtod_l+0x260>
 8015870:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015872:	434f      	muls	r7, r1
 8015874:	9709      	str	r7, [sp, #36]	; 0x24
 8015876:	e7e1      	b.n	801583c <_strtod_l+0x224>
 8015878:	2b10      	cmp	r3, #16
 801587a:	bfd8      	it	le
 801587c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015880:	e7dc      	b.n	801583c <_strtod_l+0x224>
 8015882:	2e10      	cmp	r6, #16
 8015884:	bfdc      	itt	le
 8015886:	230a      	movle	r3, #10
 8015888:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801588c:	e7e3      	b.n	8015856 <_strtod_l+0x23e>
 801588e:	2300      	movs	r3, #0
 8015890:	9305      	str	r3, [sp, #20]
 8015892:	2301      	movs	r3, #1
 8015894:	e780      	b.n	8015798 <_strtod_l+0x180>
 8015896:	f04f 0c00 	mov.w	ip, #0
 801589a:	1caa      	adds	r2, r5, #2
 801589c:	9215      	str	r2, [sp, #84]	; 0x54
 801589e:	78aa      	ldrb	r2, [r5, #2]
 80158a0:	e788      	b.n	80157b4 <_strtod_l+0x19c>
 80158a2:	f04f 0c01 	mov.w	ip, #1
 80158a6:	e7f8      	b.n	801589a <_strtod_l+0x282>
 80158a8:	0801bf98 	.word	0x0801bf98
 80158ac:	0801bf87 	.word	0x0801bf87
 80158b0:	7ff00000 	.word	0x7ff00000
 80158b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80158b6:	1c51      	adds	r1, r2, #1
 80158b8:	9115      	str	r1, [sp, #84]	; 0x54
 80158ba:	7852      	ldrb	r2, [r2, #1]
 80158bc:	2a30      	cmp	r2, #48	; 0x30
 80158be:	d0f9      	beq.n	80158b4 <_strtod_l+0x29c>
 80158c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80158c4:	2908      	cmp	r1, #8
 80158c6:	f63f af7a 	bhi.w	80157be <_strtod_l+0x1a6>
 80158ca:	3a30      	subs	r2, #48	; 0x30
 80158cc:	9208      	str	r2, [sp, #32]
 80158ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80158d0:	920c      	str	r2, [sp, #48]	; 0x30
 80158d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80158d4:	1c57      	adds	r7, r2, #1
 80158d6:	9715      	str	r7, [sp, #84]	; 0x54
 80158d8:	7852      	ldrb	r2, [r2, #1]
 80158da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80158de:	f1be 0f09 	cmp.w	lr, #9
 80158e2:	d938      	bls.n	8015956 <_strtod_l+0x33e>
 80158e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158e6:	1a7f      	subs	r7, r7, r1
 80158e8:	2f08      	cmp	r7, #8
 80158ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80158ee:	dc03      	bgt.n	80158f8 <_strtod_l+0x2e0>
 80158f0:	9908      	ldr	r1, [sp, #32]
 80158f2:	428f      	cmp	r7, r1
 80158f4:	bfa8      	it	ge
 80158f6:	460f      	movge	r7, r1
 80158f8:	f1bc 0f00 	cmp.w	ip, #0
 80158fc:	d000      	beq.n	8015900 <_strtod_l+0x2e8>
 80158fe:	427f      	negs	r7, r7
 8015900:	2e00      	cmp	r6, #0
 8015902:	d14f      	bne.n	80159a4 <_strtod_l+0x38c>
 8015904:	9904      	ldr	r1, [sp, #16]
 8015906:	4301      	orrs	r1, r0
 8015908:	f47f aec1 	bne.w	801568e <_strtod_l+0x76>
 801590c:	2b00      	cmp	r3, #0
 801590e:	f47f aedb 	bne.w	80156c8 <_strtod_l+0xb0>
 8015912:	2a69      	cmp	r2, #105	; 0x69
 8015914:	d029      	beq.n	801596a <_strtod_l+0x352>
 8015916:	dc26      	bgt.n	8015966 <_strtod_l+0x34e>
 8015918:	2a49      	cmp	r2, #73	; 0x49
 801591a:	d026      	beq.n	801596a <_strtod_l+0x352>
 801591c:	2a4e      	cmp	r2, #78	; 0x4e
 801591e:	f47f aed3 	bne.w	80156c8 <_strtod_l+0xb0>
 8015922:	499b      	ldr	r1, [pc, #620]	; (8015b90 <_strtod_l+0x578>)
 8015924:	a815      	add	r0, sp, #84	; 0x54
 8015926:	f001 fa23 	bl	8016d70 <__match>
 801592a:	2800      	cmp	r0, #0
 801592c:	f43f aecc 	beq.w	80156c8 <_strtod_l+0xb0>
 8015930:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	2b28      	cmp	r3, #40	; 0x28
 8015936:	d12f      	bne.n	8015998 <_strtod_l+0x380>
 8015938:	4996      	ldr	r1, [pc, #600]	; (8015b94 <_strtod_l+0x57c>)
 801593a:	aa18      	add	r2, sp, #96	; 0x60
 801593c:	a815      	add	r0, sp, #84	; 0x54
 801593e:	f001 fa2b 	bl	8016d98 <__hexnan>
 8015942:	2805      	cmp	r0, #5
 8015944:	d128      	bne.n	8015998 <_strtod_l+0x380>
 8015946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801594c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015950:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8015954:	e69b      	b.n	801568e <_strtod_l+0x76>
 8015956:	9f08      	ldr	r7, [sp, #32]
 8015958:	210a      	movs	r1, #10
 801595a:	fb01 2107 	mla	r1, r1, r7, r2
 801595e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015962:	9208      	str	r2, [sp, #32]
 8015964:	e7b5      	b.n	80158d2 <_strtod_l+0x2ba>
 8015966:	2a6e      	cmp	r2, #110	; 0x6e
 8015968:	e7d9      	b.n	801591e <_strtod_l+0x306>
 801596a:	498b      	ldr	r1, [pc, #556]	; (8015b98 <_strtod_l+0x580>)
 801596c:	a815      	add	r0, sp, #84	; 0x54
 801596e:	f001 f9ff 	bl	8016d70 <__match>
 8015972:	2800      	cmp	r0, #0
 8015974:	f43f aea8 	beq.w	80156c8 <_strtod_l+0xb0>
 8015978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801597a:	4988      	ldr	r1, [pc, #544]	; (8015b9c <_strtod_l+0x584>)
 801597c:	3b01      	subs	r3, #1
 801597e:	a815      	add	r0, sp, #84	; 0x54
 8015980:	9315      	str	r3, [sp, #84]	; 0x54
 8015982:	f001 f9f5 	bl	8016d70 <__match>
 8015986:	b910      	cbnz	r0, 801598e <_strtod_l+0x376>
 8015988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801598a:	3301      	adds	r3, #1
 801598c:	9315      	str	r3, [sp, #84]	; 0x54
 801598e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8015bac <_strtod_l+0x594>
 8015992:	f04f 0800 	mov.w	r8, #0
 8015996:	e67a      	b.n	801568e <_strtod_l+0x76>
 8015998:	4881      	ldr	r0, [pc, #516]	; (8015ba0 <_strtod_l+0x588>)
 801599a:	f000 fee5 	bl	8016768 <nan>
 801599e:	ec59 8b10 	vmov	r8, r9, d0
 80159a2:	e674      	b.n	801568e <_strtod_l+0x76>
 80159a4:	9b05      	ldr	r3, [sp, #20]
 80159a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159a8:	1afb      	subs	r3, r7, r3
 80159aa:	f1bb 0f00 	cmp.w	fp, #0
 80159ae:	bf08      	it	eq
 80159b0:	46b3      	moveq	fp, r6
 80159b2:	2e10      	cmp	r6, #16
 80159b4:	9308      	str	r3, [sp, #32]
 80159b6:	4635      	mov	r5, r6
 80159b8:	bfa8      	it	ge
 80159ba:	2510      	movge	r5, #16
 80159bc:	f7ea fdba 	bl	8000534 <__aeabi_ui2d>
 80159c0:	2e09      	cmp	r6, #9
 80159c2:	4680      	mov	r8, r0
 80159c4:	4689      	mov	r9, r1
 80159c6:	dd13      	ble.n	80159f0 <_strtod_l+0x3d8>
 80159c8:	4b76      	ldr	r3, [pc, #472]	; (8015ba4 <_strtod_l+0x58c>)
 80159ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80159ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80159d2:	f7ea fe29 	bl	8000628 <__aeabi_dmul>
 80159d6:	4680      	mov	r8, r0
 80159d8:	4650      	mov	r0, sl
 80159da:	4689      	mov	r9, r1
 80159dc:	f7ea fdaa 	bl	8000534 <__aeabi_ui2d>
 80159e0:	4602      	mov	r2, r0
 80159e2:	460b      	mov	r3, r1
 80159e4:	4640      	mov	r0, r8
 80159e6:	4649      	mov	r1, r9
 80159e8:	f7ea fc68 	bl	80002bc <__adddf3>
 80159ec:	4680      	mov	r8, r0
 80159ee:	4689      	mov	r9, r1
 80159f0:	2e0f      	cmp	r6, #15
 80159f2:	dc38      	bgt.n	8015a66 <_strtod_l+0x44e>
 80159f4:	9b08      	ldr	r3, [sp, #32]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	f43f ae49 	beq.w	801568e <_strtod_l+0x76>
 80159fc:	dd24      	ble.n	8015a48 <_strtod_l+0x430>
 80159fe:	2b16      	cmp	r3, #22
 8015a00:	dc0b      	bgt.n	8015a1a <_strtod_l+0x402>
 8015a02:	4968      	ldr	r1, [pc, #416]	; (8015ba4 <_strtod_l+0x58c>)
 8015a04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a0c:	4642      	mov	r2, r8
 8015a0e:	464b      	mov	r3, r9
 8015a10:	f7ea fe0a 	bl	8000628 <__aeabi_dmul>
 8015a14:	4680      	mov	r8, r0
 8015a16:	4689      	mov	r9, r1
 8015a18:	e639      	b.n	801568e <_strtod_l+0x76>
 8015a1a:	9a08      	ldr	r2, [sp, #32]
 8015a1c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015a20:	4293      	cmp	r3, r2
 8015a22:	db20      	blt.n	8015a66 <_strtod_l+0x44e>
 8015a24:	4c5f      	ldr	r4, [pc, #380]	; (8015ba4 <_strtod_l+0x58c>)
 8015a26:	f1c6 060f 	rsb	r6, r6, #15
 8015a2a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015a2e:	4642      	mov	r2, r8
 8015a30:	464b      	mov	r3, r9
 8015a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a36:	f7ea fdf7 	bl	8000628 <__aeabi_dmul>
 8015a3a:	9b08      	ldr	r3, [sp, #32]
 8015a3c:	1b9e      	subs	r6, r3, r6
 8015a3e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015a42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a46:	e7e3      	b.n	8015a10 <_strtod_l+0x3f8>
 8015a48:	9b08      	ldr	r3, [sp, #32]
 8015a4a:	3316      	adds	r3, #22
 8015a4c:	db0b      	blt.n	8015a66 <_strtod_l+0x44e>
 8015a4e:	9b05      	ldr	r3, [sp, #20]
 8015a50:	1bdf      	subs	r7, r3, r7
 8015a52:	4b54      	ldr	r3, [pc, #336]	; (8015ba4 <_strtod_l+0x58c>)
 8015a54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a5c:	4640      	mov	r0, r8
 8015a5e:	4649      	mov	r1, r9
 8015a60:	f7ea ff0c 	bl	800087c <__aeabi_ddiv>
 8015a64:	e7d6      	b.n	8015a14 <_strtod_l+0x3fc>
 8015a66:	9b08      	ldr	r3, [sp, #32]
 8015a68:	1b75      	subs	r5, r6, r5
 8015a6a:	441d      	add	r5, r3
 8015a6c:	2d00      	cmp	r5, #0
 8015a6e:	dd70      	ble.n	8015b52 <_strtod_l+0x53a>
 8015a70:	f015 030f 	ands.w	r3, r5, #15
 8015a74:	d00a      	beq.n	8015a8c <_strtod_l+0x474>
 8015a76:	494b      	ldr	r1, [pc, #300]	; (8015ba4 <_strtod_l+0x58c>)
 8015a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015a7c:	4642      	mov	r2, r8
 8015a7e:	464b      	mov	r3, r9
 8015a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a84:	f7ea fdd0 	bl	8000628 <__aeabi_dmul>
 8015a88:	4680      	mov	r8, r0
 8015a8a:	4689      	mov	r9, r1
 8015a8c:	f035 050f 	bics.w	r5, r5, #15
 8015a90:	d04d      	beq.n	8015b2e <_strtod_l+0x516>
 8015a92:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015a96:	dd22      	ble.n	8015ade <_strtod_l+0x4c6>
 8015a98:	2500      	movs	r5, #0
 8015a9a:	46ab      	mov	fp, r5
 8015a9c:	9509      	str	r5, [sp, #36]	; 0x24
 8015a9e:	9505      	str	r5, [sp, #20]
 8015aa0:	2322      	movs	r3, #34	; 0x22
 8015aa2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8015bac <_strtod_l+0x594>
 8015aa6:	6023      	str	r3, [r4, #0]
 8015aa8:	f04f 0800 	mov.w	r8, #0
 8015aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	f43f aded 	beq.w	801568e <_strtod_l+0x76>
 8015ab4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	f001 fb08 	bl	80170cc <_Bfree>
 8015abc:	9905      	ldr	r1, [sp, #20]
 8015abe:	4620      	mov	r0, r4
 8015ac0:	f001 fb04 	bl	80170cc <_Bfree>
 8015ac4:	4659      	mov	r1, fp
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f001 fb00 	bl	80170cc <_Bfree>
 8015acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ace:	4620      	mov	r0, r4
 8015ad0:	f001 fafc 	bl	80170cc <_Bfree>
 8015ad4:	4629      	mov	r1, r5
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	f001 faf8 	bl	80170cc <_Bfree>
 8015adc:	e5d7      	b.n	801568e <_strtod_l+0x76>
 8015ade:	4b32      	ldr	r3, [pc, #200]	; (8015ba8 <_strtod_l+0x590>)
 8015ae0:	9304      	str	r3, [sp, #16]
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	112d      	asrs	r5, r5, #4
 8015ae6:	4640      	mov	r0, r8
 8015ae8:	4649      	mov	r1, r9
 8015aea:	469a      	mov	sl, r3
 8015aec:	2d01      	cmp	r5, #1
 8015aee:	dc21      	bgt.n	8015b34 <_strtod_l+0x51c>
 8015af0:	b10b      	cbz	r3, 8015af6 <_strtod_l+0x4de>
 8015af2:	4680      	mov	r8, r0
 8015af4:	4689      	mov	r9, r1
 8015af6:	492c      	ldr	r1, [pc, #176]	; (8015ba8 <_strtod_l+0x590>)
 8015af8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015afc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015b00:	4642      	mov	r2, r8
 8015b02:	464b      	mov	r3, r9
 8015b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b08:	f7ea fd8e 	bl	8000628 <__aeabi_dmul>
 8015b0c:	4b27      	ldr	r3, [pc, #156]	; (8015bac <_strtod_l+0x594>)
 8015b0e:	460a      	mov	r2, r1
 8015b10:	400b      	ands	r3, r1
 8015b12:	4927      	ldr	r1, [pc, #156]	; (8015bb0 <_strtod_l+0x598>)
 8015b14:	428b      	cmp	r3, r1
 8015b16:	4680      	mov	r8, r0
 8015b18:	d8be      	bhi.n	8015a98 <_strtod_l+0x480>
 8015b1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015b1e:	428b      	cmp	r3, r1
 8015b20:	bf86      	itte	hi
 8015b22:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015bb4 <_strtod_l+0x59c>
 8015b26:	f04f 38ff 	movhi.w	r8, #4294967295
 8015b2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015b2e:	2300      	movs	r3, #0
 8015b30:	9304      	str	r3, [sp, #16]
 8015b32:	e07b      	b.n	8015c2c <_strtod_l+0x614>
 8015b34:	07ea      	lsls	r2, r5, #31
 8015b36:	d505      	bpl.n	8015b44 <_strtod_l+0x52c>
 8015b38:	9b04      	ldr	r3, [sp, #16]
 8015b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b3e:	f7ea fd73 	bl	8000628 <__aeabi_dmul>
 8015b42:	2301      	movs	r3, #1
 8015b44:	9a04      	ldr	r2, [sp, #16]
 8015b46:	3208      	adds	r2, #8
 8015b48:	f10a 0a01 	add.w	sl, sl, #1
 8015b4c:	106d      	asrs	r5, r5, #1
 8015b4e:	9204      	str	r2, [sp, #16]
 8015b50:	e7cc      	b.n	8015aec <_strtod_l+0x4d4>
 8015b52:	d0ec      	beq.n	8015b2e <_strtod_l+0x516>
 8015b54:	426d      	negs	r5, r5
 8015b56:	f015 020f 	ands.w	r2, r5, #15
 8015b5a:	d00a      	beq.n	8015b72 <_strtod_l+0x55a>
 8015b5c:	4b11      	ldr	r3, [pc, #68]	; (8015ba4 <_strtod_l+0x58c>)
 8015b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b62:	4640      	mov	r0, r8
 8015b64:	4649      	mov	r1, r9
 8015b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6a:	f7ea fe87 	bl	800087c <__aeabi_ddiv>
 8015b6e:	4680      	mov	r8, r0
 8015b70:	4689      	mov	r9, r1
 8015b72:	112d      	asrs	r5, r5, #4
 8015b74:	d0db      	beq.n	8015b2e <_strtod_l+0x516>
 8015b76:	2d1f      	cmp	r5, #31
 8015b78:	dd1e      	ble.n	8015bb8 <_strtod_l+0x5a0>
 8015b7a:	2500      	movs	r5, #0
 8015b7c:	46ab      	mov	fp, r5
 8015b7e:	9509      	str	r5, [sp, #36]	; 0x24
 8015b80:	9505      	str	r5, [sp, #20]
 8015b82:	2322      	movs	r3, #34	; 0x22
 8015b84:	f04f 0800 	mov.w	r8, #0
 8015b88:	f04f 0900 	mov.w	r9, #0
 8015b8c:	6023      	str	r3, [r4, #0]
 8015b8e:	e78d      	b.n	8015aac <_strtod_l+0x494>
 8015b90:	0801bf92 	.word	0x0801bf92
 8015b94:	0801bfac 	.word	0x0801bfac
 8015b98:	0801bf89 	.word	0x0801bf89
 8015b9c:	0801bf8c 	.word	0x0801bf8c
 8015ba0:	0801bf86 	.word	0x0801bf86
 8015ba4:	0801c200 	.word	0x0801c200
 8015ba8:	0801c1d8 	.word	0x0801c1d8
 8015bac:	7ff00000 	.word	0x7ff00000
 8015bb0:	7ca00000 	.word	0x7ca00000
 8015bb4:	7fefffff 	.word	0x7fefffff
 8015bb8:	f015 0310 	ands.w	r3, r5, #16
 8015bbc:	bf18      	it	ne
 8015bbe:	236a      	movne	r3, #106	; 0x6a
 8015bc0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015f64 <_strtod_l+0x94c>
 8015bc4:	9304      	str	r3, [sp, #16]
 8015bc6:	4640      	mov	r0, r8
 8015bc8:	4649      	mov	r1, r9
 8015bca:	2300      	movs	r3, #0
 8015bcc:	07ea      	lsls	r2, r5, #31
 8015bce:	d504      	bpl.n	8015bda <_strtod_l+0x5c2>
 8015bd0:	e9da 2300 	ldrd	r2, r3, [sl]
 8015bd4:	f7ea fd28 	bl	8000628 <__aeabi_dmul>
 8015bd8:	2301      	movs	r3, #1
 8015bda:	106d      	asrs	r5, r5, #1
 8015bdc:	f10a 0a08 	add.w	sl, sl, #8
 8015be0:	d1f4      	bne.n	8015bcc <_strtod_l+0x5b4>
 8015be2:	b10b      	cbz	r3, 8015be8 <_strtod_l+0x5d0>
 8015be4:	4680      	mov	r8, r0
 8015be6:	4689      	mov	r9, r1
 8015be8:	9b04      	ldr	r3, [sp, #16]
 8015bea:	b1bb      	cbz	r3, 8015c1c <_strtod_l+0x604>
 8015bec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015bf0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	4649      	mov	r1, r9
 8015bf8:	dd10      	ble.n	8015c1c <_strtod_l+0x604>
 8015bfa:	2b1f      	cmp	r3, #31
 8015bfc:	f340 811e 	ble.w	8015e3c <_strtod_l+0x824>
 8015c00:	2b34      	cmp	r3, #52	; 0x34
 8015c02:	bfde      	ittt	le
 8015c04:	f04f 33ff 	movle.w	r3, #4294967295
 8015c08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015c0c:	4093      	lslle	r3, r2
 8015c0e:	f04f 0800 	mov.w	r8, #0
 8015c12:	bfcc      	ite	gt
 8015c14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015c18:	ea03 0901 	andle.w	r9, r3, r1
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	2300      	movs	r3, #0
 8015c20:	4640      	mov	r0, r8
 8015c22:	4649      	mov	r1, r9
 8015c24:	f7ea ff68 	bl	8000af8 <__aeabi_dcmpeq>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	d1a6      	bne.n	8015b7a <_strtod_l+0x562>
 8015c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c32:	4633      	mov	r3, r6
 8015c34:	465a      	mov	r2, fp
 8015c36:	4620      	mov	r0, r4
 8015c38:	f001 fab0 	bl	801719c <__s2b>
 8015c3c:	9009      	str	r0, [sp, #36]	; 0x24
 8015c3e:	2800      	cmp	r0, #0
 8015c40:	f43f af2a 	beq.w	8015a98 <_strtod_l+0x480>
 8015c44:	9a08      	ldr	r2, [sp, #32]
 8015c46:	9b05      	ldr	r3, [sp, #20]
 8015c48:	2a00      	cmp	r2, #0
 8015c4a:	eba3 0307 	sub.w	r3, r3, r7
 8015c4e:	bfa8      	it	ge
 8015c50:	2300      	movge	r3, #0
 8015c52:	930c      	str	r3, [sp, #48]	; 0x30
 8015c54:	2500      	movs	r5, #0
 8015c56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8015c5c:	46ab      	mov	fp, r5
 8015c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c60:	4620      	mov	r0, r4
 8015c62:	6859      	ldr	r1, [r3, #4]
 8015c64:	f001 f9f2 	bl	801704c <_Balloc>
 8015c68:	9005      	str	r0, [sp, #20]
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	f43f af18 	beq.w	8015aa0 <_strtod_l+0x488>
 8015c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c72:	691a      	ldr	r2, [r3, #16]
 8015c74:	3202      	adds	r2, #2
 8015c76:	f103 010c 	add.w	r1, r3, #12
 8015c7a:	0092      	lsls	r2, r2, #2
 8015c7c:	300c      	adds	r0, #12
 8015c7e:	f000 fd62 	bl	8016746 <memcpy>
 8015c82:	ec49 8b10 	vmov	d0, r8, r9
 8015c86:	aa18      	add	r2, sp, #96	; 0x60
 8015c88:	a917      	add	r1, sp, #92	; 0x5c
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f001 fdba 	bl	8017804 <__d2b>
 8015c90:	ec49 8b18 	vmov	d8, r8, r9
 8015c94:	9016      	str	r0, [sp, #88]	; 0x58
 8015c96:	2800      	cmp	r0, #0
 8015c98:	f43f af02 	beq.w	8015aa0 <_strtod_l+0x488>
 8015c9c:	2101      	movs	r1, #1
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f001 fb14 	bl	80172cc <__i2b>
 8015ca4:	4683      	mov	fp, r0
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	f43f aefa 	beq.w	8015aa0 <_strtod_l+0x488>
 8015cac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015cae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015cb0:	2e00      	cmp	r6, #0
 8015cb2:	bfab      	itete	ge
 8015cb4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015cb6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015cb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015cba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015cbe:	bfac      	ite	ge
 8015cc0:	eb06 0a03 	addge.w	sl, r6, r3
 8015cc4:	1b9f      	sublt	r7, r3, r6
 8015cc6:	9b04      	ldr	r3, [sp, #16]
 8015cc8:	1af6      	subs	r6, r6, r3
 8015cca:	4416      	add	r6, r2
 8015ccc:	4ba0      	ldr	r3, [pc, #640]	; (8015f50 <_strtod_l+0x938>)
 8015cce:	3e01      	subs	r6, #1
 8015cd0:	429e      	cmp	r6, r3
 8015cd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015cd6:	f280 80c4 	bge.w	8015e62 <_strtod_l+0x84a>
 8015cda:	1b9b      	subs	r3, r3, r6
 8015cdc:	2b1f      	cmp	r3, #31
 8015cde:	eba2 0203 	sub.w	r2, r2, r3
 8015ce2:	f04f 0101 	mov.w	r1, #1
 8015ce6:	f300 80b0 	bgt.w	8015e4a <_strtod_l+0x832>
 8015cea:	fa01 f303 	lsl.w	r3, r1, r3
 8015cee:	930e      	str	r3, [sp, #56]	; 0x38
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8015cf4:	eb0a 0602 	add.w	r6, sl, r2
 8015cf8:	9b04      	ldr	r3, [sp, #16]
 8015cfa:	45b2      	cmp	sl, r6
 8015cfc:	4417      	add	r7, r2
 8015cfe:	441f      	add	r7, r3
 8015d00:	4653      	mov	r3, sl
 8015d02:	bfa8      	it	ge
 8015d04:	4633      	movge	r3, r6
 8015d06:	42bb      	cmp	r3, r7
 8015d08:	bfa8      	it	ge
 8015d0a:	463b      	movge	r3, r7
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	bfc2      	ittt	gt
 8015d10:	1af6      	subgt	r6, r6, r3
 8015d12:	1aff      	subgt	r7, r7, r3
 8015d14:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	dd17      	ble.n	8015d4e <_strtod_l+0x736>
 8015d1e:	4659      	mov	r1, fp
 8015d20:	461a      	mov	r2, r3
 8015d22:	4620      	mov	r0, r4
 8015d24:	f001 fb92 	bl	801744c <__pow5mult>
 8015d28:	4683      	mov	fp, r0
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	f43f aeb8 	beq.w	8015aa0 <_strtod_l+0x488>
 8015d30:	4601      	mov	r1, r0
 8015d32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015d34:	4620      	mov	r0, r4
 8015d36:	f001 fadf 	bl	80172f8 <__multiply>
 8015d3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8015d3c:	2800      	cmp	r0, #0
 8015d3e:	f43f aeaf 	beq.w	8015aa0 <_strtod_l+0x488>
 8015d42:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015d44:	4620      	mov	r0, r4
 8015d46:	f001 f9c1 	bl	80170cc <_Bfree>
 8015d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d4c:	9316      	str	r3, [sp, #88]	; 0x58
 8015d4e:	2e00      	cmp	r6, #0
 8015d50:	f300 808c 	bgt.w	8015e6c <_strtod_l+0x854>
 8015d54:	9b08      	ldr	r3, [sp, #32]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	dd08      	ble.n	8015d6c <_strtod_l+0x754>
 8015d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d5c:	9905      	ldr	r1, [sp, #20]
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f001 fb74 	bl	801744c <__pow5mult>
 8015d64:	9005      	str	r0, [sp, #20]
 8015d66:	2800      	cmp	r0, #0
 8015d68:	f43f ae9a 	beq.w	8015aa0 <_strtod_l+0x488>
 8015d6c:	2f00      	cmp	r7, #0
 8015d6e:	dd08      	ble.n	8015d82 <_strtod_l+0x76a>
 8015d70:	9905      	ldr	r1, [sp, #20]
 8015d72:	463a      	mov	r2, r7
 8015d74:	4620      	mov	r0, r4
 8015d76:	f001 fbc3 	bl	8017500 <__lshift>
 8015d7a:	9005      	str	r0, [sp, #20]
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	f43f ae8f 	beq.w	8015aa0 <_strtod_l+0x488>
 8015d82:	f1ba 0f00 	cmp.w	sl, #0
 8015d86:	dd08      	ble.n	8015d9a <_strtod_l+0x782>
 8015d88:	4659      	mov	r1, fp
 8015d8a:	4652      	mov	r2, sl
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	f001 fbb7 	bl	8017500 <__lshift>
 8015d92:	4683      	mov	fp, r0
 8015d94:	2800      	cmp	r0, #0
 8015d96:	f43f ae83 	beq.w	8015aa0 <_strtod_l+0x488>
 8015d9a:	9a05      	ldr	r2, [sp, #20]
 8015d9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f001 fc36 	bl	8017610 <__mdiff>
 8015da4:	4605      	mov	r5, r0
 8015da6:	2800      	cmp	r0, #0
 8015da8:	f43f ae7a 	beq.w	8015aa0 <_strtod_l+0x488>
 8015dac:	68c3      	ldr	r3, [r0, #12]
 8015dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8015db0:	2300      	movs	r3, #0
 8015db2:	60c3      	str	r3, [r0, #12]
 8015db4:	4659      	mov	r1, fp
 8015db6:	f001 fc0f 	bl	80175d8 <__mcmp>
 8015dba:	2800      	cmp	r0, #0
 8015dbc:	da60      	bge.n	8015e80 <_strtod_l+0x868>
 8015dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dc0:	ea53 0308 	orrs.w	r3, r3, r8
 8015dc4:	f040 8084 	bne.w	8015ed0 <_strtod_l+0x8b8>
 8015dc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d17f      	bne.n	8015ed0 <_strtod_l+0x8b8>
 8015dd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015dd4:	0d1b      	lsrs	r3, r3, #20
 8015dd6:	051b      	lsls	r3, r3, #20
 8015dd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015ddc:	d978      	bls.n	8015ed0 <_strtod_l+0x8b8>
 8015dde:	696b      	ldr	r3, [r5, #20]
 8015de0:	b913      	cbnz	r3, 8015de8 <_strtod_l+0x7d0>
 8015de2:	692b      	ldr	r3, [r5, #16]
 8015de4:	2b01      	cmp	r3, #1
 8015de6:	dd73      	ble.n	8015ed0 <_strtod_l+0x8b8>
 8015de8:	4629      	mov	r1, r5
 8015dea:	2201      	movs	r2, #1
 8015dec:	4620      	mov	r0, r4
 8015dee:	f001 fb87 	bl	8017500 <__lshift>
 8015df2:	4659      	mov	r1, fp
 8015df4:	4605      	mov	r5, r0
 8015df6:	f001 fbef 	bl	80175d8 <__mcmp>
 8015dfa:	2800      	cmp	r0, #0
 8015dfc:	dd68      	ble.n	8015ed0 <_strtod_l+0x8b8>
 8015dfe:	9904      	ldr	r1, [sp, #16]
 8015e00:	4a54      	ldr	r2, [pc, #336]	; (8015f54 <_strtod_l+0x93c>)
 8015e02:	464b      	mov	r3, r9
 8015e04:	2900      	cmp	r1, #0
 8015e06:	f000 8084 	beq.w	8015f12 <_strtod_l+0x8fa>
 8015e0a:	ea02 0109 	and.w	r1, r2, r9
 8015e0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015e12:	dc7e      	bgt.n	8015f12 <_strtod_l+0x8fa>
 8015e14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015e18:	f77f aeb3 	ble.w	8015b82 <_strtod_l+0x56a>
 8015e1c:	4b4e      	ldr	r3, [pc, #312]	; (8015f58 <_strtod_l+0x940>)
 8015e1e:	4640      	mov	r0, r8
 8015e20:	4649      	mov	r1, r9
 8015e22:	2200      	movs	r2, #0
 8015e24:	f7ea fc00 	bl	8000628 <__aeabi_dmul>
 8015e28:	4b4a      	ldr	r3, [pc, #296]	; (8015f54 <_strtod_l+0x93c>)
 8015e2a:	400b      	ands	r3, r1
 8015e2c:	4680      	mov	r8, r0
 8015e2e:	4689      	mov	r9, r1
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	f47f ae3f 	bne.w	8015ab4 <_strtod_l+0x49c>
 8015e36:	2322      	movs	r3, #34	; 0x22
 8015e38:	6023      	str	r3, [r4, #0]
 8015e3a:	e63b      	b.n	8015ab4 <_strtod_l+0x49c>
 8015e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e40:	fa02 f303 	lsl.w	r3, r2, r3
 8015e44:	ea03 0808 	and.w	r8, r3, r8
 8015e48:	e6e8      	b.n	8015c1c <_strtod_l+0x604>
 8015e4a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015e4e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015e52:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015e56:	36e2      	adds	r6, #226	; 0xe2
 8015e58:	fa01 f306 	lsl.w	r3, r1, r6
 8015e5c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015e60:	e748      	b.n	8015cf4 <_strtod_l+0x6dc>
 8015e62:	2100      	movs	r1, #0
 8015e64:	2301      	movs	r3, #1
 8015e66:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015e6a:	e743      	b.n	8015cf4 <_strtod_l+0x6dc>
 8015e6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015e6e:	4632      	mov	r2, r6
 8015e70:	4620      	mov	r0, r4
 8015e72:	f001 fb45 	bl	8017500 <__lshift>
 8015e76:	9016      	str	r0, [sp, #88]	; 0x58
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	f47f af6b 	bne.w	8015d54 <_strtod_l+0x73c>
 8015e7e:	e60f      	b.n	8015aa0 <_strtod_l+0x488>
 8015e80:	46ca      	mov	sl, r9
 8015e82:	d171      	bne.n	8015f68 <_strtod_l+0x950>
 8015e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e8a:	b352      	cbz	r2, 8015ee2 <_strtod_l+0x8ca>
 8015e8c:	4a33      	ldr	r2, [pc, #204]	; (8015f5c <_strtod_l+0x944>)
 8015e8e:	4293      	cmp	r3, r2
 8015e90:	d12a      	bne.n	8015ee8 <_strtod_l+0x8d0>
 8015e92:	9b04      	ldr	r3, [sp, #16]
 8015e94:	4641      	mov	r1, r8
 8015e96:	b1fb      	cbz	r3, 8015ed8 <_strtod_l+0x8c0>
 8015e98:	4b2e      	ldr	r3, [pc, #184]	; (8015f54 <_strtod_l+0x93c>)
 8015e9a:	ea09 0303 	and.w	r3, r9, r3
 8015e9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ea6:	d81a      	bhi.n	8015ede <_strtod_l+0x8c6>
 8015ea8:	0d1b      	lsrs	r3, r3, #20
 8015eaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015eae:	fa02 f303 	lsl.w	r3, r2, r3
 8015eb2:	4299      	cmp	r1, r3
 8015eb4:	d118      	bne.n	8015ee8 <_strtod_l+0x8d0>
 8015eb6:	4b2a      	ldr	r3, [pc, #168]	; (8015f60 <_strtod_l+0x948>)
 8015eb8:	459a      	cmp	sl, r3
 8015eba:	d102      	bne.n	8015ec2 <_strtod_l+0x8aa>
 8015ebc:	3101      	adds	r1, #1
 8015ebe:	f43f adef 	beq.w	8015aa0 <_strtod_l+0x488>
 8015ec2:	4b24      	ldr	r3, [pc, #144]	; (8015f54 <_strtod_l+0x93c>)
 8015ec4:	ea0a 0303 	and.w	r3, sl, r3
 8015ec8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015ecc:	f04f 0800 	mov.w	r8, #0
 8015ed0:	9b04      	ldr	r3, [sp, #16]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d1a2      	bne.n	8015e1c <_strtod_l+0x804>
 8015ed6:	e5ed      	b.n	8015ab4 <_strtod_l+0x49c>
 8015ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8015edc:	e7e9      	b.n	8015eb2 <_strtod_l+0x89a>
 8015ede:	4613      	mov	r3, r2
 8015ee0:	e7e7      	b.n	8015eb2 <_strtod_l+0x89a>
 8015ee2:	ea53 0308 	orrs.w	r3, r3, r8
 8015ee6:	d08a      	beq.n	8015dfe <_strtod_l+0x7e6>
 8015ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015eea:	b1e3      	cbz	r3, 8015f26 <_strtod_l+0x90e>
 8015eec:	ea13 0f0a 	tst.w	r3, sl
 8015ef0:	d0ee      	beq.n	8015ed0 <_strtod_l+0x8b8>
 8015ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ef4:	9a04      	ldr	r2, [sp, #16]
 8015ef6:	4640      	mov	r0, r8
 8015ef8:	4649      	mov	r1, r9
 8015efa:	b1c3      	cbz	r3, 8015f2e <_strtod_l+0x916>
 8015efc:	f7ff fb6d 	bl	80155da <sulp>
 8015f00:	4602      	mov	r2, r0
 8015f02:	460b      	mov	r3, r1
 8015f04:	ec51 0b18 	vmov	r0, r1, d8
 8015f08:	f7ea f9d8 	bl	80002bc <__adddf3>
 8015f0c:	4680      	mov	r8, r0
 8015f0e:	4689      	mov	r9, r1
 8015f10:	e7de      	b.n	8015ed0 <_strtod_l+0x8b8>
 8015f12:	4013      	ands	r3, r2
 8015f14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015f18:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015f1c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015f20:	f04f 38ff 	mov.w	r8, #4294967295
 8015f24:	e7d4      	b.n	8015ed0 <_strtod_l+0x8b8>
 8015f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f28:	ea13 0f08 	tst.w	r3, r8
 8015f2c:	e7e0      	b.n	8015ef0 <_strtod_l+0x8d8>
 8015f2e:	f7ff fb54 	bl	80155da <sulp>
 8015f32:	4602      	mov	r2, r0
 8015f34:	460b      	mov	r3, r1
 8015f36:	ec51 0b18 	vmov	r0, r1, d8
 8015f3a:	f7ea f9bd 	bl	80002b8 <__aeabi_dsub>
 8015f3e:	2200      	movs	r2, #0
 8015f40:	2300      	movs	r3, #0
 8015f42:	4680      	mov	r8, r0
 8015f44:	4689      	mov	r9, r1
 8015f46:	f7ea fdd7 	bl	8000af8 <__aeabi_dcmpeq>
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d0c0      	beq.n	8015ed0 <_strtod_l+0x8b8>
 8015f4e:	e618      	b.n	8015b82 <_strtod_l+0x56a>
 8015f50:	fffffc02 	.word	0xfffffc02
 8015f54:	7ff00000 	.word	0x7ff00000
 8015f58:	39500000 	.word	0x39500000
 8015f5c:	000fffff 	.word	0x000fffff
 8015f60:	7fefffff 	.word	0x7fefffff
 8015f64:	0801bfc0 	.word	0x0801bfc0
 8015f68:	4659      	mov	r1, fp
 8015f6a:	4628      	mov	r0, r5
 8015f6c:	f001 fca4 	bl	80178b8 <__ratio>
 8015f70:	ec57 6b10 	vmov	r6, r7, d0
 8015f74:	ee10 0a10 	vmov	r0, s0
 8015f78:	2200      	movs	r2, #0
 8015f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f7e:	4639      	mov	r1, r7
 8015f80:	f7ea fdce 	bl	8000b20 <__aeabi_dcmple>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	d071      	beq.n	801606c <_strtod_l+0xa54>
 8015f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d17c      	bne.n	8016088 <_strtod_l+0xa70>
 8015f8e:	f1b8 0f00 	cmp.w	r8, #0
 8015f92:	d15a      	bne.n	801604a <_strtod_l+0xa32>
 8015f94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d15d      	bne.n	8016058 <_strtod_l+0xa40>
 8015f9c:	4b90      	ldr	r3, [pc, #576]	; (80161e0 <_strtod_l+0xbc8>)
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	4639      	mov	r1, r7
 8015fa4:	f7ea fdb2 	bl	8000b0c <__aeabi_dcmplt>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d15c      	bne.n	8016066 <_strtod_l+0xa4e>
 8015fac:	4630      	mov	r0, r6
 8015fae:	4639      	mov	r1, r7
 8015fb0:	4b8c      	ldr	r3, [pc, #560]	; (80161e4 <_strtod_l+0xbcc>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f7ea fb38 	bl	8000628 <__aeabi_dmul>
 8015fb8:	4606      	mov	r6, r0
 8015fba:	460f      	mov	r7, r1
 8015fbc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015fc0:	9606      	str	r6, [sp, #24]
 8015fc2:	9307      	str	r3, [sp, #28]
 8015fc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015fc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015fcc:	4b86      	ldr	r3, [pc, #536]	; (80161e8 <_strtod_l+0xbd0>)
 8015fce:	ea0a 0303 	and.w	r3, sl, r3
 8015fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8015fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fd6:	4b85      	ldr	r3, [pc, #532]	; (80161ec <_strtod_l+0xbd4>)
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	f040 8090 	bne.w	80160fe <_strtod_l+0xae6>
 8015fde:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8015fe2:	ec49 8b10 	vmov	d0, r8, r9
 8015fe6:	f001 fb9d 	bl	8017724 <__ulp>
 8015fea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015fee:	ec51 0b10 	vmov	r0, r1, d0
 8015ff2:	f7ea fb19 	bl	8000628 <__aeabi_dmul>
 8015ff6:	4642      	mov	r2, r8
 8015ff8:	464b      	mov	r3, r9
 8015ffa:	f7ea f95f 	bl	80002bc <__adddf3>
 8015ffe:	460b      	mov	r3, r1
 8016000:	4979      	ldr	r1, [pc, #484]	; (80161e8 <_strtod_l+0xbd0>)
 8016002:	4a7b      	ldr	r2, [pc, #492]	; (80161f0 <_strtod_l+0xbd8>)
 8016004:	4019      	ands	r1, r3
 8016006:	4291      	cmp	r1, r2
 8016008:	4680      	mov	r8, r0
 801600a:	d944      	bls.n	8016096 <_strtod_l+0xa7e>
 801600c:	ee18 2a90 	vmov	r2, s17
 8016010:	4b78      	ldr	r3, [pc, #480]	; (80161f4 <_strtod_l+0xbdc>)
 8016012:	429a      	cmp	r2, r3
 8016014:	d104      	bne.n	8016020 <_strtod_l+0xa08>
 8016016:	ee18 3a10 	vmov	r3, s16
 801601a:	3301      	adds	r3, #1
 801601c:	f43f ad40 	beq.w	8015aa0 <_strtod_l+0x488>
 8016020:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80161f4 <_strtod_l+0xbdc>
 8016024:	f04f 38ff 	mov.w	r8, #4294967295
 8016028:	9916      	ldr	r1, [sp, #88]	; 0x58
 801602a:	4620      	mov	r0, r4
 801602c:	f001 f84e 	bl	80170cc <_Bfree>
 8016030:	9905      	ldr	r1, [sp, #20]
 8016032:	4620      	mov	r0, r4
 8016034:	f001 f84a 	bl	80170cc <_Bfree>
 8016038:	4659      	mov	r1, fp
 801603a:	4620      	mov	r0, r4
 801603c:	f001 f846 	bl	80170cc <_Bfree>
 8016040:	4629      	mov	r1, r5
 8016042:	4620      	mov	r0, r4
 8016044:	f001 f842 	bl	80170cc <_Bfree>
 8016048:	e609      	b.n	8015c5e <_strtod_l+0x646>
 801604a:	f1b8 0f01 	cmp.w	r8, #1
 801604e:	d103      	bne.n	8016058 <_strtod_l+0xa40>
 8016050:	f1b9 0f00 	cmp.w	r9, #0
 8016054:	f43f ad95 	beq.w	8015b82 <_strtod_l+0x56a>
 8016058:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80161b0 <_strtod_l+0xb98>
 801605c:	4f60      	ldr	r7, [pc, #384]	; (80161e0 <_strtod_l+0xbc8>)
 801605e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016062:	2600      	movs	r6, #0
 8016064:	e7ae      	b.n	8015fc4 <_strtod_l+0x9ac>
 8016066:	4f5f      	ldr	r7, [pc, #380]	; (80161e4 <_strtod_l+0xbcc>)
 8016068:	2600      	movs	r6, #0
 801606a:	e7a7      	b.n	8015fbc <_strtod_l+0x9a4>
 801606c:	4b5d      	ldr	r3, [pc, #372]	; (80161e4 <_strtod_l+0xbcc>)
 801606e:	4630      	mov	r0, r6
 8016070:	4639      	mov	r1, r7
 8016072:	2200      	movs	r2, #0
 8016074:	f7ea fad8 	bl	8000628 <__aeabi_dmul>
 8016078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801607a:	4606      	mov	r6, r0
 801607c:	460f      	mov	r7, r1
 801607e:	2b00      	cmp	r3, #0
 8016080:	d09c      	beq.n	8015fbc <_strtod_l+0x9a4>
 8016082:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016086:	e79d      	b.n	8015fc4 <_strtod_l+0x9ac>
 8016088:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80161b8 <_strtod_l+0xba0>
 801608c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016090:	ec57 6b17 	vmov	r6, r7, d7
 8016094:	e796      	b.n	8015fc4 <_strtod_l+0x9ac>
 8016096:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801609a:	9b04      	ldr	r3, [sp, #16]
 801609c:	46ca      	mov	sl, r9
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d1c2      	bne.n	8016028 <_strtod_l+0xa10>
 80160a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80160a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160a8:	0d1b      	lsrs	r3, r3, #20
 80160aa:	051b      	lsls	r3, r3, #20
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d1bb      	bne.n	8016028 <_strtod_l+0xa10>
 80160b0:	4630      	mov	r0, r6
 80160b2:	4639      	mov	r1, r7
 80160b4:	f7ea fdb2 	bl	8000c1c <__aeabi_d2lz>
 80160b8:	f7ea fa88 	bl	80005cc <__aeabi_l2d>
 80160bc:	4602      	mov	r2, r0
 80160be:	460b      	mov	r3, r1
 80160c0:	4630      	mov	r0, r6
 80160c2:	4639      	mov	r1, r7
 80160c4:	f7ea f8f8 	bl	80002b8 <__aeabi_dsub>
 80160c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80160ce:	ea43 0308 	orr.w	r3, r3, r8
 80160d2:	4313      	orrs	r3, r2
 80160d4:	4606      	mov	r6, r0
 80160d6:	460f      	mov	r7, r1
 80160d8:	d054      	beq.n	8016184 <_strtod_l+0xb6c>
 80160da:	a339      	add	r3, pc, #228	; (adr r3, 80161c0 <_strtod_l+0xba8>)
 80160dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e0:	f7ea fd14 	bl	8000b0c <__aeabi_dcmplt>
 80160e4:	2800      	cmp	r0, #0
 80160e6:	f47f ace5 	bne.w	8015ab4 <_strtod_l+0x49c>
 80160ea:	a337      	add	r3, pc, #220	; (adr r3, 80161c8 <_strtod_l+0xbb0>)
 80160ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f0:	4630      	mov	r0, r6
 80160f2:	4639      	mov	r1, r7
 80160f4:	f7ea fd28 	bl	8000b48 <__aeabi_dcmpgt>
 80160f8:	2800      	cmp	r0, #0
 80160fa:	d095      	beq.n	8016028 <_strtod_l+0xa10>
 80160fc:	e4da      	b.n	8015ab4 <_strtod_l+0x49c>
 80160fe:	9b04      	ldr	r3, [sp, #16]
 8016100:	b333      	cbz	r3, 8016150 <_strtod_l+0xb38>
 8016102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016104:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016108:	d822      	bhi.n	8016150 <_strtod_l+0xb38>
 801610a:	a331      	add	r3, pc, #196	; (adr r3, 80161d0 <_strtod_l+0xbb8>)
 801610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016110:	4630      	mov	r0, r6
 8016112:	4639      	mov	r1, r7
 8016114:	f7ea fd04 	bl	8000b20 <__aeabi_dcmple>
 8016118:	b1a0      	cbz	r0, 8016144 <_strtod_l+0xb2c>
 801611a:	4639      	mov	r1, r7
 801611c:	4630      	mov	r0, r6
 801611e:	f7ea fd45 	bl	8000bac <__aeabi_d2uiz>
 8016122:	2801      	cmp	r0, #1
 8016124:	bf38      	it	cc
 8016126:	2001      	movcc	r0, #1
 8016128:	f7ea fa04 	bl	8000534 <__aeabi_ui2d>
 801612c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801612e:	4606      	mov	r6, r0
 8016130:	460f      	mov	r7, r1
 8016132:	bb23      	cbnz	r3, 801617e <_strtod_l+0xb66>
 8016134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016138:	9010      	str	r0, [sp, #64]	; 0x40
 801613a:	9311      	str	r3, [sp, #68]	; 0x44
 801613c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016140:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016148:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801614c:	1a9b      	subs	r3, r3, r2
 801614e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016150:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016154:	eeb0 0a48 	vmov.f32	s0, s16
 8016158:	eef0 0a68 	vmov.f32	s1, s17
 801615c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016160:	f001 fae0 	bl	8017724 <__ulp>
 8016164:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016168:	ec53 2b10 	vmov	r2, r3, d0
 801616c:	f7ea fa5c 	bl	8000628 <__aeabi_dmul>
 8016170:	ec53 2b18 	vmov	r2, r3, d8
 8016174:	f7ea f8a2 	bl	80002bc <__adddf3>
 8016178:	4680      	mov	r8, r0
 801617a:	4689      	mov	r9, r1
 801617c:	e78d      	b.n	801609a <_strtod_l+0xa82>
 801617e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016182:	e7db      	b.n	801613c <_strtod_l+0xb24>
 8016184:	a314      	add	r3, pc, #80	; (adr r3, 80161d8 <_strtod_l+0xbc0>)
 8016186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618a:	f7ea fcbf 	bl	8000b0c <__aeabi_dcmplt>
 801618e:	e7b3      	b.n	80160f8 <_strtod_l+0xae0>
 8016190:	2300      	movs	r3, #0
 8016192:	930a      	str	r3, [sp, #40]	; 0x28
 8016194:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016198:	6013      	str	r3, [r2, #0]
 801619a:	f7ff ba7c 	b.w	8015696 <_strtod_l+0x7e>
 801619e:	2a65      	cmp	r2, #101	; 0x65
 80161a0:	f43f ab75 	beq.w	801588e <_strtod_l+0x276>
 80161a4:	2a45      	cmp	r2, #69	; 0x45
 80161a6:	f43f ab72 	beq.w	801588e <_strtod_l+0x276>
 80161aa:	2301      	movs	r3, #1
 80161ac:	f7ff bbaa 	b.w	8015904 <_strtod_l+0x2ec>
 80161b0:	00000000 	.word	0x00000000
 80161b4:	bff00000 	.word	0xbff00000
 80161b8:	00000000 	.word	0x00000000
 80161bc:	3ff00000 	.word	0x3ff00000
 80161c0:	94a03595 	.word	0x94a03595
 80161c4:	3fdfffff 	.word	0x3fdfffff
 80161c8:	35afe535 	.word	0x35afe535
 80161cc:	3fe00000 	.word	0x3fe00000
 80161d0:	ffc00000 	.word	0xffc00000
 80161d4:	41dfffff 	.word	0x41dfffff
 80161d8:	94a03595 	.word	0x94a03595
 80161dc:	3fcfffff 	.word	0x3fcfffff
 80161e0:	3ff00000 	.word	0x3ff00000
 80161e4:	3fe00000 	.word	0x3fe00000
 80161e8:	7ff00000 	.word	0x7ff00000
 80161ec:	7fe00000 	.word	0x7fe00000
 80161f0:	7c9fffff 	.word	0x7c9fffff
 80161f4:	7fefffff 	.word	0x7fefffff

080161f8 <strtod>:
 80161f8:	460a      	mov	r2, r1
 80161fa:	4601      	mov	r1, r0
 80161fc:	4802      	ldr	r0, [pc, #8]	; (8016208 <strtod+0x10>)
 80161fe:	4b03      	ldr	r3, [pc, #12]	; (801620c <strtod+0x14>)
 8016200:	6800      	ldr	r0, [r0, #0]
 8016202:	f7ff ba09 	b.w	8015618 <_strtod_l>
 8016206:	bf00      	nop
 8016208:	20000778 	.word	0x20000778
 801620c:	200005c0 	.word	0x200005c0

08016210 <_strtol_l.constprop.0>:
 8016210:	2b01      	cmp	r3, #1
 8016212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016216:	d001      	beq.n	801621c <_strtol_l.constprop.0+0xc>
 8016218:	2b24      	cmp	r3, #36	; 0x24
 801621a:	d906      	bls.n	801622a <_strtol_l.constprop.0+0x1a>
 801621c:	f000 fa66 	bl	80166ec <__errno>
 8016220:	2316      	movs	r3, #22
 8016222:	6003      	str	r3, [r0, #0]
 8016224:	2000      	movs	r0, #0
 8016226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801622a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016310 <_strtol_l.constprop.0+0x100>
 801622e:	460d      	mov	r5, r1
 8016230:	462e      	mov	r6, r5
 8016232:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016236:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801623a:	f017 0708 	ands.w	r7, r7, #8
 801623e:	d1f7      	bne.n	8016230 <_strtol_l.constprop.0+0x20>
 8016240:	2c2d      	cmp	r4, #45	; 0x2d
 8016242:	d132      	bne.n	80162aa <_strtol_l.constprop.0+0x9a>
 8016244:	782c      	ldrb	r4, [r5, #0]
 8016246:	2701      	movs	r7, #1
 8016248:	1cb5      	adds	r5, r6, #2
 801624a:	2b00      	cmp	r3, #0
 801624c:	d05b      	beq.n	8016306 <_strtol_l.constprop.0+0xf6>
 801624e:	2b10      	cmp	r3, #16
 8016250:	d109      	bne.n	8016266 <_strtol_l.constprop.0+0x56>
 8016252:	2c30      	cmp	r4, #48	; 0x30
 8016254:	d107      	bne.n	8016266 <_strtol_l.constprop.0+0x56>
 8016256:	782c      	ldrb	r4, [r5, #0]
 8016258:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801625c:	2c58      	cmp	r4, #88	; 0x58
 801625e:	d14d      	bne.n	80162fc <_strtol_l.constprop.0+0xec>
 8016260:	786c      	ldrb	r4, [r5, #1]
 8016262:	2310      	movs	r3, #16
 8016264:	3502      	adds	r5, #2
 8016266:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801626a:	f108 38ff 	add.w	r8, r8, #4294967295
 801626e:	f04f 0e00 	mov.w	lr, #0
 8016272:	fbb8 f9f3 	udiv	r9, r8, r3
 8016276:	4676      	mov	r6, lr
 8016278:	fb03 8a19 	mls	sl, r3, r9, r8
 801627c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016280:	f1bc 0f09 	cmp.w	ip, #9
 8016284:	d816      	bhi.n	80162b4 <_strtol_l.constprop.0+0xa4>
 8016286:	4664      	mov	r4, ip
 8016288:	42a3      	cmp	r3, r4
 801628a:	dd24      	ble.n	80162d6 <_strtol_l.constprop.0+0xc6>
 801628c:	f1be 3fff 	cmp.w	lr, #4294967295
 8016290:	d008      	beq.n	80162a4 <_strtol_l.constprop.0+0x94>
 8016292:	45b1      	cmp	r9, r6
 8016294:	d31c      	bcc.n	80162d0 <_strtol_l.constprop.0+0xc0>
 8016296:	d101      	bne.n	801629c <_strtol_l.constprop.0+0x8c>
 8016298:	45a2      	cmp	sl, r4
 801629a:	db19      	blt.n	80162d0 <_strtol_l.constprop.0+0xc0>
 801629c:	fb06 4603 	mla	r6, r6, r3, r4
 80162a0:	f04f 0e01 	mov.w	lr, #1
 80162a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162a8:	e7e8      	b.n	801627c <_strtol_l.constprop.0+0x6c>
 80162aa:	2c2b      	cmp	r4, #43	; 0x2b
 80162ac:	bf04      	itt	eq
 80162ae:	782c      	ldrbeq	r4, [r5, #0]
 80162b0:	1cb5      	addeq	r5, r6, #2
 80162b2:	e7ca      	b.n	801624a <_strtol_l.constprop.0+0x3a>
 80162b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80162b8:	f1bc 0f19 	cmp.w	ip, #25
 80162bc:	d801      	bhi.n	80162c2 <_strtol_l.constprop.0+0xb2>
 80162be:	3c37      	subs	r4, #55	; 0x37
 80162c0:	e7e2      	b.n	8016288 <_strtol_l.constprop.0+0x78>
 80162c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80162c6:	f1bc 0f19 	cmp.w	ip, #25
 80162ca:	d804      	bhi.n	80162d6 <_strtol_l.constprop.0+0xc6>
 80162cc:	3c57      	subs	r4, #87	; 0x57
 80162ce:	e7db      	b.n	8016288 <_strtol_l.constprop.0+0x78>
 80162d0:	f04f 3eff 	mov.w	lr, #4294967295
 80162d4:	e7e6      	b.n	80162a4 <_strtol_l.constprop.0+0x94>
 80162d6:	f1be 3fff 	cmp.w	lr, #4294967295
 80162da:	d105      	bne.n	80162e8 <_strtol_l.constprop.0+0xd8>
 80162dc:	2322      	movs	r3, #34	; 0x22
 80162de:	6003      	str	r3, [r0, #0]
 80162e0:	4646      	mov	r6, r8
 80162e2:	b942      	cbnz	r2, 80162f6 <_strtol_l.constprop.0+0xe6>
 80162e4:	4630      	mov	r0, r6
 80162e6:	e79e      	b.n	8016226 <_strtol_l.constprop.0+0x16>
 80162e8:	b107      	cbz	r7, 80162ec <_strtol_l.constprop.0+0xdc>
 80162ea:	4276      	negs	r6, r6
 80162ec:	2a00      	cmp	r2, #0
 80162ee:	d0f9      	beq.n	80162e4 <_strtol_l.constprop.0+0xd4>
 80162f0:	f1be 0f00 	cmp.w	lr, #0
 80162f4:	d000      	beq.n	80162f8 <_strtol_l.constprop.0+0xe8>
 80162f6:	1e69      	subs	r1, r5, #1
 80162f8:	6011      	str	r1, [r2, #0]
 80162fa:	e7f3      	b.n	80162e4 <_strtol_l.constprop.0+0xd4>
 80162fc:	2430      	movs	r4, #48	; 0x30
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d1b1      	bne.n	8016266 <_strtol_l.constprop.0+0x56>
 8016302:	2308      	movs	r3, #8
 8016304:	e7af      	b.n	8016266 <_strtol_l.constprop.0+0x56>
 8016306:	2c30      	cmp	r4, #48	; 0x30
 8016308:	d0a5      	beq.n	8016256 <_strtol_l.constprop.0+0x46>
 801630a:	230a      	movs	r3, #10
 801630c:	e7ab      	b.n	8016266 <_strtol_l.constprop.0+0x56>
 801630e:	bf00      	nop
 8016310:	0801bfe9 	.word	0x0801bfe9

08016314 <strtol>:
 8016314:	4613      	mov	r3, r2
 8016316:	460a      	mov	r2, r1
 8016318:	4601      	mov	r1, r0
 801631a:	4802      	ldr	r0, [pc, #8]	; (8016324 <strtol+0x10>)
 801631c:	6800      	ldr	r0, [r0, #0]
 801631e:	f7ff bf77 	b.w	8016210 <_strtol_l.constprop.0>
 8016322:	bf00      	nop
 8016324:	20000778 	.word	0x20000778

08016328 <std>:
 8016328:	2300      	movs	r3, #0
 801632a:	b510      	push	{r4, lr}
 801632c:	4604      	mov	r4, r0
 801632e:	e9c0 3300 	strd	r3, r3, [r0]
 8016332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016336:	6083      	str	r3, [r0, #8]
 8016338:	8181      	strh	r1, [r0, #12]
 801633a:	6643      	str	r3, [r0, #100]	; 0x64
 801633c:	81c2      	strh	r2, [r0, #14]
 801633e:	6183      	str	r3, [r0, #24]
 8016340:	4619      	mov	r1, r3
 8016342:	2208      	movs	r2, #8
 8016344:	305c      	adds	r0, #92	; 0x5c
 8016346:	f000 f964 	bl	8016612 <memset>
 801634a:	4b0d      	ldr	r3, [pc, #52]	; (8016380 <std+0x58>)
 801634c:	6263      	str	r3, [r4, #36]	; 0x24
 801634e:	4b0d      	ldr	r3, [pc, #52]	; (8016384 <std+0x5c>)
 8016350:	62a3      	str	r3, [r4, #40]	; 0x28
 8016352:	4b0d      	ldr	r3, [pc, #52]	; (8016388 <std+0x60>)
 8016354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016356:	4b0d      	ldr	r3, [pc, #52]	; (801638c <std+0x64>)
 8016358:	6323      	str	r3, [r4, #48]	; 0x30
 801635a:	4b0d      	ldr	r3, [pc, #52]	; (8016390 <std+0x68>)
 801635c:	6224      	str	r4, [r4, #32]
 801635e:	429c      	cmp	r4, r3
 8016360:	d006      	beq.n	8016370 <std+0x48>
 8016362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016366:	4294      	cmp	r4, r2
 8016368:	d002      	beq.n	8016370 <std+0x48>
 801636a:	33d0      	adds	r3, #208	; 0xd0
 801636c:	429c      	cmp	r4, r3
 801636e:	d105      	bne.n	801637c <std+0x54>
 8016370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016378:	f000 b9e2 	b.w	8016740 <__retarget_lock_init_recursive>
 801637c:	bd10      	pop	{r4, pc}
 801637e:	bf00      	nop
 8016380:	08016539 	.word	0x08016539
 8016384:	0801655b 	.word	0x0801655b
 8016388:	08016593 	.word	0x08016593
 801638c:	080165b7 	.word	0x080165b7
 8016390:	20008858 	.word	0x20008858

08016394 <stdio_exit_handler>:
 8016394:	4a02      	ldr	r2, [pc, #8]	; (80163a0 <stdio_exit_handler+0xc>)
 8016396:	4903      	ldr	r1, [pc, #12]	; (80163a4 <stdio_exit_handler+0x10>)
 8016398:	4803      	ldr	r0, [pc, #12]	; (80163a8 <stdio_exit_handler+0x14>)
 801639a:	f000 b87b 	b.w	8016494 <_fwalk_sglue>
 801639e:	bf00      	nop
 80163a0:	200005b4 	.word	0x200005b4
 80163a4:	08018325 	.word	0x08018325
 80163a8:	2000072c 	.word	0x2000072c

080163ac <cleanup_stdio>:
 80163ac:	6841      	ldr	r1, [r0, #4]
 80163ae:	4b0c      	ldr	r3, [pc, #48]	; (80163e0 <cleanup_stdio+0x34>)
 80163b0:	4299      	cmp	r1, r3
 80163b2:	b510      	push	{r4, lr}
 80163b4:	4604      	mov	r4, r0
 80163b6:	d001      	beq.n	80163bc <cleanup_stdio+0x10>
 80163b8:	f001 ffb4 	bl	8018324 <_fflush_r>
 80163bc:	68a1      	ldr	r1, [r4, #8]
 80163be:	4b09      	ldr	r3, [pc, #36]	; (80163e4 <cleanup_stdio+0x38>)
 80163c0:	4299      	cmp	r1, r3
 80163c2:	d002      	beq.n	80163ca <cleanup_stdio+0x1e>
 80163c4:	4620      	mov	r0, r4
 80163c6:	f001 ffad 	bl	8018324 <_fflush_r>
 80163ca:	68e1      	ldr	r1, [r4, #12]
 80163cc:	4b06      	ldr	r3, [pc, #24]	; (80163e8 <cleanup_stdio+0x3c>)
 80163ce:	4299      	cmp	r1, r3
 80163d0:	d004      	beq.n	80163dc <cleanup_stdio+0x30>
 80163d2:	4620      	mov	r0, r4
 80163d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163d8:	f001 bfa4 	b.w	8018324 <_fflush_r>
 80163dc:	bd10      	pop	{r4, pc}
 80163de:	bf00      	nop
 80163e0:	20008858 	.word	0x20008858
 80163e4:	200088c0 	.word	0x200088c0
 80163e8:	20008928 	.word	0x20008928

080163ec <global_stdio_init.part.0>:
 80163ec:	b510      	push	{r4, lr}
 80163ee:	4b0b      	ldr	r3, [pc, #44]	; (801641c <global_stdio_init.part.0+0x30>)
 80163f0:	4c0b      	ldr	r4, [pc, #44]	; (8016420 <global_stdio_init.part.0+0x34>)
 80163f2:	4a0c      	ldr	r2, [pc, #48]	; (8016424 <global_stdio_init.part.0+0x38>)
 80163f4:	601a      	str	r2, [r3, #0]
 80163f6:	4620      	mov	r0, r4
 80163f8:	2200      	movs	r2, #0
 80163fa:	2104      	movs	r1, #4
 80163fc:	f7ff ff94 	bl	8016328 <std>
 8016400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016404:	2201      	movs	r2, #1
 8016406:	2109      	movs	r1, #9
 8016408:	f7ff ff8e 	bl	8016328 <std>
 801640c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016410:	2202      	movs	r2, #2
 8016412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016416:	2112      	movs	r1, #18
 8016418:	f7ff bf86 	b.w	8016328 <std>
 801641c:	20008990 	.word	0x20008990
 8016420:	20008858 	.word	0x20008858
 8016424:	08016395 	.word	0x08016395

08016428 <__sfp_lock_acquire>:
 8016428:	4801      	ldr	r0, [pc, #4]	; (8016430 <__sfp_lock_acquire+0x8>)
 801642a:	f000 b98a 	b.w	8016742 <__retarget_lock_acquire_recursive>
 801642e:	bf00      	nop
 8016430:	20008999 	.word	0x20008999

08016434 <__sfp_lock_release>:
 8016434:	4801      	ldr	r0, [pc, #4]	; (801643c <__sfp_lock_release+0x8>)
 8016436:	f000 b985 	b.w	8016744 <__retarget_lock_release_recursive>
 801643a:	bf00      	nop
 801643c:	20008999 	.word	0x20008999

08016440 <__sinit>:
 8016440:	b510      	push	{r4, lr}
 8016442:	4604      	mov	r4, r0
 8016444:	f7ff fff0 	bl	8016428 <__sfp_lock_acquire>
 8016448:	6a23      	ldr	r3, [r4, #32]
 801644a:	b11b      	cbz	r3, 8016454 <__sinit+0x14>
 801644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016450:	f7ff bff0 	b.w	8016434 <__sfp_lock_release>
 8016454:	4b04      	ldr	r3, [pc, #16]	; (8016468 <__sinit+0x28>)
 8016456:	6223      	str	r3, [r4, #32]
 8016458:	4b04      	ldr	r3, [pc, #16]	; (801646c <__sinit+0x2c>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d1f5      	bne.n	801644c <__sinit+0xc>
 8016460:	f7ff ffc4 	bl	80163ec <global_stdio_init.part.0>
 8016464:	e7f2      	b.n	801644c <__sinit+0xc>
 8016466:	bf00      	nop
 8016468:	080163ad 	.word	0x080163ad
 801646c:	20008990 	.word	0x20008990

08016470 <fiprintf>:
 8016470:	b40e      	push	{r1, r2, r3}
 8016472:	b503      	push	{r0, r1, lr}
 8016474:	4601      	mov	r1, r0
 8016476:	ab03      	add	r3, sp, #12
 8016478:	4805      	ldr	r0, [pc, #20]	; (8016490 <fiprintf+0x20>)
 801647a:	f853 2b04 	ldr.w	r2, [r3], #4
 801647e:	6800      	ldr	r0, [r0, #0]
 8016480:	9301      	str	r3, [sp, #4]
 8016482:	f001 fc1f 	bl	8017cc4 <_vfiprintf_r>
 8016486:	b002      	add	sp, #8
 8016488:	f85d eb04 	ldr.w	lr, [sp], #4
 801648c:	b003      	add	sp, #12
 801648e:	4770      	bx	lr
 8016490:	20000778 	.word	0x20000778

08016494 <_fwalk_sglue>:
 8016494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016498:	4607      	mov	r7, r0
 801649a:	4688      	mov	r8, r1
 801649c:	4614      	mov	r4, r2
 801649e:	2600      	movs	r6, #0
 80164a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80164a4:	f1b9 0901 	subs.w	r9, r9, #1
 80164a8:	d505      	bpl.n	80164b6 <_fwalk_sglue+0x22>
 80164aa:	6824      	ldr	r4, [r4, #0]
 80164ac:	2c00      	cmp	r4, #0
 80164ae:	d1f7      	bne.n	80164a0 <_fwalk_sglue+0xc>
 80164b0:	4630      	mov	r0, r6
 80164b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164b6:	89ab      	ldrh	r3, [r5, #12]
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	d907      	bls.n	80164cc <_fwalk_sglue+0x38>
 80164bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164c0:	3301      	adds	r3, #1
 80164c2:	d003      	beq.n	80164cc <_fwalk_sglue+0x38>
 80164c4:	4629      	mov	r1, r5
 80164c6:	4638      	mov	r0, r7
 80164c8:	47c0      	blx	r8
 80164ca:	4306      	orrs	r6, r0
 80164cc:	3568      	adds	r5, #104	; 0x68
 80164ce:	e7e9      	b.n	80164a4 <_fwalk_sglue+0x10>

080164d0 <sniprintf>:
 80164d0:	b40c      	push	{r2, r3}
 80164d2:	b530      	push	{r4, r5, lr}
 80164d4:	4b17      	ldr	r3, [pc, #92]	; (8016534 <sniprintf+0x64>)
 80164d6:	1e0c      	subs	r4, r1, #0
 80164d8:	681d      	ldr	r5, [r3, #0]
 80164da:	b09d      	sub	sp, #116	; 0x74
 80164dc:	da08      	bge.n	80164f0 <sniprintf+0x20>
 80164de:	238b      	movs	r3, #139	; 0x8b
 80164e0:	602b      	str	r3, [r5, #0]
 80164e2:	f04f 30ff 	mov.w	r0, #4294967295
 80164e6:	b01d      	add	sp, #116	; 0x74
 80164e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164ec:	b002      	add	sp, #8
 80164ee:	4770      	bx	lr
 80164f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80164f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80164f8:	bf14      	ite	ne
 80164fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80164fe:	4623      	moveq	r3, r4
 8016500:	9304      	str	r3, [sp, #16]
 8016502:	9307      	str	r3, [sp, #28]
 8016504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016508:	9002      	str	r0, [sp, #8]
 801650a:	9006      	str	r0, [sp, #24]
 801650c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016512:	ab21      	add	r3, sp, #132	; 0x84
 8016514:	a902      	add	r1, sp, #8
 8016516:	4628      	mov	r0, r5
 8016518:	9301      	str	r3, [sp, #4]
 801651a:	f001 faab 	bl	8017a74 <_svfiprintf_r>
 801651e:	1c43      	adds	r3, r0, #1
 8016520:	bfbc      	itt	lt
 8016522:	238b      	movlt	r3, #139	; 0x8b
 8016524:	602b      	strlt	r3, [r5, #0]
 8016526:	2c00      	cmp	r4, #0
 8016528:	d0dd      	beq.n	80164e6 <sniprintf+0x16>
 801652a:	9b02      	ldr	r3, [sp, #8]
 801652c:	2200      	movs	r2, #0
 801652e:	701a      	strb	r2, [r3, #0]
 8016530:	e7d9      	b.n	80164e6 <sniprintf+0x16>
 8016532:	bf00      	nop
 8016534:	20000778 	.word	0x20000778

08016538 <__sread>:
 8016538:	b510      	push	{r4, lr}
 801653a:	460c      	mov	r4, r1
 801653c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016540:	f000 f8b0 	bl	80166a4 <_read_r>
 8016544:	2800      	cmp	r0, #0
 8016546:	bfab      	itete	ge
 8016548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801654a:	89a3      	ldrhlt	r3, [r4, #12]
 801654c:	181b      	addge	r3, r3, r0
 801654e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016552:	bfac      	ite	ge
 8016554:	6563      	strge	r3, [r4, #84]	; 0x54
 8016556:	81a3      	strhlt	r3, [r4, #12]
 8016558:	bd10      	pop	{r4, pc}

0801655a <__swrite>:
 801655a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801655e:	461f      	mov	r7, r3
 8016560:	898b      	ldrh	r3, [r1, #12]
 8016562:	05db      	lsls	r3, r3, #23
 8016564:	4605      	mov	r5, r0
 8016566:	460c      	mov	r4, r1
 8016568:	4616      	mov	r6, r2
 801656a:	d505      	bpl.n	8016578 <__swrite+0x1e>
 801656c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016570:	2302      	movs	r3, #2
 8016572:	2200      	movs	r2, #0
 8016574:	f000 f884 	bl	8016680 <_lseek_r>
 8016578:	89a3      	ldrh	r3, [r4, #12]
 801657a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801657e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016582:	81a3      	strh	r3, [r4, #12]
 8016584:	4632      	mov	r2, r6
 8016586:	463b      	mov	r3, r7
 8016588:	4628      	mov	r0, r5
 801658a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801658e:	f000 b89b 	b.w	80166c8 <_write_r>

08016592 <__sseek>:
 8016592:	b510      	push	{r4, lr}
 8016594:	460c      	mov	r4, r1
 8016596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801659a:	f000 f871 	bl	8016680 <_lseek_r>
 801659e:	1c43      	adds	r3, r0, #1
 80165a0:	89a3      	ldrh	r3, [r4, #12]
 80165a2:	bf15      	itete	ne
 80165a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80165a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80165aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80165ae:	81a3      	strheq	r3, [r4, #12]
 80165b0:	bf18      	it	ne
 80165b2:	81a3      	strhne	r3, [r4, #12]
 80165b4:	bd10      	pop	{r4, pc}

080165b6 <__sclose>:
 80165b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165ba:	f000 b851 	b.w	8016660 <_close_r>

080165be <memcmp>:
 80165be:	b510      	push	{r4, lr}
 80165c0:	3901      	subs	r1, #1
 80165c2:	4402      	add	r2, r0
 80165c4:	4290      	cmp	r0, r2
 80165c6:	d101      	bne.n	80165cc <memcmp+0xe>
 80165c8:	2000      	movs	r0, #0
 80165ca:	e005      	b.n	80165d8 <memcmp+0x1a>
 80165cc:	7803      	ldrb	r3, [r0, #0]
 80165ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80165d2:	42a3      	cmp	r3, r4
 80165d4:	d001      	beq.n	80165da <memcmp+0x1c>
 80165d6:	1b18      	subs	r0, r3, r4
 80165d8:	bd10      	pop	{r4, pc}
 80165da:	3001      	adds	r0, #1
 80165dc:	e7f2      	b.n	80165c4 <memcmp+0x6>

080165de <memmove>:
 80165de:	4288      	cmp	r0, r1
 80165e0:	b510      	push	{r4, lr}
 80165e2:	eb01 0402 	add.w	r4, r1, r2
 80165e6:	d902      	bls.n	80165ee <memmove+0x10>
 80165e8:	4284      	cmp	r4, r0
 80165ea:	4623      	mov	r3, r4
 80165ec:	d807      	bhi.n	80165fe <memmove+0x20>
 80165ee:	1e43      	subs	r3, r0, #1
 80165f0:	42a1      	cmp	r1, r4
 80165f2:	d008      	beq.n	8016606 <memmove+0x28>
 80165f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165fc:	e7f8      	b.n	80165f0 <memmove+0x12>
 80165fe:	4402      	add	r2, r0
 8016600:	4601      	mov	r1, r0
 8016602:	428a      	cmp	r2, r1
 8016604:	d100      	bne.n	8016608 <memmove+0x2a>
 8016606:	bd10      	pop	{r4, pc}
 8016608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801660c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016610:	e7f7      	b.n	8016602 <memmove+0x24>

08016612 <memset>:
 8016612:	4402      	add	r2, r0
 8016614:	4603      	mov	r3, r0
 8016616:	4293      	cmp	r3, r2
 8016618:	d100      	bne.n	801661c <memset+0xa>
 801661a:	4770      	bx	lr
 801661c:	f803 1b01 	strb.w	r1, [r3], #1
 8016620:	e7f9      	b.n	8016616 <memset+0x4>

08016622 <strchr>:
 8016622:	b2c9      	uxtb	r1, r1
 8016624:	4603      	mov	r3, r0
 8016626:	f810 2b01 	ldrb.w	r2, [r0], #1
 801662a:	b11a      	cbz	r2, 8016634 <strchr+0x12>
 801662c:	428a      	cmp	r2, r1
 801662e:	d1f9      	bne.n	8016624 <strchr+0x2>
 8016630:	4618      	mov	r0, r3
 8016632:	4770      	bx	lr
 8016634:	2900      	cmp	r1, #0
 8016636:	bf18      	it	ne
 8016638:	2300      	movne	r3, #0
 801663a:	e7f9      	b.n	8016630 <strchr+0xe>

0801663c <strncmp>:
 801663c:	b510      	push	{r4, lr}
 801663e:	b16a      	cbz	r2, 801665c <strncmp+0x20>
 8016640:	3901      	subs	r1, #1
 8016642:	1884      	adds	r4, r0, r2
 8016644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016648:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801664c:	429a      	cmp	r2, r3
 801664e:	d103      	bne.n	8016658 <strncmp+0x1c>
 8016650:	42a0      	cmp	r0, r4
 8016652:	d001      	beq.n	8016658 <strncmp+0x1c>
 8016654:	2a00      	cmp	r2, #0
 8016656:	d1f5      	bne.n	8016644 <strncmp+0x8>
 8016658:	1ad0      	subs	r0, r2, r3
 801665a:	bd10      	pop	{r4, pc}
 801665c:	4610      	mov	r0, r2
 801665e:	e7fc      	b.n	801665a <strncmp+0x1e>

08016660 <_close_r>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	4d06      	ldr	r5, [pc, #24]	; (801667c <_close_r+0x1c>)
 8016664:	2300      	movs	r3, #0
 8016666:	4604      	mov	r4, r0
 8016668:	4608      	mov	r0, r1
 801666a:	602b      	str	r3, [r5, #0]
 801666c:	f7ea ff55 	bl	800151a <_close>
 8016670:	1c43      	adds	r3, r0, #1
 8016672:	d102      	bne.n	801667a <_close_r+0x1a>
 8016674:	682b      	ldr	r3, [r5, #0]
 8016676:	b103      	cbz	r3, 801667a <_close_r+0x1a>
 8016678:	6023      	str	r3, [r4, #0]
 801667a:	bd38      	pop	{r3, r4, r5, pc}
 801667c:	20008994 	.word	0x20008994

08016680 <_lseek_r>:
 8016680:	b538      	push	{r3, r4, r5, lr}
 8016682:	4d07      	ldr	r5, [pc, #28]	; (80166a0 <_lseek_r+0x20>)
 8016684:	4604      	mov	r4, r0
 8016686:	4608      	mov	r0, r1
 8016688:	4611      	mov	r1, r2
 801668a:	2200      	movs	r2, #0
 801668c:	602a      	str	r2, [r5, #0]
 801668e:	461a      	mov	r2, r3
 8016690:	f7ea ff6a 	bl	8001568 <_lseek>
 8016694:	1c43      	adds	r3, r0, #1
 8016696:	d102      	bne.n	801669e <_lseek_r+0x1e>
 8016698:	682b      	ldr	r3, [r5, #0]
 801669a:	b103      	cbz	r3, 801669e <_lseek_r+0x1e>
 801669c:	6023      	str	r3, [r4, #0]
 801669e:	bd38      	pop	{r3, r4, r5, pc}
 80166a0:	20008994 	.word	0x20008994

080166a4 <_read_r>:
 80166a4:	b538      	push	{r3, r4, r5, lr}
 80166a6:	4d07      	ldr	r5, [pc, #28]	; (80166c4 <_read_r+0x20>)
 80166a8:	4604      	mov	r4, r0
 80166aa:	4608      	mov	r0, r1
 80166ac:	4611      	mov	r1, r2
 80166ae:	2200      	movs	r2, #0
 80166b0:	602a      	str	r2, [r5, #0]
 80166b2:	461a      	mov	r2, r3
 80166b4:	f7ea fef8 	bl	80014a8 <_read>
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	d102      	bne.n	80166c2 <_read_r+0x1e>
 80166bc:	682b      	ldr	r3, [r5, #0]
 80166be:	b103      	cbz	r3, 80166c2 <_read_r+0x1e>
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	bd38      	pop	{r3, r4, r5, pc}
 80166c4:	20008994 	.word	0x20008994

080166c8 <_write_r>:
 80166c8:	b538      	push	{r3, r4, r5, lr}
 80166ca:	4d07      	ldr	r5, [pc, #28]	; (80166e8 <_write_r+0x20>)
 80166cc:	4604      	mov	r4, r0
 80166ce:	4608      	mov	r0, r1
 80166d0:	4611      	mov	r1, r2
 80166d2:	2200      	movs	r2, #0
 80166d4:	602a      	str	r2, [r5, #0]
 80166d6:	461a      	mov	r2, r3
 80166d8:	f7ea ff03 	bl	80014e2 <_write>
 80166dc:	1c43      	adds	r3, r0, #1
 80166de:	d102      	bne.n	80166e6 <_write_r+0x1e>
 80166e0:	682b      	ldr	r3, [r5, #0]
 80166e2:	b103      	cbz	r3, 80166e6 <_write_r+0x1e>
 80166e4:	6023      	str	r3, [r4, #0]
 80166e6:	bd38      	pop	{r3, r4, r5, pc}
 80166e8:	20008994 	.word	0x20008994

080166ec <__errno>:
 80166ec:	4b01      	ldr	r3, [pc, #4]	; (80166f4 <__errno+0x8>)
 80166ee:	6818      	ldr	r0, [r3, #0]
 80166f0:	4770      	bx	lr
 80166f2:	bf00      	nop
 80166f4:	20000778 	.word	0x20000778

080166f8 <__libc_init_array>:
 80166f8:	b570      	push	{r4, r5, r6, lr}
 80166fa:	4d0d      	ldr	r5, [pc, #52]	; (8016730 <__libc_init_array+0x38>)
 80166fc:	4c0d      	ldr	r4, [pc, #52]	; (8016734 <__libc_init_array+0x3c>)
 80166fe:	1b64      	subs	r4, r4, r5
 8016700:	10a4      	asrs	r4, r4, #2
 8016702:	2600      	movs	r6, #0
 8016704:	42a6      	cmp	r6, r4
 8016706:	d109      	bne.n	801671c <__libc_init_array+0x24>
 8016708:	4d0b      	ldr	r5, [pc, #44]	; (8016738 <__libc_init_array+0x40>)
 801670a:	4c0c      	ldr	r4, [pc, #48]	; (801673c <__libc_init_array+0x44>)
 801670c:	f001 fff6 	bl	80186fc <_init>
 8016710:	1b64      	subs	r4, r4, r5
 8016712:	10a4      	asrs	r4, r4, #2
 8016714:	2600      	movs	r6, #0
 8016716:	42a6      	cmp	r6, r4
 8016718:	d105      	bne.n	8016726 <__libc_init_array+0x2e>
 801671a:	bd70      	pop	{r4, r5, r6, pc}
 801671c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016720:	4798      	blx	r3
 8016722:	3601      	adds	r6, #1
 8016724:	e7ee      	b.n	8016704 <__libc_init_array+0xc>
 8016726:	f855 3b04 	ldr.w	r3, [r5], #4
 801672a:	4798      	blx	r3
 801672c:	3601      	adds	r6, #1
 801672e:	e7f2      	b.n	8016716 <__libc_init_array+0x1e>
 8016730:	0801c310 	.word	0x0801c310
 8016734:	0801c310 	.word	0x0801c310
 8016738:	0801c310 	.word	0x0801c310
 801673c:	0801c314 	.word	0x0801c314

08016740 <__retarget_lock_init_recursive>:
 8016740:	4770      	bx	lr

08016742 <__retarget_lock_acquire_recursive>:
 8016742:	4770      	bx	lr

08016744 <__retarget_lock_release_recursive>:
 8016744:	4770      	bx	lr

08016746 <memcpy>:
 8016746:	440a      	add	r2, r1
 8016748:	4291      	cmp	r1, r2
 801674a:	f100 33ff 	add.w	r3, r0, #4294967295
 801674e:	d100      	bne.n	8016752 <memcpy+0xc>
 8016750:	4770      	bx	lr
 8016752:	b510      	push	{r4, lr}
 8016754:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016758:	f803 4f01 	strb.w	r4, [r3, #1]!
 801675c:	4291      	cmp	r1, r2
 801675e:	d1f9      	bne.n	8016754 <memcpy+0xe>
 8016760:	bd10      	pop	{r4, pc}
 8016762:	0000      	movs	r0, r0
 8016764:	0000      	movs	r0, r0
	...

08016768 <nan>:
 8016768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016770 <nan+0x8>
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop
 8016770:	00000000 	.word	0x00000000
 8016774:	7ff80000 	.word	0x7ff80000

08016778 <abort>:
 8016778:	b508      	push	{r3, lr}
 801677a:	2006      	movs	r0, #6
 801677c:	f001 feb8 	bl	80184f0 <raise>
 8016780:	2001      	movs	r0, #1
 8016782:	f7ea fe87 	bl	8001494 <_exit>
	...

08016788 <_free_r>:
 8016788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801678a:	2900      	cmp	r1, #0
 801678c:	d044      	beq.n	8016818 <_free_r+0x90>
 801678e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016792:	9001      	str	r0, [sp, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	f1a1 0404 	sub.w	r4, r1, #4
 801679a:	bfb8      	it	lt
 801679c:	18e4      	addlt	r4, r4, r3
 801679e:	f000 fc49 	bl	8017034 <__malloc_lock>
 80167a2:	4a1e      	ldr	r2, [pc, #120]	; (801681c <_free_r+0x94>)
 80167a4:	9801      	ldr	r0, [sp, #4]
 80167a6:	6813      	ldr	r3, [r2, #0]
 80167a8:	b933      	cbnz	r3, 80167b8 <_free_r+0x30>
 80167aa:	6063      	str	r3, [r4, #4]
 80167ac:	6014      	str	r4, [r2, #0]
 80167ae:	b003      	add	sp, #12
 80167b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167b4:	f000 bc44 	b.w	8017040 <__malloc_unlock>
 80167b8:	42a3      	cmp	r3, r4
 80167ba:	d908      	bls.n	80167ce <_free_r+0x46>
 80167bc:	6825      	ldr	r5, [r4, #0]
 80167be:	1961      	adds	r1, r4, r5
 80167c0:	428b      	cmp	r3, r1
 80167c2:	bf01      	itttt	eq
 80167c4:	6819      	ldreq	r1, [r3, #0]
 80167c6:	685b      	ldreq	r3, [r3, #4]
 80167c8:	1949      	addeq	r1, r1, r5
 80167ca:	6021      	streq	r1, [r4, #0]
 80167cc:	e7ed      	b.n	80167aa <_free_r+0x22>
 80167ce:	461a      	mov	r2, r3
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	b10b      	cbz	r3, 80167d8 <_free_r+0x50>
 80167d4:	42a3      	cmp	r3, r4
 80167d6:	d9fa      	bls.n	80167ce <_free_r+0x46>
 80167d8:	6811      	ldr	r1, [r2, #0]
 80167da:	1855      	adds	r5, r2, r1
 80167dc:	42a5      	cmp	r5, r4
 80167de:	d10b      	bne.n	80167f8 <_free_r+0x70>
 80167e0:	6824      	ldr	r4, [r4, #0]
 80167e2:	4421      	add	r1, r4
 80167e4:	1854      	adds	r4, r2, r1
 80167e6:	42a3      	cmp	r3, r4
 80167e8:	6011      	str	r1, [r2, #0]
 80167ea:	d1e0      	bne.n	80167ae <_free_r+0x26>
 80167ec:	681c      	ldr	r4, [r3, #0]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	6053      	str	r3, [r2, #4]
 80167f2:	440c      	add	r4, r1
 80167f4:	6014      	str	r4, [r2, #0]
 80167f6:	e7da      	b.n	80167ae <_free_r+0x26>
 80167f8:	d902      	bls.n	8016800 <_free_r+0x78>
 80167fa:	230c      	movs	r3, #12
 80167fc:	6003      	str	r3, [r0, #0]
 80167fe:	e7d6      	b.n	80167ae <_free_r+0x26>
 8016800:	6825      	ldr	r5, [r4, #0]
 8016802:	1961      	adds	r1, r4, r5
 8016804:	428b      	cmp	r3, r1
 8016806:	bf04      	itt	eq
 8016808:	6819      	ldreq	r1, [r3, #0]
 801680a:	685b      	ldreq	r3, [r3, #4]
 801680c:	6063      	str	r3, [r4, #4]
 801680e:	bf04      	itt	eq
 8016810:	1949      	addeq	r1, r1, r5
 8016812:	6021      	streq	r1, [r4, #0]
 8016814:	6054      	str	r4, [r2, #4]
 8016816:	e7ca      	b.n	80167ae <_free_r+0x26>
 8016818:	b003      	add	sp, #12
 801681a:	bd30      	pop	{r4, r5, pc}
 801681c:	2000899c 	.word	0x2000899c

08016820 <rshift>:
 8016820:	6903      	ldr	r3, [r0, #16]
 8016822:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801682a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801682e:	f100 0414 	add.w	r4, r0, #20
 8016832:	dd45      	ble.n	80168c0 <rshift+0xa0>
 8016834:	f011 011f 	ands.w	r1, r1, #31
 8016838:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801683c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016840:	d10c      	bne.n	801685c <rshift+0x3c>
 8016842:	f100 0710 	add.w	r7, r0, #16
 8016846:	4629      	mov	r1, r5
 8016848:	42b1      	cmp	r1, r6
 801684a:	d334      	bcc.n	80168b6 <rshift+0x96>
 801684c:	1a9b      	subs	r3, r3, r2
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	1eea      	subs	r2, r5, #3
 8016852:	4296      	cmp	r6, r2
 8016854:	bf38      	it	cc
 8016856:	2300      	movcc	r3, #0
 8016858:	4423      	add	r3, r4
 801685a:	e015      	b.n	8016888 <rshift+0x68>
 801685c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016860:	f1c1 0820 	rsb	r8, r1, #32
 8016864:	40cf      	lsrs	r7, r1
 8016866:	f105 0e04 	add.w	lr, r5, #4
 801686a:	46a1      	mov	r9, r4
 801686c:	4576      	cmp	r6, lr
 801686e:	46f4      	mov	ip, lr
 8016870:	d815      	bhi.n	801689e <rshift+0x7e>
 8016872:	1a9a      	subs	r2, r3, r2
 8016874:	0092      	lsls	r2, r2, #2
 8016876:	3a04      	subs	r2, #4
 8016878:	3501      	adds	r5, #1
 801687a:	42ae      	cmp	r6, r5
 801687c:	bf38      	it	cc
 801687e:	2200      	movcc	r2, #0
 8016880:	18a3      	adds	r3, r4, r2
 8016882:	50a7      	str	r7, [r4, r2]
 8016884:	b107      	cbz	r7, 8016888 <rshift+0x68>
 8016886:	3304      	adds	r3, #4
 8016888:	1b1a      	subs	r2, r3, r4
 801688a:	42a3      	cmp	r3, r4
 801688c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016890:	bf08      	it	eq
 8016892:	2300      	moveq	r3, #0
 8016894:	6102      	str	r2, [r0, #16]
 8016896:	bf08      	it	eq
 8016898:	6143      	streq	r3, [r0, #20]
 801689a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801689e:	f8dc c000 	ldr.w	ip, [ip]
 80168a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80168a6:	ea4c 0707 	orr.w	r7, ip, r7
 80168aa:	f849 7b04 	str.w	r7, [r9], #4
 80168ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80168b2:	40cf      	lsrs	r7, r1
 80168b4:	e7da      	b.n	801686c <rshift+0x4c>
 80168b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80168ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80168be:	e7c3      	b.n	8016848 <rshift+0x28>
 80168c0:	4623      	mov	r3, r4
 80168c2:	e7e1      	b.n	8016888 <rshift+0x68>

080168c4 <__hexdig_fun>:
 80168c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80168c8:	2b09      	cmp	r3, #9
 80168ca:	d802      	bhi.n	80168d2 <__hexdig_fun+0xe>
 80168cc:	3820      	subs	r0, #32
 80168ce:	b2c0      	uxtb	r0, r0
 80168d0:	4770      	bx	lr
 80168d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80168d6:	2b05      	cmp	r3, #5
 80168d8:	d801      	bhi.n	80168de <__hexdig_fun+0x1a>
 80168da:	3847      	subs	r0, #71	; 0x47
 80168dc:	e7f7      	b.n	80168ce <__hexdig_fun+0xa>
 80168de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80168e2:	2b05      	cmp	r3, #5
 80168e4:	d801      	bhi.n	80168ea <__hexdig_fun+0x26>
 80168e6:	3827      	subs	r0, #39	; 0x27
 80168e8:	e7f1      	b.n	80168ce <__hexdig_fun+0xa>
 80168ea:	2000      	movs	r0, #0
 80168ec:	4770      	bx	lr
	...

080168f0 <__gethex>:
 80168f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f4:	4617      	mov	r7, r2
 80168f6:	680a      	ldr	r2, [r1, #0]
 80168f8:	b085      	sub	sp, #20
 80168fa:	f102 0b02 	add.w	fp, r2, #2
 80168fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016902:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016906:	4681      	mov	r9, r0
 8016908:	468a      	mov	sl, r1
 801690a:	9302      	str	r3, [sp, #8]
 801690c:	32fe      	adds	r2, #254	; 0xfe
 801690e:	eb02 030b 	add.w	r3, r2, fp
 8016912:	46d8      	mov	r8, fp
 8016914:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016918:	9301      	str	r3, [sp, #4]
 801691a:	2830      	cmp	r0, #48	; 0x30
 801691c:	d0f7      	beq.n	801690e <__gethex+0x1e>
 801691e:	f7ff ffd1 	bl	80168c4 <__hexdig_fun>
 8016922:	4604      	mov	r4, r0
 8016924:	2800      	cmp	r0, #0
 8016926:	d138      	bne.n	801699a <__gethex+0xaa>
 8016928:	49a7      	ldr	r1, [pc, #668]	; (8016bc8 <__gethex+0x2d8>)
 801692a:	2201      	movs	r2, #1
 801692c:	4640      	mov	r0, r8
 801692e:	f7ff fe85 	bl	801663c <strncmp>
 8016932:	4606      	mov	r6, r0
 8016934:	2800      	cmp	r0, #0
 8016936:	d169      	bne.n	8016a0c <__gethex+0x11c>
 8016938:	f898 0001 	ldrb.w	r0, [r8, #1]
 801693c:	465d      	mov	r5, fp
 801693e:	f7ff ffc1 	bl	80168c4 <__hexdig_fun>
 8016942:	2800      	cmp	r0, #0
 8016944:	d064      	beq.n	8016a10 <__gethex+0x120>
 8016946:	465a      	mov	r2, fp
 8016948:	7810      	ldrb	r0, [r2, #0]
 801694a:	2830      	cmp	r0, #48	; 0x30
 801694c:	4690      	mov	r8, r2
 801694e:	f102 0201 	add.w	r2, r2, #1
 8016952:	d0f9      	beq.n	8016948 <__gethex+0x58>
 8016954:	f7ff ffb6 	bl	80168c4 <__hexdig_fun>
 8016958:	2301      	movs	r3, #1
 801695a:	fab0 f480 	clz	r4, r0
 801695e:	0964      	lsrs	r4, r4, #5
 8016960:	465e      	mov	r6, fp
 8016962:	9301      	str	r3, [sp, #4]
 8016964:	4642      	mov	r2, r8
 8016966:	4615      	mov	r5, r2
 8016968:	3201      	adds	r2, #1
 801696a:	7828      	ldrb	r0, [r5, #0]
 801696c:	f7ff ffaa 	bl	80168c4 <__hexdig_fun>
 8016970:	2800      	cmp	r0, #0
 8016972:	d1f8      	bne.n	8016966 <__gethex+0x76>
 8016974:	4994      	ldr	r1, [pc, #592]	; (8016bc8 <__gethex+0x2d8>)
 8016976:	2201      	movs	r2, #1
 8016978:	4628      	mov	r0, r5
 801697a:	f7ff fe5f 	bl	801663c <strncmp>
 801697e:	b978      	cbnz	r0, 80169a0 <__gethex+0xb0>
 8016980:	b946      	cbnz	r6, 8016994 <__gethex+0xa4>
 8016982:	1c6e      	adds	r6, r5, #1
 8016984:	4632      	mov	r2, r6
 8016986:	4615      	mov	r5, r2
 8016988:	3201      	adds	r2, #1
 801698a:	7828      	ldrb	r0, [r5, #0]
 801698c:	f7ff ff9a 	bl	80168c4 <__hexdig_fun>
 8016990:	2800      	cmp	r0, #0
 8016992:	d1f8      	bne.n	8016986 <__gethex+0x96>
 8016994:	1b73      	subs	r3, r6, r5
 8016996:	009e      	lsls	r6, r3, #2
 8016998:	e004      	b.n	80169a4 <__gethex+0xb4>
 801699a:	2400      	movs	r4, #0
 801699c:	4626      	mov	r6, r4
 801699e:	e7e1      	b.n	8016964 <__gethex+0x74>
 80169a0:	2e00      	cmp	r6, #0
 80169a2:	d1f7      	bne.n	8016994 <__gethex+0xa4>
 80169a4:	782b      	ldrb	r3, [r5, #0]
 80169a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80169aa:	2b50      	cmp	r3, #80	; 0x50
 80169ac:	d13d      	bne.n	8016a2a <__gethex+0x13a>
 80169ae:	786b      	ldrb	r3, [r5, #1]
 80169b0:	2b2b      	cmp	r3, #43	; 0x2b
 80169b2:	d02f      	beq.n	8016a14 <__gethex+0x124>
 80169b4:	2b2d      	cmp	r3, #45	; 0x2d
 80169b6:	d031      	beq.n	8016a1c <__gethex+0x12c>
 80169b8:	1c69      	adds	r1, r5, #1
 80169ba:	f04f 0b00 	mov.w	fp, #0
 80169be:	7808      	ldrb	r0, [r1, #0]
 80169c0:	f7ff ff80 	bl	80168c4 <__hexdig_fun>
 80169c4:	1e42      	subs	r2, r0, #1
 80169c6:	b2d2      	uxtb	r2, r2
 80169c8:	2a18      	cmp	r2, #24
 80169ca:	d82e      	bhi.n	8016a2a <__gethex+0x13a>
 80169cc:	f1a0 0210 	sub.w	r2, r0, #16
 80169d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80169d4:	f7ff ff76 	bl	80168c4 <__hexdig_fun>
 80169d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80169dc:	fa5f fc8c 	uxtb.w	ip, ip
 80169e0:	f1bc 0f18 	cmp.w	ip, #24
 80169e4:	d91d      	bls.n	8016a22 <__gethex+0x132>
 80169e6:	f1bb 0f00 	cmp.w	fp, #0
 80169ea:	d000      	beq.n	80169ee <__gethex+0xfe>
 80169ec:	4252      	negs	r2, r2
 80169ee:	4416      	add	r6, r2
 80169f0:	f8ca 1000 	str.w	r1, [sl]
 80169f4:	b1dc      	cbz	r4, 8016a2e <__gethex+0x13e>
 80169f6:	9b01      	ldr	r3, [sp, #4]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	bf14      	ite	ne
 80169fc:	f04f 0800 	movne.w	r8, #0
 8016a00:	f04f 0806 	moveq.w	r8, #6
 8016a04:	4640      	mov	r0, r8
 8016a06:	b005      	add	sp, #20
 8016a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a0c:	4645      	mov	r5, r8
 8016a0e:	4626      	mov	r6, r4
 8016a10:	2401      	movs	r4, #1
 8016a12:	e7c7      	b.n	80169a4 <__gethex+0xb4>
 8016a14:	f04f 0b00 	mov.w	fp, #0
 8016a18:	1ca9      	adds	r1, r5, #2
 8016a1a:	e7d0      	b.n	80169be <__gethex+0xce>
 8016a1c:	f04f 0b01 	mov.w	fp, #1
 8016a20:	e7fa      	b.n	8016a18 <__gethex+0x128>
 8016a22:	230a      	movs	r3, #10
 8016a24:	fb03 0002 	mla	r0, r3, r2, r0
 8016a28:	e7d0      	b.n	80169cc <__gethex+0xdc>
 8016a2a:	4629      	mov	r1, r5
 8016a2c:	e7e0      	b.n	80169f0 <__gethex+0x100>
 8016a2e:	eba5 0308 	sub.w	r3, r5, r8
 8016a32:	3b01      	subs	r3, #1
 8016a34:	4621      	mov	r1, r4
 8016a36:	2b07      	cmp	r3, #7
 8016a38:	dc0a      	bgt.n	8016a50 <__gethex+0x160>
 8016a3a:	4648      	mov	r0, r9
 8016a3c:	f000 fb06 	bl	801704c <_Balloc>
 8016a40:	4604      	mov	r4, r0
 8016a42:	b940      	cbnz	r0, 8016a56 <__gethex+0x166>
 8016a44:	4b61      	ldr	r3, [pc, #388]	; (8016bcc <__gethex+0x2dc>)
 8016a46:	4602      	mov	r2, r0
 8016a48:	21e4      	movs	r1, #228	; 0xe4
 8016a4a:	4861      	ldr	r0, [pc, #388]	; (8016bd0 <__gethex+0x2e0>)
 8016a4c:	f7fe fda0 	bl	8015590 <__assert_func>
 8016a50:	3101      	adds	r1, #1
 8016a52:	105b      	asrs	r3, r3, #1
 8016a54:	e7ef      	b.n	8016a36 <__gethex+0x146>
 8016a56:	f100 0a14 	add.w	sl, r0, #20
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	495a      	ldr	r1, [pc, #360]	; (8016bc8 <__gethex+0x2d8>)
 8016a5e:	f8cd a004 	str.w	sl, [sp, #4]
 8016a62:	469b      	mov	fp, r3
 8016a64:	45a8      	cmp	r8, r5
 8016a66:	d342      	bcc.n	8016aee <__gethex+0x1fe>
 8016a68:	9801      	ldr	r0, [sp, #4]
 8016a6a:	f840 bb04 	str.w	fp, [r0], #4
 8016a6e:	eba0 000a 	sub.w	r0, r0, sl
 8016a72:	1080      	asrs	r0, r0, #2
 8016a74:	6120      	str	r0, [r4, #16]
 8016a76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016a7a:	4658      	mov	r0, fp
 8016a7c:	f000 fbd8 	bl	8017230 <__hi0bits>
 8016a80:	683d      	ldr	r5, [r7, #0]
 8016a82:	eba8 0000 	sub.w	r0, r8, r0
 8016a86:	42a8      	cmp	r0, r5
 8016a88:	dd59      	ble.n	8016b3e <__gethex+0x24e>
 8016a8a:	eba0 0805 	sub.w	r8, r0, r5
 8016a8e:	4641      	mov	r1, r8
 8016a90:	4620      	mov	r0, r4
 8016a92:	f000 ff67 	bl	8017964 <__any_on>
 8016a96:	4683      	mov	fp, r0
 8016a98:	b1b8      	cbz	r0, 8016aca <__gethex+0x1da>
 8016a9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8016a9e:	1159      	asrs	r1, r3, #5
 8016aa0:	f003 021f 	and.w	r2, r3, #31
 8016aa4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016aa8:	f04f 0b01 	mov.w	fp, #1
 8016aac:	fa0b f202 	lsl.w	r2, fp, r2
 8016ab0:	420a      	tst	r2, r1
 8016ab2:	d00a      	beq.n	8016aca <__gethex+0x1da>
 8016ab4:	455b      	cmp	r3, fp
 8016ab6:	dd06      	ble.n	8016ac6 <__gethex+0x1d6>
 8016ab8:	f1a8 0102 	sub.w	r1, r8, #2
 8016abc:	4620      	mov	r0, r4
 8016abe:	f000 ff51 	bl	8017964 <__any_on>
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d138      	bne.n	8016b38 <__gethex+0x248>
 8016ac6:	f04f 0b02 	mov.w	fp, #2
 8016aca:	4641      	mov	r1, r8
 8016acc:	4620      	mov	r0, r4
 8016ace:	f7ff fea7 	bl	8016820 <rshift>
 8016ad2:	4446      	add	r6, r8
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	42b3      	cmp	r3, r6
 8016ad8:	da41      	bge.n	8016b5e <__gethex+0x26e>
 8016ada:	4621      	mov	r1, r4
 8016adc:	4648      	mov	r0, r9
 8016ade:	f000 faf5 	bl	80170cc <_Bfree>
 8016ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	6013      	str	r3, [r2, #0]
 8016ae8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016aec:	e78a      	b.n	8016a04 <__gethex+0x114>
 8016aee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8016af2:	2a2e      	cmp	r2, #46	; 0x2e
 8016af4:	d014      	beq.n	8016b20 <__gethex+0x230>
 8016af6:	2b20      	cmp	r3, #32
 8016af8:	d106      	bne.n	8016b08 <__gethex+0x218>
 8016afa:	9b01      	ldr	r3, [sp, #4]
 8016afc:	f843 bb04 	str.w	fp, [r3], #4
 8016b00:	f04f 0b00 	mov.w	fp, #0
 8016b04:	9301      	str	r3, [sp, #4]
 8016b06:	465b      	mov	r3, fp
 8016b08:	7828      	ldrb	r0, [r5, #0]
 8016b0a:	9303      	str	r3, [sp, #12]
 8016b0c:	f7ff feda 	bl	80168c4 <__hexdig_fun>
 8016b10:	9b03      	ldr	r3, [sp, #12]
 8016b12:	f000 000f 	and.w	r0, r0, #15
 8016b16:	4098      	lsls	r0, r3
 8016b18:	ea4b 0b00 	orr.w	fp, fp, r0
 8016b1c:	3304      	adds	r3, #4
 8016b1e:	e7a1      	b.n	8016a64 <__gethex+0x174>
 8016b20:	45a8      	cmp	r8, r5
 8016b22:	d8e8      	bhi.n	8016af6 <__gethex+0x206>
 8016b24:	2201      	movs	r2, #1
 8016b26:	4628      	mov	r0, r5
 8016b28:	9303      	str	r3, [sp, #12]
 8016b2a:	f7ff fd87 	bl	801663c <strncmp>
 8016b2e:	4926      	ldr	r1, [pc, #152]	; (8016bc8 <__gethex+0x2d8>)
 8016b30:	9b03      	ldr	r3, [sp, #12]
 8016b32:	2800      	cmp	r0, #0
 8016b34:	d1df      	bne.n	8016af6 <__gethex+0x206>
 8016b36:	e795      	b.n	8016a64 <__gethex+0x174>
 8016b38:	f04f 0b03 	mov.w	fp, #3
 8016b3c:	e7c5      	b.n	8016aca <__gethex+0x1da>
 8016b3e:	da0b      	bge.n	8016b58 <__gethex+0x268>
 8016b40:	eba5 0800 	sub.w	r8, r5, r0
 8016b44:	4621      	mov	r1, r4
 8016b46:	4642      	mov	r2, r8
 8016b48:	4648      	mov	r0, r9
 8016b4a:	f000 fcd9 	bl	8017500 <__lshift>
 8016b4e:	eba6 0608 	sub.w	r6, r6, r8
 8016b52:	4604      	mov	r4, r0
 8016b54:	f100 0a14 	add.w	sl, r0, #20
 8016b58:	f04f 0b00 	mov.w	fp, #0
 8016b5c:	e7ba      	b.n	8016ad4 <__gethex+0x1e4>
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	42b3      	cmp	r3, r6
 8016b62:	dd73      	ble.n	8016c4c <__gethex+0x35c>
 8016b64:	1b9e      	subs	r6, r3, r6
 8016b66:	42b5      	cmp	r5, r6
 8016b68:	dc34      	bgt.n	8016bd4 <__gethex+0x2e4>
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	2b02      	cmp	r3, #2
 8016b6e:	d023      	beq.n	8016bb8 <__gethex+0x2c8>
 8016b70:	2b03      	cmp	r3, #3
 8016b72:	d025      	beq.n	8016bc0 <__gethex+0x2d0>
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	d115      	bne.n	8016ba4 <__gethex+0x2b4>
 8016b78:	42b5      	cmp	r5, r6
 8016b7a:	d113      	bne.n	8016ba4 <__gethex+0x2b4>
 8016b7c:	2d01      	cmp	r5, #1
 8016b7e:	d10b      	bne.n	8016b98 <__gethex+0x2a8>
 8016b80:	9a02      	ldr	r2, [sp, #8]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	6013      	str	r3, [r2, #0]
 8016b86:	2301      	movs	r3, #1
 8016b88:	6123      	str	r3, [r4, #16]
 8016b8a:	f8ca 3000 	str.w	r3, [sl]
 8016b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b90:	f04f 0862 	mov.w	r8, #98	; 0x62
 8016b94:	601c      	str	r4, [r3, #0]
 8016b96:	e735      	b.n	8016a04 <__gethex+0x114>
 8016b98:	1e69      	subs	r1, r5, #1
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	f000 fee2 	bl	8017964 <__any_on>
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	d1ed      	bne.n	8016b80 <__gethex+0x290>
 8016ba4:	4621      	mov	r1, r4
 8016ba6:	4648      	mov	r0, r9
 8016ba8:	f000 fa90 	bl	80170cc <_Bfree>
 8016bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016bae:	2300      	movs	r3, #0
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8016bb6:	e725      	b.n	8016a04 <__gethex+0x114>
 8016bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d1f2      	bne.n	8016ba4 <__gethex+0x2b4>
 8016bbe:	e7df      	b.n	8016b80 <__gethex+0x290>
 8016bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d1dc      	bne.n	8016b80 <__gethex+0x290>
 8016bc6:	e7ed      	b.n	8016ba4 <__gethex+0x2b4>
 8016bc8:	0801bf87 	.word	0x0801bf87
 8016bcc:	0801c0f1 	.word	0x0801c0f1
 8016bd0:	0801c102 	.word	0x0801c102
 8016bd4:	f106 38ff 	add.w	r8, r6, #4294967295
 8016bd8:	f1bb 0f00 	cmp.w	fp, #0
 8016bdc:	d133      	bne.n	8016c46 <__gethex+0x356>
 8016bde:	f1b8 0f00 	cmp.w	r8, #0
 8016be2:	d004      	beq.n	8016bee <__gethex+0x2fe>
 8016be4:	4641      	mov	r1, r8
 8016be6:	4620      	mov	r0, r4
 8016be8:	f000 febc 	bl	8017964 <__any_on>
 8016bec:	4683      	mov	fp, r0
 8016bee:	ea4f 1268 	mov.w	r2, r8, asr #5
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016bf8:	f008 081f 	and.w	r8, r8, #31
 8016bfc:	fa03 f308 	lsl.w	r3, r3, r8
 8016c00:	4213      	tst	r3, r2
 8016c02:	4631      	mov	r1, r6
 8016c04:	4620      	mov	r0, r4
 8016c06:	bf18      	it	ne
 8016c08:	f04b 0b02 	orrne.w	fp, fp, #2
 8016c0c:	1bad      	subs	r5, r5, r6
 8016c0e:	f7ff fe07 	bl	8016820 <rshift>
 8016c12:	687e      	ldr	r6, [r7, #4]
 8016c14:	f04f 0802 	mov.w	r8, #2
 8016c18:	f1bb 0f00 	cmp.w	fp, #0
 8016c1c:	d04a      	beq.n	8016cb4 <__gethex+0x3c4>
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	2b02      	cmp	r3, #2
 8016c22:	d016      	beq.n	8016c52 <__gethex+0x362>
 8016c24:	2b03      	cmp	r3, #3
 8016c26:	d018      	beq.n	8016c5a <__gethex+0x36a>
 8016c28:	2b01      	cmp	r3, #1
 8016c2a:	d109      	bne.n	8016c40 <__gethex+0x350>
 8016c2c:	f01b 0f02 	tst.w	fp, #2
 8016c30:	d006      	beq.n	8016c40 <__gethex+0x350>
 8016c32:	f8da 3000 	ldr.w	r3, [sl]
 8016c36:	ea4b 0b03 	orr.w	fp, fp, r3
 8016c3a:	f01b 0f01 	tst.w	fp, #1
 8016c3e:	d10f      	bne.n	8016c60 <__gethex+0x370>
 8016c40:	f048 0810 	orr.w	r8, r8, #16
 8016c44:	e036      	b.n	8016cb4 <__gethex+0x3c4>
 8016c46:	f04f 0b01 	mov.w	fp, #1
 8016c4a:	e7d0      	b.n	8016bee <__gethex+0x2fe>
 8016c4c:	f04f 0801 	mov.w	r8, #1
 8016c50:	e7e2      	b.n	8016c18 <__gethex+0x328>
 8016c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c54:	f1c3 0301 	rsb	r3, r3, #1
 8016c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d0ef      	beq.n	8016c40 <__gethex+0x350>
 8016c60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016c64:	f104 0214 	add.w	r2, r4, #20
 8016c68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016c6c:	9301      	str	r3, [sp, #4]
 8016c6e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8016c72:	2300      	movs	r3, #0
 8016c74:	4694      	mov	ip, r2
 8016c76:	f852 1b04 	ldr.w	r1, [r2], #4
 8016c7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8016c7e:	d01e      	beq.n	8016cbe <__gethex+0x3ce>
 8016c80:	3101      	adds	r1, #1
 8016c82:	f8cc 1000 	str.w	r1, [ip]
 8016c86:	f1b8 0f02 	cmp.w	r8, #2
 8016c8a:	f104 0214 	add.w	r2, r4, #20
 8016c8e:	d13d      	bne.n	8016d0c <__gethex+0x41c>
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	3b01      	subs	r3, #1
 8016c94:	42ab      	cmp	r3, r5
 8016c96:	d10b      	bne.n	8016cb0 <__gethex+0x3c0>
 8016c98:	1169      	asrs	r1, r5, #5
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	f005 051f 	and.w	r5, r5, #31
 8016ca0:	fa03 f505 	lsl.w	r5, r3, r5
 8016ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ca8:	421d      	tst	r5, r3
 8016caa:	bf18      	it	ne
 8016cac:	f04f 0801 	movne.w	r8, #1
 8016cb0:	f048 0820 	orr.w	r8, r8, #32
 8016cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cb6:	601c      	str	r4, [r3, #0]
 8016cb8:	9b02      	ldr	r3, [sp, #8]
 8016cba:	601e      	str	r6, [r3, #0]
 8016cbc:	e6a2      	b.n	8016a04 <__gethex+0x114>
 8016cbe:	4290      	cmp	r0, r2
 8016cc0:	f842 3c04 	str.w	r3, [r2, #-4]
 8016cc4:	d8d6      	bhi.n	8016c74 <__gethex+0x384>
 8016cc6:	68a2      	ldr	r2, [r4, #8]
 8016cc8:	4593      	cmp	fp, r2
 8016cca:	db17      	blt.n	8016cfc <__gethex+0x40c>
 8016ccc:	6861      	ldr	r1, [r4, #4]
 8016cce:	4648      	mov	r0, r9
 8016cd0:	3101      	adds	r1, #1
 8016cd2:	f000 f9bb 	bl	801704c <_Balloc>
 8016cd6:	4682      	mov	sl, r0
 8016cd8:	b918      	cbnz	r0, 8016ce2 <__gethex+0x3f2>
 8016cda:	4b1b      	ldr	r3, [pc, #108]	; (8016d48 <__gethex+0x458>)
 8016cdc:	4602      	mov	r2, r0
 8016cde:	2184      	movs	r1, #132	; 0x84
 8016ce0:	e6b3      	b.n	8016a4a <__gethex+0x15a>
 8016ce2:	6922      	ldr	r2, [r4, #16]
 8016ce4:	3202      	adds	r2, #2
 8016ce6:	f104 010c 	add.w	r1, r4, #12
 8016cea:	0092      	lsls	r2, r2, #2
 8016cec:	300c      	adds	r0, #12
 8016cee:	f7ff fd2a 	bl	8016746 <memcpy>
 8016cf2:	4621      	mov	r1, r4
 8016cf4:	4648      	mov	r0, r9
 8016cf6:	f000 f9e9 	bl	80170cc <_Bfree>
 8016cfa:	4654      	mov	r4, sl
 8016cfc:	6922      	ldr	r2, [r4, #16]
 8016cfe:	1c51      	adds	r1, r2, #1
 8016d00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016d04:	6121      	str	r1, [r4, #16]
 8016d06:	2101      	movs	r1, #1
 8016d08:	6151      	str	r1, [r2, #20]
 8016d0a:	e7bc      	b.n	8016c86 <__gethex+0x396>
 8016d0c:	6921      	ldr	r1, [r4, #16]
 8016d0e:	4559      	cmp	r1, fp
 8016d10:	dd0b      	ble.n	8016d2a <__gethex+0x43a>
 8016d12:	2101      	movs	r1, #1
 8016d14:	4620      	mov	r0, r4
 8016d16:	f7ff fd83 	bl	8016820 <rshift>
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	3601      	adds	r6, #1
 8016d1e:	42b3      	cmp	r3, r6
 8016d20:	f6ff aedb 	blt.w	8016ada <__gethex+0x1ea>
 8016d24:	f04f 0801 	mov.w	r8, #1
 8016d28:	e7c2      	b.n	8016cb0 <__gethex+0x3c0>
 8016d2a:	f015 051f 	ands.w	r5, r5, #31
 8016d2e:	d0f9      	beq.n	8016d24 <__gethex+0x434>
 8016d30:	9b01      	ldr	r3, [sp, #4]
 8016d32:	441a      	add	r2, r3
 8016d34:	f1c5 0520 	rsb	r5, r5, #32
 8016d38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016d3c:	f000 fa78 	bl	8017230 <__hi0bits>
 8016d40:	42a8      	cmp	r0, r5
 8016d42:	dbe6      	blt.n	8016d12 <__gethex+0x422>
 8016d44:	e7ee      	b.n	8016d24 <__gethex+0x434>
 8016d46:	bf00      	nop
 8016d48:	0801c0f1 	.word	0x0801c0f1

08016d4c <L_shift>:
 8016d4c:	f1c2 0208 	rsb	r2, r2, #8
 8016d50:	0092      	lsls	r2, r2, #2
 8016d52:	b570      	push	{r4, r5, r6, lr}
 8016d54:	f1c2 0620 	rsb	r6, r2, #32
 8016d58:	6843      	ldr	r3, [r0, #4]
 8016d5a:	6804      	ldr	r4, [r0, #0]
 8016d5c:	fa03 f506 	lsl.w	r5, r3, r6
 8016d60:	432c      	orrs	r4, r5
 8016d62:	40d3      	lsrs	r3, r2
 8016d64:	6004      	str	r4, [r0, #0]
 8016d66:	f840 3f04 	str.w	r3, [r0, #4]!
 8016d6a:	4288      	cmp	r0, r1
 8016d6c:	d3f4      	bcc.n	8016d58 <L_shift+0xc>
 8016d6e:	bd70      	pop	{r4, r5, r6, pc}

08016d70 <__match>:
 8016d70:	b530      	push	{r4, r5, lr}
 8016d72:	6803      	ldr	r3, [r0, #0]
 8016d74:	3301      	adds	r3, #1
 8016d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d7a:	b914      	cbnz	r4, 8016d82 <__match+0x12>
 8016d7c:	6003      	str	r3, [r0, #0]
 8016d7e:	2001      	movs	r0, #1
 8016d80:	bd30      	pop	{r4, r5, pc}
 8016d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016d8a:	2d19      	cmp	r5, #25
 8016d8c:	bf98      	it	ls
 8016d8e:	3220      	addls	r2, #32
 8016d90:	42a2      	cmp	r2, r4
 8016d92:	d0f0      	beq.n	8016d76 <__match+0x6>
 8016d94:	2000      	movs	r0, #0
 8016d96:	e7f3      	b.n	8016d80 <__match+0x10>

08016d98 <__hexnan>:
 8016d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d9c:	680b      	ldr	r3, [r1, #0]
 8016d9e:	6801      	ldr	r1, [r0, #0]
 8016da0:	115e      	asrs	r6, r3, #5
 8016da2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016da6:	f013 031f 	ands.w	r3, r3, #31
 8016daa:	b087      	sub	sp, #28
 8016dac:	bf18      	it	ne
 8016dae:	3604      	addne	r6, #4
 8016db0:	2500      	movs	r5, #0
 8016db2:	1f37      	subs	r7, r6, #4
 8016db4:	4682      	mov	sl, r0
 8016db6:	4690      	mov	r8, r2
 8016db8:	9301      	str	r3, [sp, #4]
 8016dba:	f846 5c04 	str.w	r5, [r6, #-4]
 8016dbe:	46b9      	mov	r9, r7
 8016dc0:	463c      	mov	r4, r7
 8016dc2:	9502      	str	r5, [sp, #8]
 8016dc4:	46ab      	mov	fp, r5
 8016dc6:	784a      	ldrb	r2, [r1, #1]
 8016dc8:	1c4b      	adds	r3, r1, #1
 8016dca:	9303      	str	r3, [sp, #12]
 8016dcc:	b342      	cbz	r2, 8016e20 <__hexnan+0x88>
 8016dce:	4610      	mov	r0, r2
 8016dd0:	9105      	str	r1, [sp, #20]
 8016dd2:	9204      	str	r2, [sp, #16]
 8016dd4:	f7ff fd76 	bl	80168c4 <__hexdig_fun>
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d14f      	bne.n	8016e7c <__hexnan+0xe4>
 8016ddc:	9a04      	ldr	r2, [sp, #16]
 8016dde:	9905      	ldr	r1, [sp, #20]
 8016de0:	2a20      	cmp	r2, #32
 8016de2:	d818      	bhi.n	8016e16 <__hexnan+0x7e>
 8016de4:	9b02      	ldr	r3, [sp, #8]
 8016de6:	459b      	cmp	fp, r3
 8016de8:	dd13      	ble.n	8016e12 <__hexnan+0x7a>
 8016dea:	454c      	cmp	r4, r9
 8016dec:	d206      	bcs.n	8016dfc <__hexnan+0x64>
 8016dee:	2d07      	cmp	r5, #7
 8016df0:	dc04      	bgt.n	8016dfc <__hexnan+0x64>
 8016df2:	462a      	mov	r2, r5
 8016df4:	4649      	mov	r1, r9
 8016df6:	4620      	mov	r0, r4
 8016df8:	f7ff ffa8 	bl	8016d4c <L_shift>
 8016dfc:	4544      	cmp	r4, r8
 8016dfe:	d950      	bls.n	8016ea2 <__hexnan+0x10a>
 8016e00:	2300      	movs	r3, #0
 8016e02:	f1a4 0904 	sub.w	r9, r4, #4
 8016e06:	f844 3c04 	str.w	r3, [r4, #-4]
 8016e0a:	f8cd b008 	str.w	fp, [sp, #8]
 8016e0e:	464c      	mov	r4, r9
 8016e10:	461d      	mov	r5, r3
 8016e12:	9903      	ldr	r1, [sp, #12]
 8016e14:	e7d7      	b.n	8016dc6 <__hexnan+0x2e>
 8016e16:	2a29      	cmp	r2, #41	; 0x29
 8016e18:	d155      	bne.n	8016ec6 <__hexnan+0x12e>
 8016e1a:	3102      	adds	r1, #2
 8016e1c:	f8ca 1000 	str.w	r1, [sl]
 8016e20:	f1bb 0f00 	cmp.w	fp, #0
 8016e24:	d04f      	beq.n	8016ec6 <__hexnan+0x12e>
 8016e26:	454c      	cmp	r4, r9
 8016e28:	d206      	bcs.n	8016e38 <__hexnan+0xa0>
 8016e2a:	2d07      	cmp	r5, #7
 8016e2c:	dc04      	bgt.n	8016e38 <__hexnan+0xa0>
 8016e2e:	462a      	mov	r2, r5
 8016e30:	4649      	mov	r1, r9
 8016e32:	4620      	mov	r0, r4
 8016e34:	f7ff ff8a 	bl	8016d4c <L_shift>
 8016e38:	4544      	cmp	r4, r8
 8016e3a:	d934      	bls.n	8016ea6 <__hexnan+0x10e>
 8016e3c:	f1a8 0204 	sub.w	r2, r8, #4
 8016e40:	4623      	mov	r3, r4
 8016e42:	f853 1b04 	ldr.w	r1, [r3], #4
 8016e46:	f842 1f04 	str.w	r1, [r2, #4]!
 8016e4a:	429f      	cmp	r7, r3
 8016e4c:	d2f9      	bcs.n	8016e42 <__hexnan+0xaa>
 8016e4e:	1b3b      	subs	r3, r7, r4
 8016e50:	f023 0303 	bic.w	r3, r3, #3
 8016e54:	3304      	adds	r3, #4
 8016e56:	3e03      	subs	r6, #3
 8016e58:	3401      	adds	r4, #1
 8016e5a:	42a6      	cmp	r6, r4
 8016e5c:	bf38      	it	cc
 8016e5e:	2304      	movcc	r3, #4
 8016e60:	4443      	add	r3, r8
 8016e62:	2200      	movs	r2, #0
 8016e64:	f843 2b04 	str.w	r2, [r3], #4
 8016e68:	429f      	cmp	r7, r3
 8016e6a:	d2fb      	bcs.n	8016e64 <__hexnan+0xcc>
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	b91b      	cbnz	r3, 8016e78 <__hexnan+0xe0>
 8016e70:	4547      	cmp	r7, r8
 8016e72:	d126      	bne.n	8016ec2 <__hexnan+0x12a>
 8016e74:	2301      	movs	r3, #1
 8016e76:	603b      	str	r3, [r7, #0]
 8016e78:	2005      	movs	r0, #5
 8016e7a:	e025      	b.n	8016ec8 <__hexnan+0x130>
 8016e7c:	3501      	adds	r5, #1
 8016e7e:	2d08      	cmp	r5, #8
 8016e80:	f10b 0b01 	add.w	fp, fp, #1
 8016e84:	dd06      	ble.n	8016e94 <__hexnan+0xfc>
 8016e86:	4544      	cmp	r4, r8
 8016e88:	d9c3      	bls.n	8016e12 <__hexnan+0x7a>
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016e90:	2501      	movs	r5, #1
 8016e92:	3c04      	subs	r4, #4
 8016e94:	6822      	ldr	r2, [r4, #0]
 8016e96:	f000 000f 	and.w	r0, r0, #15
 8016e9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016e9e:	6020      	str	r0, [r4, #0]
 8016ea0:	e7b7      	b.n	8016e12 <__hexnan+0x7a>
 8016ea2:	2508      	movs	r5, #8
 8016ea4:	e7b5      	b.n	8016e12 <__hexnan+0x7a>
 8016ea6:	9b01      	ldr	r3, [sp, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d0df      	beq.n	8016e6c <__hexnan+0xd4>
 8016eac:	f1c3 0320 	rsb	r3, r3, #32
 8016eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8016eb4:	40da      	lsrs	r2, r3
 8016eb6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016eba:	4013      	ands	r3, r2
 8016ebc:	f846 3c04 	str.w	r3, [r6, #-4]
 8016ec0:	e7d4      	b.n	8016e6c <__hexnan+0xd4>
 8016ec2:	3f04      	subs	r7, #4
 8016ec4:	e7d2      	b.n	8016e6c <__hexnan+0xd4>
 8016ec6:	2004      	movs	r0, #4
 8016ec8:	b007      	add	sp, #28
 8016eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016ed0 <sbrk_aligned>:
 8016ed0:	b570      	push	{r4, r5, r6, lr}
 8016ed2:	4e0e      	ldr	r6, [pc, #56]	; (8016f0c <sbrk_aligned+0x3c>)
 8016ed4:	460c      	mov	r4, r1
 8016ed6:	6831      	ldr	r1, [r6, #0]
 8016ed8:	4605      	mov	r5, r0
 8016eda:	b911      	cbnz	r1, 8016ee2 <sbrk_aligned+0x12>
 8016edc:	f001 fb24 	bl	8018528 <_sbrk_r>
 8016ee0:	6030      	str	r0, [r6, #0]
 8016ee2:	4621      	mov	r1, r4
 8016ee4:	4628      	mov	r0, r5
 8016ee6:	f001 fb1f 	bl	8018528 <_sbrk_r>
 8016eea:	1c43      	adds	r3, r0, #1
 8016eec:	d00a      	beq.n	8016f04 <sbrk_aligned+0x34>
 8016eee:	1cc4      	adds	r4, r0, #3
 8016ef0:	f024 0403 	bic.w	r4, r4, #3
 8016ef4:	42a0      	cmp	r0, r4
 8016ef6:	d007      	beq.n	8016f08 <sbrk_aligned+0x38>
 8016ef8:	1a21      	subs	r1, r4, r0
 8016efa:	4628      	mov	r0, r5
 8016efc:	f001 fb14 	bl	8018528 <_sbrk_r>
 8016f00:	3001      	adds	r0, #1
 8016f02:	d101      	bne.n	8016f08 <sbrk_aligned+0x38>
 8016f04:	f04f 34ff 	mov.w	r4, #4294967295
 8016f08:	4620      	mov	r0, r4
 8016f0a:	bd70      	pop	{r4, r5, r6, pc}
 8016f0c:	200089a0 	.word	0x200089a0

08016f10 <_malloc_r>:
 8016f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f14:	1ccd      	adds	r5, r1, #3
 8016f16:	f025 0503 	bic.w	r5, r5, #3
 8016f1a:	3508      	adds	r5, #8
 8016f1c:	2d0c      	cmp	r5, #12
 8016f1e:	bf38      	it	cc
 8016f20:	250c      	movcc	r5, #12
 8016f22:	2d00      	cmp	r5, #0
 8016f24:	4607      	mov	r7, r0
 8016f26:	db01      	blt.n	8016f2c <_malloc_r+0x1c>
 8016f28:	42a9      	cmp	r1, r5
 8016f2a:	d905      	bls.n	8016f38 <_malloc_r+0x28>
 8016f2c:	230c      	movs	r3, #12
 8016f2e:	603b      	str	r3, [r7, #0]
 8016f30:	2600      	movs	r6, #0
 8016f32:	4630      	mov	r0, r6
 8016f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801700c <_malloc_r+0xfc>
 8016f3c:	f000 f87a 	bl	8017034 <__malloc_lock>
 8016f40:	f8d8 3000 	ldr.w	r3, [r8]
 8016f44:	461c      	mov	r4, r3
 8016f46:	bb5c      	cbnz	r4, 8016fa0 <_malloc_r+0x90>
 8016f48:	4629      	mov	r1, r5
 8016f4a:	4638      	mov	r0, r7
 8016f4c:	f7ff ffc0 	bl	8016ed0 <sbrk_aligned>
 8016f50:	1c43      	adds	r3, r0, #1
 8016f52:	4604      	mov	r4, r0
 8016f54:	d155      	bne.n	8017002 <_malloc_r+0xf2>
 8016f56:	f8d8 4000 	ldr.w	r4, [r8]
 8016f5a:	4626      	mov	r6, r4
 8016f5c:	2e00      	cmp	r6, #0
 8016f5e:	d145      	bne.n	8016fec <_malloc_r+0xdc>
 8016f60:	2c00      	cmp	r4, #0
 8016f62:	d048      	beq.n	8016ff6 <_malloc_r+0xe6>
 8016f64:	6823      	ldr	r3, [r4, #0]
 8016f66:	4631      	mov	r1, r6
 8016f68:	4638      	mov	r0, r7
 8016f6a:	eb04 0903 	add.w	r9, r4, r3
 8016f6e:	f001 fadb 	bl	8018528 <_sbrk_r>
 8016f72:	4581      	cmp	r9, r0
 8016f74:	d13f      	bne.n	8016ff6 <_malloc_r+0xe6>
 8016f76:	6821      	ldr	r1, [r4, #0]
 8016f78:	1a6d      	subs	r5, r5, r1
 8016f7a:	4629      	mov	r1, r5
 8016f7c:	4638      	mov	r0, r7
 8016f7e:	f7ff ffa7 	bl	8016ed0 <sbrk_aligned>
 8016f82:	3001      	adds	r0, #1
 8016f84:	d037      	beq.n	8016ff6 <_malloc_r+0xe6>
 8016f86:	6823      	ldr	r3, [r4, #0]
 8016f88:	442b      	add	r3, r5
 8016f8a:	6023      	str	r3, [r4, #0]
 8016f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d038      	beq.n	8017006 <_malloc_r+0xf6>
 8016f94:	685a      	ldr	r2, [r3, #4]
 8016f96:	42a2      	cmp	r2, r4
 8016f98:	d12b      	bne.n	8016ff2 <_malloc_r+0xe2>
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	605a      	str	r2, [r3, #4]
 8016f9e:	e00f      	b.n	8016fc0 <_malloc_r+0xb0>
 8016fa0:	6822      	ldr	r2, [r4, #0]
 8016fa2:	1b52      	subs	r2, r2, r5
 8016fa4:	d41f      	bmi.n	8016fe6 <_malloc_r+0xd6>
 8016fa6:	2a0b      	cmp	r2, #11
 8016fa8:	d917      	bls.n	8016fda <_malloc_r+0xca>
 8016faa:	1961      	adds	r1, r4, r5
 8016fac:	42a3      	cmp	r3, r4
 8016fae:	6025      	str	r5, [r4, #0]
 8016fb0:	bf18      	it	ne
 8016fb2:	6059      	strne	r1, [r3, #4]
 8016fb4:	6863      	ldr	r3, [r4, #4]
 8016fb6:	bf08      	it	eq
 8016fb8:	f8c8 1000 	streq.w	r1, [r8]
 8016fbc:	5162      	str	r2, [r4, r5]
 8016fbe:	604b      	str	r3, [r1, #4]
 8016fc0:	4638      	mov	r0, r7
 8016fc2:	f104 060b 	add.w	r6, r4, #11
 8016fc6:	f000 f83b 	bl	8017040 <__malloc_unlock>
 8016fca:	f026 0607 	bic.w	r6, r6, #7
 8016fce:	1d23      	adds	r3, r4, #4
 8016fd0:	1af2      	subs	r2, r6, r3
 8016fd2:	d0ae      	beq.n	8016f32 <_malloc_r+0x22>
 8016fd4:	1b9b      	subs	r3, r3, r6
 8016fd6:	50a3      	str	r3, [r4, r2]
 8016fd8:	e7ab      	b.n	8016f32 <_malloc_r+0x22>
 8016fda:	42a3      	cmp	r3, r4
 8016fdc:	6862      	ldr	r2, [r4, #4]
 8016fde:	d1dd      	bne.n	8016f9c <_malloc_r+0x8c>
 8016fe0:	f8c8 2000 	str.w	r2, [r8]
 8016fe4:	e7ec      	b.n	8016fc0 <_malloc_r+0xb0>
 8016fe6:	4623      	mov	r3, r4
 8016fe8:	6864      	ldr	r4, [r4, #4]
 8016fea:	e7ac      	b.n	8016f46 <_malloc_r+0x36>
 8016fec:	4634      	mov	r4, r6
 8016fee:	6876      	ldr	r6, [r6, #4]
 8016ff0:	e7b4      	b.n	8016f5c <_malloc_r+0x4c>
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	e7cc      	b.n	8016f90 <_malloc_r+0x80>
 8016ff6:	230c      	movs	r3, #12
 8016ff8:	603b      	str	r3, [r7, #0]
 8016ffa:	4638      	mov	r0, r7
 8016ffc:	f000 f820 	bl	8017040 <__malloc_unlock>
 8017000:	e797      	b.n	8016f32 <_malloc_r+0x22>
 8017002:	6025      	str	r5, [r4, #0]
 8017004:	e7dc      	b.n	8016fc0 <_malloc_r+0xb0>
 8017006:	605b      	str	r3, [r3, #4]
 8017008:	deff      	udf	#255	; 0xff
 801700a:	bf00      	nop
 801700c:	2000899c 	.word	0x2000899c

08017010 <__ascii_mbtowc>:
 8017010:	b082      	sub	sp, #8
 8017012:	b901      	cbnz	r1, 8017016 <__ascii_mbtowc+0x6>
 8017014:	a901      	add	r1, sp, #4
 8017016:	b142      	cbz	r2, 801702a <__ascii_mbtowc+0x1a>
 8017018:	b14b      	cbz	r3, 801702e <__ascii_mbtowc+0x1e>
 801701a:	7813      	ldrb	r3, [r2, #0]
 801701c:	600b      	str	r3, [r1, #0]
 801701e:	7812      	ldrb	r2, [r2, #0]
 8017020:	1e10      	subs	r0, r2, #0
 8017022:	bf18      	it	ne
 8017024:	2001      	movne	r0, #1
 8017026:	b002      	add	sp, #8
 8017028:	4770      	bx	lr
 801702a:	4610      	mov	r0, r2
 801702c:	e7fb      	b.n	8017026 <__ascii_mbtowc+0x16>
 801702e:	f06f 0001 	mvn.w	r0, #1
 8017032:	e7f8      	b.n	8017026 <__ascii_mbtowc+0x16>

08017034 <__malloc_lock>:
 8017034:	4801      	ldr	r0, [pc, #4]	; (801703c <__malloc_lock+0x8>)
 8017036:	f7ff bb84 	b.w	8016742 <__retarget_lock_acquire_recursive>
 801703a:	bf00      	nop
 801703c:	20008998 	.word	0x20008998

08017040 <__malloc_unlock>:
 8017040:	4801      	ldr	r0, [pc, #4]	; (8017048 <__malloc_unlock+0x8>)
 8017042:	f7ff bb7f 	b.w	8016744 <__retarget_lock_release_recursive>
 8017046:	bf00      	nop
 8017048:	20008998 	.word	0x20008998

0801704c <_Balloc>:
 801704c:	b570      	push	{r4, r5, r6, lr}
 801704e:	69c6      	ldr	r6, [r0, #28]
 8017050:	4604      	mov	r4, r0
 8017052:	460d      	mov	r5, r1
 8017054:	b976      	cbnz	r6, 8017074 <_Balloc+0x28>
 8017056:	2010      	movs	r0, #16
 8017058:	f001 fa8c 	bl	8018574 <malloc>
 801705c:	4602      	mov	r2, r0
 801705e:	61e0      	str	r0, [r4, #28]
 8017060:	b920      	cbnz	r0, 801706c <_Balloc+0x20>
 8017062:	4b18      	ldr	r3, [pc, #96]	; (80170c4 <_Balloc+0x78>)
 8017064:	4818      	ldr	r0, [pc, #96]	; (80170c8 <_Balloc+0x7c>)
 8017066:	216b      	movs	r1, #107	; 0x6b
 8017068:	f7fe fa92 	bl	8015590 <__assert_func>
 801706c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017070:	6006      	str	r6, [r0, #0]
 8017072:	60c6      	str	r6, [r0, #12]
 8017074:	69e6      	ldr	r6, [r4, #28]
 8017076:	68f3      	ldr	r3, [r6, #12]
 8017078:	b183      	cbz	r3, 801709c <_Balloc+0x50>
 801707a:	69e3      	ldr	r3, [r4, #28]
 801707c:	68db      	ldr	r3, [r3, #12]
 801707e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017082:	b9b8      	cbnz	r0, 80170b4 <_Balloc+0x68>
 8017084:	2101      	movs	r1, #1
 8017086:	fa01 f605 	lsl.w	r6, r1, r5
 801708a:	1d72      	adds	r2, r6, #5
 801708c:	0092      	lsls	r2, r2, #2
 801708e:	4620      	mov	r0, r4
 8017090:	f001 fa5a 	bl	8018548 <_calloc_r>
 8017094:	b160      	cbz	r0, 80170b0 <_Balloc+0x64>
 8017096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801709a:	e00e      	b.n	80170ba <_Balloc+0x6e>
 801709c:	2221      	movs	r2, #33	; 0x21
 801709e:	2104      	movs	r1, #4
 80170a0:	4620      	mov	r0, r4
 80170a2:	f001 fa51 	bl	8018548 <_calloc_r>
 80170a6:	69e3      	ldr	r3, [r4, #28]
 80170a8:	60f0      	str	r0, [r6, #12]
 80170aa:	68db      	ldr	r3, [r3, #12]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d1e4      	bne.n	801707a <_Balloc+0x2e>
 80170b0:	2000      	movs	r0, #0
 80170b2:	bd70      	pop	{r4, r5, r6, pc}
 80170b4:	6802      	ldr	r2, [r0, #0]
 80170b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80170ba:	2300      	movs	r3, #0
 80170bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80170c0:	e7f7      	b.n	80170b2 <_Balloc+0x66>
 80170c2:	bf00      	nop
 80170c4:	0801c162 	.word	0x0801c162
 80170c8:	0801c179 	.word	0x0801c179

080170cc <_Bfree>:
 80170cc:	b570      	push	{r4, r5, r6, lr}
 80170ce:	69c6      	ldr	r6, [r0, #28]
 80170d0:	4605      	mov	r5, r0
 80170d2:	460c      	mov	r4, r1
 80170d4:	b976      	cbnz	r6, 80170f4 <_Bfree+0x28>
 80170d6:	2010      	movs	r0, #16
 80170d8:	f001 fa4c 	bl	8018574 <malloc>
 80170dc:	4602      	mov	r2, r0
 80170de:	61e8      	str	r0, [r5, #28]
 80170e0:	b920      	cbnz	r0, 80170ec <_Bfree+0x20>
 80170e2:	4b09      	ldr	r3, [pc, #36]	; (8017108 <_Bfree+0x3c>)
 80170e4:	4809      	ldr	r0, [pc, #36]	; (801710c <_Bfree+0x40>)
 80170e6:	218f      	movs	r1, #143	; 0x8f
 80170e8:	f7fe fa52 	bl	8015590 <__assert_func>
 80170ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80170f0:	6006      	str	r6, [r0, #0]
 80170f2:	60c6      	str	r6, [r0, #12]
 80170f4:	b13c      	cbz	r4, 8017106 <_Bfree+0x3a>
 80170f6:	69eb      	ldr	r3, [r5, #28]
 80170f8:	6862      	ldr	r2, [r4, #4]
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017100:	6021      	str	r1, [r4, #0]
 8017102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017106:	bd70      	pop	{r4, r5, r6, pc}
 8017108:	0801c162 	.word	0x0801c162
 801710c:	0801c179 	.word	0x0801c179

08017110 <__multadd>:
 8017110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017114:	690d      	ldr	r5, [r1, #16]
 8017116:	4607      	mov	r7, r0
 8017118:	460c      	mov	r4, r1
 801711a:	461e      	mov	r6, r3
 801711c:	f101 0c14 	add.w	ip, r1, #20
 8017120:	2000      	movs	r0, #0
 8017122:	f8dc 3000 	ldr.w	r3, [ip]
 8017126:	b299      	uxth	r1, r3
 8017128:	fb02 6101 	mla	r1, r2, r1, r6
 801712c:	0c1e      	lsrs	r6, r3, #16
 801712e:	0c0b      	lsrs	r3, r1, #16
 8017130:	fb02 3306 	mla	r3, r2, r6, r3
 8017134:	b289      	uxth	r1, r1
 8017136:	3001      	adds	r0, #1
 8017138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801713c:	4285      	cmp	r5, r0
 801713e:	f84c 1b04 	str.w	r1, [ip], #4
 8017142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017146:	dcec      	bgt.n	8017122 <__multadd+0x12>
 8017148:	b30e      	cbz	r6, 801718e <__multadd+0x7e>
 801714a:	68a3      	ldr	r3, [r4, #8]
 801714c:	42ab      	cmp	r3, r5
 801714e:	dc19      	bgt.n	8017184 <__multadd+0x74>
 8017150:	6861      	ldr	r1, [r4, #4]
 8017152:	4638      	mov	r0, r7
 8017154:	3101      	adds	r1, #1
 8017156:	f7ff ff79 	bl	801704c <_Balloc>
 801715a:	4680      	mov	r8, r0
 801715c:	b928      	cbnz	r0, 801716a <__multadd+0x5a>
 801715e:	4602      	mov	r2, r0
 8017160:	4b0c      	ldr	r3, [pc, #48]	; (8017194 <__multadd+0x84>)
 8017162:	480d      	ldr	r0, [pc, #52]	; (8017198 <__multadd+0x88>)
 8017164:	21ba      	movs	r1, #186	; 0xba
 8017166:	f7fe fa13 	bl	8015590 <__assert_func>
 801716a:	6922      	ldr	r2, [r4, #16]
 801716c:	3202      	adds	r2, #2
 801716e:	f104 010c 	add.w	r1, r4, #12
 8017172:	0092      	lsls	r2, r2, #2
 8017174:	300c      	adds	r0, #12
 8017176:	f7ff fae6 	bl	8016746 <memcpy>
 801717a:	4621      	mov	r1, r4
 801717c:	4638      	mov	r0, r7
 801717e:	f7ff ffa5 	bl	80170cc <_Bfree>
 8017182:	4644      	mov	r4, r8
 8017184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017188:	3501      	adds	r5, #1
 801718a:	615e      	str	r6, [r3, #20]
 801718c:	6125      	str	r5, [r4, #16]
 801718e:	4620      	mov	r0, r4
 8017190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017194:	0801c0f1 	.word	0x0801c0f1
 8017198:	0801c179 	.word	0x0801c179

0801719c <__s2b>:
 801719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171a0:	460c      	mov	r4, r1
 80171a2:	4615      	mov	r5, r2
 80171a4:	461f      	mov	r7, r3
 80171a6:	2209      	movs	r2, #9
 80171a8:	3308      	adds	r3, #8
 80171aa:	4606      	mov	r6, r0
 80171ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80171b0:	2100      	movs	r1, #0
 80171b2:	2201      	movs	r2, #1
 80171b4:	429a      	cmp	r2, r3
 80171b6:	db09      	blt.n	80171cc <__s2b+0x30>
 80171b8:	4630      	mov	r0, r6
 80171ba:	f7ff ff47 	bl	801704c <_Balloc>
 80171be:	b940      	cbnz	r0, 80171d2 <__s2b+0x36>
 80171c0:	4602      	mov	r2, r0
 80171c2:	4b19      	ldr	r3, [pc, #100]	; (8017228 <__s2b+0x8c>)
 80171c4:	4819      	ldr	r0, [pc, #100]	; (801722c <__s2b+0x90>)
 80171c6:	21d3      	movs	r1, #211	; 0xd3
 80171c8:	f7fe f9e2 	bl	8015590 <__assert_func>
 80171cc:	0052      	lsls	r2, r2, #1
 80171ce:	3101      	adds	r1, #1
 80171d0:	e7f0      	b.n	80171b4 <__s2b+0x18>
 80171d2:	9b08      	ldr	r3, [sp, #32]
 80171d4:	6143      	str	r3, [r0, #20]
 80171d6:	2d09      	cmp	r5, #9
 80171d8:	f04f 0301 	mov.w	r3, #1
 80171dc:	6103      	str	r3, [r0, #16]
 80171de:	dd16      	ble.n	801720e <__s2b+0x72>
 80171e0:	f104 0909 	add.w	r9, r4, #9
 80171e4:	46c8      	mov	r8, r9
 80171e6:	442c      	add	r4, r5
 80171e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80171ec:	4601      	mov	r1, r0
 80171ee:	3b30      	subs	r3, #48	; 0x30
 80171f0:	220a      	movs	r2, #10
 80171f2:	4630      	mov	r0, r6
 80171f4:	f7ff ff8c 	bl	8017110 <__multadd>
 80171f8:	45a0      	cmp	r8, r4
 80171fa:	d1f5      	bne.n	80171e8 <__s2b+0x4c>
 80171fc:	f1a5 0408 	sub.w	r4, r5, #8
 8017200:	444c      	add	r4, r9
 8017202:	1b2d      	subs	r5, r5, r4
 8017204:	1963      	adds	r3, r4, r5
 8017206:	42bb      	cmp	r3, r7
 8017208:	db04      	blt.n	8017214 <__s2b+0x78>
 801720a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801720e:	340a      	adds	r4, #10
 8017210:	2509      	movs	r5, #9
 8017212:	e7f6      	b.n	8017202 <__s2b+0x66>
 8017214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017218:	4601      	mov	r1, r0
 801721a:	3b30      	subs	r3, #48	; 0x30
 801721c:	220a      	movs	r2, #10
 801721e:	4630      	mov	r0, r6
 8017220:	f7ff ff76 	bl	8017110 <__multadd>
 8017224:	e7ee      	b.n	8017204 <__s2b+0x68>
 8017226:	bf00      	nop
 8017228:	0801c0f1 	.word	0x0801c0f1
 801722c:	0801c179 	.word	0x0801c179

08017230 <__hi0bits>:
 8017230:	0c03      	lsrs	r3, r0, #16
 8017232:	041b      	lsls	r3, r3, #16
 8017234:	b9d3      	cbnz	r3, 801726c <__hi0bits+0x3c>
 8017236:	0400      	lsls	r0, r0, #16
 8017238:	2310      	movs	r3, #16
 801723a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801723e:	bf04      	itt	eq
 8017240:	0200      	lsleq	r0, r0, #8
 8017242:	3308      	addeq	r3, #8
 8017244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017248:	bf04      	itt	eq
 801724a:	0100      	lsleq	r0, r0, #4
 801724c:	3304      	addeq	r3, #4
 801724e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017252:	bf04      	itt	eq
 8017254:	0080      	lsleq	r0, r0, #2
 8017256:	3302      	addeq	r3, #2
 8017258:	2800      	cmp	r0, #0
 801725a:	db05      	blt.n	8017268 <__hi0bits+0x38>
 801725c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017260:	f103 0301 	add.w	r3, r3, #1
 8017264:	bf08      	it	eq
 8017266:	2320      	moveq	r3, #32
 8017268:	4618      	mov	r0, r3
 801726a:	4770      	bx	lr
 801726c:	2300      	movs	r3, #0
 801726e:	e7e4      	b.n	801723a <__hi0bits+0xa>

08017270 <__lo0bits>:
 8017270:	6803      	ldr	r3, [r0, #0]
 8017272:	f013 0207 	ands.w	r2, r3, #7
 8017276:	d00c      	beq.n	8017292 <__lo0bits+0x22>
 8017278:	07d9      	lsls	r1, r3, #31
 801727a:	d422      	bmi.n	80172c2 <__lo0bits+0x52>
 801727c:	079a      	lsls	r2, r3, #30
 801727e:	bf49      	itett	mi
 8017280:	085b      	lsrmi	r3, r3, #1
 8017282:	089b      	lsrpl	r3, r3, #2
 8017284:	6003      	strmi	r3, [r0, #0]
 8017286:	2201      	movmi	r2, #1
 8017288:	bf5c      	itt	pl
 801728a:	6003      	strpl	r3, [r0, #0]
 801728c:	2202      	movpl	r2, #2
 801728e:	4610      	mov	r0, r2
 8017290:	4770      	bx	lr
 8017292:	b299      	uxth	r1, r3
 8017294:	b909      	cbnz	r1, 801729a <__lo0bits+0x2a>
 8017296:	0c1b      	lsrs	r3, r3, #16
 8017298:	2210      	movs	r2, #16
 801729a:	b2d9      	uxtb	r1, r3
 801729c:	b909      	cbnz	r1, 80172a2 <__lo0bits+0x32>
 801729e:	3208      	adds	r2, #8
 80172a0:	0a1b      	lsrs	r3, r3, #8
 80172a2:	0719      	lsls	r1, r3, #28
 80172a4:	bf04      	itt	eq
 80172a6:	091b      	lsreq	r3, r3, #4
 80172a8:	3204      	addeq	r2, #4
 80172aa:	0799      	lsls	r1, r3, #30
 80172ac:	bf04      	itt	eq
 80172ae:	089b      	lsreq	r3, r3, #2
 80172b0:	3202      	addeq	r2, #2
 80172b2:	07d9      	lsls	r1, r3, #31
 80172b4:	d403      	bmi.n	80172be <__lo0bits+0x4e>
 80172b6:	085b      	lsrs	r3, r3, #1
 80172b8:	f102 0201 	add.w	r2, r2, #1
 80172bc:	d003      	beq.n	80172c6 <__lo0bits+0x56>
 80172be:	6003      	str	r3, [r0, #0]
 80172c0:	e7e5      	b.n	801728e <__lo0bits+0x1e>
 80172c2:	2200      	movs	r2, #0
 80172c4:	e7e3      	b.n	801728e <__lo0bits+0x1e>
 80172c6:	2220      	movs	r2, #32
 80172c8:	e7e1      	b.n	801728e <__lo0bits+0x1e>
	...

080172cc <__i2b>:
 80172cc:	b510      	push	{r4, lr}
 80172ce:	460c      	mov	r4, r1
 80172d0:	2101      	movs	r1, #1
 80172d2:	f7ff febb 	bl	801704c <_Balloc>
 80172d6:	4602      	mov	r2, r0
 80172d8:	b928      	cbnz	r0, 80172e6 <__i2b+0x1a>
 80172da:	4b05      	ldr	r3, [pc, #20]	; (80172f0 <__i2b+0x24>)
 80172dc:	4805      	ldr	r0, [pc, #20]	; (80172f4 <__i2b+0x28>)
 80172de:	f240 1145 	movw	r1, #325	; 0x145
 80172e2:	f7fe f955 	bl	8015590 <__assert_func>
 80172e6:	2301      	movs	r3, #1
 80172e8:	6144      	str	r4, [r0, #20]
 80172ea:	6103      	str	r3, [r0, #16]
 80172ec:	bd10      	pop	{r4, pc}
 80172ee:	bf00      	nop
 80172f0:	0801c0f1 	.word	0x0801c0f1
 80172f4:	0801c179 	.word	0x0801c179

080172f8 <__multiply>:
 80172f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	4691      	mov	r9, r2
 80172fe:	690a      	ldr	r2, [r1, #16]
 8017300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017304:	429a      	cmp	r2, r3
 8017306:	bfb8      	it	lt
 8017308:	460b      	movlt	r3, r1
 801730a:	460c      	mov	r4, r1
 801730c:	bfbc      	itt	lt
 801730e:	464c      	movlt	r4, r9
 8017310:	4699      	movlt	r9, r3
 8017312:	6927      	ldr	r7, [r4, #16]
 8017314:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017318:	68a3      	ldr	r3, [r4, #8]
 801731a:	6861      	ldr	r1, [r4, #4]
 801731c:	eb07 060a 	add.w	r6, r7, sl
 8017320:	42b3      	cmp	r3, r6
 8017322:	b085      	sub	sp, #20
 8017324:	bfb8      	it	lt
 8017326:	3101      	addlt	r1, #1
 8017328:	f7ff fe90 	bl	801704c <_Balloc>
 801732c:	b930      	cbnz	r0, 801733c <__multiply+0x44>
 801732e:	4602      	mov	r2, r0
 8017330:	4b44      	ldr	r3, [pc, #272]	; (8017444 <__multiply+0x14c>)
 8017332:	4845      	ldr	r0, [pc, #276]	; (8017448 <__multiply+0x150>)
 8017334:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017338:	f7fe f92a 	bl	8015590 <__assert_func>
 801733c:	f100 0514 	add.w	r5, r0, #20
 8017340:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017344:	462b      	mov	r3, r5
 8017346:	2200      	movs	r2, #0
 8017348:	4543      	cmp	r3, r8
 801734a:	d321      	bcc.n	8017390 <__multiply+0x98>
 801734c:	f104 0314 	add.w	r3, r4, #20
 8017350:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017354:	f109 0314 	add.w	r3, r9, #20
 8017358:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801735c:	9202      	str	r2, [sp, #8]
 801735e:	1b3a      	subs	r2, r7, r4
 8017360:	3a15      	subs	r2, #21
 8017362:	f022 0203 	bic.w	r2, r2, #3
 8017366:	3204      	adds	r2, #4
 8017368:	f104 0115 	add.w	r1, r4, #21
 801736c:	428f      	cmp	r7, r1
 801736e:	bf38      	it	cc
 8017370:	2204      	movcc	r2, #4
 8017372:	9201      	str	r2, [sp, #4]
 8017374:	9a02      	ldr	r2, [sp, #8]
 8017376:	9303      	str	r3, [sp, #12]
 8017378:	429a      	cmp	r2, r3
 801737a:	d80c      	bhi.n	8017396 <__multiply+0x9e>
 801737c:	2e00      	cmp	r6, #0
 801737e:	dd03      	ble.n	8017388 <__multiply+0x90>
 8017380:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017384:	2b00      	cmp	r3, #0
 8017386:	d05b      	beq.n	8017440 <__multiply+0x148>
 8017388:	6106      	str	r6, [r0, #16]
 801738a:	b005      	add	sp, #20
 801738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017390:	f843 2b04 	str.w	r2, [r3], #4
 8017394:	e7d8      	b.n	8017348 <__multiply+0x50>
 8017396:	f8b3 a000 	ldrh.w	sl, [r3]
 801739a:	f1ba 0f00 	cmp.w	sl, #0
 801739e:	d024      	beq.n	80173ea <__multiply+0xf2>
 80173a0:	f104 0e14 	add.w	lr, r4, #20
 80173a4:	46a9      	mov	r9, r5
 80173a6:	f04f 0c00 	mov.w	ip, #0
 80173aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80173ae:	f8d9 1000 	ldr.w	r1, [r9]
 80173b2:	fa1f fb82 	uxth.w	fp, r2
 80173b6:	b289      	uxth	r1, r1
 80173b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80173bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80173c0:	f8d9 2000 	ldr.w	r2, [r9]
 80173c4:	4461      	add	r1, ip
 80173c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80173ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80173ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80173d2:	b289      	uxth	r1, r1
 80173d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80173d8:	4577      	cmp	r7, lr
 80173da:	f849 1b04 	str.w	r1, [r9], #4
 80173de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80173e2:	d8e2      	bhi.n	80173aa <__multiply+0xb2>
 80173e4:	9a01      	ldr	r2, [sp, #4]
 80173e6:	f845 c002 	str.w	ip, [r5, r2]
 80173ea:	9a03      	ldr	r2, [sp, #12]
 80173ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80173f0:	3304      	adds	r3, #4
 80173f2:	f1b9 0f00 	cmp.w	r9, #0
 80173f6:	d021      	beq.n	801743c <__multiply+0x144>
 80173f8:	6829      	ldr	r1, [r5, #0]
 80173fa:	f104 0c14 	add.w	ip, r4, #20
 80173fe:	46ae      	mov	lr, r5
 8017400:	f04f 0a00 	mov.w	sl, #0
 8017404:	f8bc b000 	ldrh.w	fp, [ip]
 8017408:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801740c:	fb09 220b 	mla	r2, r9, fp, r2
 8017410:	4452      	add	r2, sl
 8017412:	b289      	uxth	r1, r1
 8017414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017418:	f84e 1b04 	str.w	r1, [lr], #4
 801741c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017420:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017424:	f8be 1000 	ldrh.w	r1, [lr]
 8017428:	fb09 110a 	mla	r1, r9, sl, r1
 801742c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017430:	4567      	cmp	r7, ip
 8017432:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017436:	d8e5      	bhi.n	8017404 <__multiply+0x10c>
 8017438:	9a01      	ldr	r2, [sp, #4]
 801743a:	50a9      	str	r1, [r5, r2]
 801743c:	3504      	adds	r5, #4
 801743e:	e799      	b.n	8017374 <__multiply+0x7c>
 8017440:	3e01      	subs	r6, #1
 8017442:	e79b      	b.n	801737c <__multiply+0x84>
 8017444:	0801c0f1 	.word	0x0801c0f1
 8017448:	0801c179 	.word	0x0801c179

0801744c <__pow5mult>:
 801744c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017450:	4615      	mov	r5, r2
 8017452:	f012 0203 	ands.w	r2, r2, #3
 8017456:	4606      	mov	r6, r0
 8017458:	460f      	mov	r7, r1
 801745a:	d007      	beq.n	801746c <__pow5mult+0x20>
 801745c:	4c25      	ldr	r4, [pc, #148]	; (80174f4 <__pow5mult+0xa8>)
 801745e:	3a01      	subs	r2, #1
 8017460:	2300      	movs	r3, #0
 8017462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017466:	f7ff fe53 	bl	8017110 <__multadd>
 801746a:	4607      	mov	r7, r0
 801746c:	10ad      	asrs	r5, r5, #2
 801746e:	d03d      	beq.n	80174ec <__pow5mult+0xa0>
 8017470:	69f4      	ldr	r4, [r6, #28]
 8017472:	b97c      	cbnz	r4, 8017494 <__pow5mult+0x48>
 8017474:	2010      	movs	r0, #16
 8017476:	f001 f87d 	bl	8018574 <malloc>
 801747a:	4602      	mov	r2, r0
 801747c:	61f0      	str	r0, [r6, #28]
 801747e:	b928      	cbnz	r0, 801748c <__pow5mult+0x40>
 8017480:	4b1d      	ldr	r3, [pc, #116]	; (80174f8 <__pow5mult+0xac>)
 8017482:	481e      	ldr	r0, [pc, #120]	; (80174fc <__pow5mult+0xb0>)
 8017484:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017488:	f7fe f882 	bl	8015590 <__assert_func>
 801748c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017490:	6004      	str	r4, [r0, #0]
 8017492:	60c4      	str	r4, [r0, #12]
 8017494:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801749c:	b94c      	cbnz	r4, 80174b2 <__pow5mult+0x66>
 801749e:	f240 2171 	movw	r1, #625	; 0x271
 80174a2:	4630      	mov	r0, r6
 80174a4:	f7ff ff12 	bl	80172cc <__i2b>
 80174a8:	2300      	movs	r3, #0
 80174aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80174ae:	4604      	mov	r4, r0
 80174b0:	6003      	str	r3, [r0, #0]
 80174b2:	f04f 0900 	mov.w	r9, #0
 80174b6:	07eb      	lsls	r3, r5, #31
 80174b8:	d50a      	bpl.n	80174d0 <__pow5mult+0x84>
 80174ba:	4639      	mov	r1, r7
 80174bc:	4622      	mov	r2, r4
 80174be:	4630      	mov	r0, r6
 80174c0:	f7ff ff1a 	bl	80172f8 <__multiply>
 80174c4:	4639      	mov	r1, r7
 80174c6:	4680      	mov	r8, r0
 80174c8:	4630      	mov	r0, r6
 80174ca:	f7ff fdff 	bl	80170cc <_Bfree>
 80174ce:	4647      	mov	r7, r8
 80174d0:	106d      	asrs	r5, r5, #1
 80174d2:	d00b      	beq.n	80174ec <__pow5mult+0xa0>
 80174d4:	6820      	ldr	r0, [r4, #0]
 80174d6:	b938      	cbnz	r0, 80174e8 <__pow5mult+0x9c>
 80174d8:	4622      	mov	r2, r4
 80174da:	4621      	mov	r1, r4
 80174dc:	4630      	mov	r0, r6
 80174de:	f7ff ff0b 	bl	80172f8 <__multiply>
 80174e2:	6020      	str	r0, [r4, #0]
 80174e4:	f8c0 9000 	str.w	r9, [r0]
 80174e8:	4604      	mov	r4, r0
 80174ea:	e7e4      	b.n	80174b6 <__pow5mult+0x6a>
 80174ec:	4638      	mov	r0, r7
 80174ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174f2:	bf00      	nop
 80174f4:	0801c2c8 	.word	0x0801c2c8
 80174f8:	0801c162 	.word	0x0801c162
 80174fc:	0801c179 	.word	0x0801c179

08017500 <__lshift>:
 8017500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017504:	460c      	mov	r4, r1
 8017506:	6849      	ldr	r1, [r1, #4]
 8017508:	6923      	ldr	r3, [r4, #16]
 801750a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801750e:	68a3      	ldr	r3, [r4, #8]
 8017510:	4607      	mov	r7, r0
 8017512:	4691      	mov	r9, r2
 8017514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017518:	f108 0601 	add.w	r6, r8, #1
 801751c:	42b3      	cmp	r3, r6
 801751e:	db0b      	blt.n	8017538 <__lshift+0x38>
 8017520:	4638      	mov	r0, r7
 8017522:	f7ff fd93 	bl	801704c <_Balloc>
 8017526:	4605      	mov	r5, r0
 8017528:	b948      	cbnz	r0, 801753e <__lshift+0x3e>
 801752a:	4602      	mov	r2, r0
 801752c:	4b28      	ldr	r3, [pc, #160]	; (80175d0 <__lshift+0xd0>)
 801752e:	4829      	ldr	r0, [pc, #164]	; (80175d4 <__lshift+0xd4>)
 8017530:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017534:	f7fe f82c 	bl	8015590 <__assert_func>
 8017538:	3101      	adds	r1, #1
 801753a:	005b      	lsls	r3, r3, #1
 801753c:	e7ee      	b.n	801751c <__lshift+0x1c>
 801753e:	2300      	movs	r3, #0
 8017540:	f100 0114 	add.w	r1, r0, #20
 8017544:	f100 0210 	add.w	r2, r0, #16
 8017548:	4618      	mov	r0, r3
 801754a:	4553      	cmp	r3, sl
 801754c:	db33      	blt.n	80175b6 <__lshift+0xb6>
 801754e:	6920      	ldr	r0, [r4, #16]
 8017550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017554:	f104 0314 	add.w	r3, r4, #20
 8017558:	f019 091f 	ands.w	r9, r9, #31
 801755c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017564:	d02b      	beq.n	80175be <__lshift+0xbe>
 8017566:	f1c9 0e20 	rsb	lr, r9, #32
 801756a:	468a      	mov	sl, r1
 801756c:	2200      	movs	r2, #0
 801756e:	6818      	ldr	r0, [r3, #0]
 8017570:	fa00 f009 	lsl.w	r0, r0, r9
 8017574:	4310      	orrs	r0, r2
 8017576:	f84a 0b04 	str.w	r0, [sl], #4
 801757a:	f853 2b04 	ldr.w	r2, [r3], #4
 801757e:	459c      	cmp	ip, r3
 8017580:	fa22 f20e 	lsr.w	r2, r2, lr
 8017584:	d8f3      	bhi.n	801756e <__lshift+0x6e>
 8017586:	ebac 0304 	sub.w	r3, ip, r4
 801758a:	3b15      	subs	r3, #21
 801758c:	f023 0303 	bic.w	r3, r3, #3
 8017590:	3304      	adds	r3, #4
 8017592:	f104 0015 	add.w	r0, r4, #21
 8017596:	4584      	cmp	ip, r0
 8017598:	bf38      	it	cc
 801759a:	2304      	movcc	r3, #4
 801759c:	50ca      	str	r2, [r1, r3]
 801759e:	b10a      	cbz	r2, 80175a4 <__lshift+0xa4>
 80175a0:	f108 0602 	add.w	r6, r8, #2
 80175a4:	3e01      	subs	r6, #1
 80175a6:	4638      	mov	r0, r7
 80175a8:	612e      	str	r6, [r5, #16]
 80175aa:	4621      	mov	r1, r4
 80175ac:	f7ff fd8e 	bl	80170cc <_Bfree>
 80175b0:	4628      	mov	r0, r5
 80175b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80175ba:	3301      	adds	r3, #1
 80175bc:	e7c5      	b.n	801754a <__lshift+0x4a>
 80175be:	3904      	subs	r1, #4
 80175c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80175c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80175c8:	459c      	cmp	ip, r3
 80175ca:	d8f9      	bhi.n	80175c0 <__lshift+0xc0>
 80175cc:	e7ea      	b.n	80175a4 <__lshift+0xa4>
 80175ce:	bf00      	nop
 80175d0:	0801c0f1 	.word	0x0801c0f1
 80175d4:	0801c179 	.word	0x0801c179

080175d8 <__mcmp>:
 80175d8:	b530      	push	{r4, r5, lr}
 80175da:	6902      	ldr	r2, [r0, #16]
 80175dc:	690c      	ldr	r4, [r1, #16]
 80175de:	1b12      	subs	r2, r2, r4
 80175e0:	d10e      	bne.n	8017600 <__mcmp+0x28>
 80175e2:	f100 0314 	add.w	r3, r0, #20
 80175e6:	3114      	adds	r1, #20
 80175e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80175ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80175f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80175f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80175f8:	42a5      	cmp	r5, r4
 80175fa:	d003      	beq.n	8017604 <__mcmp+0x2c>
 80175fc:	d305      	bcc.n	801760a <__mcmp+0x32>
 80175fe:	2201      	movs	r2, #1
 8017600:	4610      	mov	r0, r2
 8017602:	bd30      	pop	{r4, r5, pc}
 8017604:	4283      	cmp	r3, r0
 8017606:	d3f3      	bcc.n	80175f0 <__mcmp+0x18>
 8017608:	e7fa      	b.n	8017600 <__mcmp+0x28>
 801760a:	f04f 32ff 	mov.w	r2, #4294967295
 801760e:	e7f7      	b.n	8017600 <__mcmp+0x28>

08017610 <__mdiff>:
 8017610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017614:	460c      	mov	r4, r1
 8017616:	4606      	mov	r6, r0
 8017618:	4611      	mov	r1, r2
 801761a:	4620      	mov	r0, r4
 801761c:	4690      	mov	r8, r2
 801761e:	f7ff ffdb 	bl	80175d8 <__mcmp>
 8017622:	1e05      	subs	r5, r0, #0
 8017624:	d110      	bne.n	8017648 <__mdiff+0x38>
 8017626:	4629      	mov	r1, r5
 8017628:	4630      	mov	r0, r6
 801762a:	f7ff fd0f 	bl	801704c <_Balloc>
 801762e:	b930      	cbnz	r0, 801763e <__mdiff+0x2e>
 8017630:	4b3a      	ldr	r3, [pc, #232]	; (801771c <__mdiff+0x10c>)
 8017632:	4602      	mov	r2, r0
 8017634:	f240 2137 	movw	r1, #567	; 0x237
 8017638:	4839      	ldr	r0, [pc, #228]	; (8017720 <__mdiff+0x110>)
 801763a:	f7fd ffa9 	bl	8015590 <__assert_func>
 801763e:	2301      	movs	r3, #1
 8017640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017648:	bfa4      	itt	ge
 801764a:	4643      	movge	r3, r8
 801764c:	46a0      	movge	r8, r4
 801764e:	4630      	mov	r0, r6
 8017650:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017654:	bfa6      	itte	ge
 8017656:	461c      	movge	r4, r3
 8017658:	2500      	movge	r5, #0
 801765a:	2501      	movlt	r5, #1
 801765c:	f7ff fcf6 	bl	801704c <_Balloc>
 8017660:	b920      	cbnz	r0, 801766c <__mdiff+0x5c>
 8017662:	4b2e      	ldr	r3, [pc, #184]	; (801771c <__mdiff+0x10c>)
 8017664:	4602      	mov	r2, r0
 8017666:	f240 2145 	movw	r1, #581	; 0x245
 801766a:	e7e5      	b.n	8017638 <__mdiff+0x28>
 801766c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017670:	6926      	ldr	r6, [r4, #16]
 8017672:	60c5      	str	r5, [r0, #12]
 8017674:	f104 0914 	add.w	r9, r4, #20
 8017678:	f108 0514 	add.w	r5, r8, #20
 801767c:	f100 0e14 	add.w	lr, r0, #20
 8017680:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017684:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017688:	f108 0210 	add.w	r2, r8, #16
 801768c:	46f2      	mov	sl, lr
 801768e:	2100      	movs	r1, #0
 8017690:	f859 3b04 	ldr.w	r3, [r9], #4
 8017694:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017698:	fa11 f88b 	uxtah	r8, r1, fp
 801769c:	b299      	uxth	r1, r3
 801769e:	0c1b      	lsrs	r3, r3, #16
 80176a0:	eba8 0801 	sub.w	r8, r8, r1
 80176a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80176a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80176ac:	fa1f f888 	uxth.w	r8, r8
 80176b0:	1419      	asrs	r1, r3, #16
 80176b2:	454e      	cmp	r6, r9
 80176b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80176b8:	f84a 3b04 	str.w	r3, [sl], #4
 80176bc:	d8e8      	bhi.n	8017690 <__mdiff+0x80>
 80176be:	1b33      	subs	r3, r6, r4
 80176c0:	3b15      	subs	r3, #21
 80176c2:	f023 0303 	bic.w	r3, r3, #3
 80176c6:	3304      	adds	r3, #4
 80176c8:	3415      	adds	r4, #21
 80176ca:	42a6      	cmp	r6, r4
 80176cc:	bf38      	it	cc
 80176ce:	2304      	movcc	r3, #4
 80176d0:	441d      	add	r5, r3
 80176d2:	4473      	add	r3, lr
 80176d4:	469e      	mov	lr, r3
 80176d6:	462e      	mov	r6, r5
 80176d8:	4566      	cmp	r6, ip
 80176da:	d30e      	bcc.n	80176fa <__mdiff+0xea>
 80176dc:	f10c 0203 	add.w	r2, ip, #3
 80176e0:	1b52      	subs	r2, r2, r5
 80176e2:	f022 0203 	bic.w	r2, r2, #3
 80176e6:	3d03      	subs	r5, #3
 80176e8:	45ac      	cmp	ip, r5
 80176ea:	bf38      	it	cc
 80176ec:	2200      	movcc	r2, #0
 80176ee:	4413      	add	r3, r2
 80176f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80176f4:	b17a      	cbz	r2, 8017716 <__mdiff+0x106>
 80176f6:	6107      	str	r7, [r0, #16]
 80176f8:	e7a4      	b.n	8017644 <__mdiff+0x34>
 80176fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80176fe:	fa11 f288 	uxtah	r2, r1, r8
 8017702:	1414      	asrs	r4, r2, #16
 8017704:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017708:	b292      	uxth	r2, r2
 801770a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801770e:	f84e 2b04 	str.w	r2, [lr], #4
 8017712:	1421      	asrs	r1, r4, #16
 8017714:	e7e0      	b.n	80176d8 <__mdiff+0xc8>
 8017716:	3f01      	subs	r7, #1
 8017718:	e7ea      	b.n	80176f0 <__mdiff+0xe0>
 801771a:	bf00      	nop
 801771c:	0801c0f1 	.word	0x0801c0f1
 8017720:	0801c179 	.word	0x0801c179

08017724 <__ulp>:
 8017724:	b082      	sub	sp, #8
 8017726:	ed8d 0b00 	vstr	d0, [sp]
 801772a:	9a01      	ldr	r2, [sp, #4]
 801772c:	4b0f      	ldr	r3, [pc, #60]	; (801776c <__ulp+0x48>)
 801772e:	4013      	ands	r3, r2
 8017730:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8017734:	2b00      	cmp	r3, #0
 8017736:	dc08      	bgt.n	801774a <__ulp+0x26>
 8017738:	425b      	negs	r3, r3
 801773a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801773e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017742:	da04      	bge.n	801774e <__ulp+0x2a>
 8017744:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017748:	4113      	asrs	r3, r2
 801774a:	2200      	movs	r2, #0
 801774c:	e008      	b.n	8017760 <__ulp+0x3c>
 801774e:	f1a2 0314 	sub.w	r3, r2, #20
 8017752:	2b1e      	cmp	r3, #30
 8017754:	bfda      	itte	le
 8017756:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801775a:	40da      	lsrle	r2, r3
 801775c:	2201      	movgt	r2, #1
 801775e:	2300      	movs	r3, #0
 8017760:	4619      	mov	r1, r3
 8017762:	4610      	mov	r0, r2
 8017764:	ec41 0b10 	vmov	d0, r0, r1
 8017768:	b002      	add	sp, #8
 801776a:	4770      	bx	lr
 801776c:	7ff00000 	.word	0x7ff00000

08017770 <__b2d>:
 8017770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017774:	6906      	ldr	r6, [r0, #16]
 8017776:	f100 0814 	add.w	r8, r0, #20
 801777a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801777e:	1f37      	subs	r7, r6, #4
 8017780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017784:	4610      	mov	r0, r2
 8017786:	f7ff fd53 	bl	8017230 <__hi0bits>
 801778a:	f1c0 0320 	rsb	r3, r0, #32
 801778e:	280a      	cmp	r0, #10
 8017790:	600b      	str	r3, [r1, #0]
 8017792:	491b      	ldr	r1, [pc, #108]	; (8017800 <__b2d+0x90>)
 8017794:	dc15      	bgt.n	80177c2 <__b2d+0x52>
 8017796:	f1c0 0c0b 	rsb	ip, r0, #11
 801779a:	fa22 f30c 	lsr.w	r3, r2, ip
 801779e:	45b8      	cmp	r8, r7
 80177a0:	ea43 0501 	orr.w	r5, r3, r1
 80177a4:	bf34      	ite	cc
 80177a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80177aa:	2300      	movcs	r3, #0
 80177ac:	3015      	adds	r0, #21
 80177ae:	fa02 f000 	lsl.w	r0, r2, r0
 80177b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80177b6:	4303      	orrs	r3, r0
 80177b8:	461c      	mov	r4, r3
 80177ba:	ec45 4b10 	vmov	d0, r4, r5
 80177be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c2:	45b8      	cmp	r8, r7
 80177c4:	bf3a      	itte	cc
 80177c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80177ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80177ce:	2300      	movcs	r3, #0
 80177d0:	380b      	subs	r0, #11
 80177d2:	d012      	beq.n	80177fa <__b2d+0x8a>
 80177d4:	f1c0 0120 	rsb	r1, r0, #32
 80177d8:	fa23 f401 	lsr.w	r4, r3, r1
 80177dc:	4082      	lsls	r2, r0
 80177de:	4322      	orrs	r2, r4
 80177e0:	4547      	cmp	r7, r8
 80177e2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80177e6:	bf8c      	ite	hi
 80177e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80177ec:	2200      	movls	r2, #0
 80177ee:	4083      	lsls	r3, r0
 80177f0:	40ca      	lsrs	r2, r1
 80177f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80177f6:	4313      	orrs	r3, r2
 80177f8:	e7de      	b.n	80177b8 <__b2d+0x48>
 80177fa:	ea42 0501 	orr.w	r5, r2, r1
 80177fe:	e7db      	b.n	80177b8 <__b2d+0x48>
 8017800:	3ff00000 	.word	0x3ff00000

08017804 <__d2b>:
 8017804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017808:	460f      	mov	r7, r1
 801780a:	2101      	movs	r1, #1
 801780c:	ec59 8b10 	vmov	r8, r9, d0
 8017810:	4616      	mov	r6, r2
 8017812:	f7ff fc1b 	bl	801704c <_Balloc>
 8017816:	4604      	mov	r4, r0
 8017818:	b930      	cbnz	r0, 8017828 <__d2b+0x24>
 801781a:	4602      	mov	r2, r0
 801781c:	4b24      	ldr	r3, [pc, #144]	; (80178b0 <__d2b+0xac>)
 801781e:	4825      	ldr	r0, [pc, #148]	; (80178b4 <__d2b+0xb0>)
 8017820:	f240 310f 	movw	r1, #783	; 0x30f
 8017824:	f7fd feb4 	bl	8015590 <__assert_func>
 8017828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801782c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017830:	bb2d      	cbnz	r5, 801787e <__d2b+0x7a>
 8017832:	9301      	str	r3, [sp, #4]
 8017834:	f1b8 0300 	subs.w	r3, r8, #0
 8017838:	d026      	beq.n	8017888 <__d2b+0x84>
 801783a:	4668      	mov	r0, sp
 801783c:	9300      	str	r3, [sp, #0]
 801783e:	f7ff fd17 	bl	8017270 <__lo0bits>
 8017842:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017846:	b1e8      	cbz	r0, 8017884 <__d2b+0x80>
 8017848:	f1c0 0320 	rsb	r3, r0, #32
 801784c:	fa02 f303 	lsl.w	r3, r2, r3
 8017850:	430b      	orrs	r3, r1
 8017852:	40c2      	lsrs	r2, r0
 8017854:	6163      	str	r3, [r4, #20]
 8017856:	9201      	str	r2, [sp, #4]
 8017858:	9b01      	ldr	r3, [sp, #4]
 801785a:	61a3      	str	r3, [r4, #24]
 801785c:	2b00      	cmp	r3, #0
 801785e:	bf14      	ite	ne
 8017860:	2202      	movne	r2, #2
 8017862:	2201      	moveq	r2, #1
 8017864:	6122      	str	r2, [r4, #16]
 8017866:	b1bd      	cbz	r5, 8017898 <__d2b+0x94>
 8017868:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801786c:	4405      	add	r5, r0
 801786e:	603d      	str	r5, [r7, #0]
 8017870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017874:	6030      	str	r0, [r6, #0]
 8017876:	4620      	mov	r0, r4
 8017878:	b003      	add	sp, #12
 801787a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801787e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017882:	e7d6      	b.n	8017832 <__d2b+0x2e>
 8017884:	6161      	str	r1, [r4, #20]
 8017886:	e7e7      	b.n	8017858 <__d2b+0x54>
 8017888:	a801      	add	r0, sp, #4
 801788a:	f7ff fcf1 	bl	8017270 <__lo0bits>
 801788e:	9b01      	ldr	r3, [sp, #4]
 8017890:	6163      	str	r3, [r4, #20]
 8017892:	3020      	adds	r0, #32
 8017894:	2201      	movs	r2, #1
 8017896:	e7e5      	b.n	8017864 <__d2b+0x60>
 8017898:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801789c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80178a0:	6038      	str	r0, [r7, #0]
 80178a2:	6918      	ldr	r0, [r3, #16]
 80178a4:	f7ff fcc4 	bl	8017230 <__hi0bits>
 80178a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80178ac:	e7e2      	b.n	8017874 <__d2b+0x70>
 80178ae:	bf00      	nop
 80178b0:	0801c0f1 	.word	0x0801c0f1
 80178b4:	0801c179 	.word	0x0801c179

080178b8 <__ratio>:
 80178b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178bc:	4688      	mov	r8, r1
 80178be:	4669      	mov	r1, sp
 80178c0:	4681      	mov	r9, r0
 80178c2:	f7ff ff55 	bl	8017770 <__b2d>
 80178c6:	a901      	add	r1, sp, #4
 80178c8:	4640      	mov	r0, r8
 80178ca:	ec55 4b10 	vmov	r4, r5, d0
 80178ce:	f7ff ff4f 	bl	8017770 <__b2d>
 80178d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80178d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80178da:	eba3 0c02 	sub.w	ip, r3, r2
 80178de:	e9dd 3200 	ldrd	r3, r2, [sp]
 80178e2:	1a9b      	subs	r3, r3, r2
 80178e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80178e8:	ec51 0b10 	vmov	r0, r1, d0
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	bfd6      	itet	le
 80178f0:	460a      	movle	r2, r1
 80178f2:	462a      	movgt	r2, r5
 80178f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80178f8:	468b      	mov	fp, r1
 80178fa:	462f      	mov	r7, r5
 80178fc:	bfd4      	ite	le
 80178fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017902:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017906:	4620      	mov	r0, r4
 8017908:	ee10 2a10 	vmov	r2, s0
 801790c:	465b      	mov	r3, fp
 801790e:	4639      	mov	r1, r7
 8017910:	f7e8 ffb4 	bl	800087c <__aeabi_ddiv>
 8017914:	ec41 0b10 	vmov	d0, r0, r1
 8017918:	b003      	add	sp, #12
 801791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801791e <__copybits>:
 801791e:	3901      	subs	r1, #1
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	1149      	asrs	r1, r1, #5
 8017924:	6914      	ldr	r4, [r2, #16]
 8017926:	3101      	adds	r1, #1
 8017928:	f102 0314 	add.w	r3, r2, #20
 801792c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017930:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017934:	1f05      	subs	r5, r0, #4
 8017936:	42a3      	cmp	r3, r4
 8017938:	d30c      	bcc.n	8017954 <__copybits+0x36>
 801793a:	1aa3      	subs	r3, r4, r2
 801793c:	3b11      	subs	r3, #17
 801793e:	f023 0303 	bic.w	r3, r3, #3
 8017942:	3211      	adds	r2, #17
 8017944:	42a2      	cmp	r2, r4
 8017946:	bf88      	it	hi
 8017948:	2300      	movhi	r3, #0
 801794a:	4418      	add	r0, r3
 801794c:	2300      	movs	r3, #0
 801794e:	4288      	cmp	r0, r1
 8017950:	d305      	bcc.n	801795e <__copybits+0x40>
 8017952:	bd70      	pop	{r4, r5, r6, pc}
 8017954:	f853 6b04 	ldr.w	r6, [r3], #4
 8017958:	f845 6f04 	str.w	r6, [r5, #4]!
 801795c:	e7eb      	b.n	8017936 <__copybits+0x18>
 801795e:	f840 3b04 	str.w	r3, [r0], #4
 8017962:	e7f4      	b.n	801794e <__copybits+0x30>

08017964 <__any_on>:
 8017964:	f100 0214 	add.w	r2, r0, #20
 8017968:	6900      	ldr	r0, [r0, #16]
 801796a:	114b      	asrs	r3, r1, #5
 801796c:	4298      	cmp	r0, r3
 801796e:	b510      	push	{r4, lr}
 8017970:	db11      	blt.n	8017996 <__any_on+0x32>
 8017972:	dd0a      	ble.n	801798a <__any_on+0x26>
 8017974:	f011 011f 	ands.w	r1, r1, #31
 8017978:	d007      	beq.n	801798a <__any_on+0x26>
 801797a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801797e:	fa24 f001 	lsr.w	r0, r4, r1
 8017982:	fa00 f101 	lsl.w	r1, r0, r1
 8017986:	428c      	cmp	r4, r1
 8017988:	d10b      	bne.n	80179a2 <__any_on+0x3e>
 801798a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801798e:	4293      	cmp	r3, r2
 8017990:	d803      	bhi.n	801799a <__any_on+0x36>
 8017992:	2000      	movs	r0, #0
 8017994:	bd10      	pop	{r4, pc}
 8017996:	4603      	mov	r3, r0
 8017998:	e7f7      	b.n	801798a <__any_on+0x26>
 801799a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801799e:	2900      	cmp	r1, #0
 80179a0:	d0f5      	beq.n	801798e <__any_on+0x2a>
 80179a2:	2001      	movs	r0, #1
 80179a4:	e7f6      	b.n	8017994 <__any_on+0x30>

080179a6 <__ascii_wctomb>:
 80179a6:	b149      	cbz	r1, 80179bc <__ascii_wctomb+0x16>
 80179a8:	2aff      	cmp	r2, #255	; 0xff
 80179aa:	bf85      	ittet	hi
 80179ac:	238a      	movhi	r3, #138	; 0x8a
 80179ae:	6003      	strhi	r3, [r0, #0]
 80179b0:	700a      	strbls	r2, [r1, #0]
 80179b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80179b6:	bf98      	it	ls
 80179b8:	2001      	movls	r0, #1
 80179ba:	4770      	bx	lr
 80179bc:	4608      	mov	r0, r1
 80179be:	4770      	bx	lr

080179c0 <__ssputs_r>:
 80179c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179c4:	688e      	ldr	r6, [r1, #8]
 80179c6:	461f      	mov	r7, r3
 80179c8:	42be      	cmp	r6, r7
 80179ca:	680b      	ldr	r3, [r1, #0]
 80179cc:	4682      	mov	sl, r0
 80179ce:	460c      	mov	r4, r1
 80179d0:	4690      	mov	r8, r2
 80179d2:	d82c      	bhi.n	8017a2e <__ssputs_r+0x6e>
 80179d4:	898a      	ldrh	r2, [r1, #12]
 80179d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80179da:	d026      	beq.n	8017a2a <__ssputs_r+0x6a>
 80179dc:	6965      	ldr	r5, [r4, #20]
 80179de:	6909      	ldr	r1, [r1, #16]
 80179e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179e4:	eba3 0901 	sub.w	r9, r3, r1
 80179e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179ec:	1c7b      	adds	r3, r7, #1
 80179ee:	444b      	add	r3, r9
 80179f0:	106d      	asrs	r5, r5, #1
 80179f2:	429d      	cmp	r5, r3
 80179f4:	bf38      	it	cc
 80179f6:	461d      	movcc	r5, r3
 80179f8:	0553      	lsls	r3, r2, #21
 80179fa:	d527      	bpl.n	8017a4c <__ssputs_r+0x8c>
 80179fc:	4629      	mov	r1, r5
 80179fe:	f7ff fa87 	bl	8016f10 <_malloc_r>
 8017a02:	4606      	mov	r6, r0
 8017a04:	b360      	cbz	r0, 8017a60 <__ssputs_r+0xa0>
 8017a06:	6921      	ldr	r1, [r4, #16]
 8017a08:	464a      	mov	r2, r9
 8017a0a:	f7fe fe9c 	bl	8016746 <memcpy>
 8017a0e:	89a3      	ldrh	r3, [r4, #12]
 8017a10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a18:	81a3      	strh	r3, [r4, #12]
 8017a1a:	6126      	str	r6, [r4, #16]
 8017a1c:	6165      	str	r5, [r4, #20]
 8017a1e:	444e      	add	r6, r9
 8017a20:	eba5 0509 	sub.w	r5, r5, r9
 8017a24:	6026      	str	r6, [r4, #0]
 8017a26:	60a5      	str	r5, [r4, #8]
 8017a28:	463e      	mov	r6, r7
 8017a2a:	42be      	cmp	r6, r7
 8017a2c:	d900      	bls.n	8017a30 <__ssputs_r+0x70>
 8017a2e:	463e      	mov	r6, r7
 8017a30:	6820      	ldr	r0, [r4, #0]
 8017a32:	4632      	mov	r2, r6
 8017a34:	4641      	mov	r1, r8
 8017a36:	f7fe fdd2 	bl	80165de <memmove>
 8017a3a:	68a3      	ldr	r3, [r4, #8]
 8017a3c:	1b9b      	subs	r3, r3, r6
 8017a3e:	60a3      	str	r3, [r4, #8]
 8017a40:	6823      	ldr	r3, [r4, #0]
 8017a42:	4433      	add	r3, r6
 8017a44:	6023      	str	r3, [r4, #0]
 8017a46:	2000      	movs	r0, #0
 8017a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a4c:	462a      	mov	r2, r5
 8017a4e:	f000 fd99 	bl	8018584 <_realloc_r>
 8017a52:	4606      	mov	r6, r0
 8017a54:	2800      	cmp	r0, #0
 8017a56:	d1e0      	bne.n	8017a1a <__ssputs_r+0x5a>
 8017a58:	6921      	ldr	r1, [r4, #16]
 8017a5a:	4650      	mov	r0, sl
 8017a5c:	f7fe fe94 	bl	8016788 <_free_r>
 8017a60:	230c      	movs	r3, #12
 8017a62:	f8ca 3000 	str.w	r3, [sl]
 8017a66:	89a3      	ldrh	r3, [r4, #12]
 8017a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a6c:	81a3      	strh	r3, [r4, #12]
 8017a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a72:	e7e9      	b.n	8017a48 <__ssputs_r+0x88>

08017a74 <_svfiprintf_r>:
 8017a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a78:	4698      	mov	r8, r3
 8017a7a:	898b      	ldrh	r3, [r1, #12]
 8017a7c:	061b      	lsls	r3, r3, #24
 8017a7e:	b09d      	sub	sp, #116	; 0x74
 8017a80:	4607      	mov	r7, r0
 8017a82:	460d      	mov	r5, r1
 8017a84:	4614      	mov	r4, r2
 8017a86:	d50e      	bpl.n	8017aa6 <_svfiprintf_r+0x32>
 8017a88:	690b      	ldr	r3, [r1, #16]
 8017a8a:	b963      	cbnz	r3, 8017aa6 <_svfiprintf_r+0x32>
 8017a8c:	2140      	movs	r1, #64	; 0x40
 8017a8e:	f7ff fa3f 	bl	8016f10 <_malloc_r>
 8017a92:	6028      	str	r0, [r5, #0]
 8017a94:	6128      	str	r0, [r5, #16]
 8017a96:	b920      	cbnz	r0, 8017aa2 <_svfiprintf_r+0x2e>
 8017a98:	230c      	movs	r3, #12
 8017a9a:	603b      	str	r3, [r7, #0]
 8017a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa0:	e0d0      	b.n	8017c44 <_svfiprintf_r+0x1d0>
 8017aa2:	2340      	movs	r3, #64	; 0x40
 8017aa4:	616b      	str	r3, [r5, #20]
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8017aaa:	2320      	movs	r3, #32
 8017aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ab4:	2330      	movs	r3, #48	; 0x30
 8017ab6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017c5c <_svfiprintf_r+0x1e8>
 8017aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017abe:	f04f 0901 	mov.w	r9, #1
 8017ac2:	4623      	mov	r3, r4
 8017ac4:	469a      	mov	sl, r3
 8017ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017aca:	b10a      	cbz	r2, 8017ad0 <_svfiprintf_r+0x5c>
 8017acc:	2a25      	cmp	r2, #37	; 0x25
 8017ace:	d1f9      	bne.n	8017ac4 <_svfiprintf_r+0x50>
 8017ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8017ad4:	d00b      	beq.n	8017aee <_svfiprintf_r+0x7a>
 8017ad6:	465b      	mov	r3, fp
 8017ad8:	4622      	mov	r2, r4
 8017ada:	4629      	mov	r1, r5
 8017adc:	4638      	mov	r0, r7
 8017ade:	f7ff ff6f 	bl	80179c0 <__ssputs_r>
 8017ae2:	3001      	adds	r0, #1
 8017ae4:	f000 80a9 	beq.w	8017c3a <_svfiprintf_r+0x1c6>
 8017ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017aea:	445a      	add	r2, fp
 8017aec:	9209      	str	r2, [sp, #36]	; 0x24
 8017aee:	f89a 3000 	ldrb.w	r3, [sl]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	f000 80a1 	beq.w	8017c3a <_svfiprintf_r+0x1c6>
 8017af8:	2300      	movs	r3, #0
 8017afa:	f04f 32ff 	mov.w	r2, #4294967295
 8017afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b02:	f10a 0a01 	add.w	sl, sl, #1
 8017b06:	9304      	str	r3, [sp, #16]
 8017b08:	9307      	str	r3, [sp, #28]
 8017b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8017b10:	4654      	mov	r4, sl
 8017b12:	2205      	movs	r2, #5
 8017b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b18:	4850      	ldr	r0, [pc, #320]	; (8017c5c <_svfiprintf_r+0x1e8>)
 8017b1a:	f7e8 fb79 	bl	8000210 <memchr>
 8017b1e:	9a04      	ldr	r2, [sp, #16]
 8017b20:	b9d8      	cbnz	r0, 8017b5a <_svfiprintf_r+0xe6>
 8017b22:	06d0      	lsls	r0, r2, #27
 8017b24:	bf44      	itt	mi
 8017b26:	2320      	movmi	r3, #32
 8017b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b2c:	0711      	lsls	r1, r2, #28
 8017b2e:	bf44      	itt	mi
 8017b30:	232b      	movmi	r3, #43	; 0x2b
 8017b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b36:	f89a 3000 	ldrb.w	r3, [sl]
 8017b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8017b3c:	d015      	beq.n	8017b6a <_svfiprintf_r+0xf6>
 8017b3e:	9a07      	ldr	r2, [sp, #28]
 8017b40:	4654      	mov	r4, sl
 8017b42:	2000      	movs	r0, #0
 8017b44:	f04f 0c0a 	mov.w	ip, #10
 8017b48:	4621      	mov	r1, r4
 8017b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b4e:	3b30      	subs	r3, #48	; 0x30
 8017b50:	2b09      	cmp	r3, #9
 8017b52:	d94d      	bls.n	8017bf0 <_svfiprintf_r+0x17c>
 8017b54:	b1b0      	cbz	r0, 8017b84 <_svfiprintf_r+0x110>
 8017b56:	9207      	str	r2, [sp, #28]
 8017b58:	e014      	b.n	8017b84 <_svfiprintf_r+0x110>
 8017b5a:	eba0 0308 	sub.w	r3, r0, r8
 8017b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8017b62:	4313      	orrs	r3, r2
 8017b64:	9304      	str	r3, [sp, #16]
 8017b66:	46a2      	mov	sl, r4
 8017b68:	e7d2      	b.n	8017b10 <_svfiprintf_r+0x9c>
 8017b6a:	9b03      	ldr	r3, [sp, #12]
 8017b6c:	1d19      	adds	r1, r3, #4
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	9103      	str	r1, [sp, #12]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	bfbb      	ittet	lt
 8017b76:	425b      	neglt	r3, r3
 8017b78:	f042 0202 	orrlt.w	r2, r2, #2
 8017b7c:	9307      	strge	r3, [sp, #28]
 8017b7e:	9307      	strlt	r3, [sp, #28]
 8017b80:	bfb8      	it	lt
 8017b82:	9204      	strlt	r2, [sp, #16]
 8017b84:	7823      	ldrb	r3, [r4, #0]
 8017b86:	2b2e      	cmp	r3, #46	; 0x2e
 8017b88:	d10c      	bne.n	8017ba4 <_svfiprintf_r+0x130>
 8017b8a:	7863      	ldrb	r3, [r4, #1]
 8017b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8017b8e:	d134      	bne.n	8017bfa <_svfiprintf_r+0x186>
 8017b90:	9b03      	ldr	r3, [sp, #12]
 8017b92:	1d1a      	adds	r2, r3, #4
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	9203      	str	r2, [sp, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	bfb8      	it	lt
 8017b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ba0:	3402      	adds	r4, #2
 8017ba2:	9305      	str	r3, [sp, #20]
 8017ba4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017c6c <_svfiprintf_r+0x1f8>
 8017ba8:	7821      	ldrb	r1, [r4, #0]
 8017baa:	2203      	movs	r2, #3
 8017bac:	4650      	mov	r0, sl
 8017bae:	f7e8 fb2f 	bl	8000210 <memchr>
 8017bb2:	b138      	cbz	r0, 8017bc4 <_svfiprintf_r+0x150>
 8017bb4:	9b04      	ldr	r3, [sp, #16]
 8017bb6:	eba0 000a 	sub.w	r0, r0, sl
 8017bba:	2240      	movs	r2, #64	; 0x40
 8017bbc:	4082      	lsls	r2, r0
 8017bbe:	4313      	orrs	r3, r2
 8017bc0:	3401      	adds	r4, #1
 8017bc2:	9304      	str	r3, [sp, #16]
 8017bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bc8:	4825      	ldr	r0, [pc, #148]	; (8017c60 <_svfiprintf_r+0x1ec>)
 8017bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bce:	2206      	movs	r2, #6
 8017bd0:	f7e8 fb1e 	bl	8000210 <memchr>
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	d038      	beq.n	8017c4a <_svfiprintf_r+0x1d6>
 8017bd8:	4b22      	ldr	r3, [pc, #136]	; (8017c64 <_svfiprintf_r+0x1f0>)
 8017bda:	bb1b      	cbnz	r3, 8017c24 <_svfiprintf_r+0x1b0>
 8017bdc:	9b03      	ldr	r3, [sp, #12]
 8017bde:	3307      	adds	r3, #7
 8017be0:	f023 0307 	bic.w	r3, r3, #7
 8017be4:	3308      	adds	r3, #8
 8017be6:	9303      	str	r3, [sp, #12]
 8017be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bea:	4433      	add	r3, r6
 8017bec:	9309      	str	r3, [sp, #36]	; 0x24
 8017bee:	e768      	b.n	8017ac2 <_svfiprintf_r+0x4e>
 8017bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bf4:	460c      	mov	r4, r1
 8017bf6:	2001      	movs	r0, #1
 8017bf8:	e7a6      	b.n	8017b48 <_svfiprintf_r+0xd4>
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	3401      	adds	r4, #1
 8017bfe:	9305      	str	r3, [sp, #20]
 8017c00:	4619      	mov	r1, r3
 8017c02:	f04f 0c0a 	mov.w	ip, #10
 8017c06:	4620      	mov	r0, r4
 8017c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c0c:	3a30      	subs	r2, #48	; 0x30
 8017c0e:	2a09      	cmp	r2, #9
 8017c10:	d903      	bls.n	8017c1a <_svfiprintf_r+0x1a6>
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d0c6      	beq.n	8017ba4 <_svfiprintf_r+0x130>
 8017c16:	9105      	str	r1, [sp, #20]
 8017c18:	e7c4      	b.n	8017ba4 <_svfiprintf_r+0x130>
 8017c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c1e:	4604      	mov	r4, r0
 8017c20:	2301      	movs	r3, #1
 8017c22:	e7f0      	b.n	8017c06 <_svfiprintf_r+0x192>
 8017c24:	ab03      	add	r3, sp, #12
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	462a      	mov	r2, r5
 8017c2a:	4b0f      	ldr	r3, [pc, #60]	; (8017c68 <_svfiprintf_r+0x1f4>)
 8017c2c:	a904      	add	r1, sp, #16
 8017c2e:	4638      	mov	r0, r7
 8017c30:	f3af 8000 	nop.w
 8017c34:	1c42      	adds	r2, r0, #1
 8017c36:	4606      	mov	r6, r0
 8017c38:	d1d6      	bne.n	8017be8 <_svfiprintf_r+0x174>
 8017c3a:	89ab      	ldrh	r3, [r5, #12]
 8017c3c:	065b      	lsls	r3, r3, #25
 8017c3e:	f53f af2d 	bmi.w	8017a9c <_svfiprintf_r+0x28>
 8017c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c44:	b01d      	add	sp, #116	; 0x74
 8017c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4a:	ab03      	add	r3, sp, #12
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	462a      	mov	r2, r5
 8017c50:	4b05      	ldr	r3, [pc, #20]	; (8017c68 <_svfiprintf_r+0x1f4>)
 8017c52:	a904      	add	r1, sp, #16
 8017c54:	4638      	mov	r0, r7
 8017c56:	f000 f9bd 	bl	8017fd4 <_printf_i>
 8017c5a:	e7eb      	b.n	8017c34 <_svfiprintf_r+0x1c0>
 8017c5c:	0801c2d4 	.word	0x0801c2d4
 8017c60:	0801c2de 	.word	0x0801c2de
 8017c64:	00000000 	.word	0x00000000
 8017c68:	080179c1 	.word	0x080179c1
 8017c6c:	0801c2da 	.word	0x0801c2da

08017c70 <__sfputc_r>:
 8017c70:	6893      	ldr	r3, [r2, #8]
 8017c72:	3b01      	subs	r3, #1
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	b410      	push	{r4}
 8017c78:	6093      	str	r3, [r2, #8]
 8017c7a:	da08      	bge.n	8017c8e <__sfputc_r+0x1e>
 8017c7c:	6994      	ldr	r4, [r2, #24]
 8017c7e:	42a3      	cmp	r3, r4
 8017c80:	db01      	blt.n	8017c86 <__sfputc_r+0x16>
 8017c82:	290a      	cmp	r1, #10
 8017c84:	d103      	bne.n	8017c8e <__sfputc_r+0x1e>
 8017c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c8a:	f000 bb73 	b.w	8018374 <__swbuf_r>
 8017c8e:	6813      	ldr	r3, [r2, #0]
 8017c90:	1c58      	adds	r0, r3, #1
 8017c92:	6010      	str	r0, [r2, #0]
 8017c94:	7019      	strb	r1, [r3, #0]
 8017c96:	4608      	mov	r0, r1
 8017c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c9c:	4770      	bx	lr

08017c9e <__sfputs_r>:
 8017c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ca0:	4606      	mov	r6, r0
 8017ca2:	460f      	mov	r7, r1
 8017ca4:	4614      	mov	r4, r2
 8017ca6:	18d5      	adds	r5, r2, r3
 8017ca8:	42ac      	cmp	r4, r5
 8017caa:	d101      	bne.n	8017cb0 <__sfputs_r+0x12>
 8017cac:	2000      	movs	r0, #0
 8017cae:	e007      	b.n	8017cc0 <__sfputs_r+0x22>
 8017cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cb4:	463a      	mov	r2, r7
 8017cb6:	4630      	mov	r0, r6
 8017cb8:	f7ff ffda 	bl	8017c70 <__sfputc_r>
 8017cbc:	1c43      	adds	r3, r0, #1
 8017cbe:	d1f3      	bne.n	8017ca8 <__sfputs_r+0xa>
 8017cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017cc4 <_vfiprintf_r>:
 8017cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc8:	460d      	mov	r5, r1
 8017cca:	b09d      	sub	sp, #116	; 0x74
 8017ccc:	4614      	mov	r4, r2
 8017cce:	4698      	mov	r8, r3
 8017cd0:	4606      	mov	r6, r0
 8017cd2:	b118      	cbz	r0, 8017cdc <_vfiprintf_r+0x18>
 8017cd4:	6a03      	ldr	r3, [r0, #32]
 8017cd6:	b90b      	cbnz	r3, 8017cdc <_vfiprintf_r+0x18>
 8017cd8:	f7fe fbb2 	bl	8016440 <__sinit>
 8017cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cde:	07d9      	lsls	r1, r3, #31
 8017ce0:	d405      	bmi.n	8017cee <_vfiprintf_r+0x2a>
 8017ce2:	89ab      	ldrh	r3, [r5, #12]
 8017ce4:	059a      	lsls	r2, r3, #22
 8017ce6:	d402      	bmi.n	8017cee <_vfiprintf_r+0x2a>
 8017ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cea:	f7fe fd2a 	bl	8016742 <__retarget_lock_acquire_recursive>
 8017cee:	89ab      	ldrh	r3, [r5, #12]
 8017cf0:	071b      	lsls	r3, r3, #28
 8017cf2:	d501      	bpl.n	8017cf8 <_vfiprintf_r+0x34>
 8017cf4:	692b      	ldr	r3, [r5, #16]
 8017cf6:	b99b      	cbnz	r3, 8017d20 <_vfiprintf_r+0x5c>
 8017cf8:	4629      	mov	r1, r5
 8017cfa:	4630      	mov	r0, r6
 8017cfc:	f000 fb78 	bl	80183f0 <__swsetup_r>
 8017d00:	b170      	cbz	r0, 8017d20 <_vfiprintf_r+0x5c>
 8017d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d04:	07dc      	lsls	r4, r3, #31
 8017d06:	d504      	bpl.n	8017d12 <_vfiprintf_r+0x4e>
 8017d08:	f04f 30ff 	mov.w	r0, #4294967295
 8017d0c:	b01d      	add	sp, #116	; 0x74
 8017d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d12:	89ab      	ldrh	r3, [r5, #12]
 8017d14:	0598      	lsls	r0, r3, #22
 8017d16:	d4f7      	bmi.n	8017d08 <_vfiprintf_r+0x44>
 8017d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d1a:	f7fe fd13 	bl	8016744 <__retarget_lock_release_recursive>
 8017d1e:	e7f3      	b.n	8017d08 <_vfiprintf_r+0x44>
 8017d20:	2300      	movs	r3, #0
 8017d22:	9309      	str	r3, [sp, #36]	; 0x24
 8017d24:	2320      	movs	r3, #32
 8017d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d2e:	2330      	movs	r3, #48	; 0x30
 8017d30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017ee4 <_vfiprintf_r+0x220>
 8017d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d38:	f04f 0901 	mov.w	r9, #1
 8017d3c:	4623      	mov	r3, r4
 8017d3e:	469a      	mov	sl, r3
 8017d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d44:	b10a      	cbz	r2, 8017d4a <_vfiprintf_r+0x86>
 8017d46:	2a25      	cmp	r2, #37	; 0x25
 8017d48:	d1f9      	bne.n	8017d3e <_vfiprintf_r+0x7a>
 8017d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8017d4e:	d00b      	beq.n	8017d68 <_vfiprintf_r+0xa4>
 8017d50:	465b      	mov	r3, fp
 8017d52:	4622      	mov	r2, r4
 8017d54:	4629      	mov	r1, r5
 8017d56:	4630      	mov	r0, r6
 8017d58:	f7ff ffa1 	bl	8017c9e <__sfputs_r>
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	f000 80a9 	beq.w	8017eb4 <_vfiprintf_r+0x1f0>
 8017d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d64:	445a      	add	r2, fp
 8017d66:	9209      	str	r2, [sp, #36]	; 0x24
 8017d68:	f89a 3000 	ldrb.w	r3, [sl]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	f000 80a1 	beq.w	8017eb4 <_vfiprintf_r+0x1f0>
 8017d72:	2300      	movs	r3, #0
 8017d74:	f04f 32ff 	mov.w	r2, #4294967295
 8017d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d7c:	f10a 0a01 	add.w	sl, sl, #1
 8017d80:	9304      	str	r3, [sp, #16]
 8017d82:	9307      	str	r3, [sp, #28]
 8017d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d88:	931a      	str	r3, [sp, #104]	; 0x68
 8017d8a:	4654      	mov	r4, sl
 8017d8c:	2205      	movs	r2, #5
 8017d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d92:	4854      	ldr	r0, [pc, #336]	; (8017ee4 <_vfiprintf_r+0x220>)
 8017d94:	f7e8 fa3c 	bl	8000210 <memchr>
 8017d98:	9a04      	ldr	r2, [sp, #16]
 8017d9a:	b9d8      	cbnz	r0, 8017dd4 <_vfiprintf_r+0x110>
 8017d9c:	06d1      	lsls	r1, r2, #27
 8017d9e:	bf44      	itt	mi
 8017da0:	2320      	movmi	r3, #32
 8017da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017da6:	0713      	lsls	r3, r2, #28
 8017da8:	bf44      	itt	mi
 8017daa:	232b      	movmi	r3, #43	; 0x2b
 8017dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017db0:	f89a 3000 	ldrb.w	r3, [sl]
 8017db4:	2b2a      	cmp	r3, #42	; 0x2a
 8017db6:	d015      	beq.n	8017de4 <_vfiprintf_r+0x120>
 8017db8:	9a07      	ldr	r2, [sp, #28]
 8017dba:	4654      	mov	r4, sl
 8017dbc:	2000      	movs	r0, #0
 8017dbe:	f04f 0c0a 	mov.w	ip, #10
 8017dc2:	4621      	mov	r1, r4
 8017dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017dc8:	3b30      	subs	r3, #48	; 0x30
 8017dca:	2b09      	cmp	r3, #9
 8017dcc:	d94d      	bls.n	8017e6a <_vfiprintf_r+0x1a6>
 8017dce:	b1b0      	cbz	r0, 8017dfe <_vfiprintf_r+0x13a>
 8017dd0:	9207      	str	r2, [sp, #28]
 8017dd2:	e014      	b.n	8017dfe <_vfiprintf_r+0x13a>
 8017dd4:	eba0 0308 	sub.w	r3, r0, r8
 8017dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8017ddc:	4313      	orrs	r3, r2
 8017dde:	9304      	str	r3, [sp, #16]
 8017de0:	46a2      	mov	sl, r4
 8017de2:	e7d2      	b.n	8017d8a <_vfiprintf_r+0xc6>
 8017de4:	9b03      	ldr	r3, [sp, #12]
 8017de6:	1d19      	adds	r1, r3, #4
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	9103      	str	r1, [sp, #12]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	bfbb      	ittet	lt
 8017df0:	425b      	neglt	r3, r3
 8017df2:	f042 0202 	orrlt.w	r2, r2, #2
 8017df6:	9307      	strge	r3, [sp, #28]
 8017df8:	9307      	strlt	r3, [sp, #28]
 8017dfa:	bfb8      	it	lt
 8017dfc:	9204      	strlt	r2, [sp, #16]
 8017dfe:	7823      	ldrb	r3, [r4, #0]
 8017e00:	2b2e      	cmp	r3, #46	; 0x2e
 8017e02:	d10c      	bne.n	8017e1e <_vfiprintf_r+0x15a>
 8017e04:	7863      	ldrb	r3, [r4, #1]
 8017e06:	2b2a      	cmp	r3, #42	; 0x2a
 8017e08:	d134      	bne.n	8017e74 <_vfiprintf_r+0x1b0>
 8017e0a:	9b03      	ldr	r3, [sp, #12]
 8017e0c:	1d1a      	adds	r2, r3, #4
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	9203      	str	r2, [sp, #12]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	bfb8      	it	lt
 8017e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8017e1a:	3402      	adds	r4, #2
 8017e1c:	9305      	str	r3, [sp, #20]
 8017e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017ef4 <_vfiprintf_r+0x230>
 8017e22:	7821      	ldrb	r1, [r4, #0]
 8017e24:	2203      	movs	r2, #3
 8017e26:	4650      	mov	r0, sl
 8017e28:	f7e8 f9f2 	bl	8000210 <memchr>
 8017e2c:	b138      	cbz	r0, 8017e3e <_vfiprintf_r+0x17a>
 8017e2e:	9b04      	ldr	r3, [sp, #16]
 8017e30:	eba0 000a 	sub.w	r0, r0, sl
 8017e34:	2240      	movs	r2, #64	; 0x40
 8017e36:	4082      	lsls	r2, r0
 8017e38:	4313      	orrs	r3, r2
 8017e3a:	3401      	adds	r4, #1
 8017e3c:	9304      	str	r3, [sp, #16]
 8017e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e42:	4829      	ldr	r0, [pc, #164]	; (8017ee8 <_vfiprintf_r+0x224>)
 8017e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e48:	2206      	movs	r2, #6
 8017e4a:	f7e8 f9e1 	bl	8000210 <memchr>
 8017e4e:	2800      	cmp	r0, #0
 8017e50:	d03f      	beq.n	8017ed2 <_vfiprintf_r+0x20e>
 8017e52:	4b26      	ldr	r3, [pc, #152]	; (8017eec <_vfiprintf_r+0x228>)
 8017e54:	bb1b      	cbnz	r3, 8017e9e <_vfiprintf_r+0x1da>
 8017e56:	9b03      	ldr	r3, [sp, #12]
 8017e58:	3307      	adds	r3, #7
 8017e5a:	f023 0307 	bic.w	r3, r3, #7
 8017e5e:	3308      	adds	r3, #8
 8017e60:	9303      	str	r3, [sp, #12]
 8017e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e64:	443b      	add	r3, r7
 8017e66:	9309      	str	r3, [sp, #36]	; 0x24
 8017e68:	e768      	b.n	8017d3c <_vfiprintf_r+0x78>
 8017e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e6e:	460c      	mov	r4, r1
 8017e70:	2001      	movs	r0, #1
 8017e72:	e7a6      	b.n	8017dc2 <_vfiprintf_r+0xfe>
 8017e74:	2300      	movs	r3, #0
 8017e76:	3401      	adds	r4, #1
 8017e78:	9305      	str	r3, [sp, #20]
 8017e7a:	4619      	mov	r1, r3
 8017e7c:	f04f 0c0a 	mov.w	ip, #10
 8017e80:	4620      	mov	r0, r4
 8017e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e86:	3a30      	subs	r2, #48	; 0x30
 8017e88:	2a09      	cmp	r2, #9
 8017e8a:	d903      	bls.n	8017e94 <_vfiprintf_r+0x1d0>
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d0c6      	beq.n	8017e1e <_vfiprintf_r+0x15a>
 8017e90:	9105      	str	r1, [sp, #20]
 8017e92:	e7c4      	b.n	8017e1e <_vfiprintf_r+0x15a>
 8017e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e98:	4604      	mov	r4, r0
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	e7f0      	b.n	8017e80 <_vfiprintf_r+0x1bc>
 8017e9e:	ab03      	add	r3, sp, #12
 8017ea0:	9300      	str	r3, [sp, #0]
 8017ea2:	462a      	mov	r2, r5
 8017ea4:	4b12      	ldr	r3, [pc, #72]	; (8017ef0 <_vfiprintf_r+0x22c>)
 8017ea6:	a904      	add	r1, sp, #16
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f3af 8000 	nop.w
 8017eae:	4607      	mov	r7, r0
 8017eb0:	1c78      	adds	r0, r7, #1
 8017eb2:	d1d6      	bne.n	8017e62 <_vfiprintf_r+0x19e>
 8017eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017eb6:	07d9      	lsls	r1, r3, #31
 8017eb8:	d405      	bmi.n	8017ec6 <_vfiprintf_r+0x202>
 8017eba:	89ab      	ldrh	r3, [r5, #12]
 8017ebc:	059a      	lsls	r2, r3, #22
 8017ebe:	d402      	bmi.n	8017ec6 <_vfiprintf_r+0x202>
 8017ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ec2:	f7fe fc3f 	bl	8016744 <__retarget_lock_release_recursive>
 8017ec6:	89ab      	ldrh	r3, [r5, #12]
 8017ec8:	065b      	lsls	r3, r3, #25
 8017eca:	f53f af1d 	bmi.w	8017d08 <_vfiprintf_r+0x44>
 8017ece:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ed0:	e71c      	b.n	8017d0c <_vfiprintf_r+0x48>
 8017ed2:	ab03      	add	r3, sp, #12
 8017ed4:	9300      	str	r3, [sp, #0]
 8017ed6:	462a      	mov	r2, r5
 8017ed8:	4b05      	ldr	r3, [pc, #20]	; (8017ef0 <_vfiprintf_r+0x22c>)
 8017eda:	a904      	add	r1, sp, #16
 8017edc:	4630      	mov	r0, r6
 8017ede:	f000 f879 	bl	8017fd4 <_printf_i>
 8017ee2:	e7e4      	b.n	8017eae <_vfiprintf_r+0x1ea>
 8017ee4:	0801c2d4 	.word	0x0801c2d4
 8017ee8:	0801c2de 	.word	0x0801c2de
 8017eec:	00000000 	.word	0x00000000
 8017ef0:	08017c9f 	.word	0x08017c9f
 8017ef4:	0801c2da 	.word	0x0801c2da

08017ef8 <_printf_common>:
 8017ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017efc:	4616      	mov	r6, r2
 8017efe:	4699      	mov	r9, r3
 8017f00:	688a      	ldr	r2, [r1, #8]
 8017f02:	690b      	ldr	r3, [r1, #16]
 8017f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f08:	4293      	cmp	r3, r2
 8017f0a:	bfb8      	it	lt
 8017f0c:	4613      	movlt	r3, r2
 8017f0e:	6033      	str	r3, [r6, #0]
 8017f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f14:	4607      	mov	r7, r0
 8017f16:	460c      	mov	r4, r1
 8017f18:	b10a      	cbz	r2, 8017f1e <_printf_common+0x26>
 8017f1a:	3301      	adds	r3, #1
 8017f1c:	6033      	str	r3, [r6, #0]
 8017f1e:	6823      	ldr	r3, [r4, #0]
 8017f20:	0699      	lsls	r1, r3, #26
 8017f22:	bf42      	ittt	mi
 8017f24:	6833      	ldrmi	r3, [r6, #0]
 8017f26:	3302      	addmi	r3, #2
 8017f28:	6033      	strmi	r3, [r6, #0]
 8017f2a:	6825      	ldr	r5, [r4, #0]
 8017f2c:	f015 0506 	ands.w	r5, r5, #6
 8017f30:	d106      	bne.n	8017f40 <_printf_common+0x48>
 8017f32:	f104 0a19 	add.w	sl, r4, #25
 8017f36:	68e3      	ldr	r3, [r4, #12]
 8017f38:	6832      	ldr	r2, [r6, #0]
 8017f3a:	1a9b      	subs	r3, r3, r2
 8017f3c:	42ab      	cmp	r3, r5
 8017f3e:	dc26      	bgt.n	8017f8e <_printf_common+0x96>
 8017f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f44:	1e13      	subs	r3, r2, #0
 8017f46:	6822      	ldr	r2, [r4, #0]
 8017f48:	bf18      	it	ne
 8017f4a:	2301      	movne	r3, #1
 8017f4c:	0692      	lsls	r2, r2, #26
 8017f4e:	d42b      	bmi.n	8017fa8 <_printf_common+0xb0>
 8017f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f54:	4649      	mov	r1, r9
 8017f56:	4638      	mov	r0, r7
 8017f58:	47c0      	blx	r8
 8017f5a:	3001      	adds	r0, #1
 8017f5c:	d01e      	beq.n	8017f9c <_printf_common+0xa4>
 8017f5e:	6823      	ldr	r3, [r4, #0]
 8017f60:	6922      	ldr	r2, [r4, #16]
 8017f62:	f003 0306 	and.w	r3, r3, #6
 8017f66:	2b04      	cmp	r3, #4
 8017f68:	bf02      	ittt	eq
 8017f6a:	68e5      	ldreq	r5, [r4, #12]
 8017f6c:	6833      	ldreq	r3, [r6, #0]
 8017f6e:	1aed      	subeq	r5, r5, r3
 8017f70:	68a3      	ldr	r3, [r4, #8]
 8017f72:	bf0c      	ite	eq
 8017f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f78:	2500      	movne	r5, #0
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	bfc4      	itt	gt
 8017f7e:	1a9b      	subgt	r3, r3, r2
 8017f80:	18ed      	addgt	r5, r5, r3
 8017f82:	2600      	movs	r6, #0
 8017f84:	341a      	adds	r4, #26
 8017f86:	42b5      	cmp	r5, r6
 8017f88:	d11a      	bne.n	8017fc0 <_printf_common+0xc8>
 8017f8a:	2000      	movs	r0, #0
 8017f8c:	e008      	b.n	8017fa0 <_printf_common+0xa8>
 8017f8e:	2301      	movs	r3, #1
 8017f90:	4652      	mov	r2, sl
 8017f92:	4649      	mov	r1, r9
 8017f94:	4638      	mov	r0, r7
 8017f96:	47c0      	blx	r8
 8017f98:	3001      	adds	r0, #1
 8017f9a:	d103      	bne.n	8017fa4 <_printf_common+0xac>
 8017f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fa4:	3501      	adds	r5, #1
 8017fa6:	e7c6      	b.n	8017f36 <_printf_common+0x3e>
 8017fa8:	18e1      	adds	r1, r4, r3
 8017faa:	1c5a      	adds	r2, r3, #1
 8017fac:	2030      	movs	r0, #48	; 0x30
 8017fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fb2:	4422      	add	r2, r4
 8017fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fbc:	3302      	adds	r3, #2
 8017fbe:	e7c7      	b.n	8017f50 <_printf_common+0x58>
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	4622      	mov	r2, r4
 8017fc4:	4649      	mov	r1, r9
 8017fc6:	4638      	mov	r0, r7
 8017fc8:	47c0      	blx	r8
 8017fca:	3001      	adds	r0, #1
 8017fcc:	d0e6      	beq.n	8017f9c <_printf_common+0xa4>
 8017fce:	3601      	adds	r6, #1
 8017fd0:	e7d9      	b.n	8017f86 <_printf_common+0x8e>
	...

08017fd4 <_printf_i>:
 8017fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd8:	7e0f      	ldrb	r7, [r1, #24]
 8017fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017fdc:	2f78      	cmp	r7, #120	; 0x78
 8017fde:	4691      	mov	r9, r2
 8017fe0:	4680      	mov	r8, r0
 8017fe2:	460c      	mov	r4, r1
 8017fe4:	469a      	mov	sl, r3
 8017fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017fea:	d807      	bhi.n	8017ffc <_printf_i+0x28>
 8017fec:	2f62      	cmp	r7, #98	; 0x62
 8017fee:	d80a      	bhi.n	8018006 <_printf_i+0x32>
 8017ff0:	2f00      	cmp	r7, #0
 8017ff2:	f000 80d4 	beq.w	801819e <_printf_i+0x1ca>
 8017ff6:	2f58      	cmp	r7, #88	; 0x58
 8017ff8:	f000 80c0 	beq.w	801817c <_printf_i+0x1a8>
 8017ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018004:	e03a      	b.n	801807c <_printf_i+0xa8>
 8018006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801800a:	2b15      	cmp	r3, #21
 801800c:	d8f6      	bhi.n	8017ffc <_printf_i+0x28>
 801800e:	a101      	add	r1, pc, #4	; (adr r1, 8018014 <_printf_i+0x40>)
 8018010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018014:	0801806d 	.word	0x0801806d
 8018018:	08018081 	.word	0x08018081
 801801c:	08017ffd 	.word	0x08017ffd
 8018020:	08017ffd 	.word	0x08017ffd
 8018024:	08017ffd 	.word	0x08017ffd
 8018028:	08017ffd 	.word	0x08017ffd
 801802c:	08018081 	.word	0x08018081
 8018030:	08017ffd 	.word	0x08017ffd
 8018034:	08017ffd 	.word	0x08017ffd
 8018038:	08017ffd 	.word	0x08017ffd
 801803c:	08017ffd 	.word	0x08017ffd
 8018040:	08018185 	.word	0x08018185
 8018044:	080180ad 	.word	0x080180ad
 8018048:	0801813f 	.word	0x0801813f
 801804c:	08017ffd 	.word	0x08017ffd
 8018050:	08017ffd 	.word	0x08017ffd
 8018054:	080181a7 	.word	0x080181a7
 8018058:	08017ffd 	.word	0x08017ffd
 801805c:	080180ad 	.word	0x080180ad
 8018060:	08017ffd 	.word	0x08017ffd
 8018064:	08017ffd 	.word	0x08017ffd
 8018068:	08018147 	.word	0x08018147
 801806c:	682b      	ldr	r3, [r5, #0]
 801806e:	1d1a      	adds	r2, r3, #4
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	602a      	str	r2, [r5, #0]
 8018074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801807c:	2301      	movs	r3, #1
 801807e:	e09f      	b.n	80181c0 <_printf_i+0x1ec>
 8018080:	6820      	ldr	r0, [r4, #0]
 8018082:	682b      	ldr	r3, [r5, #0]
 8018084:	0607      	lsls	r7, r0, #24
 8018086:	f103 0104 	add.w	r1, r3, #4
 801808a:	6029      	str	r1, [r5, #0]
 801808c:	d501      	bpl.n	8018092 <_printf_i+0xbe>
 801808e:	681e      	ldr	r6, [r3, #0]
 8018090:	e003      	b.n	801809a <_printf_i+0xc6>
 8018092:	0646      	lsls	r6, r0, #25
 8018094:	d5fb      	bpl.n	801808e <_printf_i+0xba>
 8018096:	f9b3 6000 	ldrsh.w	r6, [r3]
 801809a:	2e00      	cmp	r6, #0
 801809c:	da03      	bge.n	80180a6 <_printf_i+0xd2>
 801809e:	232d      	movs	r3, #45	; 0x2d
 80180a0:	4276      	negs	r6, r6
 80180a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180a6:	485a      	ldr	r0, [pc, #360]	; (8018210 <_printf_i+0x23c>)
 80180a8:	230a      	movs	r3, #10
 80180aa:	e012      	b.n	80180d2 <_printf_i+0xfe>
 80180ac:	682b      	ldr	r3, [r5, #0]
 80180ae:	6820      	ldr	r0, [r4, #0]
 80180b0:	1d19      	adds	r1, r3, #4
 80180b2:	6029      	str	r1, [r5, #0]
 80180b4:	0605      	lsls	r5, r0, #24
 80180b6:	d501      	bpl.n	80180bc <_printf_i+0xe8>
 80180b8:	681e      	ldr	r6, [r3, #0]
 80180ba:	e002      	b.n	80180c2 <_printf_i+0xee>
 80180bc:	0641      	lsls	r1, r0, #25
 80180be:	d5fb      	bpl.n	80180b8 <_printf_i+0xe4>
 80180c0:	881e      	ldrh	r6, [r3, #0]
 80180c2:	4853      	ldr	r0, [pc, #332]	; (8018210 <_printf_i+0x23c>)
 80180c4:	2f6f      	cmp	r7, #111	; 0x6f
 80180c6:	bf0c      	ite	eq
 80180c8:	2308      	moveq	r3, #8
 80180ca:	230a      	movne	r3, #10
 80180cc:	2100      	movs	r1, #0
 80180ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180d2:	6865      	ldr	r5, [r4, #4]
 80180d4:	60a5      	str	r5, [r4, #8]
 80180d6:	2d00      	cmp	r5, #0
 80180d8:	bfa2      	ittt	ge
 80180da:	6821      	ldrge	r1, [r4, #0]
 80180dc:	f021 0104 	bicge.w	r1, r1, #4
 80180e0:	6021      	strge	r1, [r4, #0]
 80180e2:	b90e      	cbnz	r6, 80180e8 <_printf_i+0x114>
 80180e4:	2d00      	cmp	r5, #0
 80180e6:	d04b      	beq.n	8018180 <_printf_i+0x1ac>
 80180e8:	4615      	mov	r5, r2
 80180ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80180ee:	fb03 6711 	mls	r7, r3, r1, r6
 80180f2:	5dc7      	ldrb	r7, [r0, r7]
 80180f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80180f8:	4637      	mov	r7, r6
 80180fa:	42bb      	cmp	r3, r7
 80180fc:	460e      	mov	r6, r1
 80180fe:	d9f4      	bls.n	80180ea <_printf_i+0x116>
 8018100:	2b08      	cmp	r3, #8
 8018102:	d10b      	bne.n	801811c <_printf_i+0x148>
 8018104:	6823      	ldr	r3, [r4, #0]
 8018106:	07de      	lsls	r6, r3, #31
 8018108:	d508      	bpl.n	801811c <_printf_i+0x148>
 801810a:	6923      	ldr	r3, [r4, #16]
 801810c:	6861      	ldr	r1, [r4, #4]
 801810e:	4299      	cmp	r1, r3
 8018110:	bfde      	ittt	le
 8018112:	2330      	movle	r3, #48	; 0x30
 8018114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018118:	f105 35ff 	addle.w	r5, r5, #4294967295
 801811c:	1b52      	subs	r2, r2, r5
 801811e:	6122      	str	r2, [r4, #16]
 8018120:	f8cd a000 	str.w	sl, [sp]
 8018124:	464b      	mov	r3, r9
 8018126:	aa03      	add	r2, sp, #12
 8018128:	4621      	mov	r1, r4
 801812a:	4640      	mov	r0, r8
 801812c:	f7ff fee4 	bl	8017ef8 <_printf_common>
 8018130:	3001      	adds	r0, #1
 8018132:	d14a      	bne.n	80181ca <_printf_i+0x1f6>
 8018134:	f04f 30ff 	mov.w	r0, #4294967295
 8018138:	b004      	add	sp, #16
 801813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801813e:	6823      	ldr	r3, [r4, #0]
 8018140:	f043 0320 	orr.w	r3, r3, #32
 8018144:	6023      	str	r3, [r4, #0]
 8018146:	4833      	ldr	r0, [pc, #204]	; (8018214 <_printf_i+0x240>)
 8018148:	2778      	movs	r7, #120	; 0x78
 801814a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	6829      	ldr	r1, [r5, #0]
 8018152:	061f      	lsls	r7, r3, #24
 8018154:	f851 6b04 	ldr.w	r6, [r1], #4
 8018158:	d402      	bmi.n	8018160 <_printf_i+0x18c>
 801815a:	065f      	lsls	r7, r3, #25
 801815c:	bf48      	it	mi
 801815e:	b2b6      	uxthmi	r6, r6
 8018160:	07df      	lsls	r7, r3, #31
 8018162:	bf48      	it	mi
 8018164:	f043 0320 	orrmi.w	r3, r3, #32
 8018168:	6029      	str	r1, [r5, #0]
 801816a:	bf48      	it	mi
 801816c:	6023      	strmi	r3, [r4, #0]
 801816e:	b91e      	cbnz	r6, 8018178 <_printf_i+0x1a4>
 8018170:	6823      	ldr	r3, [r4, #0]
 8018172:	f023 0320 	bic.w	r3, r3, #32
 8018176:	6023      	str	r3, [r4, #0]
 8018178:	2310      	movs	r3, #16
 801817a:	e7a7      	b.n	80180cc <_printf_i+0xf8>
 801817c:	4824      	ldr	r0, [pc, #144]	; (8018210 <_printf_i+0x23c>)
 801817e:	e7e4      	b.n	801814a <_printf_i+0x176>
 8018180:	4615      	mov	r5, r2
 8018182:	e7bd      	b.n	8018100 <_printf_i+0x12c>
 8018184:	682b      	ldr	r3, [r5, #0]
 8018186:	6826      	ldr	r6, [r4, #0]
 8018188:	6961      	ldr	r1, [r4, #20]
 801818a:	1d18      	adds	r0, r3, #4
 801818c:	6028      	str	r0, [r5, #0]
 801818e:	0635      	lsls	r5, r6, #24
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	d501      	bpl.n	8018198 <_printf_i+0x1c4>
 8018194:	6019      	str	r1, [r3, #0]
 8018196:	e002      	b.n	801819e <_printf_i+0x1ca>
 8018198:	0670      	lsls	r0, r6, #25
 801819a:	d5fb      	bpl.n	8018194 <_printf_i+0x1c0>
 801819c:	8019      	strh	r1, [r3, #0]
 801819e:	2300      	movs	r3, #0
 80181a0:	6123      	str	r3, [r4, #16]
 80181a2:	4615      	mov	r5, r2
 80181a4:	e7bc      	b.n	8018120 <_printf_i+0x14c>
 80181a6:	682b      	ldr	r3, [r5, #0]
 80181a8:	1d1a      	adds	r2, r3, #4
 80181aa:	602a      	str	r2, [r5, #0]
 80181ac:	681d      	ldr	r5, [r3, #0]
 80181ae:	6862      	ldr	r2, [r4, #4]
 80181b0:	2100      	movs	r1, #0
 80181b2:	4628      	mov	r0, r5
 80181b4:	f7e8 f82c 	bl	8000210 <memchr>
 80181b8:	b108      	cbz	r0, 80181be <_printf_i+0x1ea>
 80181ba:	1b40      	subs	r0, r0, r5
 80181bc:	6060      	str	r0, [r4, #4]
 80181be:	6863      	ldr	r3, [r4, #4]
 80181c0:	6123      	str	r3, [r4, #16]
 80181c2:	2300      	movs	r3, #0
 80181c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181c8:	e7aa      	b.n	8018120 <_printf_i+0x14c>
 80181ca:	6923      	ldr	r3, [r4, #16]
 80181cc:	462a      	mov	r2, r5
 80181ce:	4649      	mov	r1, r9
 80181d0:	4640      	mov	r0, r8
 80181d2:	47d0      	blx	sl
 80181d4:	3001      	adds	r0, #1
 80181d6:	d0ad      	beq.n	8018134 <_printf_i+0x160>
 80181d8:	6823      	ldr	r3, [r4, #0]
 80181da:	079b      	lsls	r3, r3, #30
 80181dc:	d413      	bmi.n	8018206 <_printf_i+0x232>
 80181de:	68e0      	ldr	r0, [r4, #12]
 80181e0:	9b03      	ldr	r3, [sp, #12]
 80181e2:	4298      	cmp	r0, r3
 80181e4:	bfb8      	it	lt
 80181e6:	4618      	movlt	r0, r3
 80181e8:	e7a6      	b.n	8018138 <_printf_i+0x164>
 80181ea:	2301      	movs	r3, #1
 80181ec:	4632      	mov	r2, r6
 80181ee:	4649      	mov	r1, r9
 80181f0:	4640      	mov	r0, r8
 80181f2:	47d0      	blx	sl
 80181f4:	3001      	adds	r0, #1
 80181f6:	d09d      	beq.n	8018134 <_printf_i+0x160>
 80181f8:	3501      	adds	r5, #1
 80181fa:	68e3      	ldr	r3, [r4, #12]
 80181fc:	9903      	ldr	r1, [sp, #12]
 80181fe:	1a5b      	subs	r3, r3, r1
 8018200:	42ab      	cmp	r3, r5
 8018202:	dcf2      	bgt.n	80181ea <_printf_i+0x216>
 8018204:	e7eb      	b.n	80181de <_printf_i+0x20a>
 8018206:	2500      	movs	r5, #0
 8018208:	f104 0619 	add.w	r6, r4, #25
 801820c:	e7f5      	b.n	80181fa <_printf_i+0x226>
 801820e:	bf00      	nop
 8018210:	0801c2e5 	.word	0x0801c2e5
 8018214:	0801c2f6 	.word	0x0801c2f6

08018218 <__sflush_r>:
 8018218:	898a      	ldrh	r2, [r1, #12]
 801821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801821e:	4605      	mov	r5, r0
 8018220:	0710      	lsls	r0, r2, #28
 8018222:	460c      	mov	r4, r1
 8018224:	d458      	bmi.n	80182d8 <__sflush_r+0xc0>
 8018226:	684b      	ldr	r3, [r1, #4]
 8018228:	2b00      	cmp	r3, #0
 801822a:	dc05      	bgt.n	8018238 <__sflush_r+0x20>
 801822c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801822e:	2b00      	cmp	r3, #0
 8018230:	dc02      	bgt.n	8018238 <__sflush_r+0x20>
 8018232:	2000      	movs	r0, #0
 8018234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801823a:	2e00      	cmp	r6, #0
 801823c:	d0f9      	beq.n	8018232 <__sflush_r+0x1a>
 801823e:	2300      	movs	r3, #0
 8018240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018244:	682f      	ldr	r7, [r5, #0]
 8018246:	6a21      	ldr	r1, [r4, #32]
 8018248:	602b      	str	r3, [r5, #0]
 801824a:	d032      	beq.n	80182b2 <__sflush_r+0x9a>
 801824c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801824e:	89a3      	ldrh	r3, [r4, #12]
 8018250:	075a      	lsls	r2, r3, #29
 8018252:	d505      	bpl.n	8018260 <__sflush_r+0x48>
 8018254:	6863      	ldr	r3, [r4, #4]
 8018256:	1ac0      	subs	r0, r0, r3
 8018258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801825a:	b10b      	cbz	r3, 8018260 <__sflush_r+0x48>
 801825c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801825e:	1ac0      	subs	r0, r0, r3
 8018260:	2300      	movs	r3, #0
 8018262:	4602      	mov	r2, r0
 8018264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018266:	6a21      	ldr	r1, [r4, #32]
 8018268:	4628      	mov	r0, r5
 801826a:	47b0      	blx	r6
 801826c:	1c43      	adds	r3, r0, #1
 801826e:	89a3      	ldrh	r3, [r4, #12]
 8018270:	d106      	bne.n	8018280 <__sflush_r+0x68>
 8018272:	6829      	ldr	r1, [r5, #0]
 8018274:	291d      	cmp	r1, #29
 8018276:	d82b      	bhi.n	80182d0 <__sflush_r+0xb8>
 8018278:	4a29      	ldr	r2, [pc, #164]	; (8018320 <__sflush_r+0x108>)
 801827a:	410a      	asrs	r2, r1
 801827c:	07d6      	lsls	r6, r2, #31
 801827e:	d427      	bmi.n	80182d0 <__sflush_r+0xb8>
 8018280:	2200      	movs	r2, #0
 8018282:	6062      	str	r2, [r4, #4]
 8018284:	04d9      	lsls	r1, r3, #19
 8018286:	6922      	ldr	r2, [r4, #16]
 8018288:	6022      	str	r2, [r4, #0]
 801828a:	d504      	bpl.n	8018296 <__sflush_r+0x7e>
 801828c:	1c42      	adds	r2, r0, #1
 801828e:	d101      	bne.n	8018294 <__sflush_r+0x7c>
 8018290:	682b      	ldr	r3, [r5, #0]
 8018292:	b903      	cbnz	r3, 8018296 <__sflush_r+0x7e>
 8018294:	6560      	str	r0, [r4, #84]	; 0x54
 8018296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018298:	602f      	str	r7, [r5, #0]
 801829a:	2900      	cmp	r1, #0
 801829c:	d0c9      	beq.n	8018232 <__sflush_r+0x1a>
 801829e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182a2:	4299      	cmp	r1, r3
 80182a4:	d002      	beq.n	80182ac <__sflush_r+0x94>
 80182a6:	4628      	mov	r0, r5
 80182a8:	f7fe fa6e 	bl	8016788 <_free_r>
 80182ac:	2000      	movs	r0, #0
 80182ae:	6360      	str	r0, [r4, #52]	; 0x34
 80182b0:	e7c0      	b.n	8018234 <__sflush_r+0x1c>
 80182b2:	2301      	movs	r3, #1
 80182b4:	4628      	mov	r0, r5
 80182b6:	47b0      	blx	r6
 80182b8:	1c41      	adds	r1, r0, #1
 80182ba:	d1c8      	bne.n	801824e <__sflush_r+0x36>
 80182bc:	682b      	ldr	r3, [r5, #0]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d0c5      	beq.n	801824e <__sflush_r+0x36>
 80182c2:	2b1d      	cmp	r3, #29
 80182c4:	d001      	beq.n	80182ca <__sflush_r+0xb2>
 80182c6:	2b16      	cmp	r3, #22
 80182c8:	d101      	bne.n	80182ce <__sflush_r+0xb6>
 80182ca:	602f      	str	r7, [r5, #0]
 80182cc:	e7b1      	b.n	8018232 <__sflush_r+0x1a>
 80182ce:	89a3      	ldrh	r3, [r4, #12]
 80182d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182d4:	81a3      	strh	r3, [r4, #12]
 80182d6:	e7ad      	b.n	8018234 <__sflush_r+0x1c>
 80182d8:	690f      	ldr	r7, [r1, #16]
 80182da:	2f00      	cmp	r7, #0
 80182dc:	d0a9      	beq.n	8018232 <__sflush_r+0x1a>
 80182de:	0793      	lsls	r3, r2, #30
 80182e0:	680e      	ldr	r6, [r1, #0]
 80182e2:	bf08      	it	eq
 80182e4:	694b      	ldreq	r3, [r1, #20]
 80182e6:	600f      	str	r7, [r1, #0]
 80182e8:	bf18      	it	ne
 80182ea:	2300      	movne	r3, #0
 80182ec:	eba6 0807 	sub.w	r8, r6, r7
 80182f0:	608b      	str	r3, [r1, #8]
 80182f2:	f1b8 0f00 	cmp.w	r8, #0
 80182f6:	dd9c      	ble.n	8018232 <__sflush_r+0x1a>
 80182f8:	6a21      	ldr	r1, [r4, #32]
 80182fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80182fc:	4643      	mov	r3, r8
 80182fe:	463a      	mov	r2, r7
 8018300:	4628      	mov	r0, r5
 8018302:	47b0      	blx	r6
 8018304:	2800      	cmp	r0, #0
 8018306:	dc06      	bgt.n	8018316 <__sflush_r+0xfe>
 8018308:	89a3      	ldrh	r3, [r4, #12]
 801830a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801830e:	81a3      	strh	r3, [r4, #12]
 8018310:	f04f 30ff 	mov.w	r0, #4294967295
 8018314:	e78e      	b.n	8018234 <__sflush_r+0x1c>
 8018316:	4407      	add	r7, r0
 8018318:	eba8 0800 	sub.w	r8, r8, r0
 801831c:	e7e9      	b.n	80182f2 <__sflush_r+0xda>
 801831e:	bf00      	nop
 8018320:	dfbffffe 	.word	0xdfbffffe

08018324 <_fflush_r>:
 8018324:	b538      	push	{r3, r4, r5, lr}
 8018326:	690b      	ldr	r3, [r1, #16]
 8018328:	4605      	mov	r5, r0
 801832a:	460c      	mov	r4, r1
 801832c:	b913      	cbnz	r3, 8018334 <_fflush_r+0x10>
 801832e:	2500      	movs	r5, #0
 8018330:	4628      	mov	r0, r5
 8018332:	bd38      	pop	{r3, r4, r5, pc}
 8018334:	b118      	cbz	r0, 801833e <_fflush_r+0x1a>
 8018336:	6a03      	ldr	r3, [r0, #32]
 8018338:	b90b      	cbnz	r3, 801833e <_fflush_r+0x1a>
 801833a:	f7fe f881 	bl	8016440 <__sinit>
 801833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d0f3      	beq.n	801832e <_fflush_r+0xa>
 8018346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018348:	07d0      	lsls	r0, r2, #31
 801834a:	d404      	bmi.n	8018356 <_fflush_r+0x32>
 801834c:	0599      	lsls	r1, r3, #22
 801834e:	d402      	bmi.n	8018356 <_fflush_r+0x32>
 8018350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018352:	f7fe f9f6 	bl	8016742 <__retarget_lock_acquire_recursive>
 8018356:	4628      	mov	r0, r5
 8018358:	4621      	mov	r1, r4
 801835a:	f7ff ff5d 	bl	8018218 <__sflush_r>
 801835e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018360:	07da      	lsls	r2, r3, #31
 8018362:	4605      	mov	r5, r0
 8018364:	d4e4      	bmi.n	8018330 <_fflush_r+0xc>
 8018366:	89a3      	ldrh	r3, [r4, #12]
 8018368:	059b      	lsls	r3, r3, #22
 801836a:	d4e1      	bmi.n	8018330 <_fflush_r+0xc>
 801836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801836e:	f7fe f9e9 	bl	8016744 <__retarget_lock_release_recursive>
 8018372:	e7dd      	b.n	8018330 <_fflush_r+0xc>

08018374 <__swbuf_r>:
 8018374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018376:	460e      	mov	r6, r1
 8018378:	4614      	mov	r4, r2
 801837a:	4605      	mov	r5, r0
 801837c:	b118      	cbz	r0, 8018386 <__swbuf_r+0x12>
 801837e:	6a03      	ldr	r3, [r0, #32]
 8018380:	b90b      	cbnz	r3, 8018386 <__swbuf_r+0x12>
 8018382:	f7fe f85d 	bl	8016440 <__sinit>
 8018386:	69a3      	ldr	r3, [r4, #24]
 8018388:	60a3      	str	r3, [r4, #8]
 801838a:	89a3      	ldrh	r3, [r4, #12]
 801838c:	071a      	lsls	r2, r3, #28
 801838e:	d525      	bpl.n	80183dc <__swbuf_r+0x68>
 8018390:	6923      	ldr	r3, [r4, #16]
 8018392:	b31b      	cbz	r3, 80183dc <__swbuf_r+0x68>
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	6922      	ldr	r2, [r4, #16]
 8018398:	1a98      	subs	r0, r3, r2
 801839a:	6963      	ldr	r3, [r4, #20]
 801839c:	b2f6      	uxtb	r6, r6
 801839e:	4283      	cmp	r3, r0
 80183a0:	4637      	mov	r7, r6
 80183a2:	dc04      	bgt.n	80183ae <__swbuf_r+0x3a>
 80183a4:	4621      	mov	r1, r4
 80183a6:	4628      	mov	r0, r5
 80183a8:	f7ff ffbc 	bl	8018324 <_fflush_r>
 80183ac:	b9e0      	cbnz	r0, 80183e8 <__swbuf_r+0x74>
 80183ae:	68a3      	ldr	r3, [r4, #8]
 80183b0:	3b01      	subs	r3, #1
 80183b2:	60a3      	str	r3, [r4, #8]
 80183b4:	6823      	ldr	r3, [r4, #0]
 80183b6:	1c5a      	adds	r2, r3, #1
 80183b8:	6022      	str	r2, [r4, #0]
 80183ba:	701e      	strb	r6, [r3, #0]
 80183bc:	6962      	ldr	r2, [r4, #20]
 80183be:	1c43      	adds	r3, r0, #1
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d004      	beq.n	80183ce <__swbuf_r+0x5a>
 80183c4:	89a3      	ldrh	r3, [r4, #12]
 80183c6:	07db      	lsls	r3, r3, #31
 80183c8:	d506      	bpl.n	80183d8 <__swbuf_r+0x64>
 80183ca:	2e0a      	cmp	r6, #10
 80183cc:	d104      	bne.n	80183d8 <__swbuf_r+0x64>
 80183ce:	4621      	mov	r1, r4
 80183d0:	4628      	mov	r0, r5
 80183d2:	f7ff ffa7 	bl	8018324 <_fflush_r>
 80183d6:	b938      	cbnz	r0, 80183e8 <__swbuf_r+0x74>
 80183d8:	4638      	mov	r0, r7
 80183da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183dc:	4621      	mov	r1, r4
 80183de:	4628      	mov	r0, r5
 80183e0:	f000 f806 	bl	80183f0 <__swsetup_r>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d0d5      	beq.n	8018394 <__swbuf_r+0x20>
 80183e8:	f04f 37ff 	mov.w	r7, #4294967295
 80183ec:	e7f4      	b.n	80183d8 <__swbuf_r+0x64>
	...

080183f0 <__swsetup_r>:
 80183f0:	b538      	push	{r3, r4, r5, lr}
 80183f2:	4b2a      	ldr	r3, [pc, #168]	; (801849c <__swsetup_r+0xac>)
 80183f4:	4605      	mov	r5, r0
 80183f6:	6818      	ldr	r0, [r3, #0]
 80183f8:	460c      	mov	r4, r1
 80183fa:	b118      	cbz	r0, 8018404 <__swsetup_r+0x14>
 80183fc:	6a03      	ldr	r3, [r0, #32]
 80183fe:	b90b      	cbnz	r3, 8018404 <__swsetup_r+0x14>
 8018400:	f7fe f81e 	bl	8016440 <__sinit>
 8018404:	89a3      	ldrh	r3, [r4, #12]
 8018406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801840a:	0718      	lsls	r0, r3, #28
 801840c:	d422      	bmi.n	8018454 <__swsetup_r+0x64>
 801840e:	06d9      	lsls	r1, r3, #27
 8018410:	d407      	bmi.n	8018422 <__swsetup_r+0x32>
 8018412:	2309      	movs	r3, #9
 8018414:	602b      	str	r3, [r5, #0]
 8018416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801841a:	81a3      	strh	r3, [r4, #12]
 801841c:	f04f 30ff 	mov.w	r0, #4294967295
 8018420:	e034      	b.n	801848c <__swsetup_r+0x9c>
 8018422:	0758      	lsls	r0, r3, #29
 8018424:	d512      	bpl.n	801844c <__swsetup_r+0x5c>
 8018426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018428:	b141      	cbz	r1, 801843c <__swsetup_r+0x4c>
 801842a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801842e:	4299      	cmp	r1, r3
 8018430:	d002      	beq.n	8018438 <__swsetup_r+0x48>
 8018432:	4628      	mov	r0, r5
 8018434:	f7fe f9a8 	bl	8016788 <_free_r>
 8018438:	2300      	movs	r3, #0
 801843a:	6363      	str	r3, [r4, #52]	; 0x34
 801843c:	89a3      	ldrh	r3, [r4, #12]
 801843e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018442:	81a3      	strh	r3, [r4, #12]
 8018444:	2300      	movs	r3, #0
 8018446:	6063      	str	r3, [r4, #4]
 8018448:	6923      	ldr	r3, [r4, #16]
 801844a:	6023      	str	r3, [r4, #0]
 801844c:	89a3      	ldrh	r3, [r4, #12]
 801844e:	f043 0308 	orr.w	r3, r3, #8
 8018452:	81a3      	strh	r3, [r4, #12]
 8018454:	6923      	ldr	r3, [r4, #16]
 8018456:	b94b      	cbnz	r3, 801846c <__swsetup_r+0x7c>
 8018458:	89a3      	ldrh	r3, [r4, #12]
 801845a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801845e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018462:	d003      	beq.n	801846c <__swsetup_r+0x7c>
 8018464:	4621      	mov	r1, r4
 8018466:	4628      	mov	r0, r5
 8018468:	f000 f8e1 	bl	801862e <__smakebuf_r>
 801846c:	89a0      	ldrh	r0, [r4, #12]
 801846e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018472:	f010 0301 	ands.w	r3, r0, #1
 8018476:	d00a      	beq.n	801848e <__swsetup_r+0x9e>
 8018478:	2300      	movs	r3, #0
 801847a:	60a3      	str	r3, [r4, #8]
 801847c:	6963      	ldr	r3, [r4, #20]
 801847e:	425b      	negs	r3, r3
 8018480:	61a3      	str	r3, [r4, #24]
 8018482:	6923      	ldr	r3, [r4, #16]
 8018484:	b943      	cbnz	r3, 8018498 <__swsetup_r+0xa8>
 8018486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801848a:	d1c4      	bne.n	8018416 <__swsetup_r+0x26>
 801848c:	bd38      	pop	{r3, r4, r5, pc}
 801848e:	0781      	lsls	r1, r0, #30
 8018490:	bf58      	it	pl
 8018492:	6963      	ldrpl	r3, [r4, #20]
 8018494:	60a3      	str	r3, [r4, #8]
 8018496:	e7f4      	b.n	8018482 <__swsetup_r+0x92>
 8018498:	2000      	movs	r0, #0
 801849a:	e7f7      	b.n	801848c <__swsetup_r+0x9c>
 801849c:	20000778 	.word	0x20000778

080184a0 <_raise_r>:
 80184a0:	291f      	cmp	r1, #31
 80184a2:	b538      	push	{r3, r4, r5, lr}
 80184a4:	4604      	mov	r4, r0
 80184a6:	460d      	mov	r5, r1
 80184a8:	d904      	bls.n	80184b4 <_raise_r+0x14>
 80184aa:	2316      	movs	r3, #22
 80184ac:	6003      	str	r3, [r0, #0]
 80184ae:	f04f 30ff 	mov.w	r0, #4294967295
 80184b2:	bd38      	pop	{r3, r4, r5, pc}
 80184b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80184b6:	b112      	cbz	r2, 80184be <_raise_r+0x1e>
 80184b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80184bc:	b94b      	cbnz	r3, 80184d2 <_raise_r+0x32>
 80184be:	4620      	mov	r0, r4
 80184c0:	f000 f830 	bl	8018524 <_getpid_r>
 80184c4:	462a      	mov	r2, r5
 80184c6:	4601      	mov	r1, r0
 80184c8:	4620      	mov	r0, r4
 80184ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184ce:	f000 b817 	b.w	8018500 <_kill_r>
 80184d2:	2b01      	cmp	r3, #1
 80184d4:	d00a      	beq.n	80184ec <_raise_r+0x4c>
 80184d6:	1c59      	adds	r1, r3, #1
 80184d8:	d103      	bne.n	80184e2 <_raise_r+0x42>
 80184da:	2316      	movs	r3, #22
 80184dc:	6003      	str	r3, [r0, #0]
 80184de:	2001      	movs	r0, #1
 80184e0:	e7e7      	b.n	80184b2 <_raise_r+0x12>
 80184e2:	2400      	movs	r4, #0
 80184e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80184e8:	4628      	mov	r0, r5
 80184ea:	4798      	blx	r3
 80184ec:	2000      	movs	r0, #0
 80184ee:	e7e0      	b.n	80184b2 <_raise_r+0x12>

080184f0 <raise>:
 80184f0:	4b02      	ldr	r3, [pc, #8]	; (80184fc <raise+0xc>)
 80184f2:	4601      	mov	r1, r0
 80184f4:	6818      	ldr	r0, [r3, #0]
 80184f6:	f7ff bfd3 	b.w	80184a0 <_raise_r>
 80184fa:	bf00      	nop
 80184fc:	20000778 	.word	0x20000778

08018500 <_kill_r>:
 8018500:	b538      	push	{r3, r4, r5, lr}
 8018502:	4d07      	ldr	r5, [pc, #28]	; (8018520 <_kill_r+0x20>)
 8018504:	2300      	movs	r3, #0
 8018506:	4604      	mov	r4, r0
 8018508:	4608      	mov	r0, r1
 801850a:	4611      	mov	r1, r2
 801850c:	602b      	str	r3, [r5, #0]
 801850e:	f7e8 ffb1 	bl	8001474 <_kill>
 8018512:	1c43      	adds	r3, r0, #1
 8018514:	d102      	bne.n	801851c <_kill_r+0x1c>
 8018516:	682b      	ldr	r3, [r5, #0]
 8018518:	b103      	cbz	r3, 801851c <_kill_r+0x1c>
 801851a:	6023      	str	r3, [r4, #0]
 801851c:	bd38      	pop	{r3, r4, r5, pc}
 801851e:	bf00      	nop
 8018520:	20008994 	.word	0x20008994

08018524 <_getpid_r>:
 8018524:	f7e8 bf9e 	b.w	8001464 <_getpid>

08018528 <_sbrk_r>:
 8018528:	b538      	push	{r3, r4, r5, lr}
 801852a:	4d06      	ldr	r5, [pc, #24]	; (8018544 <_sbrk_r+0x1c>)
 801852c:	2300      	movs	r3, #0
 801852e:	4604      	mov	r4, r0
 8018530:	4608      	mov	r0, r1
 8018532:	602b      	str	r3, [r5, #0]
 8018534:	f7e9 f826 	bl	8001584 <_sbrk>
 8018538:	1c43      	adds	r3, r0, #1
 801853a:	d102      	bne.n	8018542 <_sbrk_r+0x1a>
 801853c:	682b      	ldr	r3, [r5, #0]
 801853e:	b103      	cbz	r3, 8018542 <_sbrk_r+0x1a>
 8018540:	6023      	str	r3, [r4, #0]
 8018542:	bd38      	pop	{r3, r4, r5, pc}
 8018544:	20008994 	.word	0x20008994

08018548 <_calloc_r>:
 8018548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801854a:	fba1 2402 	umull	r2, r4, r1, r2
 801854e:	b94c      	cbnz	r4, 8018564 <_calloc_r+0x1c>
 8018550:	4611      	mov	r1, r2
 8018552:	9201      	str	r2, [sp, #4]
 8018554:	f7fe fcdc 	bl	8016f10 <_malloc_r>
 8018558:	9a01      	ldr	r2, [sp, #4]
 801855a:	4605      	mov	r5, r0
 801855c:	b930      	cbnz	r0, 801856c <_calloc_r+0x24>
 801855e:	4628      	mov	r0, r5
 8018560:	b003      	add	sp, #12
 8018562:	bd30      	pop	{r4, r5, pc}
 8018564:	220c      	movs	r2, #12
 8018566:	6002      	str	r2, [r0, #0]
 8018568:	2500      	movs	r5, #0
 801856a:	e7f8      	b.n	801855e <_calloc_r+0x16>
 801856c:	4621      	mov	r1, r4
 801856e:	f7fe f850 	bl	8016612 <memset>
 8018572:	e7f4      	b.n	801855e <_calloc_r+0x16>

08018574 <malloc>:
 8018574:	4b02      	ldr	r3, [pc, #8]	; (8018580 <malloc+0xc>)
 8018576:	4601      	mov	r1, r0
 8018578:	6818      	ldr	r0, [r3, #0]
 801857a:	f7fe bcc9 	b.w	8016f10 <_malloc_r>
 801857e:	bf00      	nop
 8018580:	20000778 	.word	0x20000778

08018584 <_realloc_r>:
 8018584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018588:	4680      	mov	r8, r0
 801858a:	4614      	mov	r4, r2
 801858c:	460e      	mov	r6, r1
 801858e:	b921      	cbnz	r1, 801859a <_realloc_r+0x16>
 8018590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018594:	4611      	mov	r1, r2
 8018596:	f7fe bcbb 	b.w	8016f10 <_malloc_r>
 801859a:	b92a      	cbnz	r2, 80185a8 <_realloc_r+0x24>
 801859c:	f7fe f8f4 	bl	8016788 <_free_r>
 80185a0:	4625      	mov	r5, r4
 80185a2:	4628      	mov	r0, r5
 80185a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185a8:	f000 f8a0 	bl	80186ec <_malloc_usable_size_r>
 80185ac:	4284      	cmp	r4, r0
 80185ae:	4607      	mov	r7, r0
 80185b0:	d802      	bhi.n	80185b8 <_realloc_r+0x34>
 80185b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80185b6:	d812      	bhi.n	80185de <_realloc_r+0x5a>
 80185b8:	4621      	mov	r1, r4
 80185ba:	4640      	mov	r0, r8
 80185bc:	f7fe fca8 	bl	8016f10 <_malloc_r>
 80185c0:	4605      	mov	r5, r0
 80185c2:	2800      	cmp	r0, #0
 80185c4:	d0ed      	beq.n	80185a2 <_realloc_r+0x1e>
 80185c6:	42bc      	cmp	r4, r7
 80185c8:	4622      	mov	r2, r4
 80185ca:	4631      	mov	r1, r6
 80185cc:	bf28      	it	cs
 80185ce:	463a      	movcs	r2, r7
 80185d0:	f7fe f8b9 	bl	8016746 <memcpy>
 80185d4:	4631      	mov	r1, r6
 80185d6:	4640      	mov	r0, r8
 80185d8:	f7fe f8d6 	bl	8016788 <_free_r>
 80185dc:	e7e1      	b.n	80185a2 <_realloc_r+0x1e>
 80185de:	4635      	mov	r5, r6
 80185e0:	e7df      	b.n	80185a2 <_realloc_r+0x1e>

080185e2 <__swhatbuf_r>:
 80185e2:	b570      	push	{r4, r5, r6, lr}
 80185e4:	460c      	mov	r4, r1
 80185e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185ea:	2900      	cmp	r1, #0
 80185ec:	b096      	sub	sp, #88	; 0x58
 80185ee:	4615      	mov	r5, r2
 80185f0:	461e      	mov	r6, r3
 80185f2:	da0d      	bge.n	8018610 <__swhatbuf_r+0x2e>
 80185f4:	89a3      	ldrh	r3, [r4, #12]
 80185f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80185fa:	f04f 0100 	mov.w	r1, #0
 80185fe:	bf0c      	ite	eq
 8018600:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018604:	2340      	movne	r3, #64	; 0x40
 8018606:	2000      	movs	r0, #0
 8018608:	6031      	str	r1, [r6, #0]
 801860a:	602b      	str	r3, [r5, #0]
 801860c:	b016      	add	sp, #88	; 0x58
 801860e:	bd70      	pop	{r4, r5, r6, pc}
 8018610:	466a      	mov	r2, sp
 8018612:	f000 f849 	bl	80186a8 <_fstat_r>
 8018616:	2800      	cmp	r0, #0
 8018618:	dbec      	blt.n	80185f4 <__swhatbuf_r+0x12>
 801861a:	9901      	ldr	r1, [sp, #4]
 801861c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018620:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018624:	4259      	negs	r1, r3
 8018626:	4159      	adcs	r1, r3
 8018628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801862c:	e7eb      	b.n	8018606 <__swhatbuf_r+0x24>

0801862e <__smakebuf_r>:
 801862e:	898b      	ldrh	r3, [r1, #12]
 8018630:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018632:	079d      	lsls	r5, r3, #30
 8018634:	4606      	mov	r6, r0
 8018636:	460c      	mov	r4, r1
 8018638:	d507      	bpl.n	801864a <__smakebuf_r+0x1c>
 801863a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801863e:	6023      	str	r3, [r4, #0]
 8018640:	6123      	str	r3, [r4, #16]
 8018642:	2301      	movs	r3, #1
 8018644:	6163      	str	r3, [r4, #20]
 8018646:	b002      	add	sp, #8
 8018648:	bd70      	pop	{r4, r5, r6, pc}
 801864a:	ab01      	add	r3, sp, #4
 801864c:	466a      	mov	r2, sp
 801864e:	f7ff ffc8 	bl	80185e2 <__swhatbuf_r>
 8018652:	9900      	ldr	r1, [sp, #0]
 8018654:	4605      	mov	r5, r0
 8018656:	4630      	mov	r0, r6
 8018658:	f7fe fc5a 	bl	8016f10 <_malloc_r>
 801865c:	b948      	cbnz	r0, 8018672 <__smakebuf_r+0x44>
 801865e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018662:	059a      	lsls	r2, r3, #22
 8018664:	d4ef      	bmi.n	8018646 <__smakebuf_r+0x18>
 8018666:	f023 0303 	bic.w	r3, r3, #3
 801866a:	f043 0302 	orr.w	r3, r3, #2
 801866e:	81a3      	strh	r3, [r4, #12]
 8018670:	e7e3      	b.n	801863a <__smakebuf_r+0xc>
 8018672:	89a3      	ldrh	r3, [r4, #12]
 8018674:	6020      	str	r0, [r4, #0]
 8018676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801867a:	81a3      	strh	r3, [r4, #12]
 801867c:	9b00      	ldr	r3, [sp, #0]
 801867e:	6163      	str	r3, [r4, #20]
 8018680:	9b01      	ldr	r3, [sp, #4]
 8018682:	6120      	str	r0, [r4, #16]
 8018684:	b15b      	cbz	r3, 801869e <__smakebuf_r+0x70>
 8018686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801868a:	4630      	mov	r0, r6
 801868c:	f000 f81e 	bl	80186cc <_isatty_r>
 8018690:	b128      	cbz	r0, 801869e <__smakebuf_r+0x70>
 8018692:	89a3      	ldrh	r3, [r4, #12]
 8018694:	f023 0303 	bic.w	r3, r3, #3
 8018698:	f043 0301 	orr.w	r3, r3, #1
 801869c:	81a3      	strh	r3, [r4, #12]
 801869e:	89a3      	ldrh	r3, [r4, #12]
 80186a0:	431d      	orrs	r5, r3
 80186a2:	81a5      	strh	r5, [r4, #12]
 80186a4:	e7cf      	b.n	8018646 <__smakebuf_r+0x18>
	...

080186a8 <_fstat_r>:
 80186a8:	b538      	push	{r3, r4, r5, lr}
 80186aa:	4d07      	ldr	r5, [pc, #28]	; (80186c8 <_fstat_r+0x20>)
 80186ac:	2300      	movs	r3, #0
 80186ae:	4604      	mov	r4, r0
 80186b0:	4608      	mov	r0, r1
 80186b2:	4611      	mov	r1, r2
 80186b4:	602b      	str	r3, [r5, #0]
 80186b6:	f7e8 ff3c 	bl	8001532 <_fstat>
 80186ba:	1c43      	adds	r3, r0, #1
 80186bc:	d102      	bne.n	80186c4 <_fstat_r+0x1c>
 80186be:	682b      	ldr	r3, [r5, #0]
 80186c0:	b103      	cbz	r3, 80186c4 <_fstat_r+0x1c>
 80186c2:	6023      	str	r3, [r4, #0]
 80186c4:	bd38      	pop	{r3, r4, r5, pc}
 80186c6:	bf00      	nop
 80186c8:	20008994 	.word	0x20008994

080186cc <_isatty_r>:
 80186cc:	b538      	push	{r3, r4, r5, lr}
 80186ce:	4d06      	ldr	r5, [pc, #24]	; (80186e8 <_isatty_r+0x1c>)
 80186d0:	2300      	movs	r3, #0
 80186d2:	4604      	mov	r4, r0
 80186d4:	4608      	mov	r0, r1
 80186d6:	602b      	str	r3, [r5, #0]
 80186d8:	f7e8 ff3b 	bl	8001552 <_isatty>
 80186dc:	1c43      	adds	r3, r0, #1
 80186de:	d102      	bne.n	80186e6 <_isatty_r+0x1a>
 80186e0:	682b      	ldr	r3, [r5, #0]
 80186e2:	b103      	cbz	r3, 80186e6 <_isatty_r+0x1a>
 80186e4:	6023      	str	r3, [r4, #0]
 80186e6:	bd38      	pop	{r3, r4, r5, pc}
 80186e8:	20008994 	.word	0x20008994

080186ec <_malloc_usable_size_r>:
 80186ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186f0:	1f18      	subs	r0, r3, #4
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	bfbc      	itt	lt
 80186f6:	580b      	ldrlt	r3, [r1, r0]
 80186f8:	18c0      	addlt	r0, r0, r3
 80186fa:	4770      	bx	lr

080186fc <_init>:
 80186fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186fe:	bf00      	nop
 8018700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018702:	bc08      	pop	{r3}
 8018704:	469e      	mov	lr, r3
 8018706:	4770      	bx	lr

08018708 <_fini>:
 8018708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801870a:	bf00      	nop
 801870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801870e:	bc08      	pop	{r3}
 8018710:	469e      	mov	lr, r3
 8018712:	4770      	bx	lr
